/*
 * alphaTab v0.9.3.178 (develop)
 *
 * This file is part of alphaTab.
 * Copyright Â© 2019, Daniel Kuschny and Contributors, All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or at your option any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */
(function($hx_exports, $global) {
  'use strict';
  $hx_exports['alphaTab'] = $hx_exports['alphaTab'] || {};
  $hx_exports['alphaTab']['util'] = $hx_exports['alphaTab']['util'] || {};
  $hx_exports['alphaTab']['util']['_LogLevel'] =
    $hx_exports['alphaTab']['util']['_LogLevel'] || {};
  $hx_exports['alphaTab']['ui'] = $hx_exports['alphaTab']['ui'] || {};
  $hx_exports['alphaTab']['rendering'] =
    $hx_exports['alphaTab']['rendering'] || {};
  $hx_exports['alphaTab']['rendering']['utils'] =
    $hx_exports['alphaTab']['rendering']['utils'] || {};
  $hx_exports['alphaTab']['model'] = $hx_exports['alphaTab']['model'] || {};
  $hx_exports['alphaTab']['model']['_WhammyType'] =
    $hx_exports['alphaTab']['model']['_WhammyType'] || {};
  $hx_exports['alphaTab']['model']['_VibratoType'] =
    $hx_exports['alphaTab']['model']['_VibratoType'] || {};
  $hx_exports['alphaTab']['model']['_TripletFeel'] =
    $hx_exports['alphaTab']['model']['_TripletFeel'] || {};
  $hx_exports['alphaTab']['model']['_SlideType'] =
    $hx_exports['alphaTab']['model']['_SlideType'] || {};
  $hx_exports['alphaTab']['model']['_SimileMark'] =
    $hx_exports['alphaTab']['model']['_SimileMark'] || {};
  $hx_exports['alphaTab']['model']['_PickStroke'] =
    $hx_exports['alphaTab']['model']['_PickStroke'] || {};
  $hx_exports['alphaTab']['model']['_Ottavia'] =
    $hx_exports['alphaTab']['model']['_Ottavia'] || {};
  $hx_exports['alphaTab']['model']['_NoteAccidentalMode'] =
    $hx_exports['alphaTab']['model']['_NoteAccidentalMode'] || {};
  $hx_exports['alphaTab']['model']['_KeySignatureType'] =
    $hx_exports['alphaTab']['model']['_KeySignatureType'] || {};
  $hx_exports['alphaTab']['model']['_KeySignature'] =
    $hx_exports['alphaTab']['model']['_KeySignature'] || {};
  $hx_exports['alphaTab']['model']['_HarmonicType'] =
    $hx_exports['alphaTab']['model']['_HarmonicType'] || {};
  $hx_exports['alphaTab']['model']['_GraceType'] =
    $hx_exports['alphaTab']['model']['_GraceType'] || {};
  $hx_exports['alphaTab']['model']['_Fingers'] =
    $hx_exports['alphaTab']['model']['_Fingers'] || {};
  $hx_exports['alphaTab']['model']['_FermataType'] =
    $hx_exports['alphaTab']['model']['_FermataType'] || {};
  $hx_exports['alphaTab']['model']['_DynamicValue'] =
    $hx_exports['alphaTab']['model']['_DynamicValue'] || {};
  $hx_exports['alphaTab']['model']['_Duration'] =
    $hx_exports['alphaTab']['model']['_Duration'] || {};
  $hx_exports['alphaTab']['model']['_CrescendoType'] =
    $hx_exports['alphaTab']['model']['_CrescendoType'] || {};
  $hx_exports['alphaTab']['model']['_Clef'] =
    $hx_exports['alphaTab']['model']['_Clef'] || {};
  $hx_exports['alphaTab']['model']['_BrushType'] =
    $hx_exports['alphaTab']['model']['_BrushType'] || {};
  $hx_exports['alphaTab']['model']['_BendType'] =
    $hx_exports['alphaTab']['model']['_BendType'] || {};
  $hx_exports['alphaTab']['model']['_BendStyle'] =
    $hx_exports['alphaTab']['model']['_BendStyle'] || {};
  $hx_exports['alphaTab']['model']['_AutomationType'] =
    $hx_exports['alphaTab']['model']['_AutomationType'] || {};
  $hx_exports['alphaTab']['model']['_AccidentalType'] =
    $hx_exports['alphaTab']['model']['_AccidentalType'] || {};
  $hx_exports['alphaTab']['model']['_AccentuationType'] =
    $hx_exports['alphaTab']['model']['_AccentuationType'] || {};
  $hx_exports['alphaTab']['io'] = $hx_exports['alphaTab']['io'] || {};
  $hx_exports['alphaTab']['importer'] =
    $hx_exports['alphaTab']['importer'] || {};
  $hx_exports['alphaTab']['exporter'] =
    $hx_exports['alphaTab']['exporter'] || {};
  $hx_exports['alphaTab']['collections'] =
    $hx_exports['alphaTab']['collections'] || {};
  $hx_exports['alphaTab']['collections']['_FastList'] =
    $hx_exports['alphaTab']['collections']['_FastList'] || {};
  $hx_exports['alphaTab']['collections']['_FastDictionary'] =
    $hx_exports['alphaTab']['collections']['_FastDictionary'] || {};
  $hx_exports['alphaTab']['_ScrollMode'] =
    $hx_exports['alphaTab']['_ScrollMode'] || {};
  $hx_exports['alphaTab']['_FingeringMode'] =
    $hx_exports['alphaTab']['_FingeringMode'] || {};
  $hx_exports['alphaTab']['audio'] = $hx_exports['alphaTab']['audio'] || {};
  $hx_exports['alphaTab']['audio']['generator'] =
    $hx_exports['alphaTab']['audio']['generator'] || {};
  $hx_exports['alphaTab']['audio']['synth'] =
    $hx_exports['alphaTab']['audio']['synth'] || {};
  $hx_exports['alphaTab']['audio']['synth']['synthesis'] =
    $hx_exports['alphaTab']['audio']['synth']['synthesis'] || {};
  $hx_exports['alphaTab']['audio']['synth']['midi'] =
    $hx_exports['alphaTab']['audio']['synth']['midi'] || {};
  $hx_exports['alphaTab']['audio']['synth']['midi']['event'] =
    $hx_exports['alphaTab']['audio']['synth']['midi']['event'] || {};
  $hx_exports['alphaTab']['audio']['synth']['midi']['event']['_MidiEventType'] =
    $hx_exports['alphaTab']['audio']['synth']['midi']['event'][
      '_MidiEventType'
    ] || {};
  $hx_exports['alphaTab']['audio']['synth']['midi']['event'][
    '_ControllerType'
  ] =
    $hx_exports['alphaTab']['audio']['synth']['midi']['event'][
      '_ControllerType'
    ] || {};
  $hx_exports['alphaTab']['audio']['synth']['ds'] =
    $hx_exports['alphaTab']['audio']['synth']['ds'] || {};
  $hx_exports['alphaTab']['audio']['synth']['ds']['_SampleArray'] =
    $hx_exports['alphaTab']['audio']['synth']['ds']['_SampleArray'] || {};
  $hx_exports['alphaTab']['audio']['synth']['_PlayerState'] =
    $hx_exports['alphaTab']['audio']['synth']['_PlayerState'] || {};
  $hx_exports['alphaTab']['platform'] =
    $hx_exports['alphaTab']['platform'] || {};
  $hx_exports['alphaTab']['platform']['javaScript'] =
    $hx_exports['alphaTab']['platform']['javaScript'] || {};
  $hx_exports['alphaTab']['platform']['model'] =
    $hx_exports['alphaTab']['platform']['model'] || {};
  $hx_exports['alphaTab']['platform']['model']['_TextBaseline'] =
    $hx_exports['alphaTab']['platform']['model']['_TextBaseline'] || {};
  $hx_exports['alphaTab']['platform']['model']['_TextAlign'] =
    $hx_exports['alphaTab']['platform']['model']['_TextAlign'] || {};
  $hx_exports['alphaTab']['platform']['model']['_FontStyle'] =
    $hx_exports['alphaTab']['platform']['model']['_FontStyle'] || {};
  $hx_exports['alphaTab']['_DisplayMode'] =
    $hx_exports['alphaTab']['_DisplayMode'] || {};
  var $estr = function() {
    return js.Boot.__string_rec(this, '');
  };
  function $extend(from, fields) {
    function Inherit() {}
    Inherit.prototype = from;
    var proto = new Inherit();
    for (var name in fields) proto[name] = fields[name];
    if (fields.toString !== Object.prototype.toString)
      proto.toString = fields.toString;
    return proto;
  }
  var EReg = function(r, opt) {
    this.r = new RegExp(r, opt.split('u').join(''));
  };
  EReg.__name__ = ['EReg'];
  EReg.prototype = {
    match: function(s) {
      if (this.r.global) {
        this.r.lastIndex = 0;
      }
      this.r.m = this.r.exec(s);
      this.r.s = s;
      return this.r.m != null;
    },
    matched: function(n) {
      if (this.r.m != null && n >= 0 && n < this.r.m.length) {
        return this.r.m[n];
      } else {
        throw new js._Boot.HaxeError('EReg::matched');
      }
    },
    __class__: EReg
  };
  var HxOverrides = function() {};
  HxOverrides.__name__ = ['HxOverrides'];
  HxOverrides.cca = function(s, index) {
    var x = s.charCodeAt(index);
    if (x != x) {
      return undefined;
    }
    return x;
  };
  HxOverrides.substr = function(s, pos, len) {
    if (len == null) {
      len = s.length;
    } else if (len < 0) {
      if (pos == 0) {
        len = s.length + len;
      } else {
        return '';
      }
    }
    return s.substr(pos, len);
  };
  HxOverrides.iter = function(a) {
    return {
      cur: 0,
      arr: a,
      hasNext: function() {
        return this.cur < this.arr.length;
      },
      next: function() {
        return this.arr[this.cur++];
      }
    };
  };
  var List = function() {
    this.length = 0;
  };
  List.__name__ = ['List'];
  List.prototype = {
    add: function(item) {
      var x = new _List.ListNode(item, null);
      if (this.h == null) {
        this.h = x;
      } else {
        this.q.next = x;
      }
      this.q = x;
      this.length++;
    },
    push: function(item) {
      var x = new _List.ListNode(item, this.h);
      this.h = x;
      if (this.q == null) {
        this.q = x;
      }
      this.length++;
    },
    __class__: List
  };
  var _List = {};
  _List.ListNode = function(item, next) {
    this.item = item;
    this.next = next;
  };
  _List.ListNode.__name__ = ['_List', 'ListNode'];
  _List.ListNode.prototype = {
    __class__: _List.ListNode
  };
  Math.__name__ = ['Math'];
  var Std = function() {};
  Std.__name__ = ['Std'];
  Std.string = function(s) {
    return js.Boot.__string_rec(s, '');
  };
  Std.parseInt = function(x) {
    var v = parseInt(x, 10);
    if (
      v == 0 &&
      (HxOverrides.cca(x, 1) == 120 || HxOverrides.cca(x, 1) == 88)
    ) {
      v = parseInt(x);
    }
    if (isNaN(v)) {
      return null;
    }
    return v;
  };
  var StringBuf = function() {
    this.b = '';
  };
  StringBuf.__name__ = ['StringBuf'];
  StringBuf.prototype = {
    __class__: StringBuf
  };
  var StringTools = function() {};
  StringTools.__name__ = ['StringTools'];
  StringTools.startsWith = function(s, start) {
    if (s.length >= start.length) {
      return HxOverrides.substr(s, 0, start.length) == start;
    } else {
      return false;
    }
  };
  StringTools.endsWith = function(s, end) {
    var elen = end.length;
    var slen = s.length;
    if (slen >= elen) {
      return HxOverrides.substr(s, slen - elen, elen) == end;
    } else {
      return false;
    }
  };
  StringTools.isSpace = function(s, pos) {
    var c = HxOverrides.cca(s, pos);
    if (!(c > 8 && c < 14)) {
      return c == 32;
    } else {
      return true;
    }
  };
  StringTools.ltrim = function(s) {
    var l = s.length;
    var r = 0;
    while (r < l && StringTools.isSpace(s, r)) ++r;
    if (r > 0) {
      return HxOverrides.substr(s, r, l - r);
    } else {
      return s;
    }
  };
  StringTools.rtrim = function(s) {
    var l = s.length;
    var r = 0;
    while (r < l && StringTools.isSpace(s, l - r - 1)) ++r;
    if (r > 0) {
      return HxOverrides.substr(s, 0, l - r);
    } else {
      return s;
    }
  };
  StringTools.trim = function(s) {
    return StringTools.ltrim(StringTools.rtrim(s));
  };
  StringTools.replace = function(s, sub, by) {
    return s.split(sub).join(by);
  };
  var Type = function() {};
  Type.__name__ = ['Type'];
  Type.getClassName = function(c) {
    var a = c.__name__;
    if (a == null) {
      return null;
    }
    return a.join('.');
  };
  var alphaTab = {};
  alphaTab.AlphaTabApi = $hx_exports['alphaTab']['AlphaTabApi'] = function(
    uiFacade,
    settings
  ) {
    var _gthis = this;
    this._startTime = 0;
    this.UiFacade = null;
    this.Container = null;
    this.CanvasElement = null;
    this.Renderer = null;
    this.AutoSize = false;
    this.Score = null;
    this.TrackIndexes = null;
    this.Settings = null;
    this._tickCache = null;
    this.Player = null;
    this._cursorWrapper = null;
    this._barCursor = null;
    this._beatCursor = null;
    this._selectionWrapper = null;
    this._previousTick = 0;
    this._playerState = 0;
    this._cursorCache = null;
    this._currentBeat = null;
    this._previousStateForCursor = 0;
    this._previousCursorCache = null;
    this._lastScroll = 0;
    this._selecting = false;
    this._selectionStart = null;
    this._selectionEnd = null;
    this.UiFacade = uiFacade;
    this.Container = uiFacade.get_RootContainer();
    uiFacade.Initialize(this, settings);
    alphaTab.util.Logger.LogLevel = this.Settings.LogLevel;
    this.AutoSize = this.Settings.Width < 0;
    this.CanvasElement = uiFacade.CreateCanvasElement();
    this.Container.AppendChild(this.CanvasElement);
    if (this.AutoSize) {
      var tmp = system.Convert.ToInt32_Single(this.Container.get_Width());
      this.Settings.Width = tmp;
      this.Container.add_Resize(
        alphaTab.platform.Platform.Throttle(function() {
          if (_gthis.Container.get_Width() != _gthis.Settings.Width) {
            _gthis.TriggerResize();
          }
        }, uiFacade.get_ResizeThrottle())
      );
      var initialResizeEventInfo = new alphaTab.ResizeEventArgs();
      initialResizeEventInfo.OldWidth = 0;
      initialResizeEventInfo.NewWidth = system.Convert.ToInt32_Single(
        this.Container.get_Width()
      );
      initialResizeEventInfo.Settings = this.Settings;
      this.OnResize(initialResizeEventInfo);
      this.Settings.Width = initialResizeEventInfo.NewWidth;
    }
    if (
      this.Settings.UseWorkers &&
      this.UiFacade.get_AreWorkersSupported() &&
      alphaTab.Environment.GetRenderEngineFactory(this.Settings).SupportsWorkers
    ) {
      this.Renderer = this.UiFacade.CreateWorkerRenderer();
    } else {
      this.Renderer = new alphaTab.rendering.ScoreRenderer(this.Settings);
    }
    this.Renderer.add_RenderFinished($bind(this, this.OnRenderFinished));
    this.Renderer.add_PostRenderFinished(function() {
      var duration = Date.now() - _gthis._startTime;
      alphaTab.util.Logger.Info(
        'rendering',
        'Rendering completed in ' + duration + 'ms',
        null
      );
      _gthis.OnPostRenderFinished();
    });
    this.Renderer.add_PreRender(function() {
      _gthis._startTime = Date.now();
    });
    this.Renderer.add_PartialRenderFinished(
      $bind(this, this.AppendRenderResult)
    );
    this.Renderer.add_RenderFinished(function(r) {
      _gthis.AppendRenderResult(r);
      _gthis.AppendRenderResult(null);
    });
    this.Renderer.add_Error($bind(this, this.OnError));
    if (this.Settings.EnablePlayer) {
      this.SetupPlayer();
    }
    this.UiFacade.InitialRender();
  };
  alphaTab.AlphaTabApi.__name__ = ['alphaTab', 'AlphaTabApi'];
  alphaTab.AlphaTabApi.prototype = {
    get_Tracks: function() {
      var tracks = this.TrackIndexesToTracks(this.TrackIndexes);
      if (tracks.length == 0 && this.Score.Tracks.length > 0) {
        return [this.Score.Tracks[0]];
      }
      return tracks;
    },
    Destroy: function() {
      if (this.Player != null) {
        this.Player.Destroy();
      }
      this.UiFacade.Destroy();
      this.Renderer.Destroy();
    },
    TrackIndexesToTracks: function(trackIndexes) {
      var this1 = [];
      var tracks = this1;
      if (trackIndexes == null) {
        return this.Score.Tracks;
      }
      var track = new system.Int32ArrayIterator(trackIndexes);
      while (track.hasNext()) {
        var track1 = track.next();
        if (track1 >= 0 && track1 < this.Score.Tracks.length) {
          tracks.push(this.Score.Tracks[track1]);
        }
      }
      return tracks;
    },
    UpdateSettings: function() {
      this.Renderer.UpdateSettings(this.Settings);
    },
    TriggerResize: function() {
      var _gthis = this;
      if (!this.Container.get_IsVisible()) {
        alphaTab.util.Logger.Warning(
          'Rendering',
          'AlphaTab container was invisible while autosizing, waiting for element to become visible',
          null
        );
        this.UiFacade.add_RootContainerBecameVisible(function() {
          alphaTab.util.Logger.Info(
            'Rendering',
            'AlphaTab container became visible, doing autosizing',
            null
          );
          _gthis.TriggerResize();
        });
      } else {
        var resizeEventInfo = new alphaTab.ResizeEventArgs();
        resizeEventInfo.OldWidth = this.Settings.Width;
        resizeEventInfo.NewWidth = system.Convert.ToInt32_Single(
          this.Container.get_Width()
        );
        resizeEventInfo.Settings = this.Settings;
        this.OnResize(resizeEventInfo);
        this.Settings.Width = resizeEventInfo.NewWidth;
        this.Renderer.UpdateSettings(this.Settings);
        this.Renderer.Resize(this.Settings.Width);
      }
    },
    AppendRenderResult: function(result) {
      if (result != null) {
        var tmp = this.CanvasElement;
        var this1 = system.Convert.ToInt32_Single(result.TotalWidth);
        tmp.set_Width(this1);
        var tmp1 = this.CanvasElement;
        var this2 = system.Convert.ToInt32_Single(result.TotalHeight);
        tmp1.set_Height(this2);
        if (this._cursorWrapper != null) {
          var tmp2 = this._cursorWrapper;
          var this3 = system.Convert.ToInt32_Single(result.TotalWidth);
          tmp2.set_Width(this3);
          var tmp3 = this._cursorWrapper;
          var this4 = system.Convert.ToInt32_Single(result.TotalHeight);
          tmp3.set_Height(this4);
        }
      }
      if (result == null || result.RenderResult != null) {
        this.UiFacade.BeginAppendRenderResults(result);
      }
    },
    RenderTracks: function(score, tracks, invalidate) {
      if (invalidate == null) {
        invalidate = true;
      }
      if (score != null && score != this.Score) {
        this.ScoreLoaded(score, false);
      }
      this.TrackIndexes = tracks;
      if (invalidate) {
        this.Render();
      }
    },
    Tex: function(contents, tracks) {
      try {
        var parser = new alphaTab.importer.AlphaTexImporter();
        var data = alphaTab.io.ByteBuffer.FromBuffer(
          alphaTab.platform.Platform.StringToByteArray(contents)
        );
        parser.Init(data, this.Settings);
        var score = parser.ReadScore();
        if (tracks != null) {
          tracks = new Int32Array([0]);
        }
        this.RenderTracks(score, tracks, true);
      } catch (e) {
        if (e instanceof js._Boot.HaxeError) e = e.val;
        if (js.Boot.__instanceof(e, system.Exception)) {
          this.OnError('import', e);
        } else throw e;
      }
    },
    ScoreLoaded: function(score, render) {
      if (render == null) {
        render = true;
      }
      alphaTab.model.ModelUtils.ApplyPitchOffsets(this.Settings, score);
      this.Score = score;
      this.LoadMidiForScore();
      this.OnLoaded(score);
      if (render) {
        this.Render();
      }
    },
    Render: function() {
      var _gthis = this;
      if (this.Renderer == null) {
        return;
      }
      var renderAction = null;
      renderAction = function() {
        if (_gthis.UiFacade.get_CanRender()) {
          _gthis.Renderer.Render(_gthis.Score, _gthis.TrackIndexes);
        } else {
          _gthis.UiFacade.add_CanRenderChanged(renderAction);
        }
      };
      renderAction();
    },
    SetupPlayer: function() {
      var _gthis = this;
      this.Player = this.UiFacade.CreateWorkerPlayer();
      if (this.Player == null) {
        return;
      }
      this.Player.add_Ready(function() {
        _gthis.LoadMidiForScore();
      });
      this.Player.add_ReadyForPlayback(function() {
        _gthis.UiFacade.TriggerEvent(_gthis.Container, 'playerReady', null);
      });
      this.Player.add_SoundFontLoaded(function() {
        _gthis.UiFacade.TriggerEvent(_gthis.Container, 'soundFontLoaded', null);
      });
      this.Player.add_SoundFontLoadFailed(function(e) {
        _gthis.UiFacade.TriggerEvent(
          _gthis.Container,
          'soundFontLoadFailed',
          e
        );
      });
      this.Player.add_MidiLoaded(function() {
        _gthis.UiFacade.TriggerEvent(_gthis.Container, 'midiFileLoaded', null);
      });
      this.Player.add_MidiLoadFailed(function(e1) {
        _gthis.UiFacade.TriggerEvent(
          _gthis.Container,
          'midiFileLoadFailed',
          e1
        );
      });
      this.Player.add_StateChanged(function(e2) {
        _gthis.UiFacade.TriggerEvent(
          _gthis.Container,
          'playerStateChanged',
          e2
        );
      });
      this.Player.add_PositionChanged(function(e3) {
        _gthis.UiFacade.TriggerEvent(_gthis.Container, 'positionChanged', e3);
      });
      this.Player.add_Finished(function(e4) {
        _gthis.UiFacade.TriggerEvent(_gthis.Container, 'finished', e4);
      });
      if (this.Settings.EnableCursor) {
        this.SetupCursor();
      }
    },
    LoadMidiForScore: function() {
      if (
        this.Player == null ||
        this.Score == null ||
        !this.Player.get_IsReady()
      ) {
        return;
      }
      alphaTab.util.Logger.Info('AlphaTab', 'Generating Midi', null);
      var midiFile = new alphaTab.audio.synth.midi.MidiFile();
      var handler = new alphaTab.audio.generator.AlphaSynthMidiFileHandler(
        midiFile
      );
      var generator = new alphaTab.audio.generator.MidiFileGenerator(
        this.Score,
        this.Settings,
        handler
      );
      generator.Generate();
      this._tickCache = generator.TickLookup;
      this.Player.LoadMidiFile(midiFile);
    },
    ChangeTrackVolume: function(tracks, volume) {
      if (this.Player == null) {
        return;
      }
      var track = HxOverrides.iter(tracks);
      while (track.hasNext()) {
        var track1 = track.next();
        var this1 = volume;
        this.Player.SetChannelVolume(track1.PlaybackInfo.PrimaryChannel, this1);
        var this2 = volume;
        this.Player.SetChannelVolume(
          track1.PlaybackInfo.SecondaryChannel,
          this2
        );
      }
    },
    ChangeTrackSolo: function(tracks, solo) {
      if (this.Player == null) {
        return;
      }
      var track = HxOverrides.iter(tracks);
      while (track.hasNext()) {
        var track1 = track.next();
        this.Player.SetChannelSolo(track1.PlaybackInfo.PrimaryChannel, solo);
        this.Player.SetChannelSolo(track1.PlaybackInfo.SecondaryChannel, solo);
      }
    },
    ChangeTrackMute: function(tracks, mute) {
      if (this.Player == null) {
        return;
      }
      var track = HxOverrides.iter(tracks);
      while (track.hasNext()) {
        var track1 = track.next();
        this.Player.SetChannelMute(track1.PlaybackInfo.PrimaryChannel, mute);
        this.Player.SetChannelMute(track1.PlaybackInfo.SecondaryChannel, mute);
      }
    },
    Play: function() {
      if (this.Player == null) {
        return;
      }
      this.Player.Play();
    },
    Pause: function() {
      if (this.Player == null) {
        return;
      }
      this.Player.Pause();
    },
    PlayPause: function() {
      if (this.Player == null) {
        return;
      }
      this.Player.PlayPause();
    },
    Stop: function() {
      if (this.Player == null) {
        return;
      }
      this.Player.Stop();
      this.CursorUpdateTick(0, true);
    },
    SetupCursor: function() {
      var _gthis = this;
      var cursors = this.UiFacade.CreateCursors();
      if (cursors == null) {
        return;
      }
      this._cursorWrapper = cursors.CursorWrapper;
      this._barCursor = cursors.BarCursor;
      this._beatCursor = cursors.BeatCursor;
      this._selectionWrapper = cursors.SelectionWrapper;
      this._previousTick = 0;
      this._playerState = 0;
      this.Renderer.add_PostRenderFinished(function() {
        _gthis._cursorCache = _gthis.Renderer.get_BoundsLookup();
        _gthis.CursorUpdateTick(_gthis._previousTick, false);
      });
      this.Player.add_PositionChanged(function(e) {
        _gthis._previousTick = e.CurrentTick;
        _gthis.UiFacade.BeginInvoke(function() {
          _gthis.CursorUpdateTick(e.CurrentTick, false);
        });
      });
      this.Player.add_StateChanged(function(e1) {
        _gthis._playerState = e1.State;
        _gthis.UiFacade.BeginInvoke(function() {
          _gthis.CursorUpdateTick(_gthis._previousTick, false);
        });
      });
      this.SetupClickHandling();
    },
    CursorUpdateTick: function(tick, stop) {
      if (stop == null) {
        stop = false;
      }
      var _gthis = this;
      this.UiFacade.BeginInvoke(function() {
        var cache = _gthis._tickCache;
        if (cache != null) {
          var tracks = _gthis.get_Tracks();
          if (tracks.length > 0) {
            var beat = cache.FindBeat(tracks, tick);
            if (beat != null) {
              var this1 = beat.Duration;
              _gthis.CursorUpdateBeat(
                beat.CurrentBeat,
                beat.NextBeat,
                this1,
                stop
              );
            }
          }
        }
      });
    },
    CursorUpdateBeat: function(beat, nextBeat, duration, stop) {
      if (beat == null) {
        return;
      }
      var cache = this._cursorCache;
      if (cache == null) {
        return;
      }
      var previousBeat = this._currentBeat;
      var previousCache = this._previousCursorCache;
      var previousState = this._previousStateForCursor;
      this._currentBeat = beat;
      this._previousCursorCache = cache;
      this._previousStateForCursor = this._playerState;
      if (
        beat == previousBeat &&
        cache == previousCache &&
        previousState == this._playerState
      ) {
        return;
      }
      var barCursor = this._barCursor;
      var beatCursor = this._beatCursor;
      var beatBoundings = cache.FindBeat(beat);
      if (beatBoundings == null) {
        return;
      }
      var barBoundings = beatBoundings.BarBounds.MasterBarBounds;
      var barBounds = barBoundings.VisualBounds;
      barCursor.set_Top(barBounds.Y);
      barCursor.set_Left(barBounds.X);
      barCursor.set_Width(barBounds.W);
      barCursor.set_Height(barBounds.H);
      beatCursor.StopAnimation();
      beatCursor.set_Top(barBounds.Y);
      beatCursor.set_Left(beatBoundings.VisualBounds.X);
      var this1 = this.Settings.BeatCursorWidth;
      beatCursor.set_Width(this1);
      beatCursor.set_Height(barBounds.H);
      this.UiFacade.RemoveHighlights();
      if (this._playerState == 1 || stop) {
        var duration1 = this.Player.get_PlaybackSpeed();
        duration = duration / duration1;
        if (!stop) {
          var className = alphaTab.rendering.glyphs.BeatContainerGlyph.GetGroupId(
            beat
          );
          this.UiFacade.HighlightElements(className);
          var nextBeatX =
            barBoundings.VisualBounds.X + barBoundings.VisualBounds.W;
          if (nextBeat != null) {
            if (
              nextBeat.Voice.Bar.Index == beat.Voice.Bar.Index ||
              nextBeat.Voice.Bar.Index == beat.Voice.Bar.Index + 1
            ) {
              var nextBeatBoundings = cache.FindBeat(nextBeat);
              if (
                nextBeatBoundings != null &&
                nextBeatBoundings.BarBounds.MasterBarBounds.StaveGroupBounds ==
                  barBoundings.StaveGroupBounds
              ) {
                nextBeatX = nextBeatBoundings.VisualBounds.X;
              }
            }
          }
          this.UiFacade.BeginInvoke(function() {
            beatCursor.TransitionToX(duration, nextBeatX);
          });
        }
        if (!this._selecting && this.Settings.ScrollMode != 0) {
          var scrollElement = this.UiFacade.GetScrollContainer();
          var isVertical = alphaTab.Environment.GetLayoutEngineFactory(
            this.Settings
          ).Vertical;
          var mode = this.Settings.ScrollMode;
          var elementOffset = this.UiFacade.GetOffset(
            scrollElement,
            this.Container
          );
          if (isVertical) {
            switch (mode) {
              case 1:
                var y = system.Convert.ToInt32_Single(
                  elementOffset.Y +
                    barBoundings.RealBounds.Y +
                    this.Settings.ScrollOffsetY
                );
                if (y != this._lastScroll) {
                  this._lastScroll = y;
                  this.UiFacade.ScrollToY(
                    scrollElement,
                    y,
                    this.Settings.ScrollSpeed
                  );
                }
                break;
              case 2:
                var elementBottom =
                  scrollElement.get_ScrollTop() +
                  this.UiFacade.GetOffset(null, scrollElement).H;
                if (
                  barBoundings.VisualBounds.Y + barBoundings.VisualBounds.H >=
                    elementBottom ||
                  barBoundings.VisualBounds.Y < scrollElement.get_ScrollTop()
                ) {
                  var scrollTop =
                    barBoundings.RealBounds.Y + this.Settings.ScrollOffsetY;
                  this._lastScroll = system.Convert.ToInt32_Single(
                    barBoundings.VisualBounds.X
                  );
                  this.UiFacade.ScrollToY(
                    scrollElement,
                    system.Convert.ToInt32_Single(scrollTop),
                    this.Settings.ScrollSpeed
                  );
                }
                break;
              default:
            }
          } else {
            switch (mode) {
              case 1:
                var x = system.Convert.ToInt32_Single(
                  barBoundings.VisualBounds.X
                );
                if (x != this._lastScroll) {
                  var scrollLeft = system.Convert.ToInt32_Single(
                    barBoundings.RealBounds.X + this.Settings.ScrollOffsetX
                  );
                  this._lastScroll = system.Convert.ToInt32_Single(
                    barBoundings.VisualBounds.X
                  );
                  this.UiFacade.ScrollToX(
                    scrollElement,
                    scrollLeft,
                    this.Settings.ScrollSpeed
                  );
                }
                break;
              case 2:
                var elementRight =
                  scrollElement.get_ScrollLeft() +
                  this.UiFacade.GetOffset(null, scrollElement).W;
                if (
                  barBoundings.VisualBounds.X + barBoundings.VisualBounds.W >=
                    elementRight ||
                  barBoundings.VisualBounds.X < scrollElement.get_ScrollLeft()
                ) {
                  var scrollLeft1 =
                    barBoundings.RealBounds.X + this.Settings.ScrollOffsetX;
                  this._lastScroll = system.Convert.ToInt32_Single(
                    barBoundings.VisualBounds.X
                  );
                  this.UiFacade.ScrollToX(
                    scrollElement,
                    system.Convert.ToInt32_Single(scrollLeft1),
                    this.Settings.ScrollSpeed
                  );
                }
                break;
              default:
            }
          }
        }
        this.OnPlayedBeatChanged(beat);
      }
    },
    add_PlayedBeatChanged: function(value) {
      this.PlayedBeatChanged = system._EventAction1.EventAction1_Impl_.add(
        this.PlayedBeatChanged,
        value
      );
    },
    remove_PlayedBeatChanged: function(value) {
      this.PlayedBeatChanged = system._EventAction1.EventAction1_Impl_.sub(
        this.PlayedBeatChanged,
        value
      );
    },
    OnPlayedBeatChanged: function(beat) {
      var _e = this.PlayedBeatChanged;
      var handler = function(p) {
        system._EventAction1.EventAction1_Impl_.Invoke(_e, p);
      };
      if (handler != null) {
        handler(beat);
      }
      this.UiFacade.TriggerEvent(this.Container, 'playedBeatChanged', beat);
    },
    SetupClickHandling: function() {
      var _gthis = this;
      this.CanvasElement.add_MouseDown(function(e) {
        if (!e.get_IsLeftMouseButton()) {
          return;
        }
        e.PreventDefault();
        var relX = e.GetX(_gthis.CanvasElement);
        var relY = e.GetY(_gthis.CanvasElement);
        var beat = _gthis._cursorCache.GetBeatAtPos(relX, relY);
        if (beat != null) {
          _gthis._selectionStart = new alphaTab.SelectionInfo(beat);
          _gthis._selectionEnd = null;
          _gthis._selecting = true;
        }
      });
      this.CanvasElement.add_MouseMove(function(e1) {
        if (!_gthis._selecting) {
          return;
        }
        var relX1 = e1.GetX(_gthis.CanvasElement);
        var relY1 = e1.GetY(_gthis.CanvasElement);
        var beat1 = _gthis._cursorCache.GetBeatAtPos(relX1, relY1);
        if (
          beat1 != null &&
          (_gthis._selectionEnd == null || _gthis._selectionEnd.Beat != beat1)
        ) {
          _gthis._selectionEnd = new alphaTab.SelectionInfo(beat1);
          _gthis.CursorSelectRange(
            _gthis._selectionStart,
            _gthis._selectionEnd
          );
        }
      });
      this.CanvasElement.add_MouseUp(function(e2) {
        if (!_gthis._selecting) {
          return;
        }
        e2.PreventDefault();
        if (_gthis._selectionEnd != null) {
          var startTick = _gthis._selectionStart.Beat.get_AbsoluteDisplayStart();
          var endTick = _gthis._selectionStart.Beat.get_AbsoluteDisplayStart();
          if (endTick < startTick) {
            var t = _gthis._selectionStart;
            _gthis._selectionStart = _gthis._selectionEnd;
            _gthis._selectionEnd = t;
          }
        }
        if (_gthis._selectionStart != null) {
          var tickCache = _gthis._tickCache;
          var realMasterBarStart = tickCache.GetMasterBarStart(
            _gthis._selectionStart.Beat.Voice.Bar.get_MasterBar()
          );
          _gthis.CursorUpdateBeat(_gthis._selectionStart.Beat, null, 0, false);
          _gthis.Player.set_TickPosition(
            realMasterBarStart + _gthis._selectionStart.Beat.PlaybackStart
          );
          if (
            _gthis._selectionEnd != null &&
            _gthis._selectionStart.Beat != _gthis._selectionEnd.Beat
          ) {
            var realMasterBarEnd = tickCache.GetMasterBarStart(
              _gthis._selectionEnd.Beat.Voice.Bar.get_MasterBar()
            );
            var _gthis1 = _gthis.Player;
            var _tmp = new alphaTab.audio.synth.synthesis.PlaybackRange();
            _tmp.StartTick =
              realMasterBarStart + _gthis._selectionStart.Beat.PlaybackStart;
            _tmp.EndTick =
              realMasterBarEnd +
              _gthis._selectionEnd.Beat.PlaybackStart +
              _gthis._selectionEnd.Beat.PlaybackDuration -
              50;
            _gthis1.set_PlaybackRange(_tmp);
          } else {
            _gthis._selectionStart = null;
            _gthis.Player.set_PlaybackRange(null);
            _gthis.CursorSelectRange(
              _gthis._selectionStart,
              _gthis._selectionEnd
            );
          }
        }
        _gthis._selecting = false;
      });
      this.Renderer.add_PostRenderFinished(function() {
        if (_gthis._selectionStart != null) {
          _gthis.CursorSelectRange(
            _gthis._selectionStart,
            _gthis._selectionEnd
          );
        }
      });
    },
    CursorSelectRange: function(startBeat, endBeat) {
      var cache = this._cursorCache;
      if (cache == null) {
        return;
      }
      var selectionWrapper = this._selectionWrapper;
      selectionWrapper.Clear();
      if (
        startBeat == null ||
        endBeat == null ||
        startBeat.Beat == endBeat.Beat
      ) {
        return;
      }
      if (startBeat.Bounds == null) {
        startBeat.Bounds = cache.FindBeat(startBeat.Beat);
      }
      if (endBeat.Bounds == null) {
        endBeat.Bounds = cache.FindBeat(endBeat.Beat);
      }
      var startTick = startBeat.Beat.get_AbsolutePlaybackStart();
      var endTick = endBeat.Beat.get_AbsolutePlaybackStart();
      if (endTick < startTick) {
        var t = startBeat;
        startBeat = endBeat;
        endBeat = t;
      }
      var startX = startBeat.Bounds.RealBounds.X;
      var endX = endBeat.Bounds.RealBounds.X + endBeat.Bounds.RealBounds.W;
      if (endBeat.Beat.Index == endBeat.Beat.Voice.Beats.length - 1) {
        endX =
          endBeat.Bounds.BarBounds.MasterBarBounds.RealBounds.X +
          endBeat.Bounds.BarBounds.MasterBarBounds.RealBounds.W;
      }
      if (
        startBeat.Bounds.BarBounds.MasterBarBounds.StaveGroupBounds !=
        endBeat.Bounds.BarBounds.MasterBarBounds.StaveGroupBounds
      ) {
        var staffStartX =
          startBeat.Bounds.BarBounds.MasterBarBounds.StaveGroupBounds
            .VisualBounds.X;
        var staffEndX =
          startBeat.Bounds.BarBounds.MasterBarBounds.StaveGroupBounds
            .VisualBounds.X +
          startBeat.Bounds.BarBounds.MasterBarBounds.StaveGroupBounds
            .VisualBounds.W;
        var startSelection = this.UiFacade.CreateSelectionElement();
        startSelection.set_Top(
          startBeat.Bounds.BarBounds.MasterBarBounds.VisualBounds.Y
        );
        startSelection.set_Left(startX);
        startSelection.set_Width(staffEndX - startX);
        startSelection.set_Height(
          startBeat.Bounds.BarBounds.MasterBarBounds.VisualBounds.H
        );
        selectionWrapper.AppendChild(startSelection);
        var staffStartIndex =
          startBeat.Bounds.BarBounds.MasterBarBounds.StaveGroupBounds.Index + 1;
        var staffEndIndex =
          endBeat.Bounds.BarBounds.MasterBarBounds.StaveGroupBounds.Index;
        var staffIndex = staffStartIndex;
        while (staffIndex < staffEndIndex) {
          var staffBounds = cache.StaveGroups[staffIndex];
          var middleSelection = this.UiFacade.CreateSelectionElement();
          middleSelection.set_Top(staffBounds.VisualBounds.Y);
          middleSelection.set_Left(staffStartX);
          middleSelection.set_Width(staffEndX - staffStartX);
          middleSelection.set_Height(staffBounds.VisualBounds.H);
          selectionWrapper.AppendChild(middleSelection);
          ++staffIndex;
        }
        var endSelection = this.UiFacade.CreateSelectionElement();
        endSelection.set_Top(
          endBeat.Bounds.BarBounds.MasterBarBounds.VisualBounds.Y
        );
        endSelection.set_Left(staffStartX);
        endSelection.set_Width(endX - staffStartX);
        endSelection.set_Height(
          endBeat.Bounds.BarBounds.MasterBarBounds.VisualBounds.H
        );
        selectionWrapper.AppendChild(endSelection);
      } else {
        var selection = this.UiFacade.CreateSelectionElement();
        selection.set_Top(
          startBeat.Bounds.BarBounds.MasterBarBounds.VisualBounds.Y
        );
        selection.set_Left(startX);
        selection.set_Width(endX - startX);
        selection.set_Height(
          startBeat.Bounds.BarBounds.MasterBarBounds.VisualBounds.H
        );
        selectionWrapper.AppendChild(selection);
      }
    },
    add_Loaded: function(value) {
      this.Loaded = system._EventAction1.EventAction1_Impl_.add(
        this.Loaded,
        value
      );
    },
    remove_Loaded: function(value) {
      this.Loaded = system._EventAction1.EventAction1_Impl_.sub(
        this.Loaded,
        value
      );
    },
    OnLoaded: function(obj) {
      var _e = this.Loaded;
      var handler = function(p) {
        system._EventAction1.EventAction1_Impl_.Invoke(_e, p);
      };
      if (handler != null) {
        handler(obj);
      }
      this.UiFacade.TriggerEvent(this.Container, 'loaded', obj);
    },
    add_Resize: function(value) {
      this.Resize = system._EventAction1.EventAction1_Impl_.add(
        this.Resize,
        value
      );
    },
    remove_Resize: function(value) {
      this.Resize = system._EventAction1.EventAction1_Impl_.sub(
        this.Resize,
        value
      );
    },
    OnResize: function(obj) {
      var _e = this.Resize;
      var handler = function(p) {
        system._EventAction1.EventAction1_Impl_.Invoke(_e, p);
      };
      if (handler != null) {
        handler(obj);
      }
      this.UiFacade.TriggerEvent(this.Container, 'resize', obj);
    },
    add_RenderFinished: function(value) {
      this.RenderFinished = system._EventAction1.EventAction1_Impl_.add(
        this.RenderFinished,
        value
      );
    },
    remove_RenderFinished: function(value) {
      this.RenderFinished = system._EventAction1.EventAction1_Impl_.sub(
        this.RenderFinished,
        value
      );
    },
    OnRenderFinished: function(e) {
      var _e = this.RenderFinished;
      var handler = function(p) {
        system._EventAction1.EventAction1_Impl_.Invoke(_e, p);
      };
      if (handler != null) {
        handler(e);
      }
      this.UiFacade.TriggerEvent(this.Container, 'rendered', null);
    },
    add_PostRenderFinished: function(value) {
      this.PostRenderFinished = system._EventAction.EventAction_Impl_.add(
        this.PostRenderFinished,
        value
      );
    },
    remove_PostRenderFinished: function(value) {
      this.PostRenderFinished = system._EventAction.EventAction_Impl_.sub(
        this.PostRenderFinished,
        value
      );
    },
    OnPostRenderFinished: function() {
      var _e = this.PostRenderFinished;
      var handler = function() {
        system._EventAction.EventAction_Impl_.Invoke(_e);
      };
      if (handler != null) {
        handler();
      }
      this.UiFacade.TriggerEvent(this.Container, 'postRendered', null);
    },
    OnError: function(type, details) {
      alphaTab.util.Logger.Error(type, 'An unexpected error occurred', details);
      this.UiFacade.TriggerEvent(this.Container, 'error', {
        type: type,
        details: details
      });
    },
    __class__: alphaTab.AlphaTabApi
  };
  var system = {};
  system.Exception = function() {};
  system.Exception.__name__ = ['system', 'Exception'];
  system.Exception.prototype = {
    Exception_CsString: function(message) {
      this.Message = message;
      return this;
    },
    __class__: system.Exception
  };
  alphaTab.AlphaTabException = $hx_exports['alphaTab'][
    'AlphaTabException'
  ] = function() {
    system.Exception.call(this);
  };
  alphaTab.AlphaTabException.__name__ = ['alphaTab', 'AlphaTabException'];
  alphaTab.AlphaTabException.__super__ = system.Exception;
  alphaTab.AlphaTabException.prototype = $extend(system.Exception.prototype, {
    AlphaTabException: function(message) {
      this.Exception_CsString(message);
      return this;
    },
    __class__: alphaTab.AlphaTabException
  });
  alphaTab._DisplayMode = {};
  alphaTab._DisplayMode.DisplayMode_Impl_ = $hx_exports['alphaTab'][
    '_DisplayMode'
  ]['DisplayMode_Impl_'] = {};
  alphaTab._DisplayMode.DisplayMode_Impl_.__name__ = [
    'alphaTab',
    '_DisplayMode',
    'DisplayMode_Impl_'
  ];
  alphaTab._DisplayMode.DisplayMode_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab._DisplayMode.DisplayMode_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab._DisplayMode.DisplayMode_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab._DisplayMode.DisplayMode_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab._DisplayMode.DisplayMode_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab._DisplayMode.DisplayMode_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab._DisplayMode.DisplayMode_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab._DisplayMode.DisplayMode_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab._DisplayMode.DisplayMode_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab._DisplayMode.DisplayMode_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab._DisplayMode.DisplayMode_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab._DisplayMode.DisplayMode_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab._DisplayMode.DisplayMode_Impl_.toString = function(this1) {
    switch (this1) {
      case 0:
        return 'GuitarPro';
      case 1:
        return 'SongBook';
    }
    return '';
  };
  alphaTab.platform = {};
  alphaTab.platform.IPathCanvas = function() {};
  alphaTab.platform.IPathCanvas.__name__ = [
    'alphaTab',
    'platform',
    'IPathCanvas'
  ];
  alphaTab.platform.IPathCanvas.prototype = {
    __class__: alphaTab.platform.IPathCanvas
  };
  alphaTab.platform.ICanvas = function() {};
  alphaTab.platform.ICanvas.__name__ = ['alphaTab', 'platform', 'ICanvas'];
  alphaTab.platform.ICanvas.__interfaces__ = [alphaTab.platform.IPathCanvas];
  alphaTab.platform.ICanvas.prototype = {
    __class__: alphaTab.platform.ICanvas
  };
  alphaTab.platform.svg = {};
  alphaTab.platform.svg.SvgCanvas = function() {
    this.Buffer = null;
    this._currentPath = null;
    this._currentPathIsEmpty = false;
    this.set_Color(null);
    this.set_LineWidth(0.0);
    this.set_Font(null);
    this.set_TextAlign(0);
    this.set_TextBaseline(0);
    this.set_Settings(null);
    var this1 = '';
    this._currentPath = this1;
    this._currentPathIsEmpty = true;
    this.set_Color(new alphaTab.platform.model.Color(255, 255, 255, 255));
    this.set_LineWidth(1);
    this.set_Font(new alphaTab.platform.model.Font('Arial', 10, 0));
    this.set_TextAlign(0);
    this.set_TextBaseline(0);
  };
  alphaTab.platform.svg.SvgCanvas.__name__ = [
    'alphaTab',
    'platform',
    'svg',
    'SvgCanvas'
  ];
  alphaTab.platform.svg.SvgCanvas.__interfaces__ = [
    alphaTab.platform.IPathCanvas,
    alphaTab.platform.ICanvas
  ];
  alphaTab.platform.svg.SvgCanvas.prototype = {
    get_Color: function() {
      return this.__Color;
    },
    set_Color: function(value) {
      return (this.__Color = value);
    },
    get_LineWidth: function() {
      return this.__LineWidth;
    },
    set_LineWidth: function(value) {
      return (this.__LineWidth = value);
    },
    get_Font: function() {
      return this.__Font;
    },
    set_Font: function(value) {
      return (this.__Font = value);
    },
    get_TextAlign: function() {
      return this.__TextAlign;
    },
    set_TextAlign: function(value) {
      return (this.__TextAlign = value);
    },
    get_TextBaseline: function() {
      return this.__TextBaseline;
    },
    set_TextBaseline: function(value) {
      return (this.__TextBaseline = value);
    },
    get_Settings: function() {
      return this.__Settings;
    },
    set_Settings: function(value) {
      return (this.__Settings = value);
    },
    BeginRender: function(width, height) {
      var this1 = '';
      this.Buffer = this1;
      this.Buffer += Std.string(
        '<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="'
      );
      this.Buffer += Std.string(width);
      this.Buffer += Std.string('px" height="');
      var s = system.Convert.ToInt32_Single(height);
      this.Buffer += Std.string(s);
      this.Buffer += Std.string('px" class="alphaTabSurfaceSvg">\n');
      var this2 = '';
      this._currentPath = this2;
      this._currentPathIsEmpty = true;
    },
    BeginGroup: function(identifier) {
      this.Buffer += Std.string('<g class="' + identifier + '">');
    },
    EndGroup: function() {
      this.Buffer += Std.string('</g>');
    },
    EndRender: function() {
      this.Buffer += Std.string('</svg>');
      return this.Buffer;
    },
    FillRect: function(x, y, w, h) {
      if (w > 0) {
        var s =
          '<rect x="' +
          (system.Convert.ToInt32_Single(x) - 0) +
          '" y="' +
          (system.Convert.ToInt32_Single(y) - 0) +
          '" width="' +
          w +
          '" height="' +
          h +
          '" fill="' +
          this.get_Color().RGBA +
          '" />\n';
        this.Buffer += Std.string(s);
      }
    },
    StrokeRect: function(x, y, w, h) {
      var s =
        '<rect x="' +
        (system.Convert.ToInt32_Single(x) - 0) +
        '" y="' +
        (system.Convert.ToInt32_Single(y) - 0) +
        '" width="' +
        w +
        '" height="' +
        h +
        '" stroke="' +
        this.get_Color().RGBA +
        '"';
      this.Buffer += Std.string(s);
      if (this.get_LineWidth() != 1) {
        var s1 = ' stroke-width="' + this.get_LineWidth() + '"';
        this.Buffer += Std.string(s1);
      }
      this.Buffer += Std.string(' fill="transparent" />\n');
    },
    BeginPath: function() {},
    ClosePath: function() {
      this._currentPath += Std.string(' z');
    },
    MoveTo: function(x, y) {
      this._currentPath += Std.string(' M' + (x - 0) + ',' + (y - 0));
    },
    LineTo: function(x, y) {
      this._currentPathIsEmpty = false;
      this._currentPath += Std.string(' L' + (x - 0) + ',' + (y - 0));
    },
    QuadraticCurveTo: function(cpx, cpy, x, y) {
      this._currentPathIsEmpty = false;
      this._currentPath += Std.string(
        ' Q' + cpx + ',' + cpy + ',' + x + ',' + y
      );
    },
    BezierCurveTo: function(cp1x, cp1y, cp2x, cp2y, x, y) {
      this._currentPathIsEmpty = false;
      this._currentPath += Std.string(
        ' C' + cp1x + ',' + cp1y + ',' + cp2x + ',' + cp2y + ',' + x + ',' + y
      );
    },
    FillCircle: function(x, y, radius) {
      this._currentPathIsEmpty = false;
      this._currentPath += Std.string(
        ' M' +
          (x - radius) +
          ',' +
          y +
          ' A1,1 0 0,0 ' +
          (x + radius) +
          ',' +
          y +
          ' A1,1 0 0,0 ' +
          (x - radius) +
          ',' +
          y +
          ' z'
      );
      this.Fill();
    },
    Fill: function() {
      if (!this._currentPathIsEmpty) {
        this.Buffer += Std.string('<path d="' + this._currentPath + '"');
        if (this.get_Color().RGBA != '#000000') {
          var s = ' fill="' + this.get_Color().RGBA + '"';
          this.Buffer += Std.string(s);
        }
        this.Buffer += Std.string(' style="stroke: none"/>');
      }
      var this1 = '';
      this._currentPath = this1;
      this._currentPathIsEmpty = true;
    },
    Stroke: function() {
      if (!this._currentPathIsEmpty) {
        var s =
          '<path d="' +
          this._currentPath +
          '" stroke="' +
          this.get_Color().RGBA +
          '"';
        if (this.get_LineWidth() != 1) {
          s = s + (' stroke-width="' + this.get_LineWidth() + '"');
        }
        s = s + ' style="fill: none" />';
        this.Buffer += Std.string(s);
      }
      var this1 = '';
      this._currentPath = this1;
      this._currentPathIsEmpty = true;
    },
    FillText: function(text, x, y) {
      if (text == '') {
        return;
      }
      var s =
        '<text x="' +
        system.Convert.ToInt32_Single(x) +
        '" y="' +
        system.Convert.ToInt32_Single(y) +
        '" style="stroke: none; font:' +
        this.get_Font().ToCssString(this.get_Settings().Scale) +
        '" ' +
        ' dominant-baseline="' +
        this.GetSvgBaseLine() +
        '"';
      if (this.get_Color().RGBA != '#000000') {
        s = s + (' fill="' + this.get_Color().RGBA + '"');
      }
      if (this.get_TextAlign() != 0) {
        s =
          s +
          (' text-anchor="' +
            this.GetSvgTextAlignment(this.get_TextAlign()) +
            '"');
      }
      s = s + ('>' + text + '</text>');
      this.Buffer += Std.string(s);
    },
    GetSvgTextAlignment: function(textAlign) {
      switch (textAlign) {
        case 0:
          return 'start';
        case 1:
          return 'middle';
        case 2:
          return 'end';
        default:
      }
      return '';
    },
    GetSvgBaseLine: function() {
      var _g = this.get_TextBaseline();
      switch (_g) {
        case 0:
          return 'hanging';
        case 1:
          return 'middle';
        case 2:
          return 'bottom';
        default:
          return '';
      }
    },
    MeasureText: function(text) {
      if (text == null || text.length == 0) {
        return 0;
      }
      return alphaTab.platform.svg.FontSizes.MeasureString(
        text,
        this.get_Font().Family,
        this.get_Font().Size,
        this.get_Font().Style
      );
    },
    FillMusicFontSymbol: function(x, y, scale, symbol, centerAtPosition) {
      if (centerAtPosition == null) {
        centerAtPosition = false;
      }
      throw new js._Boot.HaxeError('abstract');
    },
    FillMusicFontSymbols: function(x, y, scale, symbols, centerAtPosition) {
      if (centerAtPosition == null) {
        centerAtPosition = false;
      }
      throw new js._Boot.HaxeError('abstract');
    },
    OnRenderFinished: function() {
      return null;
    },
    BeginRotate: function(centerX, centerY, angle) {
      this.Buffer += Std.string(
        '<g transform="translate(' +
          centerX +
          ' ,' +
          centerY +
          ') rotate( ' +
          angle +
          ')">'
      );
    },
    EndRotate: function() {
      this.Buffer += Std.string('</g>');
    },
    __class__: alphaTab.platform.svg.SvgCanvas
  };
  alphaTab.platform.svg.CssFontSvgCanvas = function() {
    alphaTab.platform.svg.SvgCanvas.call(this);
  };
  alphaTab.platform.svg.CssFontSvgCanvas.__name__ = [
    'alphaTab',
    'platform',
    'svg',
    'CssFontSvgCanvas'
  ];
  alphaTab.platform.svg.CssFontSvgCanvas.__super__ =
    alphaTab.platform.svg.SvgCanvas;
  alphaTab.platform.svg.CssFontSvgCanvas.prototype = $extend(
    alphaTab.platform.svg.SvgCanvas.prototype,
    {
      FillMusicFontSymbol: function(x, y, scale, symbol, centerAtPosition) {
        if (centerAtPosition == null) {
          centerAtPosition = false;
        }
        if (symbol == -1) {
          return;
        }
        this.FillMusicFontSymbolText(
          x,
          y,
          scale,
          '&#' + symbol + ';',
          centerAtPosition
        );
      },
      FillMusicFontSymbols: function(x, y, scale, symbols, centerAtPosition) {
        if (centerAtPosition == null) {
          centerAtPosition = false;
        }
        var s = '';
        var symbol = HxOverrides.iter(symbols);
        while (symbol.hasNext()) {
          var symbol1 = symbol.next();
          if (symbol1 != -1) {
            s = s + ('&#' + symbol1 + ';');
          }
        }
        this.FillMusicFontSymbolText(x, y, scale, s, centerAtPosition);
      },
      FillMusicFontSymbolText: function(
        x,
        y,
        scale,
        symbols,
        centerAtPosition
      ) {
        if (centerAtPosition == null) {
          centerAtPosition = false;
        }
        var s =
          '<g transform="translate(' +
          (system.Convert.ToInt32_Single(x) - 0) +
          ' ' +
          (system.Convert.ToInt32_Single(y) - 0) +
          ')" class="at" ><text';
        this.Buffer += Std.string(s);
        if (scale != 1) {
          this.Buffer += Std.string(
            ' style="font-size: ' + scale * 100 + '%; stroke:none"'
          );
        } else {
          this.Buffer += Std.string(' style="stroke:none"');
        }
        if (this.get_Color().RGBA != '#000000') {
          var s1 = ' fill="' + this.get_Color().RGBA + '"';
          this.Buffer += Std.string(s1);
        }
        if (centerAtPosition) {
          var s2 = ' text-anchor="' + this.GetSvgTextAlignment(1) + '"';
          this.Buffer += Std.string(s2);
        }
        this.Buffer += Std.string('>' + symbols + '</text></g>');
      },
      __class__: alphaTab.platform.svg.CssFontSvgCanvas
    }
  );
  alphaTab.platform.model = {};
  alphaTab.platform.model.Color = $hx_exports['alphaTab']['platform']['model'][
    'Color'
  ] = function(r, g, b, a) {
    if (a == null) {
      a = 255;
    }
    this.Raw = 0;
    this.RGBA = null;
    this.Raw = (a << 24) | (r << 16) | (g << 8) | b;
    this.UpdateRgba();
  };
  alphaTab.platform.model.Color.__name__ = [
    'alphaTab',
    'platform',
    'model',
    'Color'
  ];
  alphaTab.platform.model.Color.Random = function(opacity) {
    if (opacity == null) {
      opacity = 100;
    }
    return new alphaTab.platform.model.Color(
      system.Convert.ToUInt8(alphaTab.platform.Platform.Random(255)),
      system.Convert.ToUInt8(alphaTab.platform.Platform.Random(255)),
      system.Convert.ToUInt8(alphaTab.platform.Platform.Random(255)),
      opacity
    );
  };
  alphaTab.platform.model.Color.prototype = {
    UpdateRgba: function() {
      if (this.get_A() == 255) {
        this.RGBA =
          '#' +
          alphaTab.platform.Platform.ToHexString(this.get_R(), 2) +
          alphaTab.platform.Platform.ToHexString(this.get_G(), 2) +
          alphaTab.platform.Platform.ToHexString(this.get_B(), 2);
      } else {
        this.RGBA =
          'rgba(' +
          this.get_R() +
          ',' +
          this.get_G() +
          ',' +
          this.get_B() +
          ',' +
          this.get_A() / 255.0 +
          ')';
      }
    },
    get_A: function() {
      return system.Convert.ToUInt8((this.Raw >> 24) & 255);
    },
    get_R: function() {
      return system.Convert.ToUInt8((this.Raw >> 16) & 255);
    },
    get_G: function() {
      return system.Convert.ToUInt8((this.Raw >> 8) & 255);
    },
    get_B: function() {
      return system.Convert.ToUInt8(this.Raw & 255);
    },
    __class__: alphaTab.platform.model.Color
  };
  alphaTab.platform.model.Font = $hx_exports['alphaTab']['platform']['model'][
    'Font'
  ] = function(family, size, style) {
    if (style == null) {
      style = 0;
    }
    this._css = null;
    this._cssScale = 0.0;
    this.Family = null;
    this.Size = 0.0;
    this.Style = 0;
    this.Family = family;
    this.Size = size;
    this.Style = style;
    this._css = this.ToCssString(1);
  };
  alphaTab.platform.model.Font.__name__ = [
    'alphaTab',
    'platform',
    'model',
    'Font'
  ];
  alphaTab.platform.model.Font.prototype = {
    get_IsBold: function() {
      return (this.Style & 1) != 0;
    },
    get_IsItalic: function() {
      return (this.Style & 2) != 0;
    },
    Clone: function() {
      return new alphaTab.platform.model.Font(
        this.Family,
        this.Size,
        this.Style
      );
    },
    ToCssString: function(scale) {
      if (this._css == null || !(Math.abs(scale - this._cssScale) < 0.01)) {
        var this1 = '';
        var buf = this1;
        if (this.get_IsBold()) {
          buf += Std.string('bold ');
        }
        if (this.get_IsItalic()) {
          buf += Std.string('italic ');
        }
        buf += Std.string(this.Size * scale);
        buf += Std.string('px ');
        buf += Std.string("'");
        buf += Std.string(this.Family);
        buf += Std.string("'");
        this._css = buf;
        this._cssScale = scale;
      }
      return this._css;
    },
    __class__: alphaTab.platform.model.Font
  };
  alphaTab.RenderEngineFactory = function(supportsWorkers, canvas) {
    this.SupportsWorkers = false;
    this.CreateCanvas = null;
    this.SupportsWorkers = supportsWorkers;
    this.CreateCanvas = canvas;
  };
  alphaTab.RenderEngineFactory.__name__ = ['alphaTab', 'RenderEngineFactory'];
  alphaTab.RenderEngineFactory.prototype = {
    __class__: alphaTab.RenderEngineFactory
  };
  alphaTab.platform.javaScript = {};
  alphaTab.platform.javaScript.Html5Canvas = function() {
    this._measureCanvas = null;
    this._measureContext = null;
    this._canvas = null;
    this._context = null;
    this._color = null;
    this._font = null;
    this._musicFont = null;
    this._lineWidth = 0.0;
    this.set_Settings(null);
    this._color = new alphaTab.platform.model.Color(0, 0, 0, 255);
    var fontElement = window.document.createElement('span');
    fontElement.classList.add('at');
    window.document.body.appendChild(fontElement);
    var style = window.getComputedStyle(fontElement);
    var family = style.fontFamily;
    if (
      StringTools.startsWith(family, '"') ||
      StringTools.startsWith(family, "'")
    ) {
      family = HxOverrides.substr(family, 1, family.length - 2);
    }
    var s = style.fontSize;
    this._musicFont = new alphaTab.platform.model.Font(
      family,
      parseFloat(s),
      0
    );
    this._measureCanvas = js.Boot.__cast(
      window.document.createElement('canvas'),
      HTMLCanvasElement
    );
    this._measureCanvas.width = 10;
    this._measureCanvas.height = 10;
    this._measureCanvas.style.width = 10 + 'px';
    this._measureCanvas.style.height = 10 + 'px';
    this._measureContext = this._measureCanvas.getContext('2d');
    this._measureContext.textBaseline = 'top';
  };
  alphaTab.platform.javaScript.Html5Canvas.__name__ = [
    'alphaTab',
    'platform',
    'javaScript',
    'Html5Canvas'
  ];
  alphaTab.platform.javaScript.Html5Canvas.__interfaces__ = [
    alphaTab.platform.ICanvas
  ];
  alphaTab.platform.javaScript.Html5Canvas.prototype = {
    get_Settings: function() {
      return this.__Settings;
    },
    set_Settings: function(value) {
      return (this.__Settings = value);
    },
    OnRenderFinished: function() {
      return null;
    },
    BeginRender: function(width, height) {
      this._canvas = js.Boot.__cast(
        window.document.createElement('canvas'),
        HTMLCanvasElement
      );
      var tmp = system.Convert.ToInt32_Single(width);
      this._canvas.width = tmp;
      var tmp1 = system.Convert.ToInt32_Single(height);
      this._canvas.height = tmp1;
      this._canvas.style.width = Std.string(width) + 'px';
      this._canvas.style.height = Std.string(height) + 'px';
      this._context = this._canvas.getContext('2d');
      this._context.textBaseline = 'top';
      this._context.lineWidth = this._lineWidth;
    },
    EndRender: function() {
      var result = this._canvas;
      this._canvas = null;
      return result;
    },
    get_Color: function() {
      return this._color;
    },
    set_Color: function(value) {
      if (this._color.RGBA == value.RGBA) {
        return this.get_Color();
      }
      this._color = value;
      this._context.strokeStyle = value.RGBA;
      this._context.fillStyle = value.RGBA;
      return this.get_Color();
    },
    get_LineWidth: function() {
      return this._lineWidth;
    },
    set_LineWidth: function(value) {
      this._lineWidth = value;
      if (this._context != null) {
        this._context.lineWidth = value;
      }
      return this.get_LineWidth();
    },
    FillRect: function(x, y, w, h) {
      if (w > 0) {
        this._context.fillRect(
          system.Convert.ToInt32_Single(x) - 0,
          system.Convert.ToInt32_Single(y) - 0,
          w,
          h
        );
      }
    },
    StrokeRect: function(x, y, w, h) {
      this._context.strokeRect(x - 0, y - 0, w, h);
    },
    BeginPath: function() {
      this._context.beginPath();
    },
    ClosePath: function() {
      this._context.closePath();
    },
    MoveTo: function(x, y) {
      this._context.moveTo(x - 0, y - 0);
    },
    LineTo: function(x, y) {
      this._context.lineTo(x - 0, y - 0);
    },
    QuadraticCurveTo: function(cpx, cpy, x, y) {
      this._context.quadraticCurveTo(cpx, cpy, x, y);
    },
    BezierCurveTo: function(cp1x, cp1y, cp2x, cp2y, x, y) {
      this._context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
    },
    FillCircle: function(x, y, radius) {
      this._context.beginPath();
      this._context.arc(x, y, radius, 0, 6.28318530717958, true);
      this.Fill();
    },
    Fill: function() {
      this._context.fill();
    },
    Stroke: function() {
      this._context.stroke();
    },
    get_Font: function() {
      return this._font;
    },
    set_Font: function(value) {
      this._font = value;
      if (this._context != null) {
        var tmp = value.ToCssString(this.get_Settings().Scale);
        this._context.font = tmp;
      }
      var tmp1 = value.ToCssString(this.get_Settings().Scale);
      this._measureContext.font = tmp1;
      return this.get_Font();
    },
    get_TextAlign: function() {
      var _g = this._context.textAlign;
      switch (_g) {
        case 'center':
          return 1;
        case 'left':
          return 0;
        case 'right':
          return 2;
        default:
          return 0;
      }
    },
    set_TextAlign: function(value) {
      switch (value) {
        case 0:
          this._context.textAlign = 'left';
          break;
        case 1:
          this._context.textAlign = 'center';
          break;
        case 2:
          this._context.textAlign = 'right';
          break;
        default:
      }
      return this.get_TextAlign();
    },
    get_TextBaseline: function() {
      var _g = this._context.textBaseline;
      switch (_g) {
        case 'bottom':
          return 2;
        case 'middle':
          return 1;
        case 'top':
          return 0;
        default:
          return 0;
      }
    },
    set_TextBaseline: function(value) {
      switch (value) {
        case 0:
          this._context.textBaseline = 'top';
          break;
        case 1:
          this._context.textBaseline = 'middle';
          break;
        case 2:
          this._context.textBaseline = 'bottom';
          break;
        default:
      }
      return this.get_TextBaseline();
    },
    BeginGroup: function(identifier) {},
    EndGroup: function() {},
    FillText: function(text, x, y) {
      var this1 = system.Convert.ToInt32_Single(x);
      x = this1;
      var this2 = system.Convert.ToInt32_Single(y);
      y = this2;
      this._context.fillText(text, x, y);
    },
    MeasureText: function(text) {
      return js.Boot.__cast(
        this._measureContext.measureText(text).width,
        Float
      );
    },
    FillMusicFontSymbol: function(x, y, scale, symbol, centerAtPosition) {
      if (centerAtPosition == null) {
        centerAtPosition = false;
      }
      if (symbol == -1) {
        return;
      }
      this.FillMusicFontSymbolText(
        x,
        y,
        scale,
        String.fromCharCode(symbol),
        centerAtPosition
      );
    },
    FillMusicFontSymbols: function(x, y, scale, symbols, centerAtPosition) {
      if (centerAtPosition == null) {
        centerAtPosition = false;
      }
      var s = '';
      var symbol = HxOverrides.iter(symbols);
      while (symbol.hasNext()) {
        var symbol1 = symbol.next();
        if (symbol1 != -1) {
          s = s + String.fromCharCode(symbol1);
        }
      }
      this.FillMusicFontSymbolText(x, y, scale, s, centerAtPosition);
    },
    FillMusicFontSymbolText: function(x, y, scale, symbols, centerAtPosition) {
      if (centerAtPosition == null) {
        centerAtPosition = false;
      }
      var this1 = system.Convert.ToInt32_Single(x);
      x = this1;
      var this2 = system.Convert.ToInt32_Single(y);
      y = this2;
      var textAlign = this._context.textAlign;
      var baseLine = this._context.textBaseline;
      var font = this._context.font;
      var tmp = this._musicFont.ToCssString(scale);
      this._context.font = tmp;
      this._context.textBaseline = 'middle';
      if (centerAtPosition) {
        this._context.textAlign = 'center';
      }
      this._context.fillText(symbols, x, y);
      this._context.textBaseline = baseLine;
      this._context.font = font;
      this._context.textAlign = textAlign;
    },
    BeginRotate: function(centerX, centerY, angle) {
      this._context.save();
      this._context.translate(centerX, centerY);
      var this1 = 180.0;
      this._context.rotate((angle * 3.14159265358979) / this1);
    },
    EndRotate: function() {
      this._context.restore();
    },
    __class__: alphaTab.platform.javaScript.Html5Canvas
  };
  alphaTab.platform.javaScript.JQueryAlphaTab = function() {
    var this1 = [];
    this._initListeners = this1;
  };
  alphaTab.platform.javaScript.JQueryAlphaTab.__name__ = [
    'alphaTab',
    'platform',
    'javaScript',
    'JQueryAlphaTab'
  ];
  alphaTab.platform.javaScript.JQueryAlphaTab.Restore = function(selector) {
    $(selector)
      .empty()
      .removeData('alphaTab');
  };
  alphaTab.platform.javaScript.JQueryAlphaTab.prototype = {
    Exec: function(element, method, args) {
      if (typeof method != 'string') {
        args = [method];
        method = 'init';
      }
      var tmp;
      var this1 = system.Convert.ToUInt16(HxOverrides.cca(method, 0));
      if (!(this1 == 95)) {
        tmp = method == 'Exec';
      } else {
        tmp = true;
      }
      if (tmp) {
        return null;
      }
      var jElement = $(element);
      var context = jElement.data('alphaTab');
      if (method == 'destroy' && !!!context) {
        return null;
      }
      if (method != 'init' && !!!context) {
        throw new Error('alphaTab not initialized');
      }
      var apiMethod = this[method];
      if (!!apiMethod) {
        var realArgs = [jElement, context].concat(args);
        return apiMethod.apply(this, realArgs);
      } else {
        alphaTab.util.Logger.Error(
          'Api',
          "Method '" + method + "' does not exist on jQuery.alphaTab",
          null
        );
        return null;
      }
    },
    init: function(element, context, options) {
      if (!!!context) {
        context = new alphaTab.platform.javaScript.AlphaTabApi(
          element[0],
          options
        );
        element.data('alphaTab', context);
        var listener = $iterator(this._initListeners)();
        while (listener.hasNext()) {
          var listener1 = listener.next();
          listener1(element, context, options);
        }
      }
    },
    destroy: function(element, context) {
      element.removeData('alphaTab');
      context.Destroy();
    },
    tex: function(element, context, tex, tracks) {
      context.TexWithTrackData(tex, tracks);
    },
    tracks: function(element, context, tracks) {
      if (tracks) {
        context.SetTracks(tracks, true);
      }
      return context.get_Tracks();
    },
    load: function(element, context, data) {
      context.Load(data);
    },
    api: function(element, context) {
      return context;
    },
    score: function(element, context, score) {
      if (!!score) {
        context.RenderTracks(score, context.TrackIndexes, true);
      }
      return context.Score;
    },
    renderer: function(element, context) {
      return context.Renderer;
    },
    layout: function(element, context, layout) {
      if (!!layout) {
        context.UpdateLayout(layout);
      }
      return context.Settings.Layout;
    },
    print: function(element, context, width) {
      context.Print(width);
    },
    player: function(element, context) {
      return context.Player;
    },
    playerOptions: function(element, context, options) {
      if (!!options) {
        alphaTab.Settings.FillPlayerOptions(
          context.Settings,
          options,
          false,
          null
        );
      }
      return context.Settings;
    },
    cursorOptions: function(element, context, options) {
      return this.playerOptions(element, context, options);
    },
    playerState: function(element, context) {
      if (context.Player == null) {
        return 0;
      }
      return context.Player.get_State();
    },
    masterVolume: function(element, context, masterVolume) {
      if (context.Player == null) {
        return 0;
      }
      if (typeof masterVolume == 'number') {
        context.Player.set_MasterVolume(masterVolume);
      }
      return context.Player.get_MasterVolume();
    },
    playbackSpeed: function(element, context, playbackSpeed) {
      if (context.Player == null) {
        return 0;
      }
      if (typeof playbackSpeed == 'number') {
        context.Player.set_PlaybackSpeed(playbackSpeed);
      }
      return context.Player.get_PlaybackSpeed();
    },
    metronomeVolume: function(element, context, metronomeVolume) {
      if (context.Player == null) {
        return 0;
      }
      if (typeof metronomeVolume == 'number') {
        context.Player.set_MetronomeVolume(metronomeVolume);
      }
      return context.Player.get_MetronomeVolume();
    },
    tickPosition: function(element, context, tickPosition) {
      if (context.Player == null) {
        return 0;
      }
      if (typeof tickPosition == 'number') {
        context.Player.set_TickPosition(tickPosition);
      }
      return context.Player.get_TickPosition();
    },
    playbackRange: function(element, context, playbackRange) {
      if (context.Player == null) {
        return null;
      }
      if (!!playbackRange) {
        context.Player.set_PlaybackRange(playbackRange);
      }
      return context.Player.get_PlaybackRange();
    },
    loop: function(element, context, loop) {
      if (context.Player == null) {
        return false;
      }
      if (typeof loop == 'boolean') {
        context.Player.set_IsLooping(loop);
      }
      return context.Player.get_IsLooping();
    },
    autoScroll: function(element, context, autoScroll) {
      if (context.Player == null) {
        return null;
      }
      if (!!autoScroll) {
        context.Settings.ScrollMode = alphaTab.Settings.DecodeScrollMode(
          autoScroll
        );
      }
      return alphaTab.Settings.EncodeScrollMode(context.Settings.ScrollMode);
    },
    play: function(element, context) {
      context.Play();
    },
    pause: function(element, context) {
      context.Pause();
    },
    playPause: function(element, context) {
      context.PlayPause();
    },
    stop: function(element, context) {
      context.Stop();
    },
    loadSoundFont: function(element, context, value) {
      context.LoadSoundFont(value);
    },
    muteTrack: function(element, context, tracks, mute) {
      context.SetTrackMute(tracks, mute);
    },
    soloTrack: function(element, context, tracks, solo) {
      context.SetTrackSolo(tracks, solo);
    },
    trackVolume: function(element, context, tracks, volume) {
      context.SetTrackVolume(tracks, volume);
    },
    downloadMidi: function(element, context) {
      context.DownloadMidi();
    },
    _oninit: function(listener) {
      this._initListeners.push(listener);
    },
    __class__: alphaTab.platform.javaScript.JQueryAlphaTab
  };
  alphaTab.util = {};
  alphaTab.util.Logger = function() {};
  alphaTab.util.Logger.__name__ = ['alphaTab', 'util', 'Logger'];
  alphaTab.util.Logger.Debug = function(category, msg, details) {
    alphaTab.util.Logger.Log(1, category, msg, details);
  };
  alphaTab.util.Logger.Warning = function(category, msg, details) {
    alphaTab.util.Logger.Log(3, category, msg, details);
  };
  alphaTab.util.Logger.Info = function(category, msg, details) {
    alphaTab.util.Logger.Log(2, category, msg, details);
  };
  alphaTab.util.Logger.Error = function(category, msg, details) {
    alphaTab.util.Logger.Log(4, category, msg, details);
  };
  alphaTab.util.Logger.Log = function(logLevel, category, msg, details) {
    if (
      logLevel < alphaTab.util.Logger.LogLevel ||
      alphaTab.util.Logger.LogLevel == 0
    ) {
      return;
    }
    alphaTab.platform.Platform.Log(logLevel, category, msg, details);
  };
  alphaTab.util.Logger.prototype = {
    __class__: alphaTab.util.Logger
  };
  alphaTab.platform.Platform = function() {};
  alphaTab.platform.Platform.__name__ = ['alphaTab', 'platform', 'Platform'];
  alphaTab.platform.Platform.ParseFloat = function(s) {
    return parseFloat(s);
  };
  alphaTab.platform.Platform.ParseHex = function(s) {
    return parseInt(s, 16);
  };
  alphaTab.platform.Platform.GetCallerName = function() {
    return arguments.callee.caller.caller.name;
  };
  alphaTab.platform.Platform.Log = function(logLevel, category, msg, details) {
    msg = '[AlphaTab][' + category + '] ' + msg;
    var $console = $global.console;
    switch (logLevel) {
      case 0:
        break;
      case 1:
        msg = '[Debug]' + msg;
        $console.debug(msg, details);
        break;
      case 2:
        msg = '[Info]' + msg;
        $console.info(msg, details);
        break;
      case 3:
        $console.warn(msg, details);
        break;
      case 4:
        var stack = haxe.CallStack.toString(haxe.CallStack.callStack());
        $console.error(msg, stack, details);
        break;
      default:
    }
  };
  alphaTab.platform.Platform.NewObject = function() {
    return {};
  };
  alphaTab.platform.Platform.JsonExists = function(json, property) {
    return json && property in json;
  };
  alphaTab.platform.Platform.JsonKeys = function(json) {
    return Object.keys(json);
  };
  alphaTab.platform.Platform.Log2 = function(f) {
    return Math.log2(f);
  };
  alphaTab.platform.Platform.ParseInt = function(s) {
    var val = parseInt(s);
    if (isNaN(val)) {
      return -2147483648;
    } else {
      return val;
    }
  };
  alphaTab.platform.Platform.CloneArray = function(array) {
    return new Int32Array(array);
  };
  alphaTab.platform.Platform.BlockCopy = function(
    src,
    srcOffset,
    dst,
    dstOffset,
    count
  ) {
    dst.set(src.subarray(srcOffset, srcOffset + count), dstOffset);
  };
  alphaTab.platform.Platform.StringFromCharCode = function(c) {
    return String.fromCharCode(c);
  };
  alphaTab.platform.Platform.ReadSignedByte = function(readable) {
    var n = readable.ReadByte();
    if (n >= 128) {
      return system.Convert.ToInt8(n - 256);
    }
    return system.Convert.ToInt8(n);
  };
  alphaTab.platform.Platform.ToString = function(data, encoding) {
    if (!!$global.TextDecoder) {
      var detectedEncoding = alphaTab.platform.Platform.DetectEncoding(data);
      if (detectedEncoding != null) {
        encoding = detectedEncoding;
      }
      if (encoding == null) {
        encoding = 'utf-8';
      }
      var decoder = new TextDecoder(encoding);
      return decoder.decode(data);
    } else {
      var this1 = '';
      var s = this1;
      var i = 0;
      while (i < data.length) {
        var c = data[i++];
        if (c < 128) {
          if (c == 0) {
            break;
          }
          s += String.fromCharCode(c);
        } else if (c < 224) {
          s += String.fromCharCode(((c & 63) << 6) | (data[i++] & 127));
        } else if (c < 240) {
          s += String.fromCharCode(
            ((c & 31) << 12) | ((data[i++] & 127) << 6) | (data[i++] & 127)
          );
        } else {
          var u =
            ((c & 15) << 18) |
            ((data[i++] & 127) << 12) |
            ((data[i++] & 127) << 6) |
            (data[i++] & 127);
          s += String.fromCharCode((u >> 18) + 55232);
          s += String.fromCharCode((u & 1023) | 56320);
        }
      }
      return s;
    }
  };
  alphaTab.platform.Platform.StringToByteArray = function(contents) {
    var this1 = new Uint8Array(contents.length);
    var byteArray = this1;
    var i = 0;
    while (i < contents.length) {
      var this2 = system.Convert.ToUInt16(HxOverrides.cca(contents, i));
      byteArray[i] = system.Convert.ToUInt8(this2);
      ++i;
    }
    return byteArray;
  };
  alphaTab.platform.Platform.S4 = function() {
    return Math.floor((1 + Math.random()) * 65536)
      .toString(16)
      .substring(1);
  };
  alphaTab.platform.Platform.NewGuid = function() {
    var lhs = alphaTab.platform.Platform.S4() + alphaTab.platform.Platform.S4();
    var this1 = system.Convert.ToUInt16(45);
    var lhs1 =
      lhs + String.fromCharCode(this1) + alphaTab.platform.Platform.S4();
    var this2 = system.Convert.ToUInt16(45);
    var lhs2 =
      lhs1 + String.fromCharCode(this2) + alphaTab.platform.Platform.S4();
    var this3 = system.Convert.ToUInt16(45);
    var lhs3 =
      lhs2 + String.fromCharCode(this3) + alphaTab.platform.Platform.S4();
    var this4 = system.Convert.ToUInt16(45);
    return (
      lhs3 +
      String.fromCharCode(this4) +
      alphaTab.platform.Platform.S4() +
      alphaTab.platform.Platform.S4() +
      alphaTab.platform.Platform.S4()
    );
  };
  alphaTab.platform.Platform.Member_Object_CsString1 = function(s, name) {
    return s[name];
  };
  alphaTab.platform.Platform.HasMember = function(s, name) {
    return name in s;
  };
  alphaTab.platform.Platform.Member_Object_CsString_T1 = function(
    s,
    name,
    value
  ) {
    return (s[name] = value);
  };
  alphaTab.platform.Platform.Match = function(s, regex) {
    return s.match(regex);
  };
  alphaTab.platform.Platform.IsTruthy = function(o) {
    return !!o;
  };
  alphaTab.platform.Platform.IsNaN = function(v) {
    return isNaN(v);
  };
  alphaTab.platform.Platform.TypeOf = function(o) {
    return typeof o;
  };
  alphaTab.platform.Platform.ArrayBufferToByteArray = function(data) {
    return new Uint8Array(data);
  };
  alphaTab.platform.Platform.ToDouble = function(bytes) {
    var array = new Float64Array(bytes.buffer);
    return array[0];
  };
  alphaTab.platform.Platform.ToFloat = function(bytes) {
    var array = new Float32Array(bytes.buffer);
    return array[0];
  };
  alphaTab.platform.Platform.ClearIntArray = function(array) {
    var i = 0;
    while (i < array.length) {
      array[i] = 0;
      ++i;
    }
  };
  alphaTab.platform.Platform.ClearShortArray = function(array) {
    var i = 0;
    while (i < array.length) {
      array[i] = 0;
      ++i;
    }
  };
  alphaTab.platform.Platform.Random = function(max) {
    var m = max;
    return (Math.random() * m) | 0;
  };
  alphaTab.platform.Platform.RandomDouble = function() {
    return Math.random();
  };
  alphaTab.platform.Platform.get_SupportsWebAudio = function() {
    return !!window.ScriptProcessorNode;
  };
  alphaTab.platform.Platform.get_SupportsWebWorkers = function() {
    return !!window.Worker;
  };
  alphaTab.platform.Platform.get_ForceFlash = function() {
    return !!window.ForceFlash;
  };
  alphaTab.platform.Platform.get_SupportsTextDecoder = function() {
    return !!$global.TextDecoder;
  };
  alphaTab.platform.Platform.ArrayCopy_Int32Array_Int32_Int32Array_Int32_Int32 = function(
    src,
    srcOffset,
    dst,
    dstOffset,
    count
  ) {
    dst.set(src.subarray(srcOffset, srcOffset + count), dstOffset);
  };
  alphaTab.platform.Platform.ArrayCopy_Int16Array_Int32_Int16Array_Int32_Int32 = function(
    src,
    srcOffset,
    dst,
    dstOffset,
    count
  ) {
    dst.set(src.subarray(srcOffset, srcOffset + count), dstOffset);
  };
  alphaTab.platform.Platform.ArrayCopy_ByteArray_Int32_ByteArray_Int32_Int32 = function(
    src,
    srcOffset,
    dst,
    dstOffset,
    count
  ) {
    dst.set(src.subarray(srcOffset, srcOffset + count), dstOffset);
  };
  alphaTab.platform.Platform.ArrayCopy_TArray_Int32_TArray_Int32_Int321 = function(
    src,
    srcOffset,
    dst,
    dstOffset,
    count
  ) {
    var i = 0;
    while (i < count) {
      dst[dstOffset + i] = src[srcOffset + i];
      ++i;
    }
  };
  alphaTab.platform.Platform.Reverse = function(array) {
    array.reverse();
  };
  alphaTab.platform.Platform.GetTypeName = function(obj) {
    return Type.getClassName(obj == null ? null : js.Boot.getClass(obj));
  };
  alphaTab.platform.Platform.Throttle = function(action, delay) {
    var timeoutId = 0;
    return function() {
      window.clearTimeout(timeoutId);
      timeoutId = window.setTimeout(action, delay);
    };
  };
  alphaTab.platform.Platform.GetCurrentMilliseconds = function() {
    return Date.now();
  };
  alphaTab.platform.Platform.IsStringNumber = function(s, allowSign) {
    if (allowSign == null) {
      allowSign = true;
    }
    if (s.length == 0) {
      return false;
    }
    var this1 = system.Convert.ToUInt16(HxOverrides.cca(s, 0));
    var c = this1;
    return alphaTab.platform.Platform.IsCharNumber(c, allowSign);
  };
  alphaTab.platform.Platform.IsCharNumber = function(c, allowSign) {
    if (allowSign == null) {
      allowSign = true;
    }
    if (!(allowSign && c == 45)) {
      if (c >= 48) {
        return c <= 57;
      } else {
        return false;
      }
    } else {
      return true;
    }
  };
  alphaTab.platform.Platform.IsWhiteSpace = function(c) {
    if (!(c == 32 || c == 11 || c == 13 || c == 10)) {
      return c == 9;
    } else {
      return true;
    }
  };
  alphaTab.platform.Platform.IsAlmostEqualTo = function(a, b) {
    var this1 = 0.00001;
    return Math.abs(a - b) < this1;
  };
  alphaTab.platform.Platform.ToHexString = function(n, digits) {
    if (digits == null) {
      digits = 0;
    }
    var s = '';
    var hexChars = '0123456789ABCDEF';
    while (true) {
      var this1 = system.Convert.ToUInt16(HxOverrides.cca(hexChars, n & 15));
      s = String.fromCharCode(this1) + s;
      n = n >> 4;
      if (!(n > 0)) {
        break;
      }
    }
    while (s.length < digits) s = '0' + s;
    return s;
  };
  alphaTab.platform.Platform.ToUInt32 = function(i) {
    return system.Convert.ToUInt32(i);
  };
  alphaTab.platform.Platform.ToInt16 = function(i) {
    return system.Convert.ToInt16(i);
  };
  alphaTab.platform.Platform.ToUInt16 = function(i) {
    return system.Convert.ToUInt16(i);
  };
  alphaTab.platform.Platform.ToUInt8 = function(i) {
    return system.Convert.ToUInt8(i);
  };
  alphaTab.platform.Platform.DetectEncoding = function(data) {
    if (data.length > 2 && data[0] == 254 && data[1] == 255) {
      return 'utf-16be';
    }
    if (data.length > 2 && data[0] == 255 && data[1] == 254) {
      return 'utf-16le';
    }
    if (
      data.length > 4 &&
      data[0] == 0 &&
      data[1] == 0 &&
      data[2] == 254 &&
      data[3] == 255
    ) {
      return 'utf-32be';
    }
    if (
      data.length > 4 &&
      data[0] == 255 &&
      data[1] == 254 &&
      data[2] == 0 &&
      data[3] == 0
    ) {
      return 'utf-32le';
    }
    return null;
  };
  var haxe = {};
  haxe.CallStack = function() {};
  haxe.CallStack.__name__ = ['haxe', 'CallStack'];
  haxe.CallStack.getStack = function(e) {
    if (e == null) {
      return [];
    }
    var oldValue = Error.prepareStackTrace;
    Error.prepareStackTrace = function(error, callsites) {
      var stack = [];
      var _g = 0;
      while (_g < callsites.length) {
        var site = callsites[_g];
        ++_g;
        if (haxe.CallStack.wrapCallSite != null) {
          site = haxe.CallStack.wrapCallSite(site);
        }
        var method = null;
        var fullName = site.getFunctionName();
        if (fullName != null) {
          var idx = fullName.lastIndexOf('.');
          if (idx >= 0) {
            var className = HxOverrides.substr(fullName, 0, idx);
            var methodName = HxOverrides.substr(fullName, idx + 1, null);
            method = haxe.StackItem.Method(className, methodName);
          }
        }
        stack.push(
          haxe.StackItem.FilePos(
            method,
            site.getFileName(),
            site.getLineNumber()
          )
        );
      }
      return stack;
    };
    var a = haxe.CallStack.makeStack(e.stack);
    Error.prepareStackTrace = oldValue;
    return a;
  };
  haxe.CallStack.callStack = function() {
    try {
      throw new Error();
    } catch (e) {
      if (e instanceof js._Boot.HaxeError) e = e.val;
      var a = haxe.CallStack.getStack(e);
      a.shift();
      return a;
    }
  };
  haxe.CallStack.toString = function(stack) {
    var b = new StringBuf();
    var _g = 0;
    while (_g < stack.length) {
      var s = stack[_g];
      ++_g;
      b.b += '\nCalled from ';
      haxe.CallStack.itemToString(b, s);
    }
    return b.b;
  };
  haxe.CallStack.itemToString = function(b, s) {
    switch (s[1]) {
      case 0:
        b.b += 'a C function';
        break;
      case 1:
        var m = s[2];
        b.b += 'module ';
        b.b += m == null ? 'null' : '' + m;
        break;
      case 2:
        var line = s[4];
        var file = s[3];
        var s1 = s[2];
        if (s1 != null) {
          haxe.CallStack.itemToString(b, s1);
          b.b += ' (';
        }
        b.b += file == null ? 'null' : '' + file;
        b.b += ' line ';
        b.b += line == null ? 'null' : '' + line;
        if (s1 != null) {
          b.b += ')';
        }
        break;
      case 3:
        var meth = s[3];
        var cname = s[2];
        b.b += cname == null ? 'null' : '' + cname;
        b.b += '.';
        b.b += meth == null ? 'null' : '' + meth;
        break;
      case 4:
        var n = s[2];
        b.b += 'local function #';
        b.b += n == null ? 'null' : '' + n;
        break;
    }
  };
  haxe.CallStack.makeStack = function(s) {
    if (s == null) {
      return [];
    } else if (typeof s == 'string') {
      var stack = s.split('\n');
      if (stack[0] == 'Error') {
        stack.shift();
      }
      var m = [];
      var rie10 = new EReg(
        '^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$',
        ''
      );
      var _g = 0;
      while (_g < stack.length) {
        var line = stack[_g];
        ++_g;
        if (rie10.match(line)) {
          var path = rie10.matched(1).split('.');
          var meth = path.pop();
          var file = rie10.matched(2);
          var line1 = Std.parseInt(rie10.matched(3));
          m.push(
            haxe.StackItem.FilePos(
              meth == 'Anonymous function'
                ? haxe.StackItem.LocalFunction()
                : meth == 'Global code'
                ? null
                : haxe.StackItem.Method(path.join('.'), meth),
              file,
              line1
            )
          );
        } else {
          m.push(haxe.StackItem.Module(StringTools.trim(line)));
        }
      }
      return m;
    } else {
      return s;
    }
  };
  var js = {};
  js.Boot = function() {};
  js.Boot.__name__ = ['js', 'Boot'];
  js.Boot.getClass = function(o) {
    if (o instanceof Array && o.__enum__ == null) {
      return Array;
    } else {
      var cl = o.__class__;
      if (cl != null) {
        return cl;
      }
      var name = js.Boot.__nativeClassName(o);
      if (name != null) {
        return js.Boot.__resolveNativeClass(name);
      }
      return null;
    }
  };
  js.Boot.__string_rec = function(o, s) {
    if (o == null) {
      return 'null';
    }
    if (s.length >= 5) {
      return '<...>';
    }
    var t = typeof o;
    if (t == 'function' && (o.__name__ || o.__ename__)) {
      t = 'object';
    }
    switch (t) {
      case 'function':
        return '<function>';
      case 'object':
        if (o instanceof Array) {
          if (o.__enum__) {
            if (o.length == 2) {
              return o[0];
            }
            var str = o[0] + '(';
            s += '\t';
            var _g1 = 2;
            var _g = o.length;
            while (_g1 < _g) {
              var i = _g1++;
              if (i != 2) {
                str += ',' + js.Boot.__string_rec(o[i], s);
              } else {
                str += js.Boot.__string_rec(o[i], s);
              }
            }
            return str + ')';
          }
          var l = o.length;
          var i1;
          var str1 = '[';
          s += '\t';
          var _g11 = 0;
          var _g2 = l;
          while (_g11 < _g2) {
            var i2 = _g11++;
            str1 += (i2 > 0 ? ',' : '') + js.Boot.__string_rec(o[i2], s);
          }
          str1 += ']';
          return str1;
        }
        var tostr;
        try {
          tostr = o.toString;
        } catch (e) {
          return '???';
        }
        if (
          tostr != null &&
          tostr != Object.toString &&
          typeof tostr == 'function'
        ) {
          var s2 = o.toString();
          if (s2 != '[object Object]') {
            return s2;
          }
        }
        var k = null;
        var str2 = '{\n';
        s += '\t';
        var hasp = o.hasOwnProperty != null;
        for (var k in o) {
          if (hasp && !o.hasOwnProperty(k)) {
            continue;
          }
          if (
            k == 'prototype' ||
            k == '__class__' ||
            k == '__super__' ||
            k == '__interfaces__' ||
            k == '__properties__'
          ) {
            continue;
          }
          if (str2.length != 2) {
            str2 += ', \n';
          }
          str2 += s + k + ' : ' + js.Boot.__string_rec(o[k], s);
        }
        s = s.substring(1);
        str2 += '\n' + s + '}';
        return str2;
      case 'string':
        return o;
      default:
        return String(o);
    }
  };
  js.Boot.__interfLoop = function(cc, cl) {
    if (cc == null) {
      return false;
    }
    if (cc == cl) {
      return true;
    }
    var intf = cc.__interfaces__;
    if (intf != null) {
      var _g1 = 0;
      var _g = intf.length;
      while (_g1 < _g) {
        var i = _g1++;
        var i1 = intf[i];
        if (i1 == cl || js.Boot.__interfLoop(i1, cl)) {
          return true;
        }
      }
    }
    return js.Boot.__interfLoop(cc.__super__, cl);
  };
  js.Boot.__instanceof = function(o, cl) {
    if (cl == null) {
      return false;
    }
    switch (cl) {
      case Array:
        if (o instanceof Array) {
          return o.__enum__ == null;
        } else {
          return false;
        }
        break;
      case Bool:
        return typeof o == 'boolean';
      case Dynamic:
        return true;
      case Float:
        return typeof o == 'number';
      case Int:
        if (typeof o == 'number') {
          return (o | 0) === o;
        } else {
          return false;
        }
        break;
      case String:
        return typeof o == 'string';
      default:
        if (o != null) {
          if (typeof cl == 'function') {
            if (o instanceof cl) {
              return true;
            }
            if (js.Boot.__interfLoop(js.Boot.getClass(o), cl)) {
              return true;
            }
          } else if (typeof cl == 'object' && js.Boot.__isNativeObj(cl)) {
            if (o instanceof cl) {
              return true;
            }
          }
        } else {
          return false;
        }
        if (cl == Class ? o.__name__ != null : false) {
          return true;
        }
        if (cl == Enum ? o.__ename__ != null : false) {
          return true;
        }
        return o.__enum__ == cl;
    }
  };
  js.Boot.__cast = function(o, t) {
    if (js.Boot.__instanceof(o, t)) {
      return o;
    } else {
      throw new js._Boot.HaxeError(
        'Cannot cast ' + Std.string(o) + ' to ' + Std.string(t)
      );
    }
  };
  js.Boot.__nativeClassName = function(o) {
    var name = js.Boot.__toStr.call(o).slice(8, -1);
    if (
      name == 'Object' ||
      name == 'Function' ||
      name == 'Math' ||
      name == 'JSON'
    ) {
      return null;
    }
    return name;
  };
  js.Boot.__isNativeObj = function(o) {
    return js.Boot.__nativeClassName(o) != null;
  };
  js.Boot.__resolveNativeClass = function(name) {
    return $global[name];
  };
  haxe.StackItem = {
    __ename__: true,
    __constructs__: [
      'CFunction',
      'Module',
      'FilePos',
      'Method',
      'LocalFunction'
    ]
  };
  haxe.StackItem.CFunction = ['CFunction', 0];
  haxe.StackItem.CFunction.toString = $estr;
  haxe.StackItem.CFunction.__enum__ = haxe.StackItem;
  haxe.StackItem.Module = function(m) {
    var $x = ['Module', 1, m];
    $x.__enum__ = haxe.StackItem;
    $x.toString = $estr;
    return $x;
  };
  haxe.StackItem.FilePos = function(s, file, line) {
    var $x = ['FilePos', 2, s, file, line];
    $x.__enum__ = haxe.StackItem;
    $x.toString = $estr;
    return $x;
  };
  haxe.StackItem.Method = function(classname, method) {
    var $x = ['Method', 3, classname, method];
    $x.__enum__ = haxe.StackItem;
    $x.toString = $estr;
    return $x;
  };
  haxe.StackItem.LocalFunction = function(v) {
    var $x = ['LocalFunction', 4, v];
    $x.__enum__ = haxe.StackItem;
    $x.toString = $estr;
    return $x;
  };
  system._EventAction = {};
  system._EventAction.EventAction_Impl_ = {};
  system._EventAction.EventAction_Impl_.__name__ = [
    'system',
    '_EventAction',
    'EventAction_Impl_'
  ];
  system._EventAction.EventAction_Impl_.add = function(lhs, rhs) {
    if (lhs == null) {
      var this1 = rhs == null ? null : [rhs];
      lhs = this1;
    } else {
      lhs.push(rhs);
    }
    return lhs;
  };
  system._EventAction.EventAction_Impl_.sub = function(lhs, rhs) {
    var raw = lhs;
    var index = raw.indexOf(rhs);
    if (index != -1) {
      raw.splice(index, 1);
      if (raw.length == 0) {
        return null;
      }
    }
    return lhs;
  };
  system._EventAction.EventAction_Impl_.Invoke = function(this1) {
    if (this1 == null) {
      return;
    }
    var _g = 0;
    while (_g < this1.length) {
      var x = this1[_g];
      ++_g;
      x();
    }
  };
  alphaTab.platform.javaScript.AlphaTabWebWorker = function(main) {
    this._renderer = null;
    this._main = null;
    this._main = main;
    this._main.addEventListener(
      'message',
      $bind(this, this.HandleMessage),
      false
    );
  };
  alphaTab.platform.javaScript.AlphaTabWebWorker.__name__ = [
    'alphaTab',
    'platform',
    'javaScript',
    'AlphaTabWebWorker'
  ];
  alphaTab.platform.javaScript.AlphaTabWebWorker.Init = function() {
    new alphaTab.platform.javaScript.AlphaTabWebWorker($global);
  };
  alphaTab.platform.javaScript.AlphaTabWebWorker.prototype = {
    HandleMessage: function(e) {
      var _gthis = this;
      var data = js.Boot.__cast(e, MessageEvent).data;
      var cmd = data ? data.cmd : '';
      switch (cmd) {
        case 'alphaTab.initialize':
          var settings = alphaTab.Settings.FromJson(data.settings, null);
          alphaTab.util.Logger.LogLevel = settings.LogLevel;
          this._renderer = new alphaTab.rendering.ScoreRenderer(settings);
          this._renderer.add_PartialRenderFinished(function(result) {
            _gthis._main.postMessage({
              cmd: 'alphaTab.partialRenderFinished',
              result: result
            });
          });
          this._renderer.add_RenderFinished(function(result1) {
            _gthis._main.postMessage({
              cmd: 'alphaTab.renderFinished',
              result: result1
            });
          });
          this._renderer.add_PostRenderFinished(function() {
            _gthis._main.postMessage({
              cmd: 'alphaTab.postRenderFinished',
              boundsLookup: _gthis._renderer.get_BoundsLookup().ToJson()
            });
          });
          this._renderer.add_PreRender(function() {
            _gthis._main.postMessage({ cmd: 'alphaTab.preRender' });
          });
          this._renderer.add_Error($bind(this, this.Error));
          break;
        case 'alphaTab.invalidate':
          this._renderer.Invalidate();
          break;
        case 'alphaTab.render':
          var score = alphaTab.model.JsonConverter.JsObjectToScore(
            data.score,
            this._renderer.Settings
          );
          this.RenderMultiple(score, data.trackIndexes);
          break;
        case 'alphaTab.resize':
          this._renderer.Resize(data.width);
          break;
        case 'alphaTab.updateSettings':
          this.UpdateSettings(data.settings);
          break;
        default:
      }
    },
    UpdateSettings: function(settings) {
      this._renderer.UpdateSettings(alphaTab.Settings.FromJson(settings, null));
    },
    RenderMultiple: function(score, trackIndexes) {
      try {
        this._renderer.Render(score, trackIndexes);
      } catch (e) {
        if (e instanceof js._Boot.HaxeError) e = e.val;
        if (js.Boot.__instanceof(e, system.Exception)) {
          this.Error('render', e);
        } else throw e;
      }
    },
    Error: function(type, e) {
      alphaTab.util.Logger.Error(
        type,
        'An unexpected error occurred in worker',
        e
      );
      var error = JSON.parse(JSON.stringify(e));
      var e2 = e;
      if (e2.message) {
        error.message = e2.message;
      }
      if (e2.stack) {
        error.stack = e2.stack;
      }
      if (e2.constructor && e2.constructor.name) {
        error.type = e2.constructor.name;
      }
      this._main.postMessage({
        cmd: 'alphaTab.error',
        error: { type: type, detail: error }
      });
    },
    __class__: alphaTab.platform.javaScript.AlphaTabWebWorker
  };
  alphaTab.platform.javaScript.AlphaSynthWebWorker = function(main, id) {
    this._player = null;
    this._main = null;
    this._main = main;
    this._main.addEventListener('message', $bind(this, this.HandleMessage));
    this._player = new alphaTab.audio.synth.AlphaSynth(
      new alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput()
    );
    this._player.add_PositionChanged($bind(this, this.OnPositionChanged));
    this._player.add_StateChanged($bind(this, this.OnPlayerStateChanged));
    this._player.add_Finished($bind(this, this.OnFinished));
    this._player.add_SoundFontLoaded($bind(this, this.OnSoundFontLoaded));
    this._player.add_SoundFontLoadFailed(
      $bind(this, this.OnSoundFontLoadFailed)
    );
    this._player.add_SoundFontLoadFailed(
      $bind(this, this.OnSoundFontLoadFailed)
    );
    this._player.add_MidiLoaded($bind(this, this.OnMidiLoaded));
    this._player.add_MidiLoadFailed($bind(this, this.OnMidiLoadFailed));
    this._player.add_ReadyForPlayback($bind(this, this.OnReadyForPlayback));
    this._main.postMessage({ cmd: 'alphaSynth.' + 'ready' });
  };
  alphaTab.platform.javaScript.AlphaSynthWebWorker.__name__ = [
    'alphaTab',
    'platform',
    'javaScript',
    'AlphaSynthWebWorker'
  ];
  alphaTab.platform.javaScript.AlphaSynthWebWorker.Init = function() {
    var main = $global;
    main.addEventListener('message', function(e) {
      var data = e.data;
      var cmd = data.cmd;
      if (cmd == 'alphaSynth.initialize') {
        alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.PreferredSampleRate =
          data.sampleRate;
        alphaTab.util.Logger.LogLevel = data.logLevel;
        new alphaTab.platform.javaScript.AlphaSynthWebWorker(main, data.id);
      }
    });
  };
  alphaTab.platform.javaScript.AlphaSynthWebWorker.prototype = {
    HandleMessage: function(e) {
      var data = e.data;
      var cmd = data.cmd;
      switch (cmd) {
        case 'alphaSynth.loadMidi':
          this._player.LoadMidiFile(
            alphaTab.model.JsonConverter.JsObjectToMidiFile(data.midi)
          );
          break;
        case 'alphaSynth.loadSoundFontBytes':
          this._player.LoadSoundFont(data.data);
          break;
        case 'alphaSynth.pause':
          this._player.Pause();
          break;
        case 'alphaSynth.play':
          this._player.Play();
          break;
        case 'alphaSynth.playPause':
          this._player.PlayPause();
          break;
        case 'alphaSynth.resetChannelStates':
          this._player.ResetChannelStates();
          break;
        case 'alphaSynth.setChannelMute':
          this._player.SetChannelMute(data.channel, data.mute);
          break;
        case 'alphaSynth.setChannelProgram':
          this._player.SetChannelProgram(data.channel, data.program);
          break;
        case 'alphaSynth.setChannelSolo':
          this._player.SetChannelSolo(data.channel, data.solo);
          break;
        case 'alphaSynth.setChannelVolume':
          this._player.SetChannelVolume(data.channel, data.volume);
          break;
        case 'alphaSynth.setIsLooping':
          this._player.set_IsLooping(data.value);
          break;
        case 'alphaSynth.setLogLevel':
          alphaTab.util.Logger.LogLevel = data.value;
          break;
        case 'alphaSynth.setMasterVolume':
          this._player.set_MasterVolume(data.value);
          break;
        case 'alphaSynth.setMetronomeVolume':
          this._player.set_MetronomeVolume(data.value);
          break;
        case 'alphaSynth.setPlaybackRange':
          this._player.set_PlaybackRange(data.value);
          break;
        case 'alphaSynth.setPlaybackSpeed':
          this._player.set_PlaybackSpeed(data.value);
          break;
        case 'alphaSynth.setTickPosition':
          this._player.set_TickPosition(data.value);
          break;
        case 'alphaSynth.setTimePosition':
          this._player.set_TimePosition(data.value);
          break;
        case 'alphaSynth.stop':
          this._player.Stop();
          break;
        default:
      }
    },
    OnPositionChanged: function(e) {
      this._main.postMessage({
        cmd: 'alphaSynth.' + 'positionChanged',
        currentTime: e.CurrentTime,
        endTime: e.EndTime,
        currentTick: e.CurrentTick,
        endTick: e.EndTick
      });
    },
    OnPlayerStateChanged: function(e) {
      this._main.postMessage({
        cmd: 'alphaSynth.' + 'playerStateChanged',
        state: e.State
      });
    },
    OnFinished: function(e) {
      this._main.postMessage({
        cmd: 'alphaSynth.' + 'finished',
        isLooping: e.IsLooping
      });
    },
    OnSoundFontLoaded: function() {
      this._main.postMessage({ cmd: 'alphaSynth.' + 'soundFontLoaded' });
    },
    OnSoundFontLoadFailed: function(e) {
      this._main.postMessage({
        cmd: 'alphaSynth.' + 'soundFontLoadFailed',
        error: this.SerializeException(e)
      });
    },
    SerializeException: function(e) {
      var error = JSON.parse(JSON.stringify(e));
      var e2 = e;
      if (e2.message) {
        error.message = e2.message;
      }
      if (e2.stack) {
        error.stack = e2.stack;
      }
      if (e2.constructor && e2.constructor.name) {
        error.type = e2.constructor.name;
      }
      return error;
    },
    OnMidiLoaded: function() {
      this._main.postMessage({ cmd: 'alphaSynth.' + 'midiLoaded' });
    },
    OnMidiLoadFailed: function(e) {
      this._main.postMessage({
        cmd: 'alphaSynth.' + 'midiLoaded',
        error: this.SerializeException(e)
      });
    },
    OnReadyForPlayback: function() {
      this._main.postMessage({ cmd: 'alphaSynth.' + 'readyForPlayback' });
    },
    SendLog: function(level, s) {
      this._main.postMessage({
        cmd: 'alphaSynth.' + 'log',
        level: level,
        message: s
      });
    },
    __class__: alphaTab.platform.javaScript.AlphaSynthWebWorker
  };
  alphaTab.audio = {};
  alphaTab.audio.synth = {};
  alphaTab.audio.synth.ISynthOutput = $hx_exports['alphaTab']['audio']['synth'][
    'ISynthOutput'
  ] = function() {};
  alphaTab.audio.synth.ISynthOutput.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'ISynthOutput'
  ];
  alphaTab.audio.synth.ISynthOutput.prototype = {
    __class__: alphaTab.audio.synth.ISynthOutput
  };
  alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput = function() {
    this._worker = null;
  };
  alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.__name__ = [
    'alphaTab',
    'platform',
    'javaScript',
    'AlphaSynthWorkerSynthOutput'
  ];
  alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.__interfaces__ = [
    alphaTab.audio.synth.ISynthOutput
  ];
  alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.prototype = {
    get_SampleRate: function() {
      return alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput
        .PreferredSampleRate;
    },
    Open: function() {
      alphaTab.util.Logger.Debug(
        'AlphaSynth',
        'Initializing webworker worker',
        null
      );
      this._worker = $global;
      this._worker.addEventListener('message', $bind(this, this.HandleMessage));
      system._EventAction.EventAction_Impl_.Invoke(this.Ready);
    },
    HandleMessage: function(e) {
      var data = e.data;
      var cmd = data.cmd;
      switch (cmd) {
        case 'alphaSynth.output.finished':
          system._EventAction.EventAction_Impl_.Invoke(this.Finished);
          break;
        case 'alphaSynth.output.sampleRequest':
          system._EventAction.EventAction_Impl_.Invoke(this.SampleRequest);
          break;
        case 'alphaSynth.output.samplesPlayed':
          system._EventAction1.EventAction1_Impl_.Invoke(
            this.SamplesPlayed,
            data.samples
          );
          break;
        default:
      }
    },
    add_Ready: function(value) {
      this.Ready = system._EventAction.EventAction_Impl_.add(this.Ready, value);
    },
    remove_Ready: function(value) {
      this.Ready = system._EventAction.EventAction_Impl_.sub(this.Ready, value);
    },
    add_SamplesPlayed: function(value) {
      this.SamplesPlayed = system._EventAction1.EventAction1_Impl_.add(
        this.SamplesPlayed,
        value
      );
    },
    remove_SamplesPlayed: function(value) {
      this.SamplesPlayed = system._EventAction1.EventAction1_Impl_.sub(
        this.SamplesPlayed,
        value
      );
    },
    add_SampleRequest: function(value) {
      this.SampleRequest = system._EventAction.EventAction_Impl_.add(
        this.SampleRequest,
        value
      );
    },
    remove_SampleRequest: function(value) {
      this.SampleRequest = system._EventAction.EventAction_Impl_.sub(
        this.SampleRequest,
        value
      );
    },
    add_Finished: function(value) {
      this.Finished = system._EventAction.EventAction_Impl_.add(
        this.Finished,
        value
      );
    },
    remove_Finished: function(value) {
      this.Finished = system._EventAction.EventAction_Impl_.sub(
        this.Finished,
        value
      );
    },
    SequencerFinished: function() {
      this._worker.postMessage({
        cmd: 'alphaSynth.' + 'output.' + 'sequencerFinished'
      });
    },
    AddSamples: function(samples) {
      this._worker.postMessage({
        cmd: 'alphaSynth.' + 'output.' + 'addSamples',
        samples: samples
      });
    },
    Play: function() {
      this._worker.postMessage({ cmd: 'alphaSynth.' + 'output.' + 'play' });
    },
    Pause: function() {
      this._worker.postMessage({ cmd: 'alphaSynth.' + 'output.' + 'pause' });
    },
    ResetSamples: function() {
      this._worker.postMessage({
        cmd: 'alphaSynth.' + 'output.' + 'resetSamples'
      });
    },
    Activate: function() {},
    __class__: alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput
  };
  alphaTab.audio.synth.IAlphaSynth = $hx_exports['alphaTab']['audio']['synth'][
    'IAlphaSynth'
  ] = function() {};
  alphaTab.audio.synth.IAlphaSynth.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'IAlphaSynth'
  ];
  alphaTab.audio.synth.IAlphaSynth.prototype = {
    __class__: alphaTab.audio.synth.IAlphaSynth
  };
  alphaTab.audio.synth.AlphaSynth = $hx_exports['alphaTab']['audio']['synth'][
    'AlphaSynth'
  ] = function(output) {
    var _gthis = this;
    this._sequencer = null;
    this._synthesizer = null;
    this._isSoundFontLoaded = false;
    this._isMidiLoaded = false;
    this._tickPosition = 0;
    this._timePosition = 0.0;
    this.Output = null;
    this.set_IsReady(false);
    this.set_State(0);
    alphaTab.util.Logger.Debug('AlphaSynth', 'Initializing player', null);
    this.set_State(0);
    alphaTab.util.Logger.Debug('AlphaSynth', 'Creating output', null);
    this.Output = output;
    this.Output.add_Ready(function() {
      _gthis.set_IsReady(true);
      _gthis.OnReady();
      _gthis.CheckReadyForPlayback();
    });
    this.Output.add_Finished(function() {
      _gthis.Stop();
      alphaTab.util.Logger.Debug('AlphaSynth', 'Finished playback', null);
      _gthis.OnFinished(
        new alphaTab.audio.synth.PlaybackFinishedEventArgs(
          _gthis._sequencer.IsLooping
        )
      );
      if (_gthis._sequencer.IsLooping) {
        _gthis.Play();
      }
    });
    this.Output.add_SampleRequest(function() {
      _gthis._sequencer.FillMidiEventQueue();
      _gthis._synthesizer.Synthesize();
      _gthis.Output.AddSamples(_gthis._synthesizer.SampleBuffer);
      _gthis._sequencer.CheckForStop();
    });
    this.Output.add_SamplesPlayed($bind(this, this.OnSamplesPlayed));
    alphaTab.util.Logger.Debug('AlphaSynth', 'Creating synthesizer', null);
    this._synthesizer = new alphaTab.audio.synth.synthesis.Synthesizer(
      this.Output.get_SampleRate(),
      2,
      441,
      3,
      100
    );
    this._sequencer = new alphaTab.audio.synth.MidiFileSequencer(
      this._synthesizer
    );
    this._sequencer.add_Finished(
      (($_ = this.Output), $bind($_, $_.SequencerFinished))
    );
    alphaTab.util.Logger.Debug('AlphaSynth', 'Opening output', null);
    this.Output.Open();
  };
  alphaTab.audio.synth.AlphaSynth.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'AlphaSynth'
  ];
  alphaTab.audio.synth.AlphaSynth.__interfaces__ = [
    alphaTab.audio.synth.IAlphaSynth
  ];
  alphaTab.audio.synth.AlphaSynth.prototype = {
    get_IsReady: function() {
      return this.__IsReady;
    },
    set_IsReady: function(value) {
      return (this.__IsReady = value);
    },
    get_IsReadyForPlayback: function() {
      if (this.get_IsReady() && this._isSoundFontLoaded) {
        return this._isMidiLoaded;
      } else {
        return false;
      }
    },
    get_State: function() {
      return this.__State;
    },
    set_State: function(value) {
      return (this.__State = value);
    },
    get_LogLevel: function() {
      return alphaTab.util.Logger.LogLevel;
    },
    set_LogLevel: function(value) {
      return (alphaTab.util.Logger.LogLevel = value);
    },
    get_MasterVolume: function() {
      return this._synthesizer.MasterVolume;
    },
    set_MasterVolume: function(value) {
      value = alphaTab.audio.synth.util.SynthHelper.ClampF(value, 0, 10);
      this._synthesizer.MasterVolume = value;
      return this.get_MasterVolume();
    },
    get_MetronomeVolume: function() {
      return this._synthesizer.get_MetronomeVolume();
    },
    set_MetronomeVolume: function(value) {
      value = alphaTab.audio.synth.util.SynthHelper.ClampF(value, 0, 10);
      this._synthesizer.set_MetronomeVolume(value);
      return this.get_MetronomeVolume();
    },
    get_PlaybackSpeed: function() {
      return this._sequencer.PlaybackSpeed;
    },
    set_PlaybackSpeed: function(value) {
      value = alphaTab.audio.synth.util.SynthHelper.ClampD(value, 0.125, 8);
      var oldSpeed = this._sequencer.PlaybackSpeed;
      this._sequencer.PlaybackSpeed = value;
      this.UpdateTimePosition(this._timePosition * (oldSpeed / value));
      return this.get_PlaybackSpeed();
    },
    get_TickPosition: function() {
      return this._tickPosition;
    },
    set_TickPosition: function(value) {
      this.set_TimePosition(this._sequencer.TickPositionToTimePosition(value));
      return this.get_TickPosition();
    },
    get_TimePosition: function() {
      return this._timePosition;
    },
    set_TimePosition: function(value) {
      alphaTab.util.Logger.Debug(
        'AlphaSynth',
        'Seeking to position ' + value + 'ms',
        null
      );
      this._sequencer.Seek(value);
      this.UpdateTimePosition(value);
      this.Output.ResetSamples();
      return this.get_TimePosition();
    },
    get_PlaybackRange: function() {
      return this._sequencer.get_PlaybackRange();
    },
    set_PlaybackRange: function(value) {
      this._sequencer.set_PlaybackRange(value);
      if (value != null) {
        this.set_TickPosition(value.StartTick);
      }
      return this.get_PlaybackRange();
    },
    get_IsLooping: function() {
      return this._sequencer.IsLooping;
    },
    set_IsLooping: function(value) {
      return (this._sequencer.IsLooping = value);
    },
    Destroy: function() {
      alphaTab.util.Logger.Debug('AlphaSynth', 'Destroying player', null);
      this.Stop();
    },
    Play: function() {
      if (this.get_State() == 1 || !this.get_IsReadyForPlayback()) {
        return;
      }
      this.Output.Activate();
      alphaTab.util.Logger.Debug('AlphaSynth', 'Starting playback', null);
      this.set_State(1);
      this.OnStateChanged(
        new alphaTab.audio.synth.PlayerStateChangedEventArgs(this.get_State())
      );
      this.Output.Play();
    },
    Pause: function() {
      if (this.get_State() == 0 || !this.get_IsReadyForPlayback()) {
        return;
      }
      alphaTab.util.Logger.Debug('AlphaSynth', 'Pausing playback', null);
      this.set_State(0);
      this.OnStateChanged(
        new alphaTab.audio.synth.PlayerStateChangedEventArgs(this.get_State())
      );
      this.Output.Pause();
      this._synthesizer.NoteOffAll(false);
    },
    PlayPause: function() {
      if (this.get_State() == 1 || !this.get_IsReadyForPlayback()) {
        this.Pause();
      } else {
        this.Play();
      }
    },
    Stop: function() {
      if (!this.get_IsReadyForPlayback()) {
        return;
      }
      alphaTab.util.Logger.Debug('AlphaSynth', 'Stopping playback', null);
      this.Pause();
      this._synthesizer.NoteOffAll(true);
      this.set_TickPosition(
        this._sequencer.get_PlaybackRange() != null
          ? this._sequencer.get_PlaybackRange().StartTick
          : 0
      );
    },
    LoadSoundFont: function(data) {
      this.Pause();
      var input = alphaTab.io.ByteBuffer.FromBuffer(data);
      try {
        alphaTab.util.Logger.Info(
          'AlphaSynth',
          'Loading soundfont from bytes',
          null
        );
        var bank = new alphaTab.audio.synth.bank.PatchBank();
        bank.LoadSf2(input);
        this._synthesizer.LoadBank(bank);
        this._isSoundFontLoaded = true;
        this.OnSoundFontLoaded();
        alphaTab.util.Logger.Info(
          'AlphaSynth',
          'soundFont successfully loaded',
          null
        );
        this.CheckReadyForPlayback();
      } catch (e) {
        if (e instanceof js._Boot.HaxeError) e = e.val;
        if (js.Boot.__instanceof(e, system.Exception)) {
          alphaTab.util.Logger.Error(
            'AlphaSynth',
            'Could not load soundfont from bytes ' + Std.string(e),
            null
          );
          this.OnSoundFontLoadFailed(e);
        } else throw e;
      }
    },
    CheckReadyForPlayback: function() {
      if (this.get_IsReadyForPlayback()) {
        this.OnReadyForPlayback();
      }
    },
    LoadMidiFile: function(midiFile) {
      this.Stop();
      try {
        alphaTab.util.Logger.Info(
          'AlphaSynth',
          'Loading midi from model',
          null
        );
        this._sequencer.LoadMidi(midiFile);
        this._isMidiLoaded = true;
        this.OnMidiLoaded();
        alphaTab.util.Logger.Info(
          'AlphaSynth',
          'Midi successfully loaded',
          null
        );
        this.CheckReadyForPlayback();
        this.set_TickPosition(0);
      } catch (e) {
        if (e instanceof js._Boot.HaxeError) e = e.val;
        if (js.Boot.__instanceof(e, system.Exception)) {
          alphaTab.util.Logger.Error(
            'AlphaSynth',
            'Could not load midi from model ' + Std.string(e),
            null
          );
          this.OnMidiLoadFailed(e);
        } else throw e;
      }
    },
    SetChannelMute: function(channel, mute) {
      this._synthesizer.SetChannelMute(channel, mute);
    },
    ResetChannelStates: function() {
      this._synthesizer.ResetChannelStates();
    },
    SetChannelSolo: function(channel, solo) {
      this._synthesizer.SetChannelSolo(channel, solo);
    },
    SetChannelVolume: function(channel, volume) {
      var this1 = 0;
      var this2 = 10;
      volume = alphaTab.audio.synth.util.SynthHelper.ClampD(
        volume,
        this1,
        this2
      );
      this._synthesizer.SetChannelVolume(channel, volume);
    },
    SetChannelProgram: function(channel, program) {
      program = alphaTab.audio.synth.util.SynthHelper.ClampB(program, 0, 127);
      this._sequencer.SetChannelProgram(channel, program);
      this._synthesizer.SetChannelProgram(channel, program);
    },
    OnSamplesPlayed: function(sampleCount) {
      var playedMillis =
        (sampleCount / js.Boot.__cast(this._synthesizer.SampleRate, Float)) *
        1000;
      this.UpdateTimePosition(this._timePosition + playedMillis);
    },
    UpdateTimePosition: function(timePosition) {
      var currentTime = (this._timePosition = timePosition);
      var currentTick = (this._tickPosition = this._sequencer.TimePositionToTickPosition(
        currentTime
      ));
      var endTime = this._sequencer.get_EndTime();
      var endTick = this._sequencer.EndTick;
      alphaTab.util.Logger.Debug(
        'AlphaSynth',
        'Position changed: (time: ' +
          currentTime +
          '/' +
          endTime +
          ', tick: ' +
          currentTick +
          '/' +
          endTime +
          ', Active Voices: ' +
          this._synthesizer.get_ActiveVoices() +
          ', Free Voices: ' +
          this._synthesizer.get_FreeVoices() +
          ')',
        null
      );
      this.OnPositionChanged(
        new alphaTab.audio.synth.PositionChangedEventArgs(
          currentTime,
          endTime,
          currentTick,
          endTick
        )
      );
    },
    add_Ready: function(value) {
      this.Ready = system._EventAction.EventAction_Impl_.add(this.Ready, value);
    },
    remove_Ready: function(value) {
      this.Ready = system._EventAction.EventAction_Impl_.sub(this.Ready, value);
    },
    OnReady: function() {
      var _e = this.Ready;
      var handler = function() {
        system._EventAction.EventAction_Impl_.Invoke(_e);
      };
      if (handler != null) {
        handler();
      }
    },
    add_Finished: function(value) {
      this.Finished = system._EventAction1.EventAction1_Impl_.add(
        this.Finished,
        value
      );
    },
    remove_Finished: function(value) {
      this.Finished = system._EventAction1.EventAction1_Impl_.sub(
        this.Finished,
        value
      );
    },
    OnFinished: function(e) {
      var _e = this.Finished;
      var handler = function(p) {
        system._EventAction1.EventAction1_Impl_.Invoke(_e, p);
      };
      if (handler != null) {
        handler(e);
      }
    },
    add_StateChanged: function(value) {
      this.StateChanged = system._EventAction1.EventAction1_Impl_.add(
        this.StateChanged,
        value
      );
    },
    remove_StateChanged: function(value) {
      this.StateChanged = system._EventAction1.EventAction1_Impl_.sub(
        this.StateChanged,
        value
      );
    },
    OnStateChanged: function(e) {
      var _e = this.StateChanged;
      var handler = function(p) {
        system._EventAction1.EventAction1_Impl_.Invoke(_e, p);
      };
      if (handler != null) {
        handler(e);
      }
    },
    add_SoundFontLoaded: function(value) {
      this.SoundFontLoaded = system._EventAction.EventAction_Impl_.add(
        this.SoundFontLoaded,
        value
      );
    },
    remove_SoundFontLoaded: function(value) {
      this.SoundFontLoaded = system._EventAction.EventAction_Impl_.sub(
        this.SoundFontLoaded,
        value
      );
    },
    OnSoundFontLoaded: function() {
      var _e = this.SoundFontLoaded;
      var handler = function() {
        system._EventAction.EventAction_Impl_.Invoke(_e);
      };
      if (handler != null) {
        handler();
      }
    },
    add_ReadyForPlayback: function(value) {
      this.ReadyForPlayback = system._EventAction.EventAction_Impl_.add(
        this.ReadyForPlayback,
        value
      );
    },
    remove_ReadyForPlayback: function(value) {
      this.ReadyForPlayback = system._EventAction.EventAction_Impl_.sub(
        this.ReadyForPlayback,
        value
      );
    },
    OnReadyForPlayback: function() {
      var _e = this.ReadyForPlayback;
      var handler = function() {
        system._EventAction.EventAction_Impl_.Invoke(_e);
      };
      if (handler != null) {
        handler();
      }
    },
    add_SoundFontLoadFailed: function(value) {
      this.SoundFontLoadFailed = system._EventAction1.EventAction1_Impl_.add(
        this.SoundFontLoadFailed,
        value
      );
    },
    remove_SoundFontLoadFailed: function(value) {
      this.SoundFontLoadFailed = system._EventAction1.EventAction1_Impl_.sub(
        this.SoundFontLoadFailed,
        value
      );
    },
    OnSoundFontLoadFailed: function(e) {
      var _e = this.SoundFontLoadFailed;
      var handler = function(p) {
        system._EventAction1.EventAction1_Impl_.Invoke(_e, p);
      };
      if (handler != null) {
        handler(e);
      }
    },
    add_MidiLoaded: function(value) {
      this.MidiLoaded = system._EventAction.EventAction_Impl_.add(
        this.MidiLoaded,
        value
      );
    },
    remove_MidiLoaded: function(value) {
      this.MidiLoaded = system._EventAction.EventAction_Impl_.sub(
        this.MidiLoaded,
        value
      );
    },
    OnMidiLoaded: function() {
      var _e = this.MidiLoaded;
      var handler = function() {
        system._EventAction.EventAction_Impl_.Invoke(_e);
      };
      if (handler != null) {
        handler();
      }
    },
    add_MidiLoadFailed: function(value) {
      this.MidiLoadFailed = system._EventAction1.EventAction1_Impl_.add(
        this.MidiLoadFailed,
        value
      );
    },
    remove_MidiLoadFailed: function(value) {
      this.MidiLoadFailed = system._EventAction1.EventAction1_Impl_.sub(
        this.MidiLoadFailed,
        value
      );
    },
    OnMidiLoadFailed: function(e) {
      var _e = this.MidiLoadFailed;
      var handler = function(p) {
        system._EventAction1.EventAction1_Impl_.Invoke(_e, p);
      };
      if (handler != null) {
        handler(e);
      }
    },
    add_PositionChanged: function(value) {
      this.PositionChanged = system._EventAction1.EventAction1_Impl_.add(
        this.PositionChanged,
        value
      );
    },
    remove_PositionChanged: function(value) {
      this.PositionChanged = system._EventAction1.EventAction1_Impl_.sub(
        this.PositionChanged,
        value
      );
    },
    OnPositionChanged: function(e) {
      var _e = this.PositionChanged;
      var handler = function(p) {
        system._EventAction1.EventAction1_Impl_.Invoke(_e, p);
      };
      if (handler != null) {
        handler(e);
      }
    },
    __class__: alphaTab.audio.synth.AlphaSynth
  };
  alphaTab.audio.synth.PlaybackFinishedEventArgs = $hx_exports['alphaTab'][
    'audio'
  ]['synth']['PlaybackFinishedEventArgs'] = function(isLooping) {
    this.IsLooping = false;
    this.IsLooping = isLooping;
  };
  alphaTab.audio.synth.PlaybackFinishedEventArgs.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'PlaybackFinishedEventArgs'
  ];
  alphaTab.audio.synth.PlaybackFinishedEventArgs.prototype = {
    __class__: alphaTab.audio.synth.PlaybackFinishedEventArgs
  };
  alphaTab.audio.synth.synthesis = {};
  alphaTab.audio.synth.synthesis.Synthesizer = function(
    sampleRate,
    audioChannels,
    bufferSize,
    bufferCount,
    polyphony
  ) {
    this._voiceManager = null;
    this._synthChannels = null;
    this._layerList = null;
    this._midiEventQueue = null;
    this._midiEventCounts = null;
    this._metronomeChannel = 0;
    this._mutedChannels = null;
    this._soloChannels = null;
    this._isAnySolo = false;
    this.MicroBufferSize = 0;
    this.MicroBufferCount = 0;
    this.SampleBuffer = null;
    this.SoundBank = null;
    this.SampleRate = 0;
    this.MasterVolume = 0.0;
    var MinSampleRate = 8000;
    var MaxSampleRate = 96000;
    this.MasterVolume = 1;
    this.SampleRate = alphaTab.audio.synth.util.SynthHelper.ClampI(
      sampleRate,
      MinSampleRate,
      MaxSampleRate
    );
    this.MicroBufferSize = alphaTab.audio.synth.util.SynthHelper.ClampI(
      bufferSize,
      system.Convert.ToInt32_Double(0.001 * sampleRate),
      system.Convert.ToInt32_Double(0.05 * sampleRate)
    );
    this.MicroBufferSize = system.Convert.ToInt32_Double(
      Math.ceil(this.MicroBufferSize / js.Boot.__cast(64, Float)) * 64
    );
    this.MicroBufferCount = Math.max(1, bufferCount);
    var this1 = new Float32Array(
      this.MicroBufferSize * this.MicroBufferCount * audioChannels
    );
    this.SampleBuffer = this1;
    var this2 = new Array(17);
    this._synthChannels = this2;
    var x = 0;
    while (x < this._synthChannels.length) {
      this._synthChannels[
        x
      ] = new alphaTab.audio.synth.synthesis.SynthParameters(this);
      ++x;
    }
    this._metronomeChannel = this._synthChannels.length - 1;
    this._voiceManager = new alphaTab.audio.synth.synthesis.VoiceManager(
      alphaTab.audio.synth.util.SynthHelper.ClampI(polyphony, 5, 250)
    );
    this._midiEventQueue = new alphaTab.audio.synth.ds.LinkedList();
    var this3 = new Int32Array(this.MicroBufferCount);
    this._midiEventCounts = this3;
    var this4 = new Array(15);
    this._layerList = this4;
    var this5 = {};
    this._mutedChannels = this5;
    var this6 = {};
    this._soloChannels = this6;
    this.ResetSynthControls();
  };
  alphaTab.audio.synth.synthesis.Synthesizer.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'synthesis',
    'Synthesizer'
  ];
  alphaTab.audio.synth.synthesis.Synthesizer.prototype = {
    get_ActiveVoices: function() {
      return this._voiceManager.ActiveVoices.Length;
    },
    get_FreeVoices: function() {
      return this._voiceManager.FreeVoices.Length;
    },
    get_MetronomeVolume: function() {
      return this._synthChannels[this._metronomeChannel].MixVolume;
    },
    set_MetronomeVolume: function(value) {
      this._synthChannels[this._metronomeChannel].MixVolume = value;
      return this.get_MetronomeVolume();
    },
    LoadBank: function(bank) {
      this.UnloadBank();
      this.SoundBank = bank;
    },
    UnloadBank: function() {
      if (this.SoundBank != null) {
        this.NoteOffAll(true);
        this._voiceManager.UnloadPatches();
        this.SoundBank = null;
      }
    },
    ResetSynthControls: function() {
      var parameters = HxOverrides.iter(this._synthChannels);
      while (parameters.hasNext()) {
        var parameters1 = parameters.next();
        parameters1.ResetControllers();
      }
      this._synthChannels[9].BankSelect = system.Convert.ToUInt8(128);
      this.ReleaseAllHoldPedals();
      this._synthChannels[this._metronomeChannel].Volume.set_Coarse(128);
      this._synthChannels[
        this._metronomeChannel
      ].UpdateCurrentVolumeFromVolume();
      this._synthChannels[
        this._metronomeChannel
      ].BankSelect = system.Convert.ToUInt8(128);
    },
    ResetPrograms: function() {
      var parameters = HxOverrides.iter(this._synthChannels);
      while (parameters.hasNext()) {
        var parameters1 = parameters.next();
        parameters1.Program = 0;
      }
    },
    Synthesize: function() {
      this.SampleBuffer = new Float32Array(this.SampleBuffer.length);
      this.FillWorkingBuffer(false);
    },
    SynthesizeSilent: function() {
      this.SampleBuffer = new Float32Array(this.SampleBuffer.length);
      this.FillWorkingBuffer(true);
    },
    FillWorkingBuffer: function(silent) {
      var sampleIndex = 0;
      var anySolo = this._isAnySolo;
      var x = 0;
      while (x < this.MicroBufferCount) {
        if (this._midiEventQueue.Length > 0) {
          var i = 0;
          while (i < this._midiEventCounts[x]) {
            var m = this._midiEventQueue.RemoveLast();
            if (m.IsMetronome) {
              this.NoteOff(this._metronomeChannel, 37);
              this.NoteOn(this._metronomeChannel, 37, 95);
            } else {
              this.ProcessMidiMessage(m.Event);
            }
            ++i;
          }
        }
        var node = this._voiceManager.ActiveVoices.First;
        while (node != null) {
          var channel = node.Value.VoiceParams.Channel;
          var isChannelMuted =
            this._mutedChannels.hasOwnProperty(channel) ||
            (anySolo && !this._soloChannels.hasOwnProperty(channel));
          if (silent) {
            node.Value.ProcessSilent(
              sampleIndex,
              sampleIndex + this.MicroBufferSize * 2
            );
          } else {
            node.Value.Process(
              sampleIndex,
              sampleIndex + this.MicroBufferSize * 2,
              isChannelMuted
            );
          }
          if (node.Value.VoiceParams.State == 0) {
            var delnode = node;
            node = node.get_Next();
            this._voiceManager.RemoveVoiceFromRegistry(delnode.Value);
            this._voiceManager.ActiveVoices.Remove(delnode);
            this._voiceManager.FreeVoices.AddFirst(delnode.Value);
          } else {
            node = node.get_Next();
          }
        }
        sampleIndex = sampleIndex + this.MicroBufferSize * 2;
        ++x;
      }
      alphaTab.platform.Platform.ClearIntArray(this._midiEventCounts);
    },
    NoteOn: function(channel, note, velocity) {
      var sChan = this._synthChannels[channel];
      var inst = this.SoundBank.GetPatchByNumber(
        sChan.BankSelect,
        sChan.Program
      );
      if (inst == null) {
        return;
      }
      var layerCount;
      if (
        js.Boot.__instanceof(inst, alphaTab.audio.synth.bank.patch.MultiPatch)
      ) {
        layerCount = js.Boot.__cast(
          inst,
          alphaTab.audio.synth.bank.patch.MultiPatch
        ).FindPatches(channel, note, velocity, this._layerList);
      } else {
        layerCount = 1;
        this._layerList[0] = inst;
      }
      if (this._voiceManager.Registry[channel][note] != null) {
        var node = this._voiceManager.Registry[channel][note];
        while (node != null) {
          node.Value.Stop();
          node = node.Next;
        }
        this._voiceManager.RemoveFromRegistry(channel, note);
      }
      var x = 0;
      while (x < layerCount) {
        var notseen = true;
        var i = x - 1;
        while (i >= 0) {
          if (
            this._layerList[x].ExclusiveGroupTarget ==
            this._layerList[i].ExclusiveGroupTarget
          ) {
            notseen = false;
            break;
          }
          --i;
        }
        if (this._layerList[x].ExclusiveGroupTarget != 0 && notseen) {
          var node1 = this._voiceManager.ActiveVoices.First;
          while (node1 != null) {
            if (
              this._layerList[x].ExclusiveGroupTarget ==
              node1.Value.Patch.ExclusiveGroup
            ) {
              node1.Value.Stop();
              this._voiceManager.RemoveVoiceFromRegistry(node1.Value);
            }
            node1 = node1.get_Next();
          }
        }
        ++x;
      }
      var x1 = 0;
      while (x1 < layerCount) {
        var voice = this._voiceManager.GetFreeVoice();
        if (voice == null) {
          break;
        }
        voice.Configure(
          channel,
          note,
          velocity,
          this._layerList[x1],
          this._synthChannels[channel]
        );
        this._voiceManager.AddToRegistry(voice);
        this._voiceManager.ActiveVoices.AddLast(voice);
        voice.Start();
        ++x1;
      }
      var x2 = 0;
      while (x2 < layerCount) {
        this._layerList[x2] = null;
        ++x2;
      }
    },
    NoteOff: function(channel, note) {
      if (this._synthChannels[channel].HoldPedal) {
        var node = this._voiceManager.Registry[channel][note];
        while (node != null) {
          node.Value.VoiceParams.NoteOffPending = true;
          node = node.Next;
        }
      } else {
        var node1 = this._voiceManager.Registry[channel][note];
        while (node1 != null) {
          node1.Value.Stop();
          node1 = node1.Next;
        }
        this._voiceManager.RemoveFromRegistry(channel, note);
      }
    },
    NoteOffAll: function(immediate) {
      var node = this._voiceManager.ActiveVoices.First;
      if (immediate) {
        this._voiceManager.ClearRegistry();
        while (node != null) {
          node.Value.StopImmediately();
          var delnode = node;
          node = node.get_Next();
          this._voiceManager.ActiveVoices.Remove(delnode);
          this._voiceManager.FreeVoices.AddFirst(delnode.Value);
        }
      } else {
        while (node != null) {
          var voiceParams = node.Value.VoiceParams;
          if (voiceParams.State == 2) {
            if (this._synthChannels[voiceParams.Channel].HoldPedal) {
              voiceParams.NoteOffPending = true;
            } else {
              node.Value.Stop();
              this._voiceManager.RemoveVoiceFromRegistry(node.Value);
            }
          }
          node = node.get_Next();
        }
      }
    },
    NoteOffAllChannel: function(channel, immediate) {
      var node = this._voiceManager.ActiveVoices.First;
      while (node != null)
        if (channel == node.Value.VoiceParams.Channel) {
          if (immediate) {
            node.Value.StopImmediately();
            var delnode = node;
            node = node.get_Next();
            this._voiceManager.ActiveVoices.Remove(delnode);
            this._voiceManager.FreeVoices.AddFirst(delnode.Value);
          } else {
            if (this._synthChannels[channel].HoldPedal) {
              node.Value.VoiceParams.NoteOffPending = true;
            } else {
              node.Value.Stop();
            }
            node = node.get_Next();
          }
        }
    },
    ProcessMidiMessage: function(e) {
      alphaTab.util.Logger.Debug(
        'Midi',
        'Processing midi ' + e.get_Command(),
        null
      );
      var command = e.get_Command();
      var channel = e.get_Channel();
      var data1 = e.get_Data1();
      var data2 = e.get_Data2();
      switch (command) {
        case 128:
          this.NoteOff(channel, data1);
          break;
        case 144:
          if (data2 == 0) {
            this.NoteOff(channel, data1);
          } else {
            this.NoteOn(channel, data1, data2);
          }
          break;
        case 160:
          break;
        case 176:
          var _g = js.Boot.__cast(data1, Int);
          switch (_g) {
            case 0:
              if (channel == 9) {
                data2 = data2 + 128;
              }
              if (this.SoundBank.IsBankLoaded(data2)) {
                this._synthChannels[
                  channel
                ].BankSelect = system.Convert.ToUInt8(data2);
              } else {
                this._synthChannels[
                  channel
                ].BankSelect = system.Convert.ToUInt8(channel == 9 ? 128 : 0);
              }
              break;
            case 1:
              this._synthChannels[channel].ModRange.set_Coarse(
                system.Convert.ToUInt8(data2)
              );
              this._synthChannels[channel].UpdateCurrentMod();
              break;
            case 6:
              var _g1 = this._synthChannels[channel].Rpn.get_Combined();
              switch (_g1) {
                case 0:
                  this._synthChannels[
                    channel
                  ].PitchBendRangeCoarse = system.Convert.ToUInt8(data2);
                  this._synthChannels[channel].UpdateCurrentPitch();
                  break;
                case 1:
                  this._synthChannels[channel].MasterFineTune.set_Coarse(
                    system.Convert.ToUInt8(data2)
                  );
                  break;
                case 2:
                  this._synthChannels[
                    channel
                  ].MasterCoarseTune = system.Convert.ToInt16(data2 - 64);
                  break;
                default:
              }
              break;
            case 7:
              this._synthChannels[channel].Volume.set_Coarse(
                system.Convert.ToUInt8(data2)
              );
              this._synthChannels[channel].UpdateCurrentVolumeFromVolume();
              break;
            case 10:
              this._synthChannels[channel].Pan.set_Coarse(
                system.Convert.ToUInt8(data2)
              );
              this._synthChannels[channel].UpdateCurrentPan();
              break;
            case 11:
              this._synthChannels[channel].Expression.set_Coarse(
                system.Convert.ToUInt8(data2)
              );
              this._synthChannels[channel].UpdateCurrentVolumeFromExpression();
              break;
            case 33:
              this._synthChannels[channel].ModRange.set_Fine(
                system.Convert.ToUInt8(data2)
              );
              this._synthChannels[channel].UpdateCurrentMod();
              break;
            case 38:
              var _g2 = this._synthChannels[channel].Rpn.get_Combined();
              switch (_g2) {
                case 0:
                  this._synthChannels[
                    channel
                  ].PitchBendRangeFine = system.Convert.ToUInt8(data2);
                  this._synthChannels[channel].UpdateCurrentPitch();
                  break;
                case 1:
                  this._synthChannels[channel].MasterFineTune.set_Fine(
                    system.Convert.ToUInt8(data2)
                  );
                  break;
                default:
              }
              break;
            case 39:
              this._synthChannels[channel].Volume.set_Fine(
                system.Convert.ToUInt8(data2)
              );
              this._synthChannels[channel].UpdateCurrentVolumeFromVolume();
              break;
            case 42:
              this._synthChannels[channel].Pan.set_Fine(
                system.Convert.ToUInt8(data2)
              );
              this._synthChannels[channel].UpdateCurrentPan();
              break;
            case 43:
              this._synthChannels[channel].Expression.set_Fine(
                system.Convert.ToUInt8(data2)
              );
              this._synthChannels[channel].UpdateCurrentVolumeFromExpression();
              break;
            case 64:
              if (this._synthChannels[channel].HoldPedal && !(data2 > 63)) {
                this.ReleaseHoldPedal(channel);
              }
              this._synthChannels[channel].HoldPedal = data2 > 63;
              break;
            case 68:
              this._synthChannels[channel].LegatoPedal = data2 > 63;
              break;
            case 98:
              this._synthChannels[channel].Rpn.set_Combined(16383);
              break;
            case 99:
              this._synthChannels[channel].Rpn.set_Combined(16383);
              break;
            case 100:
              this._synthChannels[channel].Rpn.set_Fine(
                system.Convert.ToUInt8(data2)
              );
              break;
            case 101:
              this._synthChannels[channel].Rpn.set_Coarse(
                system.Convert.ToUInt8(data2)
              );
              break;
            case 121:
              this._synthChannels[channel].Expression.set_Combined(16383);
              this._synthChannels[channel].ModRange.set_Combined(0);
              if (this._synthChannels[channel].HoldPedal) {
                this.ReleaseHoldPedal(channel);
              }
              this._synthChannels[channel].HoldPedal = false;
              this._synthChannels[channel].LegatoPedal = false;
              this._synthChannels[channel].Rpn.set_Combined(16383);
              this._synthChannels[channel].PitchBend.set_Combined(8192);
              this._synthChannels[channel].ChannelAfterTouch = 0;
              this._synthChannels[channel].UpdateCurrentPitch();
              this._synthChannels[channel].UpdateCurrentVolumeFromExpression();
              break;
            case 123:
              this.NoteOffAll(false);
              break;
            default:
              return;
          }
          break;
        case 192:
          this._synthChannels[channel].Program = system.Convert.ToUInt8(data1);
          break;
        case 208:
          this._synthChannels[
            channel
          ].ChannelAfterTouch = system.Convert.ToUInt8(data2);
          break;
        case 224:
          this._synthChannels[channel].PitchBend.set_Coarse(
            system.Convert.ToUInt8(data2)
          );
          this._synthChannels[channel].PitchBend.set_Fine(
            system.Convert.ToUInt8(data1)
          );
          this._synthChannels[channel].UpdateCurrentPitch();
          break;
        default:
      }
      this.OnMidiEventProcessed(e);
    },
    add_MidiEventProcessed: function(value) {
      this.MidiEventProcessed = system._EventAction1.EventAction1_Impl_.add(
        this.MidiEventProcessed,
        value
      );
    },
    remove_MidiEventProcessed: function(value) {
      this.MidiEventProcessed = system._EventAction1.EventAction1_Impl_.sub(
        this.MidiEventProcessed,
        value
      );
    },
    OnMidiEventProcessed: function(e) {
      var _e = this.MidiEventProcessed;
      var handler = function(p) {
        system._EventAction1.EventAction1_Impl_.Invoke(_e, p);
      };
      if (handler != null) {
        handler(e);
      }
    },
    ReleaseAllHoldPedals: function() {
      var node = this._voiceManager.ActiveVoices.First;
      while (node != null) {
        if (node.Value.VoiceParams.NoteOffPending) {
          node.Value.Stop();
          this._voiceManager.RemoveVoiceFromRegistry(node.Value);
        }
        node = node.get_Next();
      }
    },
    ReleaseHoldPedal: function(channel) {
      var node = this._voiceManager.ActiveVoices.First;
      while (node != null) {
        if (
          node.Value.VoiceParams.Channel == channel &&
          node.Value.VoiceParams.NoteOffPending
        ) {
          node.Value.Stop();
          this._voiceManager.RemoveVoiceFromRegistry(node.Value);
        }
        node = node.get_Next();
      }
    },
    DispatchEvent: function(i, synthEvent) {
      this._midiEventQueue.AddFirst(synthEvent);
      var tmp = i;
      var tmp1 = this._midiEventCounts[tmp];
      this._midiEventCounts[tmp] = tmp1 + 1;
    },
    SetChannelMute: function(channel, mute) {
      if (mute) {
        this._mutedChannels[channel] = true;
      } else {
        var this1 = this._mutedChannels;
        delete this1[channel];
      }
    },
    ResetChannelStates: function() {
      var this1 = {};
      this._mutedChannels = this1;
      var this2 = {};
      this._soloChannels = this2;
      this._isAnySolo = false;
    },
    SetChannelSolo: function(channel, solo) {
      if (solo) {
        this._soloChannels[channel] = true;
      } else {
        var this1 = this._soloChannels;
        delete this1[channel];
      }
      var this2 = this._soloChannels;
      this._isAnySolo = Object.keys(this2).length > 0;
    },
    SetChannelProgram: function(channel, program) {
      if (channel < 0 || channel >= this._synthChannels.length) {
        return;
      }
      this._synthChannels[channel].Program = program;
    },
    SetChannelVolume: function(channel, volume) {
      if (channel < 0 || channel >= this._synthChannels.length) {
        return;
      }
      this._synthChannels[channel].MixVolume = js.Boot.__cast(volume, Float);
    },
    __class__: alphaTab.audio.synth.synthesis.Synthesizer
  };
  alphaTab.audio.synth.util = {};
  alphaTab.audio.synth.util.SynthHelper = function() {};
  alphaTab.audio.synth.util.SynthHelper.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'util',
    'SynthHelper'
  ];
  alphaTab.audio.synth.util.SynthHelper.SwapEndianess = function(data, bits) {
    bits = (bits / 8) | 0;
    var this1 = new Uint8Array(bits);
    var swapArray = this1;
    var x = 0;
    while (x < data.length) {
      swapArray.set(data.subarray(x, x + bits), 0);
      swapArray.reverse();
      data.set(swapArray.subarray(0, 0 + bits), x);
      x = x + bits;
    }
  };
  alphaTab.audio.synth.util.SynthHelper.ClampB = function(value, min, max) {
    if (value <= min) {
      return min;
    } else if (value >= max) {
      return max;
    } else {
      return value;
    }
  };
  alphaTab.audio.synth.util.SynthHelper.ClampD = function(value, min, max) {
    if (value <= min) {
      return min;
    } else if (value >= max) {
      return max;
    } else {
      return value;
    }
  };
  alphaTab.audio.synth.util.SynthHelper.ClampF = function(value, min, max) {
    if (value <= min) {
      return min;
    } else if (value >= max) {
      return max;
    } else {
      return value;
    }
  };
  alphaTab.audio.synth.util.SynthHelper.ClampI = function(value, min, max) {
    if (value <= min) {
      return min;
    } else if (value >= max) {
      return max;
    } else {
      return value;
    }
  };
  alphaTab.audio.synth.util.SynthHelper.ClampS = function(value, min, max) {
    if (value <= min) {
      return min;
    } else if (value >= max) {
      return max;
    } else {
      return value;
    }
  };
  alphaTab.audio.synth.util.SynthHelper.NearestPowerOfTwo = function(value) {
    return Math.pow(2, Math.round(Math.log(value) / Math.log(2)));
  };
  alphaTab.audio.synth.util.SynthHelper.SamplesFromTime = function(
    sampleRate,
    seconds
  ) {
    return sampleRate * seconds;
  };
  alphaTab.audio.synth.util.SynthHelper.TimeFromSamples = function(
    sampleRate,
    samples
  ) {
    return samples / js.Boot.__cast(sampleRate, Float);
  };
  alphaTab.audio.synth.util.SynthHelper.DBtoLinear = function(dBvalue) {
    return Math.pow(10.0, dBvalue / 20.0);
  };
  alphaTab.audio.synth.util.SynthHelper.LineartoDB = function(linearvalue) {
    return 20.0 * (Math.log(linearvalue) / Math.log(10));
  };
  alphaTab.audio.synth.util.SynthHelper.FrequencyToKey = function(
    frequency,
    rootkey
  ) {
    return 12.0 * (Math.log(frequency / 440.0) / Math.log(2.0)) + rootkey;
  };
  alphaTab.audio.synth.util.SynthHelper.KeyToFrequency = function(
    key,
    rootkey
  ) {
    return Math.pow(2.0, (key - rootkey) / 12.0) * 440.0;
  };
  alphaTab.audio.synth.util.SynthHelper.SemitoneToPitch = function(key) {
    if (key < -127) {
      key = -127;
    } else if (key > 127) {
      key = 127;
    }
    var this1 = alphaTab.audio.synth.util.Tables.SemitoneTable(127 + key);
    return this1;
  };
  alphaTab.audio.synth.util.SynthHelper.CentsToPitch = function(cents) {
    var key = (cents / 100) | 0;
    cents = cents - key * 100;
    if (key < -127) {
      key = -127;
    } else if (key > 127) {
      key = 127;
    }
    var this1 =
      alphaTab.audio.synth.util.Tables.SemitoneTable(127 + key) *
      alphaTab.audio.synth.util.Tables.CentTable(100 + cents);
    return this1;
  };
  alphaTab.audio.synth.util.SynthHelper.prototype = {
    __class__: alphaTab.audio.synth.util.SynthHelper
  };
  system.Convert = function() {};
  system.Convert.__name__ = ['system', 'Convert'];
  system.Convert.ToInt8 = function(v) {
    system.Convert._int32Buffer[0] = v;
    return system.Convert._int8Buffer[0];
  };
  system.Convert.ToUInt8 = function(v) {
    system.Convert._int32Buffer[0] = v;
    return system.Convert._uint8Buffer[0];
  };
  system.Convert.ToInt16 = function(v) {
    system.Convert._int32Buffer[0] = v;
    return system.Convert._int16Buffer[0];
  };
  system.Convert.ToUInt16 = function(v) {
    system.Convert._int32Buffer[0] = v;
    return system.Convert._uint16Buffer[0];
  };
  system.Convert.ToUInt32 = function(v) {
    system.Convert._int32Buffer[0] = v;
    return system.Convert._uint32Buffer[0];
  };
  system.Convert.ToInt32_Double = function(v) {
    if (v >= 0) {
      if (v < 2147483647.5) {
        return v | 0;
      }
    } else if (v >= -2147483648.5) {
      return v | 0;
    }
    return v | 0;
  };
  system.Convert.ToInt32_Single = function(v) {
    var this1 = v;
    return system.Convert.ToInt32_Double(this1);
  };
  alphaTab.audio.synth.synthesis.SynthParameters = function(synth) {
    this.Program = 0;
    this.BankSelect = 0;
    this.ChannelAfterTouch = 0;
    this.Pan = null;
    this.Volume = null;
    this.Expression = null;
    this.ModRange = null;
    this.PitchBend = null;
    this.PitchBendRangeCoarse = 0;
    this.PitchBendRangeFine = 0;
    this.MasterCoarseTune = 0;
    this.MasterFineTune = null;
    this.HoldPedal = false;
    this.LegatoPedal = false;
    this.Rpn = null;
    this.Synth = null;
    this.CurrentVolume = 0.0;
    this.CurrentPitch = 0;
    this.CurrentMod = 0;
    this.CurrentPan = null;
    this.MixVolume = 0.0;
    this.Synth = synth;
    this.Pan = new alphaTab.audio.synth.synthesis.CCValue().CCValue_Int16(0);
    this.Volume = new alphaTab.audio.synth.synthesis.CCValue().CCValue_Int16(0);
    this.Expression = new alphaTab.audio.synth.synthesis.CCValue().CCValue_Int16(
      0
    );
    this.ModRange = new alphaTab.audio.synth.synthesis.CCValue().CCValue_Int16(
      0
    );
    this.PitchBend = new alphaTab.audio.synth.synthesis.CCValue().CCValue_Int16(
      0
    );
    this.MasterFineTune = new alphaTab.audio.synth.synthesis.CCValue().CCValue_Int16(
      0
    );
    this.Rpn = new alphaTab.audio.synth.synthesis.CCValue().CCValue_Int16(0);
    this.MixVolume = 1;
    this.CurrentPan = new alphaTab.audio.synth.bank.components.PanComponent();
    this.ResetControllers();
  };
  alphaTab.audio.synth.synthesis.SynthParameters.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'synthesis',
    'SynthParameters'
  ];
  alphaTab.audio.synth.synthesis.SynthParameters.prototype = {
    ResetControllers: function() {
      this.Program = 0;
      this.BankSelect = 0;
      this.ChannelAfterTouch = 0;
      this.Pan.set_Combined(8192);
      this.Volume.set_Fine(0);
      this.Volume.set_Coarse(100);
      this.Expression.set_Combined(16383);
      this.ModRange.set_Combined(0);
      this.PitchBend.set_Combined(8192);
      this.PitchBendRangeCoarse = 2;
      this.PitchBendRangeFine = 0;
      this.MasterCoarseTune = 0;
      this.MasterFineTune.set_Combined(8192);
      this.HoldPedal = false;
      this.LegatoPedal = false;
      this.Rpn.set_Combined(16383);
      this.UpdateCurrentPan();
      this.UpdateCurrentPitch();
      this.UpdateCurrentVolumeFromExpression();
    },
    UpdateCurrentPitch: function() {
      this.CurrentPitch = system.Convert.ToInt32_Double(
        ((this.PitchBend.get_Combined() - 8192.0) / 8192.0) *
          (100 * this.PitchBendRangeCoarse + this.PitchBendRangeFine)
      );
    },
    UpdateCurrentMod: function() {
      this.CurrentMod = system.Convert.ToInt32_Double(
        100 * (this.ModRange.get_Combined() / 16383.0)
      );
    },
    UpdateCurrentPan: function() {
      var value =
        (3.14159265358979 / 2.0) * (this.Pan.get_Combined() / 16383.0);
      this.CurrentPan.Left = js.Boot.__cast(Math.cos(value), Float);
      this.CurrentPan.Right = js.Boot.__cast(Math.sin(value), Float);
    },
    UpdateCurrentVolumeFromVolume: function() {
      var this1 = 16383;
      this.CurrentVolume = this.Volume.get_Combined() / this1;
      this.CurrentVolume = this.CurrentVolume * this.CurrentVolume;
    },
    UpdateCurrentVolumeFromExpression: function() {
      var this1 = 16383;
      this.CurrentVolume = this.Expression.get_Combined() / this1;
      this.CurrentVolume = this.CurrentVolume * this.CurrentVolume;
    },
    __class__: alphaTab.audio.synth.synthesis.SynthParameters
  };
  alphaTab.audio.synth.synthesis.CCValue = function() {
    this._coarseValue = 0;
    this._fineValue = 0;
    this._combined = 0;
  };
  alphaTab.audio.synth.synthesis.CCValue.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'synthesis',
    'CCValue'
  ];
  alphaTab.audio.synth.synthesis.CCValue.prototype = {
    get_Coarse: function() {
      return this._coarseValue;
    },
    set_Coarse: function(value) {
      this._coarseValue = value;
      this.UpdateCombined();
      return this.get_Coarse();
    },
    get_Fine: function() {
      return this._fineValue;
    },
    set_Fine: function(value) {
      this._fineValue = value;
      this.UpdateCombined();
      return this.get_Fine();
    },
    get_Combined: function() {
      return this._combined;
    },
    set_Combined: function(value) {
      this._combined = value;
      this.UpdateCoarseFinePair();
      return this.get_Combined();
    },
    CCValue_Byte_Byte: function(coarse, fine) {
      this._coarseValue = 0;
      this._fineValue = 0;
      this._combined = 0;
      this._coarseValue = coarse;
      this._fineValue = fine;
      this._combined = 0;
      this.UpdateCombined();
      return this;
    },
    CCValue_Int16: function(combined) {
      this._coarseValue = 0;
      this._fineValue = 0;
      this._combined = 0;
      this._coarseValue = 0;
      this._fineValue = 0;
      this._combined = combined;
      this.UpdateCoarseFinePair();
      return this;
    },
    UpdateCombined: function() {
      this._combined = system.Convert.ToInt16(
        (this._coarseValue << 7) | this._fineValue
      );
    },
    UpdateCoarseFinePair: function() {
      this._coarseValue = system.Convert.ToUInt8(this._combined >> 7);
      this._fineValue = system.Convert.ToUInt8(this._combined & 127);
    },
    __class__: alphaTab.audio.synth.synthesis.CCValue
  };
  alphaTab.audio.synth.bank = {};
  alphaTab.audio.synth.bank.components = {};
  alphaTab.audio.synth.bank.components.PanComponent = function() {
    this.Left = 0.0;
    this.Right = 0.0;
  };
  alphaTab.audio.synth.bank.components.PanComponent.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'components',
    'PanComponent'
  ];
  alphaTab.audio.synth.bank.components.PanComponent.prototype = {
    SetValue: function(value, formula) {
      value = alphaTab.audio.synth.util.SynthHelper.ClampF(value, -1, 1);
      var dvalue;
      switch (formula) {
        case 0:
          dvalue = ((3.14159265358979 / 2.0) * (value + 1)) / 2.0;
          this.Left = js.Boot.__cast(Math.cos(dvalue), Float);
          this.Right = js.Boot.__cast(Math.sin(dvalue), Float);
          break;
        case 1:
          this.Left = js.Boot.__cast(0.5 + value * -0.5, Float);
          this.Right = js.Boot.__cast(0.5 + value * 0.5, Float);
          break;
        case 2:
          dvalue = ((3.14159265358979 / 2.0) * (value + 1.0)) / 2.0;
          this.Left = js.Boot.__cast(Math.cos(dvalue) / 0.707106781186, Float);
          this.Right = js.Boot.__cast(Math.sin(dvalue) / 0.707106781186, Float);
          break;
        default:
          throw new js._Boot.HaxeError(
            new system.Exception().Exception_CsString(
              'Invalid pan law selected.'
            )
          );
      }
    },
    __class__: alphaTab.audio.synth.bank.components.PanComponent
  };
  alphaTab.audio.synth.synthesis.VoiceManager = function(voiceCount) {
    this._voicePool = null;
    this._vNodes = null;
    this.Polyphony = 0;
    this.FreeVoices = null;
    this.ActiveVoices = null;
    this.Registry = null;
    this.Polyphony = voiceCount;
    var this1 = new Array(voiceCount);
    this._voicePool = this1;
    this._vNodes = new alphaTab.audio.synth.ds.LinkedList();
    this.FreeVoices = new alphaTab.audio.synth.ds.LinkedList();
    this.ActiveVoices = new alphaTab.audio.synth.ds.LinkedList();
    var i = 0;
    while (i < voiceCount) {
      var v = new alphaTab.audio.synth.synthesis.Voice();
      this._voicePool[i] = v;
      this._vNodes.AddLast(new alphaTab.audio.synth.synthesis.VoiceNode());
      this.FreeVoices.AddLast(v);
      ++i;
    }
    var this2 = new Array(17);
    this.Registry = this2;
    var i1 = 0;
    while (i1 < this.Registry.length) {
      var this3 = this.Registry;
      var this4 = new Array(128);
      this3[i1] = this4;
      ++i1;
    }
  };
  alphaTab.audio.synth.synthesis.VoiceManager.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'synthesis',
    'VoiceManager'
  ];
  alphaTab.audio.synth.synthesis.VoiceManager.prototype = {
    GetFreeVoice: function() {
      if (this.FreeVoices.Length > 0) {
        var voice = this.FreeVoices.First.Value;
        this.FreeVoices.RemoveFirst();
        return voice;
      }
      return this.StealQuietestVoice();
    },
    AddToRegistry: function(voice) {
      var node = this._vNodes.RemoveLast();
      node.Value = voice;
      node.Next = this.Registry[voice.VoiceParams.Channel][
        voice.VoiceParams.Note
      ];
      this.Registry[voice.VoiceParams.Channel][voice.VoiceParams.Note] = node;
    },
    RemoveFromRegistry: function(channel, note) {
      var node = this.Registry[channel][note];
      while (node != null) {
        this._vNodes.AddLast(node);
        node = node.Next;
      }
      this.Registry[channel][note] = null;
    },
    RemoveVoiceFromRegistry: function(voice) {
      var node = this.Registry[voice.VoiceParams.Channel][
        voice.VoiceParams.Note
      ];
      if (node == null) {
        return;
      }
      if (node.Value == voice) {
        this.Registry[voice.VoiceParams.Channel][voice.VoiceParams.Note] =
          node.Next;
        this._vNodes.AddLast(node);
      } else {
        var node2 = node;
        node = node.Next;
        while (node != null) {
          if (node.Value == voice) {
            node2.Next = node.Next;
            this._vNodes.AddLast(node);
            return;
          }
          node2 = node;
          node = node.Next;
        }
      }
    },
    ClearRegistry: function() {
      var node = this.ActiveVoices.First;
      while (node != null) {
        var vnode = this.Registry[node.Value.VoiceParams.Channel][
          node.Value.VoiceParams.Note
        ];
        while (vnode != null) {
          this._vNodes.AddLast(vnode);
          vnode = vnode.Next;
        }
        this.Registry[node.Value.VoiceParams.Channel][
          node.Value.VoiceParams.Note
        ] = null;
        node = node.get_Next();
      }
    },
    UnloadPatches: function() {
      var v = HxOverrides.iter(this._voicePool);
      while (v.hasNext()) {
        var v1 = v.next();
        v1.Configure(0, 0, 0, null, null);
        var current = this._vNodes.First;
        while (current != null) {
          current.Value.Value = null;
          current = current.get_Next();
        }
      }
    },
    StealQuietestVoice: function() {
      var voiceVolume = 1000.0;
      var quietest = null;
      var node = this.ActiveVoices.First;
      while (node != null) {
        if (node.Value.VoiceParams.State != 2) {
          var volume = node.Value.VoiceParams.get_CombinedVolume();
          if (volume < voiceVolume) {
            quietest = node;
            var this1 = volume;
            voiceVolume = this1;
          }
        }
        node = node.get_Next();
      }
      if (quietest == null) {
        quietest = this.ActiveVoices.First;
      }
      this.RemoveVoiceFromRegistry(quietest.Value);
      this.ActiveVoices.Remove(quietest);
      quietest.Value.VoiceParams.State = 0;
      return quietest.Value;
    },
    __class__: alphaTab.audio.synth.synthesis.VoiceManager
  };
  alphaTab.audio.synth.ds = {};
  alphaTab.audio.synth.ds.LinkedList = function() {
    this.First = null;
    this.Length = 0;
    this.Length = 0;
  };
  alphaTab.audio.synth.ds.LinkedList.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'ds',
    'LinkedList'
  ];
  alphaTab.audio.synth.ds.LinkedList.prototype = {
    AddFirst: function(value) {
      var node = new alphaTab.audio.synth.ds.LinkedListNode();
      node.Value = value;
      if (this.First == null) {
        this.InsertNodeToEmptyList(node);
      } else {
        this.InsertNodeBefore(this.First, node);
        this.First = node;
      }
    },
    AddLast: function(value) {
      var node = new alphaTab.audio.synth.ds.LinkedListNode();
      node.Value = value;
      if (this.First == null) {
        this.InsertNodeToEmptyList(node);
      } else {
        this.InsertNodeBefore(this.First, node);
      }
    },
    RemoveFirst: function() {
      if (this.First == null) {
        return null;
      }
      var v = this.First.Value;
      this.Remove(this.First);
      return v;
    },
    RemoveLast: function() {
      if (this.First == null) {
        return null;
      }
      var v = this.First._prev != null ? this.First._prev.Value : null;
      this.Remove(this.First._prev);
      return v;
    },
    Remove: function(n) {
      if (n._next == n) {
        this.First = null;
      } else {
        n._next._prev = n._prev;
        n._prev._next = n._next;
        if (this.First == n) {
          this.First = n._next;
        }
      }
      n.Invalidate();
      this.Length--;
    },
    InsertNodeBefore: function(node, newNode) {
      newNode._next = node;
      newNode._prev = node._prev;
      node._prev._next = newNode;
      node._prev = newNode;
      newNode._list = this;
      this.Length++;
    },
    InsertNodeToEmptyList: function(node) {
      node._next = node;
      node._prev = node;
      node._list = this;
      this.First = node;
      this.Length++;
    },
    __class__: alphaTab.audio.synth.ds.LinkedList
  };
  alphaTab.audio.synth.synthesis.Voice = function() {
    this.Patch = null;
    this.VoiceParams = null;
    this.VoiceParams = new alphaTab.audio.synth.synthesis.VoiceParameters();
  };
  alphaTab.audio.synth.synthesis.Voice.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'synthesis',
    'Voice'
  ];
  alphaTab.audio.synth.synthesis.Voice.prototype = {
    Start: function() {
      if (this.VoiceParams.State != 0) {
        return;
      }
      if (this.Patch.Start(this.VoiceParams)) {
        this.VoiceParams.State = 2;
      }
    },
    Stop: function() {
      if (this.VoiceParams.State != 2) {
        return;
      }
      this.VoiceParams.State = 1;
      this.Patch.Stop(this.VoiceParams);
    },
    StopImmediately: function() {
      this.VoiceParams.State = 0;
    },
    Process: function(startIndex, endIndex, isMuted) {
      if (this.VoiceParams.State == 0) {
        return;
      }
      this.Patch.Process(
        this.VoiceParams,
        startIndex,
        endIndex,
        isMuted,
        false
      );
    },
    ProcessSilent: function(startIndex, endIndex) {
      if (this.VoiceParams.State == 0) {
        return;
      }
      this.Patch.Process(this.VoiceParams, startIndex, endIndex, true, true);
    },
    Configure: function(channel, note, velocity, patch, synthParams) {
      this.VoiceParams.Reset();
      this.VoiceParams.Channel = channel;
      this.VoiceParams.Note = note;
      this.VoiceParams.Velocity = velocity;
      this.VoiceParams.SynthParams = synthParams;
      this.Patch = patch;
    },
    __class__: alphaTab.audio.synth.synthesis.Voice
  };
  alphaTab.audio.synth.synthesis.VoiceParameters = function() {
    this.mix1 = 0.0;
    this.mix2 = 0.0;
    this.Channel = 0;
    this.Note = 0;
    this.Velocity = 0;
    this.NoteOffPending = false;
    this.State = 0;
    this.PitchOffset = 0;
    this.VolOffset = 0.0;
    this.BlockBuffer = null;
    this.PData = null;
    this.SynthParams = null;
    this.GeneratorParams = null;
    this.Envelopes = null;
    this.Filters = null;
    this.Lfos = null;
    var this1 = new Float32Array(64);
    this.BlockBuffer = this1;
    var this2 = new Array(4);
    this.PData = this2;
    var this3 = new Array(4);
    this.GeneratorParams = this3;
    var this4 = new Array(4);
    this.Envelopes = this4;
    var this5 = new Array(4);
    this.Filters = this5;
    var this6 = new Array(4);
    this.Lfos = this6;
    var x = 0;
    while (x < 4) {
      this.GeneratorParams[
        x
      ] = new alphaTab.audio.synth.bank.components.generators.GeneratorParameters();
      this.Envelopes[x] = new alphaTab.audio.synth.bank.components.Envelope();
      this.Filters[x] = new alphaTab.audio.synth.bank.components.Filter();
      this.Lfos[x] = new alphaTab.audio.synth.bank.components.Lfo();
      ++x;
    }
  };
  alphaTab.audio.synth.synthesis.VoiceParameters.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'synthesis',
    'VoiceParameters'
  ];
  alphaTab.audio.synth.synthesis.VoiceParameters.prototype = {
    get_CombinedVolume: function() {
      return this.mix1 + this.mix2;
    },
    Reset: function() {
      this.NoteOffPending = false;
      this.PitchOffset = 0;
      this.VolOffset = 0;
      var i = 0;
      while (i < this.PData.length) {
        var this1 = this.PData;
        var this2 = new DataView(new ArrayBuffer(8));
        this1[i] = this2;
        ++i;
      }
      this.mix1 = 0;
      this.mix2 = 0;
    },
    MixMonoToMonoInterp: function(startIndex, volume) {
      var inc = (volume - this.mix1) / 64;
      var i = 0;
      while (i < this.BlockBuffer.length) {
        this.mix1 = this.mix1 + inc;
        var this1 = this.SynthParams.Synth.SampleBuffer;
        var index = startIndex + i;
        this1[index] =
          this.SynthParams.Synth.SampleBuffer[startIndex + i] +
          this.BlockBuffer[i] * this.mix1;
        ++i;
      }
      this.mix1 = volume;
    },
    MixMonoToStereoInterp: function(startIndex, leftVol, rightVol) {
      var inc_l = (leftVol - this.mix1) / 64;
      var inc_r = (rightVol - this.mix2) / 64;
      var i = 0;
      while (i < this.BlockBuffer.length) {
        this.mix1 = this.mix1 + inc_l;
        this.mix2 = this.mix2 + inc_r;
        var this1 = this.SynthParams.Synth.SampleBuffer;
        this1[startIndex] =
          this.SynthParams.Synth.SampleBuffer[startIndex] +
          this.BlockBuffer[i] * this.mix1;
        var this2 = this.SynthParams.Synth.SampleBuffer;
        var index = startIndex + 1;
        this2[index] =
          this.SynthParams.Synth.SampleBuffer[startIndex + 1] +
          this.BlockBuffer[i] * this.mix2;
        startIndex = startIndex + 2;
        ++i;
      }
      this.mix1 = leftVol;
      this.mix2 = rightVol;
    },
    MixStereoToStereoInterp: function(startIndex, leftVol, rightVol) {
      var inc_l = (leftVol - this.mix1) / 64;
      var inc_r = (rightVol - this.mix2) / 64;
      var i = 0;
      while (i < this.BlockBuffer.length) {
        this.mix1 = this.mix1 + inc_l;
        this.mix2 = this.mix2 + inc_r;
        var this1 = this.SynthParams.Synth.SampleBuffer;
        var index = startIndex + i;
        this1[index] =
          this.SynthParams.Synth.SampleBuffer[startIndex + i] +
          this.BlockBuffer[i] * this.mix1;
        ++i;
        var this2 = this.SynthParams.Synth.SampleBuffer;
        var index1 = startIndex + i;
        this2[index1] =
          this.SynthParams.Synth.SampleBuffer[startIndex + i] +
          this.BlockBuffer[i] * this.mix2;
        ++i;
      }
      this.mix1 = leftVol;
      this.mix2 = rightVol;
    },
    __class__: alphaTab.audio.synth.synthesis.VoiceParameters
  };
  alphaTab.audio.synth.bank.components.generators = {};
  alphaTab.audio.synth.bank.components.generators.GeneratorParameters = function() {
    this.Phase = 0.0;
    this.CurrentStart = 0.0;
    this.CurrentEnd = 0.0;
    this.CurrentState = 0;
    this.Phase = 0;
    this.CurrentStart = 0;
    this.CurrentEnd = 0;
    this.CurrentState = 0;
  };
  alphaTab.audio.synth.bank.components.generators.GeneratorParameters.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'components',
    'generators',
    'GeneratorParameters'
  ];
  alphaTab.audio.synth.bank.components.generators.GeneratorParameters.prototype = {
    QuickSetup: function(generator) {
      this.CurrentStart = generator.StartPhase;
      this.Phase = this.CurrentStart + generator.Offset;
      var _g = generator.LoopMode;
      switch (_g) {
        case 2:
        case 3:
          if (this.Phase >= generator.EndPhase) {
            this.CurrentState = 3;
          } else if (this.Phase >= generator.LoopEndPhase) {
            this.CurrentState = 2;
            this.CurrentEnd = generator.EndPhase;
          } else if (this.Phase >= generator.LoopStartPhase) {
            this.CurrentState = 1;
            this.CurrentEnd = generator.LoopEndPhase;
            this.CurrentStart = generator.LoopStartPhase;
          } else {
            this.CurrentState = 0;
            this.CurrentEnd = generator.LoopStartPhase;
          }
          break;
        default:
          this.CurrentEnd = generator.EndPhase;
          if (this.Phase >= this.CurrentEnd) {
            this.CurrentState = 3;
          } else {
            this.CurrentState = 2;
          }
      }
    },
    __class__:
      alphaTab.audio.synth.bank.components.generators.GeneratorParameters
  };
  alphaTab.audio.synth.bank.components.Envelope = function() {
    this._stages = null;
    this._index = 0;
    this._stage = null;
    this.Value = 0.0;
    this.CurrentStage = 0;
    this.Depth = 0.0;
    this.Value = 0;
    this.Depth = 0;
    var this1 = new Array(7);
    this._stages = this1;
    var x = 0;
    while (x < this._stages.length) {
      this._stages[
        x
      ] = new alphaTab.audio.synth.bank.components.EnvelopeStage();
      this._stages[x].Graph = alphaTab.audio.synth.util.Tables.EnvelopeTables(
        0
      );
      ++x;
    }
    this._stages[3].Reverse = true;
    this._stages[5].Reverse = true;
    this._stages[6].Time = 100000000;
    this.CurrentStage = 0;
    this._stage = this._stages[this.CurrentStage];
  };
  alphaTab.audio.synth.bank.components.Envelope.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'components',
    'Envelope'
  ];
  alphaTab.audio.synth.bank.components.Envelope.prototype = {
    QuickSetupSf2: function(
      sampleRate,
      note,
      keyNumToHold,
      keyNumToDecay,
      isVolumeEnvelope,
      envelopeInfo
    ) {
      this.Depth = envelopeInfo.Depth;
      this._stages[0].Offset = 0;
      this._stages[0].Scale = 0;
      var this1 = Math.max(0, sampleRate * envelopeInfo.DelayTime);
      this._stages[0].Time = this1;
      this._stages[1].Offset = envelopeInfo.StartLevel;
      this._stages[1].Scale = envelopeInfo.PeakLevel - envelopeInfo.StartLevel;
      var this2 = Math.max(0, sampleRate * envelopeInfo.AttackTime);
      this._stages[1].Time = this2;
      this._stages[1].Graph = alphaTab.audio.synth.util.Tables.EnvelopeTables(
        envelopeInfo.AttackGraph
      );
      this._stages[2].Offset = 0;
      this._stages[2].Scale = envelopeInfo.PeakLevel;
      var this3 =
        sampleRate *
        envelopeInfo.HoldTime *
        Math.pow(2, ((60 - note) * keyNumToHold) / 1200.0);
      this._stages[2].Time = Math.max(0, this3);
      this._stages[3].Offset = envelopeInfo.SustainLevel;
      this._stages[3].Scale =
        envelopeInfo.PeakLevel - envelopeInfo.SustainLevel;
      if (envelopeInfo.SustainLevel == envelopeInfo.PeakLevel) {
        this._stages[3].Time = 0;
      } else {
        var this4 =
          sampleRate *
          envelopeInfo.DecayTime *
          Math.pow(2, ((60 - note) * keyNumToDecay) / 1200.0);
        this._stages[3].Time = Math.max(0, this4);
      }
      this._stages[3].Graph = alphaTab.audio.synth.util.Tables.EnvelopeTables(
        envelopeInfo.DecayGraph
      );
      this._stages[4].Offset = 0;
      this._stages[4].Scale = envelopeInfo.SustainLevel;
      var this5 = sampleRate * envelopeInfo.SustainTime;
      this._stages[4].Time = this5;
      this._stages[5].Scale =
        this._stages[3].Time == 0 && this._stages[4].Time == 0
          ? envelopeInfo.PeakLevel
          : this._stages[4].Scale;
      if (isVolumeEnvelope) {
        this._stages[5].Offset = -100;
        this._stages[5].Scale = this._stages[5].Scale + 100;
        this._stages[6].Scale = -100;
      } else {
        this._stages[5].Offset = 0;
        this._stages[6].Scale = 0;
      }
      var tmp = this._stages[5];
      var this6 = Math.max(
        0,
        system.Convert.ToInt32_Single(sampleRate * envelopeInfo.ReleaseTime)
      );
      tmp.Time = this6;
      this._stages[5].Graph = alphaTab.audio.synth.util.Tables.EnvelopeTables(
        envelopeInfo.ReleaseGraph
      );
      this._index = 0;
      this.Value = 0;
      this.CurrentStage = 0;
      while (Math.abs(this._stages[this.CurrentStage].Time) < 0.01)
        this.CurrentStage++;
      this._stage = this._stages[this.CurrentStage];
    },
    Increment: function(samples) {
      while (true) {
        var neededSamples =
          system.Convert.ToInt32_Double(this._stage.Time) - this._index;
        if (neededSamples > samples) {
          this._index = this._index + samples;
          samples = 0;
        } else {
          this._index = 0;
          if (this.CurrentStage != 6) {
            while (true) {
              this._stage = this._stages[++this.CurrentStage | 0];
              if (!(this._stage.Time == 0)) {
                break;
              }
            }
          }
          samples = samples - neededSamples;
        }
        if (!(samples > 0)) {
          break;
        }
      }
      var i = system.Convert.ToInt32_Double(
        this._stage.Graph.length *
          (this._index / js.Boot.__cast(this._stage.Time, Float))
      );
      if (this._stage.Reverse) {
        var this1 = 1;
        this.Value =
          (this1 - this._stage.Graph[i]) * this._stage.Scale +
          this._stage.Offset;
      } else {
        this.Value =
          this._stage.Graph[i] * this._stage.Scale + this._stage.Offset;
      }
    },
    Release: function(lowerLimit) {
      if (this.Value <= lowerLimit) {
        this._index = 0;
        this.CurrentStage = 6;
        this._stage = this._stages[this.CurrentStage];
      } else if (this.CurrentStage < 5) {
        this._index = 0;
        this.CurrentStage = 5;
        this._stage = this._stages[this.CurrentStage];
        this._stage.Scale = this.Value;
      }
    },
    ReleaseSf2VolumeEnvelope: function() {
      if (this.Value <= -100) {
        this._index = 0;
        this.CurrentStage = 6;
        this._stage = this._stages[this.CurrentStage];
      } else if (this.CurrentStage < 5) {
        this._index = 0;
        this.CurrentStage = 5;
        this._stage = this._stages[this.CurrentStage];
        this._stage.Offset = -100;
        this._stage.Scale = 100 + this.Value;
      }
    },
    __class__: alphaTab.audio.synth.bank.components.Envelope
  };
  alphaTab.audio.synth.bank.components.EnvelopeStage = function() {
    this.Time = 0.0;
    this.Graph = null;
    this.Scale = 0.0;
    this.Offset = 0.0;
    this.Reverse = false;
    this.Time = 0;
    this.Graph = null;
    this.Scale = 0;
    this.Offset = 0;
    this.Reverse = false;
  };
  alphaTab.audio.synth.bank.components.EnvelopeStage.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'components',
    'EnvelopeStage'
  ];
  alphaTab.audio.synth.bank.components.EnvelopeStage.prototype = {
    __class__: alphaTab.audio.synth.bank.components.EnvelopeStage
  };
  alphaTab.audio.synth.util.Tables = function() {};
  alphaTab.audio.synth.util.Tables.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'util',
    'Tables'
  ];
  alphaTab.audio.synth.util.Tables.EnvelopeTables = function(index) {
    if (!alphaTab.audio.synth.util.Tables._isInitialized) {
      alphaTab.audio.synth.util.Tables.Init();
    }
    return alphaTab.audio.synth.util.Tables._envelopeTables[index];
  };
  alphaTab.audio.synth.util.Tables.SemitoneTable = function(index) {
    if (!alphaTab.audio.synth.util.Tables._isInitialized) {
      alphaTab.audio.synth.util.Tables.Init();
    }
    return alphaTab.audio.synth.util.Tables._semitoneTable[index];
  };
  alphaTab.audio.synth.util.Tables.CentTable = function(index) {
    if (!alphaTab.audio.synth.util.Tables._isInitialized) {
      alphaTab.audio.synth.util.Tables.Init();
    }
    return alphaTab.audio.synth.util.Tables._centTable[index];
  };
  alphaTab.audio.synth.util.Tables.SincTable = function(index) {
    if (!alphaTab.audio.synth.util.Tables._isInitialized) {
      alphaTab.audio.synth.util.Tables.Init();
    }
    return alphaTab.audio.synth.util.Tables._sincTable[index];
  };
  alphaTab.audio.synth.util.Tables.Init = function() {
    var EnvelopeSize = 64;
    var ExponentialCoeff = 0.09;
    var this1 = new Array(4);
    alphaTab.audio.synth.util.Tables._envelopeTables = this1;
    alphaTab.audio.synth.util.Tables._envelopeTables[0] = alphaTab.audio.synth.util.Tables.RemoveDenormals(
      alphaTab.audio.synth.util.Tables.CreateSustainTable(EnvelopeSize)
    );
    alphaTab.audio.synth.util.Tables._envelopeTables[1] = alphaTab.audio.synth.util.Tables.RemoveDenormals(
      alphaTab.audio.synth.util.Tables.CreateLinearTable(EnvelopeSize)
    );
    alphaTab.audio.synth.util.Tables._envelopeTables[2] = alphaTab.audio.synth.util.Tables.RemoveDenormals(
      alphaTab.audio.synth.util.Tables.CreateExponentialTable(
        EnvelopeSize,
        ExponentialCoeff
      )
    );
    alphaTab.audio.synth.util.Tables._envelopeTables[3] = alphaTab.audio.synth.util.Tables.RemoveDenormals(
      alphaTab.audio.synth.util.Tables.CreateSineTable(EnvelopeSize)
    );
    alphaTab.audio.synth.util.Tables._centTable = alphaTab.audio.synth.util.Tables.CreateCentTable();
    alphaTab.audio.synth.util.Tables._semitoneTable = alphaTab.audio.synth.util.Tables.CreateSemitoneTable();
    alphaTab.audio.synth.util.Tables._sincTable = alphaTab.audio.synth.util.Tables.CreateSincTable(
      16,
      64,
      0.43,
      alphaTab.audio.synth.util.Tables.HammingWindow
    );
    alphaTab.audio.synth.util.Tables._isInitialized = true;
  };
  alphaTab.audio.synth.util.Tables.CreateSquareTable = function(size, k) {
    var FourOverPi = 1.2732395447351641;
    var this1 = new Float32Array(size);
    var squaretable = this1;
    var inc = 1.0 / size;
    var phase = 0.0;
    var x = 0;
    while (x < size) {
      var value = 0.0;
      var i = 1;
      while (i < k + 1) {
        var twokminus1 = 2 * i - 1;
        value =
          value +
          Math.sin(2.0 * 3.14159265358979 * twokminus1 * phase) / twokminus1;
        ++i;
      }
      squaretable[x] = alphaTab.audio.synth.util.SynthHelper.ClampF(
        js.Boot.__cast(FourOverPi * value, Float),
        -1,
        1
      );
      phase = phase + inc;
      ++x;
    }
    return squaretable;
  };
  alphaTab.audio.synth.util.Tables.CreateCentTable = function() {
    var this1 = new Float32Array(201);
    var cents = this1;
    var x = 0;
    while (x < cents.length) {
      cents[x] = js.Boot.__cast(Math.pow(2.0, (x - 100.0) / 1200.0), Float);
      ++x;
    }
    return cents;
  };
  alphaTab.audio.synth.util.Tables.CreateSemitoneTable = function() {
    var this1 = new Float32Array(255);
    var table = this1;
    var x = 0;
    while (x < table.length) {
      table[x] = js.Boot.__cast(Math.pow(2.0, (x - 127.0) / 12.0), Float);
      ++x;
    }
    return table;
  };
  alphaTab.audio.synth.util.Tables.CreateSustainTable = function(size) {
    var this1 = new Float32Array(size);
    var table = this1;
    var x = 0;
    while (x < size) {
      table[x] = 1;
      ++x;
    }
    return table;
  };
  alphaTab.audio.synth.util.Tables.CreateLinearTable = function(size) {
    var this1 = new Float32Array(size);
    var table = this1;
    var x = 0;
    while (x < size) {
      table[x] = x / js.Boot.__cast(size - 1, Float);
      ++x;
    }
    return table;
  };
  alphaTab.audio.synth.util.Tables.CreateExponentialTable = function(
    size,
    coeff
  ) {
    coeff = alphaTab.audio.synth.util.SynthHelper.ClampF(coeff, 0.001, 0.9);
    var this1 = new Float32Array(size);
    var graph = this1;
    var val = 0.0;
    var x = 0;
    while (x < size) {
      graph[x] = js.Boot.__cast(val, Float);
      val = val + coeff * (1.5873015873015872 - val);
      ++x;
    }
    var x1 = 0;
    while (x1 < size) {
      graph[x1] = graph[x1] / graph[graph.length - 1];
      ++x1;
    }
    return graph;
  };
  alphaTab.audio.synth.util.Tables.CreateSineTable = function(size) {
    var this1 = new Float32Array(size);
    var graph = this1;
    var inc = js.Boot.__cast(4.7123889803846852, Float) / (size - 1);
    var phase = 0.0;
    var x = 0;
    while (x < size) {
      graph[x] = js.Boot.__cast(Math.abs(Math.sin(phase)), Float);
      phase = phase + inc;
      ++x;
    }
    return graph;
  };
  alphaTab.audio.synth.util.Tables.RemoveDenormals = function(data) {
    var x = 0;
    while (x < data.length) {
      if (Math.abs(data[x]) < 1e-38) {
        data[x] = 0;
      }
      ++x;
    }
    return data;
  };
  alphaTab.audio.synth.util.Tables.VonHannWindow = function(i, size) {
    return js.Boot.__cast(
      0.5 - 0.5 * Math.cos(2.0 * 3.14159265358979 * (0.5 + i / size)),
      Float
    );
  };
  alphaTab.audio.synth.util.Tables.HammingWindow = function(i, size) {
    return js.Boot.__cast(
      0.54 - 0.46 * Math.cos((2.0 * 3.14159265358979 * i) / size),
      Float
    );
  };
  alphaTab.audio.synth.util.Tables.BlackmanWindow = function(i, size) {
    var this1 = (12.56637061435916 * i) / size;
    return js.Boot.__cast(
      0.42659 -
        0.49656 * Math.cos((2.0 * 3.14159265358979 * i) / size) +
        0.076849 * Math.cos(this1),
      Float
    );
  };
  alphaTab.audio.synth.util.Tables.CreateSincTable = function(
    windowSize,
    resolution,
    cornerRatio,
    windowFunction
  ) {
    var subWindow = ((windowSize / 2) | 0) + 1;
    var this1 = new Float32Array(subWindow * resolution);
    var table = this1;
    var this2 = 2.0 * cornerRatio;
    var gain = this2;
    var x = 0;
    while (x < subWindow) {
      var y = 0;
      while (y < resolution) {
        var a = x + y / js.Boot.__cast(resolution, Float);
        var sinc = 2.0 * 3.14159265358979 * cornerRatio * a;
        if (Math.abs(sinc) > 0.00001) {
          sinc = Math.sin(sinc) / sinc;
        } else {
          sinc = 1.0;
        }
        var index = x * 64 + y;
        table[index] = js.Boot.__cast(
          gain * sinc * windowFunction(a, windowSize),
          Float
        );
        ++y;
      }
      ++x;
    }
    return table;
  };
  alphaTab.audio.synth.util.Tables.prototype = {
    __class__: alphaTab.audio.synth.util.Tables
  };
  alphaTab.audio.synth.bank.components.Filter = function() {
    this._a1 = 0.0;
    this._a2 = 0.0;
    this._b1 = 0.0;
    this._b2 = 0.0;
    this._m1 = 0.0;
    this._m2 = 0.0;
    this._m3 = 0.0;
    this._cutOff = 0.0;
    this._resonance = 0.0;
    this.FilterMethod = 0;
    this.CoeffNeedsUpdating = false;
    this._a1 = 0;
    this._a2 = 0;
    this._b1 = 0;
    this._b2 = 0;
    this._m1 = 0;
    this._m2 = 0;
    this._m3 = 0;
    this.FilterMethod = 0;
    this.set_CutOff(0);
    this.set_Resonance(0);
  };
  alphaTab.audio.synth.bank.components.Filter.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'components',
    'Filter'
  ];
  alphaTab.audio.synth.bank.components.Filter.prototype = {
    get_CutOff: function() {
      return this._cutOff;
    },
    set_CutOff: function(value) {
      this._cutOff = value;
      this.CoeffNeedsUpdating = true;
      return this.get_CutOff();
    },
    get_Resonance: function() {
      return this._resonance;
    },
    set_Resonance: function(value) {
      this._resonance = value;
      this.CoeffNeedsUpdating = true;
      return this.get_Resonance();
    },
    get_Enabled: function() {
      return this.FilterMethod != 0;
    },
    Disable: function() {
      this.FilterMethod = 0;
    },
    QuickSetup: function(sampleRate, note, velocity, filterInfo) {
      this.CoeffNeedsUpdating = false;
      var this1 = filterInfo.CutOff;
      this.set_CutOff(this1);
      var this2 = filterInfo.Resonance;
      this.set_Resonance(this2);
      this.FilterMethod = filterInfo.FilterMethod;
      this._a1 = 0;
      this._a2 = 0;
      this._b1 = 0;
      this._b2 = 0;
      this._m1 = 0;
      this._m2 = 0;
      this._m3 = 0;
      if (this.get_CutOff() <= 0 || this.get_Resonance() <= 0) {
        this.FilterMethod = 0;
      }
      if (this.FilterMethod != 0) {
        this.set_CutOff(
          this.get_CutOff() *
            alphaTab.audio.synth.util.SynthHelper.CentsToPitch(
              (note - filterInfo.RootKey) * filterInfo.KeyTrack +
                system.Convert.ToInt32_Single(velocity * filterInfo.VelTrack)
            )
        );
        this.UpdateCoefficients(sampleRate);
      }
    },
    ApplyFilter_Single: function(sample) {
      var _g = this.FilterMethod;
      switch (_g) {
        case 1:
        case 2:
          this._m3 = sample - this._a1 * this._m1 - this._a2 * this._m2;
          sample = this._b2 * (this._m3 + this._m2) + this._b1 * this._m1;
          this._m2 = this._m1;
          this._m1 = this._m3;
          return sample;
        case 3:
          this._m1 = this._m1 + this._a1 * (sample - this._m1);
          return this._m1;
        default:
          return 0;
      }
    },
    ApplyFilter_SampleArray: function(data) {
      var _g = this.FilterMethod;
      switch (_g) {
        case 1:
        case 2:
          var x = 0;
          while (x < data.length) {
            this._m3 = data[x] - this._a1 * this._m1 - this._a2 * this._m2;
            data[x] = this._b2 * (this._m3 + this._m2) + this._b1 * this._m1;
            this._m2 = this._m1;
            this._m1 = this._m3;
            ++x;
          }
          break;
        case 3:
          var x1 = 0;
          while (x1 < data.length) {
            this._m1 = this._m1 + this._a1 * (data[x1] - this._m1);
            data[x1] = this._m1;
            ++x1;
          }
          break;
        default:
      }
    },
    ApplyFilterInterp: function(data, sampleRate) {
      var ic = this.GenerateFilterCoeff(
        this.get_CutOff() / sampleRate,
        this.get_Resonance()
      );
      var a1_inc = (ic[0] - this._a1) / data.length;
      var a2_inc = (ic[1] - this._a2) / data.length;
      var b1_inc = (ic[2] - this._b1) / data.length;
      var b2_inc = (ic[3] - this._b2) / data.length;
      var _g = this.FilterMethod;
      switch (_g) {
        case 1:
        case 2:
          var x = 0;
          while (x < data.length) {
            this._a1 = this._a1 + a1_inc;
            this._a2 = this._a2 + a2_inc;
            this._b1 = this._b1 + b1_inc;
            this._b2 = this._b2 + b2_inc;
            this._m3 = data[x] - this._a1 * this._m1 - this._a2 * this._m2;
            data[x] = this._b2 * (this._m3 + this._m2) + this._b1 * this._m1;
            this._m2 = this._m1;
            this._m1 = this._m3;
            ++x;
          }
          this._a1 = ic[0];
          this._a2 = ic[1];
          this._b1 = ic[2];
          this._b2 = ic[3];
          break;
        case 3:
          var x1 = 0;
          while (x1 < data.length) {
            this._a1 = this._a1 + a1_inc;
            this._m1 = this._m1 + this._a1 * (data[x1] - this._m1);
            data[x1] = this._m1;
            ++x1;
          }
          this._a1 = ic[0];
          break;
        default:
      }
      this.CoeffNeedsUpdating = false;
    },
    UpdateCoefficients: function(sampleRate) {
      var coeff = this.GenerateFilterCoeff(
        this.get_CutOff() / sampleRate,
        this.get_Resonance()
      );
      this._a1 = coeff[0];
      this._a2 = coeff[1];
      this._b1 = coeff[2];
      this._b2 = coeff[3];
      this.CoeffNeedsUpdating = false;
    },
    GenerateFilterCoeff: function(fc, q) {
      fc = alphaTab.audio.synth.util.SynthHelper.ClampD(fc, 1e-38, 0.49);
      var this1 = new Float32Array(4);
      var coeff = this1;
      var _g = this.FilterMethod;
      switch (_g) {
        case 1:
          var w0 = 2.0 * 3.14159265358979 * fc;
          var cosw0 = Math.cos(w0);
          var alpha = Math.sin(w0) / (2.0 * q);
          var a0inv = 1.0 / (1.0 + alpha);
          coeff[0] = js.Boot.__cast(-2.0 * cosw0 * a0inv, Float);
          coeff[1] = js.Boot.__cast((1.0 - alpha) * a0inv, Float);
          coeff[2] = js.Boot.__cast(
            (1.0 - cosw0) * a0inv * (1.0 / Math.sqrt(q)),
            Float
          );
          var this2 = 0.5;
          coeff[3] = this._b1 * this2;
          break;
        case 2:
          var w01 = 2.0 * 3.14159265358979 * fc;
          var cosw01 = Math.cos(w01);
          var alpha1 = Math.sin(w01) / (2.0 * q);
          var a0inv1 = 1.0 / (1.0 + alpha1);
          var qinv = 1.0 / Math.sqrt(q);
          coeff[0] = js.Boot.__cast(-2.0 * cosw01 * a0inv1, Float);
          coeff[1] = js.Boot.__cast((1.0 - alpha1) * a0inv1, Float);
          coeff[2] = js.Boot.__cast((-1.0 - cosw01) * a0inv1 * qinv, Float);
          coeff[3] = js.Boot.__cast(
            (1.0 + cosw01) * a0inv1 * qinv * 0.5,
            Float
          );
          break;
        case 3:
          var this3 = 1.0;
          coeff[0] =
            this3 - js.Boot.__cast(Math.exp(-6.28318530717958 * fc), Float);
          break;
        default:
      }
      return coeff;
    },
    __class__: alphaTab.audio.synth.bank.components.Filter
  };
  alphaTab.audio.synth.bank.components.Lfo = function() {
    this._phase = 0.0;
    this._increment = 0.0;
    this._delayTime = 0;
    this._generator = null;
    this.Frequency = 0.0;
    this.CurrentState = 0;
    this.Value = 0.0;
    this.Depth = 0.0;
    this.CurrentState = 0;
    this._generator =
      alphaTab.audio.synth.bank.components.generators.DefaultGenerators.DefaultSine;
    this._delayTime = 0;
    this._increment = 0;
    this._phase = 0;
    this.Frequency = 0;
    this.CurrentState = 0;
    this.Value = 0;
    this.Depth = 0;
  };
  alphaTab.audio.synth.bank.components.Lfo.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'components',
    'Lfo'
  ];
  alphaTab.audio.synth.bank.components.Lfo.prototype = {
    QuickSetup: function(sampleRate, lfoInfo) {
      this._generator = lfoInfo.Generator;
      this._delayTime = system.Convert.ToInt32_Single(
        sampleRate * lfoInfo.DelayTime
      );
      this.Frequency = lfoInfo.Frequency;
      this._increment = (this._generator.Period * this.Frequency) / sampleRate;
      var this1 = lfoInfo.Depth;
      this.Depth = this1;
      this.Reset();
    },
    Increment: function(amount) {
      if (this.CurrentState == 0) {
        this._phase = this._phase - amount;
        while (this._phase <= 0.0) {
          this._phase =
            this._generator.LoopStartPhase + this._increment * -this._phase;
          var this1 = this._generator.GetValue(this._phase);
          this.Value = this1;
          this.CurrentState = 1;
        }
      } else {
        this._phase = this._phase + this._increment * amount;
        while (this._phase >= this._generator.LoopEndPhase)
          this._phase =
            this._generator.LoopStartPhase +
            ((this._phase - this._generator.LoopEndPhase) %
              (this._generator.LoopEndPhase - this._generator.LoopStartPhase));
        var this2 = this._generator.GetValue(this._phase);
        this.Value = this2;
      }
    },
    Reset: function() {
      this.Value = 0;
      if (this._delayTime > 0) {
        var this1 = this._delayTime;
        this._phase = this1;
        this.CurrentState = 0;
      } else {
        this._phase = 0.0;
        this.CurrentState = 1;
      }
    },
    __class__: alphaTab.audio.synth.bank.components.Lfo
  };
  alphaTab.audio.synth.bank.descriptors = {};
  alphaTab.audio.synth.bank.descriptors.GeneratorDescriptor = function() {
    this.LoopMethod = 0;
    this.SamplerType = 0;
    this.AssetName = null;
    this.EndPhase = 0.0;
    this.StartPhase = 0.0;
    this.LoopEndPhase = 0.0;
    this.LoopStartPhase = 0.0;
    this.Offset = 0.0;
    this.Period = 0.0;
    this.RootKey = 0;
    this.KeyTrack = 0;
    this.VelTrack = 0;
    this.Tune = 0;
    this.LoopMethod = 0;
    this.SamplerType = 0;
    this.AssetName = 'null';
    this.EndPhase = -1;
    this.StartPhase = -1;
    this.LoopEndPhase = -1;
    this.LoopStartPhase = -1;
    this.Offset = 0;
    this.Period = -1;
    this.RootKey = -1 | 0;
    this.KeyTrack = 100;
    this.VelTrack = 0;
    this.Tune = 0;
  };
  alphaTab.audio.synth.bank.descriptors.GeneratorDescriptor.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'descriptors',
    'GeneratorDescriptor'
  ];
  alphaTab.audio.synth.bank.descriptors.GeneratorDescriptor.prototype = {
    __class__: alphaTab.audio.synth.bank.descriptors.GeneratorDescriptor
  };
  alphaTab.audio.synth.bank.components.generators.Generator = function(
    description
  ) {
    this.LoopMode = 0;
    this.LoopStartPhase = 0.0;
    this.LoopEndPhase = 0.0;
    this.StartPhase = 0.0;
    this.EndPhase = 0.0;
    this.Offset = 0.0;
    this.Period = 0.0;
    this.Frequency = 0.0;
    this.RootKey = 0;
    this.KeyTrack = 0;
    this.VelocityTrack = 0;
    this.Tune = 0;
    this.LoopMode = description.LoopMethod;
    this.LoopStartPhase = description.LoopStartPhase;
    this.LoopEndPhase = description.LoopEndPhase;
    this.StartPhase = description.StartPhase;
    this.EndPhase = description.EndPhase;
    this.Offset = description.Offset;
    this.Period = description.Period;
    this.Frequency = 0;
    this.RootKey = description.RootKey;
    this.KeyTrack = description.KeyTrack;
    this.VelocityTrack = description.VelTrack;
    this.Tune = description.Tune;
  };
  alphaTab.audio.synth.bank.components.generators.Generator.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'components',
    'generators',
    'Generator'
  ];
  alphaTab.audio.synth.bank.components.generators.Generator.prototype = {
    Release: function(generatorParams) {
      if (this.LoopMode == 3) {
        generatorParams.CurrentState = 2;
        generatorParams.CurrentStart = this.StartPhase;
        generatorParams.CurrentEnd = this.EndPhase;
      }
    },
    GetValue: function(phase) {
      throw new js._Boot.HaxeError('abstract');
    },
    GetValues: function(generatorParams, blockBuffer, increment) {
      var proccessed = 0;
      while (true) {
        var samplesAvailable = system.Convert.ToInt32_Double(
          Math.ceil(
            (generatorParams.CurrentEnd - generatorParams.Phase) / increment
          )
        );
        if (samplesAvailable > blockBuffer.length - proccessed) {
          while (proccessed < blockBuffer.length) {
            var index = proccessed++;
            blockBuffer[index] = this.GetValue(generatorParams.Phase);
            generatorParams.Phase = generatorParams.Phase + increment;
          }
        } else {
          var endProccessed = proccessed + samplesAvailable;
          while (proccessed < endProccessed) {
            var index1 = proccessed++;
            blockBuffer[index1] = this.GetValue(generatorParams.Phase);
            generatorParams.Phase = generatorParams.Phase + increment;
          }
          var _g = generatorParams.CurrentState;
          switch (_g) {
            case 0:
              generatorParams.CurrentStart = this.LoopStartPhase;
              generatorParams.CurrentEnd = this.LoopEndPhase;
              generatorParams.CurrentState = 1;
              break;
            case 1:
              generatorParams.Phase =
                generatorParams.Phase +
                (generatorParams.CurrentStart - generatorParams.CurrentEnd);
              break;
            case 2:
              generatorParams.CurrentState = 3;
              while (proccessed < blockBuffer.length) {
                var index2 = proccessed++;
                blockBuffer[index2] = 0;
              }
              break;
            default:
          }
        }
        if (!(proccessed < blockBuffer.length)) {
          break;
        }
      }
    },
    __class__: alphaTab.audio.synth.bank.components.generators.Generator
  };
  alphaTab.audio.synth.bank.components.generators.SawGenerator = function(
    description
  ) {
    alphaTab.audio.synth.bank.components.generators.Generator.call(
      this,
      description
    );
    if (this.EndPhase < 0) {
      this.EndPhase = 1;
    }
    if (this.StartPhase < 0) {
      this.StartPhase = 0;
    }
    if (this.LoopEndPhase < 0) {
      this.LoopEndPhase = this.EndPhase;
    }
    if (this.LoopStartPhase < 0) {
      this.LoopStartPhase = this.StartPhase;
    }
    if (this.Period < 0) {
      this.Period = 1;
    }
    if (this.RootKey < 0) {
      this.RootKey = 69;
    }
    this.Frequency = 440;
  };
  alphaTab.audio.synth.bank.components.generators.SawGenerator.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'components',
    'generators',
    'SawGenerator'
  ];
  alphaTab.audio.synth.bank.components.generators.SawGenerator.__super__ =
    alphaTab.audio.synth.bank.components.generators.Generator;
  alphaTab.audio.synth.bank.components.generators.SawGenerator.prototype = $extend(
    alphaTab.audio.synth.bank.components.generators.Generator.prototype,
    {
      GetValue: function(phase) {
        return js.Boot.__cast(2.0 * (phase - Math.floor(phase + 0.5)), Float);
      },
      __class__: alphaTab.audio.synth.bank.components.generators.SawGenerator
    }
  );
  alphaTab.audio.synth.bank.components.generators.SineGenerator = function(
    description
  ) {
    alphaTab.audio.synth.bank.components.generators.Generator.call(
      this,
      description
    );
    if (this.EndPhase < 0) {
      this.EndPhase = 2.0 * 3.14159265358979;
    }
    if (this.StartPhase < 0) {
      this.StartPhase = 0;
    }
    if (this.LoopEndPhase < 0) {
      this.LoopEndPhase = this.EndPhase;
    }
    if (this.LoopStartPhase < 0) {
      this.LoopStartPhase = this.StartPhase;
    }
    if (this.Period < 0) {
      this.Period = 2.0 * 3.14159265358979;
    }
    if (this.RootKey < 0) {
      this.RootKey = 69;
    }
    this.Frequency = 440;
  };
  alphaTab.audio.synth.bank.components.generators.SineGenerator.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'components',
    'generators',
    'SineGenerator'
  ];
  alphaTab.audio.synth.bank.components.generators.SineGenerator.__super__ =
    alphaTab.audio.synth.bank.components.generators.Generator;
  alphaTab.audio.synth.bank.components.generators.SineGenerator.prototype = $extend(
    alphaTab.audio.synth.bank.components.generators.Generator.prototype,
    {
      GetValue: function(phase) {
        return js.Boot.__cast(Math.sin(phase), Float);
      },
      __class__: alphaTab.audio.synth.bank.components.generators.SineGenerator
    }
  );
  alphaTab.audio.synth.bank.components.generators.SquareGenerator = function(
    description
  ) {
    alphaTab.audio.synth.bank.components.generators.Generator.call(
      this,
      description
    );
    if (this.EndPhase < 0) {
      this.EndPhase = 2.0 * 3.14159265358979;
    }
    if (this.StartPhase < 0) {
      this.StartPhase = 0;
    }
    if (this.LoopEndPhase < 0) {
      this.LoopEndPhase = this.EndPhase;
    }
    if (this.LoopStartPhase < 0) {
      this.LoopStartPhase = this.StartPhase;
    }
    if (this.Period < 0) {
      this.Period = 2.0 * 3.14159265358979;
    }
    if (this.RootKey < 0) {
      this.RootKey = 69;
    }
    this.Frequency = 440;
  };
  alphaTab.audio.synth.bank.components.generators.SquareGenerator.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'components',
    'generators',
    'SquareGenerator'
  ];
  alphaTab.audio.synth.bank.components.generators.SquareGenerator.__super__ =
    alphaTab.audio.synth.bank.components.generators.Generator;
  alphaTab.audio.synth.bank.components.generators.SquareGenerator.prototype = $extend(
    alphaTab.audio.synth.bank.components.generators.Generator.prototype,
    {
      GetValue: function(phase) {
        var v = Math.sin(phase);
        var this1 = v < 0 ? -1 : v > 0 ? 1 : 0;
        return this1;
      },
      __class__: alphaTab.audio.synth.bank.components.generators.SquareGenerator
    }
  );
  alphaTab.audio.synth.bank.components.generators.TriangleGenerator = function(
    description
  ) {
    alphaTab.audio.synth.bank.components.generators.Generator.call(
      this,
      description
    );
    if (this.EndPhase < 0) {
      this.EndPhase = 1.25;
    }
    if (this.StartPhase < 0) {
      this.StartPhase = 0.25;
    }
    if (this.LoopEndPhase < 0) {
      this.LoopEndPhase = this.EndPhase;
    }
    if (this.LoopStartPhase < 0) {
      this.LoopStartPhase = this.StartPhase;
    }
    if (this.Period < 0) {
      this.Period = 1;
    }
    if (this.RootKey < 0) {
      this.RootKey = 69;
    }
    this.Frequency = 440;
  };
  alphaTab.audio.synth.bank.components.generators.TriangleGenerator.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'components',
    'generators',
    'TriangleGenerator'
  ];
  alphaTab.audio.synth.bank.components.generators.TriangleGenerator.__super__ =
    alphaTab.audio.synth.bank.components.generators.Generator;
  alphaTab.audio.synth.bank.components.generators.TriangleGenerator.prototype = $extend(
    alphaTab.audio.synth.bank.components.generators.Generator.prototype,
    {
      GetValue: function(phase) {
        return js.Boot.__cast(
          Math.abs(phase - Math.floor(phase + 0.5)) * 4.0 - 1.0,
          Float
        );
      },
      __class__:
        alphaTab.audio.synth.bank.components.generators.TriangleGenerator
    }
  );
  alphaTab.audio.synth.bank.components.generators.DefaultGenerators = function() {};
  alphaTab.audio.synth.bank.components.generators.DefaultGenerators.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'components',
    'generators',
    'DefaultGenerators'
  ];
  alphaTab.audio.synth.bank.components.generators.DefaultGenerators.prototype = {
    __class__: alphaTab.audio.synth.bank.components.generators.DefaultGenerators
  };
  alphaTab.audio.synth.synthesis.VoiceNode = function() {
    this.Value = null;
    this.Next = null;
  };
  alphaTab.audio.synth.synthesis.VoiceNode.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'synthesis',
    'VoiceNode'
  ];
  alphaTab.audio.synth.synthesis.VoiceNode.prototype = {
    __class__: alphaTab.audio.synth.synthesis.VoiceNode
  };
  alphaTab.audio.synth.MidiFileSequencer = function(synthesizer) {
    this._synthesizer = null;
    this._tempoChanges = null;
    this._firstProgramEventPerChannel = null;
    this._synthData = null;
    this._division = 0;
    this._eventIndex = 0;
    this._currentTime = 0.0;
    this._playbackRange = null;
    this._playbackRangeStartTime = 0.0;
    this._playbackRangeEndTime = 0.0;
    this._endTime = 0.0;
    this.IsLooping = false;
    this.EndTick = 0;
    this.PlaybackSpeed = 0.0;
    this._synthesizer = synthesizer;
    var this1 = {};
    this._firstProgramEventPerChannel = this1;
    var this2 = [];
    this._tempoChanges = this2;
    this.PlaybackSpeed = 1;
  };
  alphaTab.audio.synth.MidiFileSequencer.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'MidiFileSequencer'
  ];
  alphaTab.audio.synth.MidiFileSequencer.prototype = {
    get_PlaybackRange: function() {
      return this._playbackRange;
    },
    set_PlaybackRange: function(value) {
      this._playbackRange = value;
      if (value != null) {
        this._playbackRangeStartTime = this.TickPositionToTimePositionWithSpeed(
          value.StartTick,
          1
        );
        this._playbackRangeEndTime = this.TickPositionToTimePositionWithSpeed(
          value.EndTick,
          1
        );
      }
      return this.get_PlaybackRange();
    },
    get_EndTime: function() {
      return this._endTime / this.PlaybackSpeed;
    },
    Seek: function(timePosition) {
      timePosition = timePosition * this.PlaybackSpeed;
      if (this.get_PlaybackRange() != null) {
        if (timePosition < this._playbackRangeStartTime) {
          timePosition = this._playbackRangeStartTime;
        } else if (timePosition > this._playbackRangeEndTime) {
          timePosition = this._playbackRangeEndTime;
        }
      }
      timePosition = timePosition - 25;
      if (timePosition < 0) {
        timePosition = 0;
      }
      if (timePosition > this._currentTime) {
        this.SilentProcess(timePosition - this._currentTime);
      } else if (timePosition < this._currentTime) {
        this._currentTime = 0;
        this._eventIndex = 0;
        this._synthesizer.NoteOffAll(true);
        this._synthesizer.ResetPrograms();
        this._synthesizer.ResetSynthControls();
        this.SilentProcess(timePosition);
      }
    },
    SilentProcess: function(milliseconds) {
      if (milliseconds <= 0) {
        return;
      }
      var start = Date.now();
      var finalTime = this._currentTime + milliseconds;
      while (this._currentTime < finalTime)
        if (this.FillMidiEventQueueLimited(finalTime - this._currentTime)) {
          this._synthesizer.SynthesizeSilent();
        }
      var duration = Date.now() - start;
      alphaTab.util.Logger.Debug(
        'Sequencer',
        'Silent seek finished in ' + duration + 'ms',
        null
      );
    },
    LoadMidi: function(midiFile) {
      var this1 = [];
      this._tempoChanges = this1;
      this._division = midiFile.Division;
      this._eventIndex = 0;
      this._currentTime = 0;
      var this2 = [];
      this._synthData = this2;
      var bpm = 120;
      var absTick = 0;
      var absTime = 0.0;
      var metronomeLength = 0;
      var metronomeTick = 0;
      var metronomeTime = 0.0;
      var previousTick = 0;
      var mEvent = $iterator(midiFile.Events)();
      while (mEvent.hasNext()) {
        var mEvent1 = mEvent.next();
        var synthData = new alphaTab.audio.synth.synthesis.SynthEvent(
          this._synthData.length,
          mEvent1
        );
        this._synthData.push(synthData);
        var deltaTick = mEvent1.Tick - previousTick;
        absTick = absTick + deltaTick;
        absTime = absTime + deltaTick * (60000.0 / (bpm * midiFile.Division));
        synthData.Time = absTime;
        previousTick = mEvent1.Tick;
        if (mEvent1.get_Command() == 255 && mEvent1.get_Data1() == 81) {
          var meta = js.Boot.__cast(
            mEvent1,
            alphaTab.audio.synth.midi.event.MetaNumberEvent
          );
          bpm = 60000000 / js.Boot.__cast(meta.Value, Float);
          this._tempoChanges.push(
            new alphaTab.audio.synth.MidiFileSequencerTempoChange(
              bpm,
              absTick,
              system.Convert.ToInt32_Double(absTime)
            )
          );
        } else if (mEvent1.get_Command() == 255 && mEvent1.get_Data1() == 88) {
          var meta1 = js.Boot.__cast(
            mEvent1,
            alphaTab.audio.synth.midi.event.MetaDataEvent
          );
          var this3 = meta1.Data[1];
          var timeSignatureDenominator = system.Convert.ToInt32_Double(
            Math.pow(2, this3)
          );
          metronomeLength = system.Convert.ToInt32_Double(
            this._division * (4.0 / timeSignatureDenominator)
          );
        } else if (mEvent1.get_Command() == 192) {
          var channel = mEvent1.get_Channel();
          if (!this._firstProgramEventPerChannel.hasOwnProperty(channel)) {
            this._firstProgramEventPerChannel[channel] = synthData;
          }
        }
        if (metronomeLength > 0) {
          while (metronomeTick < absTick) {
            var metronome = alphaTab.audio.synth.synthesis.SynthEvent.NewMetronomeEvent(
              this._synthData.length,
              metronomeLength
            );
            this._synthData.push(metronome);
            metronome.Time = metronomeTime;
            metronomeTick = metronomeTick + metronomeLength;
            metronomeTime =
              metronomeTime +
              metronomeLength * (60000.0 / (bpm * midiFile.Division));
          }
        }
      }
      var comparison = function(a, b) {
        if (a.Time > b.Time) {
          return 1;
        } else if (a.Time < b.Time) {
          return -1;
        }
        return a.EventIndex - b.EventIndex;
      };
      this._synthData.sort(function(a1, b1) {
        return comparison(a1, b1);
      });
      this._endTime = absTime;
      this.EndTick = absTick;
    },
    FillMidiEventQueue: function() {
      return this.FillMidiEventQueueLimited(-1);
    },
    FillMidiEventQueueLimited: function(maxMilliseconds) {
      var millisecondsPerBuffer =
        (this._synthesizer.MicroBufferSize /
          js.Boot.__cast(this._synthesizer.SampleRate, Float)) *
        1000 *
        this.PlaybackSpeed;
      if (maxMilliseconds > 0 && maxMilliseconds < millisecondsPerBuffer) {
        millisecondsPerBuffer = maxMilliseconds;
      }
      var anyEventsDispatched = false;
      var i = 0;
      while (i < this._synthesizer.MicroBufferCount) {
        this._currentTime = this._currentTime + millisecondsPerBuffer;
        while (
          this._eventIndex < this._synthData.length &&
          this._synthData[this._eventIndex].Time < this._currentTime
        ) {
          this._synthesizer.DispatchEvent(i, this._synthData[this._eventIndex]);
          this._eventIndex++;
          anyEventsDispatched = true;
        }
        ++i;
      }
      return anyEventsDispatched;
    },
    TickPositionToTimePosition: function(tickPosition) {
      return this.TickPositionToTimePositionWithSpeed(
        tickPosition,
        this.PlaybackSpeed
      );
    },
    TimePositionToTickPosition: function(timePosition) {
      return this.TimePositionToTickPositionWithSpeed(
        timePosition,
        this.PlaybackSpeed
      );
    },
    TickPositionToTimePositionWithSpeed: function(tickPosition, playbackSpeed) {
      var timePosition = 0.0;
      var bpm = 120.0;
      var lastChange = 0;
      var i = 0;
      while (i < this._tempoChanges.length) {
        var c = this._tempoChanges[i];
        if (tickPosition < c.Ticks) {
          break;
        }
        var this1 = c.Time;
        timePosition = this1;
        bpm = c.Bpm;
        lastChange = c.Ticks;
        ++i;
      }
      tickPosition = tickPosition - lastChange;
      timePosition =
        timePosition + tickPosition * (60000.0 / (bpm * this._division));
      return timePosition / playbackSpeed;
    },
    TimePositionToTickPositionWithSpeed: function(timePosition, playbackSpeed) {
      timePosition = timePosition * playbackSpeed;
      var ticks = 0;
      var bpm = 120.0;
      var lastChange = 0;
      var i = 0;
      while (i < this._tempoChanges.length) {
        var c = this._tempoChanges[i];
        if (timePosition < c.Time) {
          break;
        }
        ticks = c.Ticks;
        bpm = c.Bpm;
        lastChange = c.Time;
        ++i;
      }
      timePosition = timePosition - lastChange;
      ticks =
        ticks +
        system.Convert.ToInt32_Double(
          timePosition / (60000.0 / (bpm * this._division))
        );
      return ticks + 1;
    },
    add_Finished: function(value) {
      this.Finished = system._EventAction.EventAction_Impl_.add(
        this.Finished,
        value
      );
    },
    remove_Finished: function(value) {
      this.Finished = system._EventAction.EventAction_Impl_.sub(
        this.Finished,
        value
      );
    },
    OnFinished: function() {
      var _e = this.Finished;
      var finished = function() {
        system._EventAction.EventAction_Impl_.Invoke(_e);
      };
      if (finished != null) {
        finished();
      }
    },
    CheckForStop: function() {
      if (
        this.get_PlaybackRange() == null &&
        this._currentTime >= this._endTime
      ) {
        this._currentTime = 0;
        this._eventIndex = 0;
        this._synthesizer.NoteOffAll(true);
        this._synthesizer.ResetPrograms();
        this._synthesizer.ResetSynthControls();
        this.OnFinished();
      } else if (
        this.get_PlaybackRange() != null &&
        this._currentTime >= this._playbackRangeEndTime
      ) {
        var this1 = this.get_PlaybackRange().StartTick;
        this._currentTime = this1;
        this._eventIndex = 0;
        this._synthesizer.NoteOffAll(true);
        this._synthesizer.ResetPrograms();
        this._synthesizer.ResetSynthControls();
        this.OnFinished();
      }
    },
    SetChannelProgram: function(channel, program) {
      if (this._firstProgramEventPerChannel.hasOwnProperty(channel)) {
        this._firstProgramEventPerChannel[channel].Event.set_Data1(program);
      }
    },
    __class__: alphaTab.audio.synth.MidiFileSequencer
  };
  alphaTab.rendering = {};
  alphaTab.rendering.layout = {};
  alphaTab.rendering.layout.ScoreLayout = function(renderer) {
    this._barRendererLookup = null;
    this.Renderer = null;
    this.Width = 0.0;
    this.Height = 0.0;
    this.ScoreInfoGlyphs = null;
    this.ChordDiagrams = null;
    this.TuningGlyph = null;
    this.FirstBarIndex = 0;
    this.LastBarIndex = 0;
    this.Renderer = renderer;
    var this1 = {};
    this._barRendererLookup = this1;
  };
  alphaTab.rendering.layout.ScoreLayout.__name__ = [
    'alphaTab',
    'rendering',
    'layout',
    'ScoreLayout'
  ];
  alphaTab.rendering.layout.ScoreLayout.prototype = {
    get_Name: function() {
      throw new js._Boot.HaxeError('abstract');
    },
    get_SupportsResize: function() {
      throw new js._Boot.HaxeError('abstract');
    },
    Resize: function() {
      throw new js._Boot.HaxeError('abstract');
    },
    LayoutAndRender: function() {
      var score = this.Renderer.Score;
      var startIndex = this.Renderer.Settings.Layout.Get('start', 1);
      --startIndex;
      startIndex = Math.min(
        score.MasterBars.length - 1,
        Math.max(0, startIndex)
      );
      this.FirstBarIndex = startIndex;
      var endBarIndex = this.Renderer.Settings.Layout.Get(
        'count',
        score.MasterBars.length
      );
      if (endBarIndex < 0) {
        endBarIndex = score.MasterBars.length;
      }
      endBarIndex = startIndex + endBarIndex - 1;
      endBarIndex = Math.min(
        score.MasterBars.length - 1,
        Math.max(0, endBarIndex)
      );
      this.LastBarIndex = endBarIndex;
      this.CreateScoreInfoGlyphs();
      this.DoLayoutAndRender();
    },
    DoLayoutAndRender: function() {
      throw new js._Boot.HaxeError('abstract');
    },
    CreateScoreInfoGlyphs: function() {
      alphaTab.util.Logger.Info(
        'ScoreLayout',
        'Creating score info glyphs',
        null
      );
      var flags = this.Renderer.Settings.Layout.Get('hideInfo', false)
        ? 0
        : 511;
      var score = this.Renderer.Score;
      var res = this.Renderer.Settings.RenderingResources;
      var this1 = {};
      this.ScoreInfoGlyphs = this1;
      var tmp;
      var s = score.Title;
      if (!(s == null || s.length == 0)) {
        tmp = (flags & 1) != 0;
      } else {
        tmp = false;
      }
      if (tmp) {
        this.ScoreInfoGlyphs[1] = new alphaTab.rendering.glyphs.TextGlyph(
          0,
          0,
          score.Title,
          res.TitleFont,
          1
        );
      }
      var tmp1;
      var s1 = score.SubTitle;
      if (!(s1 == null || s1.length == 0)) {
        tmp1 = (flags & 2) != 0;
      } else {
        tmp1 = false;
      }
      if (tmp1) {
        this.ScoreInfoGlyphs[2] = new alphaTab.rendering.glyphs.TextGlyph(
          0,
          0,
          score.SubTitle,
          res.SubTitleFont,
          1
        );
      }
      var tmp2;
      var s2 = score.Artist;
      if (!(s2 == null || s2.length == 0)) {
        tmp2 = (flags & 4) != 0;
      } else {
        tmp2 = false;
      }
      if (tmp2) {
        this.ScoreInfoGlyphs[4] = new alphaTab.rendering.glyphs.TextGlyph(
          0,
          0,
          score.Artist,
          res.SubTitleFont,
          1
        );
      }
      var tmp3;
      var s3 = score.Album;
      if (!(s3 == null || s3.length == 0)) {
        tmp3 = (flags & 8) != 0;
      } else {
        tmp3 = false;
      }
      if (tmp3) {
        this.ScoreInfoGlyphs[8] = new alphaTab.rendering.glyphs.TextGlyph(
          0,
          0,
          score.Album,
          res.SubTitleFont,
          1
        );
      }
      var tmp4;
      var tmp5;
      var s4 = score.Music;
      if (!(s4 == null || s4.length == 0)) {
        tmp5 = score.Music == score.Words;
      } else {
        tmp5 = false;
      }
      if (tmp5) {
        tmp4 = (flags & 64) != 0;
      } else {
        tmp4 = false;
      }
      if (tmp4) {
        this.ScoreInfoGlyphs[64] = new alphaTab.rendering.glyphs.TextGlyph(
          0,
          0,
          'Music and Words by ' + score.Words,
          res.WordsFont,
          1
        );
      } else {
        var tmp6;
        var s5 = score.Music;
        if (!(s5 == null || s5.length == 0)) {
          tmp6 = (flags & 32) != 0;
        } else {
          tmp6 = false;
        }
        if (tmp6) {
          this.ScoreInfoGlyphs[32] = new alphaTab.rendering.glyphs.TextGlyph(
            0,
            0,
            'Music by ' + score.Music,
            res.WordsFont,
            2
          );
        }
        var tmp7;
        var s6 = score.Words;
        if (!(s6 == null || s6.length == 0)) {
          tmp7 = (flags & 16) != 0;
        } else {
          tmp7 = false;
        }
        if (tmp7) {
          this.ScoreInfoGlyphs[16] = new alphaTab.rendering.glyphs.TextGlyph(
            0,
            0,
            'Words by ' + score.Words,
            res.WordsFont,
            0
          );
        }
      }
      if (!this.Renderer.Settings.Layout.Get('hideTuning', false)) {
        var staffWithTuning = null;
        var track = HxOverrides.iter(this.Renderer.Tracks);
        while (track.hasNext()) {
          var track1 = track.next();
          var staff = $iterator(track1.Staves)();
          while (staff.hasNext()) {
            var staff1 = staff.next();
            if (
              !staff1.IsPercussion &&
              staff1.get_IsStringed() &&
              staff1.Tuning.length > 0
            ) {
              staffWithTuning = staff1;
              break;
            }
          }
          if (staffWithTuning != null) {
            break;
          }
        }
        if (staffWithTuning != null) {
          var tuning = alphaTab.model.Tuning.FindTuning(staffWithTuning.Tuning);
          if (tuning != null) {
            this.TuningGlyph = new alphaTab.rendering.glyphs.TuningGlyph(
              0,
              0,
              this.get_Scale(),
              res,
              tuning
            );
          }
        }
      }
      if (!this.Renderer.Settings.Layout.Get('hideChordDiagram', false)) {
        this.ChordDiagrams = new alphaTab.rendering.glyphs.ChordDiagramContainerGlyph(
          0,
          0
        );
        this.ChordDiagrams.Renderer = new alphaTab.rendering.BarRendererBase(
          this.Renderer,
          null
        );
        var this2 = {};
        var chords = this2;
        var track2 = HxOverrides.iter(this.Renderer.Tracks);
        while (track2.hasNext()) {
          var track3 = track2.next();
          var staff2 = $iterator(track3.Staves)();
          while (staff2.hasNext()) {
            var staff3 = staff2.next();
            var this3 = staff3.Chords;
            var chordId = $iterator(Object.keys(this3))();
            while (chordId.hasNext()) {
              var chordId1 = chordId.next();
              if (!chords.hasOwnProperty(chordId1)) {
                var chord = staff3.Chords[chordId1];
                if (chord.ShowDiagram) {
                  chords[chordId1] = chord;
                  this.ChordDiagrams.AddChord(chord);
                }
              }
            }
          }
        }
      }
    },
    get_Scale: function() {
      return this.Renderer.Settings.Scale;
    },
    CreateEmptyStaveGroup: function() {
      var group = new alphaTab.rendering.staves.StaveGroup();
      group.Layout = this;
      var trackIndex = 0;
      while (trackIndex < this.Renderer.Tracks.length) {
        var track = this.Renderer.Tracks[trackIndex];
        var hasScore = false;
        var staff = $iterator(track.Staves)();
        while (staff.hasNext()) {
          var staff1 = staff.next();
          if (staff1.ShowStandardNotation) {
            hasScore = true;
            break;
          }
        }
        var staffIndex = 0;
        while (staffIndex < track.Staves.length) {
          var staff2 = track.Staves[staffIndex];
          var staveProfile;
          if (staff2.IsPercussion) {
            staveProfile = 'score';
          } else if (this.Renderer.Settings.Staves.Id != 'default') {
            staveProfile = this.Renderer.Settings.Staves.Id;
          } else if (staff2.ShowTablature && staff2.ShowStandardNotation) {
            staveProfile = 'score-tab';
          } else if (staff2.ShowTablature) {
            if (hasScore) {
              staveProfile = 'tab-mixed';
            } else {
              staveProfile = 'tab';
            }
          } else if (staff2.ShowStandardNotation) {
            staveProfile = 'score';
          } else {
            ++staffIndex;
            continue;
          }
          var profile = alphaTab.Environment.StaveProfiles.hasOwnProperty(
            staveProfile
          )
            ? alphaTab.Environment.StaveProfiles[staveProfile]
            : alphaTab.Environment.StaveProfiles['default'];
          var factory = HxOverrides.iter(profile);
          while (factory.hasNext()) {
            var factory1 = factory.next();
            if (factory1.CanCreate(track, staff2)) {
              group.AddStaff(
                track,
                new alphaTab.rendering.staves.Staff(
                  trackIndex,
                  staff2,
                  factory1
                )
              );
            }
          }
          ++staffIndex;
        }
        ++trackIndex;
      }
      return group;
    },
    RegisterBarRenderer: function(key, renderer) {
      if (!this._barRendererLookup.hasOwnProperty(key)) {
        var this1 = this._barRendererLookup;
        var this2 = {};
        this1[key] = this2;
      }
      this._barRendererLookup[key][renderer.Bar.Id] = renderer;
    },
    UnregisterBarRenderer: function(key, renderer) {
      if (this._barRendererLookup.hasOwnProperty(key)) {
        var lookup = this._barRendererLookup[key];
        var key1 = renderer.Bar.Id;
        delete lookup[key1];
      }
    },
    GetRendererForBar: function(key, bar) {
      var barRendererId = bar.Id;
      if (
        this._barRendererLookup.hasOwnProperty(key) &&
        this._barRendererLookup[key].hasOwnProperty(barRendererId)
      ) {
        return this._barRendererLookup[key][barRendererId];
      }
      return null;
    },
    RenderAnnotation: function() {
      var _gthis = this;
      var msg = 'Rendered using alphaTab (https://www.alphaTab.net)';
      var canvas = this.Renderer.Canvas;
      var resources = this.Renderer.Settings.RenderingResources;
      var size = 12 * this.Renderer.Settings.Scale;
      var height = size * 2;
      this.Height = this.Height + height;
      var x = this.Width / 2;
      canvas.BeginRender(this.Width, height);
      canvas.set_Color(resources.MainGlyphColor);
      canvas.set_Font(
        new alphaTab.platform.model.Font(
          resources.CopyrightFont.Family,
          size,
          1
        )
      );
      canvas.set_TextAlign(1);
      canvas.FillText(msg, x, size);
      var result = canvas.EndRender();
      var tmp = this.Renderer;
      var _tmp = new alphaTab.rendering.RenderFinishedEventArgs();
      _tmp.Width = _gthis.Width;
      _tmp.Height = height;
      _tmp.RenderResult = result;
      _tmp.TotalWidth = _gthis.Width;
      _tmp.TotalHeight = _gthis.Height;
      _tmp.FirstMasterBarIndex = -1;
      _tmp.LastMasterBarIndex = -1;
      tmp.OnPartialRenderFinished(_tmp);
    },
    __class__: alphaTab.rendering.layout.ScoreLayout
  };
  alphaTab.rendering.layout.PageViewLayout = function(renderer) {
    alphaTab.rendering.layout.ScoreLayout.call(this, renderer);
    this._groups = null;
    this._allMasterBarRenderers = null;
    this._barsFromPreviousGroup = null;
    this._pagePadding = null;
    var this1 = [];
    this._barsFromPreviousGroup = this1;
  };
  alphaTab.rendering.layout.PageViewLayout.__name__ = [
    'alphaTab',
    'rendering',
    'layout',
    'PageViewLayout'
  ];
  alphaTab.rendering.layout.PageViewLayout.__super__ =
    alphaTab.rendering.layout.ScoreLayout;
  alphaTab.rendering.layout.PageViewLayout.prototype = $extend(
    alphaTab.rendering.layout.ScoreLayout.prototype,
    {
      get_Name: function() {
        return 'PageView';
      },
      DoLayoutAndRender: function() {
        this._pagePadding = this.Renderer.Settings.Layout.Get(
          'padding',
          alphaTab.rendering.layout.PageViewLayout.PagePadding
        );
        if (this._pagePadding.length == 1) {
          this._pagePadding = new Float32Array([
            this._pagePadding[0],
            this._pagePadding[0],
            this._pagePadding[0],
            this._pagePadding[0]
          ]);
        } else if (this._pagePadding.length == 2) {
          this._pagePadding = new Float32Array([
            this._pagePadding[0],
            this._pagePadding[1],
            this._pagePadding[0],
            this._pagePadding[1]
          ]);
        }
        var x = this._pagePadding[0];
        var y = this._pagePadding[1];
        var this1 = this.Renderer.Settings.Width;
        this.Width = this1;
        var this2 = [];
        this._allMasterBarRenderers = this2;
        y = this.LayoutAndRenderScoreInfo(x, y, -1);
        y = this.LayoutAndRenderChordDiagrams(x, y, -1);
        y = this.LayoutAndRenderScore(x, y);
        this.Height = y + this._pagePadding[3];
      },
      get_SupportsResize: function() {
        return true;
      },
      Resize: function() {
        var x = this._pagePadding[0];
        var y = this._pagePadding[1];
        var this1 = this.Renderer.Settings.Width;
        this.Width = this1;
        var oldHeight = this.Height;
        y = this.LayoutAndRenderScoreInfo(x, y, oldHeight);
        y = this.LayoutAndRenderChordDiagrams(x, y, oldHeight);
        y = this.ResizeAndRenderScore(x, y, oldHeight);
        this.Height = y + this._pagePadding[3];
      },
      LayoutAndRenderChordDiagrams: function(x, y, totalHeight) {
        if (totalHeight == null) {
          totalHeight = -1;
        }
        var _gthis = this;
        if (this.ChordDiagrams == null) {
          return y;
        }
        var res = this.Renderer.Settings.RenderingResources;
        this.ChordDiagrams.Width = this.Width;
        this.ChordDiagrams.DoLayout();
        var canvas = this.Renderer.Canvas;
        canvas.BeginRender(this.Width, this.ChordDiagrams.Height);
        canvas.set_Color(res.ScoreInfoColor);
        canvas.set_TextAlign(1);
        this.ChordDiagrams.Paint(0, 0, canvas);
        var result = canvas.EndRender();
        y = y + this.ChordDiagrams.Height;
        var tmp = this.Renderer;
        var _tmp = new alphaTab.rendering.RenderFinishedEventArgs();
        _tmp.Width = _gthis.Width;
        _tmp.Height = _gthis.ChordDiagrams.Height;
        _tmp.RenderResult = result;
        _tmp.TotalWidth = _gthis.Width;
        _tmp.TotalHeight = totalHeight < 0 ? y : totalHeight;
        _tmp.FirstMasterBarIndex = -1;
        _tmp.LastMasterBarIndex = -1;
        tmp.OnPartialRenderFinished(_tmp);
        return y;
      },
      LayoutAndRenderScoreInfo: function(x, y, totalHeight) {
        if (totalHeight == null) {
          totalHeight = -1;
        }
        var _gthis = this;
        alphaTab.util.Logger.Debug(
          this.get_Name(),
          'Layouting score info',
          null
        );
        var scale = this.get_Scale();
        var res = this.Renderer.Settings.RenderingResources;
        var centeredGlyphs = [1, 2, 4, 8, 64];
        var i = 0;
        while (i < centeredGlyphs.length) {
          if (this.ScoreInfoGlyphs.hasOwnProperty(centeredGlyphs[i])) {
            var glyph = this.ScoreInfoGlyphs[centeredGlyphs[i]];
            var this1 = 2;
            glyph.X = this.Width / this1;
            glyph.Y = y;
            glyph.TextAlign = 1;
            y = y + glyph.Font.Size;
          }
          ++i;
        }
        var musicOrWords = false;
        var musicOrWordsHeight = 0;
        if (this.ScoreInfoGlyphs.hasOwnProperty(32)) {
          var glyph1 = this.ScoreInfoGlyphs[32];
          glyph1.X = this.Width - this._pagePadding[2];
          glyph1.Y = y;
          glyph1.TextAlign = 2;
          musicOrWords = true;
          musicOrWordsHeight = glyph1.Font.Size;
        }
        if (this.ScoreInfoGlyphs.hasOwnProperty(16)) {
          var glyph2 = this.ScoreInfoGlyphs[16];
          glyph2.X = x;
          glyph2.Y = y;
          glyph2.TextAlign = 0;
          musicOrWords = true;
          musicOrWordsHeight = glyph2.Font.Size;
        }
        if (musicOrWords) {
          y = y + musicOrWordsHeight;
        }
        if (this.TuningGlyph != null) {
          y = y + 20 * scale;
          this.TuningGlyph.X = x;
          this.TuningGlyph.Y = y;
          y = y + this.TuningGlyph.Height;
        }
        y = y + 20 * scale;
        var canvas = this.Renderer.Canvas;
        canvas.BeginRender(this.Width, y);
        canvas.set_Color(res.ScoreInfoColor);
        canvas.set_TextAlign(1);
        var this2 = this.ScoreInfoGlyphs;
        var key = $iterator(Object.keys(this2))();
        while (key.hasNext()) {
          var key1 = key.next();
          this.ScoreInfoGlyphs[key1].Paint(0, 0, canvas);
        }
        if (this.TuningGlyph != null) {
          this.TuningGlyph.Paint(0, 0, canvas);
        }
        var result = canvas.EndRender();
        var tmp = this.Renderer;
        var _tmp = new alphaTab.rendering.RenderFinishedEventArgs();
        _tmp.Width = _gthis.Width;
        _tmp.Height = y;
        _tmp.RenderResult = result;
        _tmp.TotalWidth = _gthis.Width;
        _tmp.TotalHeight = totalHeight < 0 ? y : totalHeight;
        _tmp.FirstMasterBarIndex = -1;
        _tmp.LastMasterBarIndex = -1;
        tmp.OnPartialRenderFinished(_tmp);
        return y;
      },
      ResizeAndRenderScore: function(x, y, oldHeight) {
        var canvas = this.Renderer.Canvas;
        if (this.Renderer.Settings.Layout.Get('barsPerRow', -1) != -1) {
          var i = 0;
          while (i < this._groups.length) {
            var group = this._groups[i];
            this.FitGroup(group);
            group.FinalizeGroup();
            y = y + this.PaintGroup(group, oldHeight, canvas);
            ++i;
          }
        } else {
          var this1 = [];
          this._groups = this1;
          var currentIndex = 0;
          var maxWidth = this.get_MaxWidth();
          var group1 = this.CreateEmptyStaveGroup();
          group1.Index = this._groups.length;
          group1.X = x;
          group1.Y = y;
          while (currentIndex < this._allMasterBarRenderers.length) {
            var renderers = this._allMasterBarRenderers[currentIndex];
            if (
              group1.Width + renderers.Width <= maxWidth ||
              group1.MasterBarsRenderers.length == 0
            ) {
              group1.AddMasterBarRenderers(this.Renderer.Tracks, renderers);
              ++currentIndex;
            } else {
              while (
                renderers != null &&
                !renderers.CanWrap &&
                group1.MasterBarsRenderers.length > 1
              ) {
                renderers = group1.RevertLastBar();
                --currentIndex;
              }
              group1.IsFull = true;
              group1.IsLast = this.LastBarIndex == group1.get_LastBarIndex();
              this._groups.push(group1);
              this.FitGroup(group1);
              group1.FinalizeGroup();
              y = y + this.PaintGroup(group1, oldHeight, canvas);
              group1 = this.CreateEmptyStaveGroup();
              group1.Index = this._groups.length;
              group1.X = x;
              group1.Y = y;
            }
          }
          group1.IsLast = this.LastBarIndex == group1.get_LastBarIndex();
          this.FitGroup(group1);
          group1.FinalizeGroup();
          y = y + this.PaintGroup(group1, oldHeight, canvas);
        }
        return y;
      },
      LayoutAndRenderScore: function(x, y) {
        var canvas = this.Renderer.Canvas;
        var startIndex = this.FirstBarIndex;
        var currentBarIndex = startIndex;
        var endBarIndex = this.LastBarIndex;
        var this1 = [];
        this._groups = this1;
        while (currentBarIndex <= endBarIndex) {
          var group = this.CreateStaveGroup(currentBarIndex, endBarIndex);
          this._groups.push(group);
          group.X = x;
          group.Y = y;
          currentBarIndex = group.get_LastBarIndex() + 1;
          this.FitGroup(group);
          group.FinalizeGroup();
          alphaTab.util.Logger.Info(
            this.get_Name(),
            'Rendering partial from bar ' +
              group.get_FirstBarIndex() +
              ' to ' +
              group.get_LastBarIndex(),
            null
          );
          y = y + this.PaintGroup(group, y, canvas);
        }
        return y;
      },
      PaintGroup: function(group, totalHeight, canvas) {
        var height = group.get_Height() + 20 * this.get_Scale();
        canvas.BeginRender(this.Width, height);
        this.Renderer.Canvas.set_Color(
          this.Renderer.Settings.RenderingResources.MainGlyphColor
        );
        this.Renderer.Canvas.set_TextAlign(0);
        group.Paint(0, -group.Y, canvas);
        totalHeight = totalHeight + height;
        var result = canvas.EndRender();
        var args = new alphaTab.rendering.RenderFinishedEventArgs();
        args.TotalWidth = this.Width;
        args.TotalHeight = totalHeight;
        args.Width = this.Width;
        args.Height = height;
        args.RenderResult = result;
        args.FirstMasterBarIndex = group.get_FirstBarIndex();
        args.LastMasterBarIndex = group.get_LastBarIndex();
        this.Renderer.OnPartialRenderFinished(args);
        return height;
      },
      FitGroup: function(group) {
        if (group.IsFull || group.Width > this.get_MaxWidth()) {
          group.ScaleToWidth(this.get_MaxWidth());
        }
        this.Width = Math.max(this.Width, group.Width);
      },
      CreateStaveGroup: function(currentBarIndex, endIndex) {
        var group = this.CreateEmptyStaveGroup();
        group.Index = this._groups.length;
        var barsPerRow = this.Renderer.Settings.Layout.Get('barsPerRow', -1);
        var maxWidth = this.get_MaxWidth();
        var end = endIndex + 1;
        var i = currentBarIndex;
        while (i < end) {
          if (this._barsFromPreviousGroup.length > 0) {
            var renderer = $iterator(this._barsFromPreviousGroup)();
            while (renderer.hasNext()) {
              var renderer1 = renderer.next();
              group.AddMasterBarRenderers(this.Renderer.Tracks, renderer1);
              i = renderer1.MasterBar.Index;
            }
          } else {
            var renderers = group.AddBars(this.Renderer.Tracks, i);
            this._allMasterBarRenderers.push(renderers);
          }
          var this1 = [];
          this._barsFromPreviousGroup = this1;
          var groupIsFull = false;
          if (
            barsPerRow == -1 &&
            (group.Width >= maxWidth && group.MasterBarsRenderers.length != 0)
          ) {
            groupIsFull = true;
          } else if (group.MasterBarsRenderers.length == barsPerRow + 1) {
            groupIsFull = true;
          }
          if (groupIsFull) {
            var reverted = group.RevertLastBar();
            if (reverted != null) {
              this._barsFromPreviousGroup.push(reverted);
              while (
                reverted != null &&
                !reverted.CanWrap &&
                group.MasterBarsRenderers.length > 1
              ) {
                reverted = group.RevertLastBar();
                this._barsFromPreviousGroup.push(reverted);
              }
            }
            group.IsFull = true;
            group.IsLast = false;
            this._barsFromPreviousGroup.reverse();
            return group;
          }
          group.X = 0;
          ++i;
        }
        group.IsLast = endIndex == group.get_LastBarIndex();
        return group;
      },
      get_MaxWidth: function() {
        return (
          this.Renderer.Settings.Width -
          this._pagePadding[0] -
          this._pagePadding[2]
        );
      },
      __class__: alphaTab.rendering.layout.PageViewLayout
    }
  );
  alphaTab.LayoutEngineFactory = function(vertical, layout) {
    this.Vertical = false;
    this.CreateLayout = null;
    this.Vertical = vertical;
    this.CreateLayout = layout;
  };
  alphaTab.LayoutEngineFactory.__name__ = ['alphaTab', 'LayoutEngineFactory'];
  alphaTab.LayoutEngineFactory.prototype = {
    __class__: alphaTab.LayoutEngineFactory
  };
  alphaTab.rendering.layout.HorizontalScreenLayout = function(renderer) {
    alphaTab.rendering.layout.ScoreLayout.call(this, renderer);
    this._group = null;
    this._pagePadding = null;
  };
  alphaTab.rendering.layout.HorizontalScreenLayout.__name__ = [
    'alphaTab',
    'rendering',
    'layout',
    'HorizontalScreenLayout'
  ];
  alphaTab.rendering.layout.HorizontalScreenLayout.__super__ =
    alphaTab.rendering.layout.ScoreLayout;
  alphaTab.rendering.layout.HorizontalScreenLayout.prototype = $extend(
    alphaTab.rendering.layout.ScoreLayout.prototype,
    {
      get_Name: function() {
        return 'HorizontalScreen';
      },
      get_SupportsResize: function() {
        return false;
      },
      Resize: function() {},
      DoLayoutAndRender: function() {
        var _gthis = this;
        this._pagePadding = this.Renderer.Settings.Layout.Get(
          'padding',
          alphaTab.rendering.layout.HorizontalScreenLayout.PagePadding
        );
        if (this._pagePadding.length == 1) {
          this._pagePadding = new Float32Array([
            this._pagePadding[0],
            this._pagePadding[0],
            this._pagePadding[0],
            this._pagePadding[0]
          ]);
        } else if (this._pagePadding.length == 2) {
          this._pagePadding = new Float32Array([
            this._pagePadding[0],
            this._pagePadding[1],
            this._pagePadding[0],
            this._pagePadding[1]
          ]);
        }
        var score = this.Renderer.Score;
        var canvas = this.Renderer.Canvas;
        var startIndex = this.Renderer.Settings.Layout.Get('start', 1);
        --startIndex;
        startIndex = Math.min(
          score.MasterBars.length - 1,
          Math.max(0, startIndex)
        );
        var currentBarIndex = startIndex;
        var endBarIndex = this.Renderer.Settings.Layout.Get(
          'count',
          score.MasterBars.length
        );
        if (endBarIndex < 0) {
          endBarIndex = score.MasterBars.length;
        }
        endBarIndex = startIndex + endBarIndex - 1;
        endBarIndex = Math.min(
          score.MasterBars.length - 1,
          Math.max(0, endBarIndex)
        );
        this._group = this.CreateEmptyStaveGroup();
        this._group.IsLast = true;
        this._group.X = this._pagePadding[0];
        this._group.Y = this._pagePadding[1];
        var countPerPartial = this.Renderer.Settings.Layout.Get(
          'countPerPartial',
          10
        );
        var this1 = [];
        var partials = this1;
        var currentPartial = new alphaTab.rendering.layout.HorizontalScreenLayoutPartialInfo();
        while (currentBarIndex <= endBarIndex) {
          var result = this._group.AddBars(
            this.Renderer.Tracks,
            currentBarIndex
          );
          if (
            currentPartial.MasterBars.length == 0 &&
            result.IsLinkedToPrevious &&
            partials.length > 0
          ) {
            var previousPartial = partials[partials.length - 1];
            previousPartial.MasterBars.push(score.MasterBars[currentBarIndex]);
            previousPartial.Width = previousPartial.Width + result.Width;
          } else {
            currentPartial.MasterBars.push(score.MasterBars[currentBarIndex]);
            currentPartial.Width = currentPartial.Width + result.Width;
            if (currentPartial.MasterBars.length >= countPerPartial) {
              if (partials.length == 0) {
                currentPartial.Width =
                  currentPartial.Width +
                  (this._group.X + this._group.AccoladeSpacing);
              }
              partials.push(currentPartial);
              alphaTab.util.Logger.Info(
                this.get_Name(),
                'Finished partial from bar ' +
                  currentPartial.MasterBars[0].Index +
                  ' to ' +
                  currentPartial.MasterBars[
                    currentPartial.MasterBars.length - 1
                  ].Index,
                null
              );
              currentPartial = new alphaTab.rendering.layout.HorizontalScreenLayoutPartialInfo();
            }
          }
          ++currentBarIndex;
        }
        if (currentPartial.MasterBars.length > 0) {
          if (partials.length == 0) {
            currentPartial.Width =
              currentPartial.Width +
              (this._group.X + this._group.AccoladeSpacing);
          }
          partials.push(currentPartial);
          alphaTab.util.Logger.Info(
            this.get_Name(),
            'Finished partial from bar ' +
              currentPartial.MasterBars[0].Index +
              ' to ' +
              currentPartial.MasterBars[currentPartial.MasterBars.length - 1]
                .Index,
            null
          );
        }
        this._group.FinalizeGroup();
        this.Height =
          this._group.Y + this._group.get_Height() + this._pagePadding[3];
        this.Width = this._group.X + this._group.Width + this._pagePadding[2];
        currentBarIndex = 0;
        var i = 0;
        while (i < partials.length) {
          var partial = partials[i];
          canvas.BeginRender(partial.Width, this.Height);
          canvas.set_Color(
            this.Renderer.Settings.RenderingResources.MainGlyphColor
          );
          canvas.set_TextAlign(0);
          var renderX =
            this._group.GetBarX(partial.MasterBars[0].Index) +
            this._group.AccoladeSpacing;
          if (i == 0) {
            renderX = renderX - (this._group.X + this._group.AccoladeSpacing);
          }
          alphaTab.util.Logger.Info(
            this.get_Name(),
            'Rendering partial from bar ' +
              partial.MasterBars[0].Index +
              ' to ' +
              partial.MasterBars[partial.MasterBars.length - 1].Index,
            null
          );
          this._group.PaintPartial(
            -renderX,
            this._group.Y,
            this.Renderer.Canvas,
            currentBarIndex,
            partial.MasterBars.length
          );
          var result1 = canvas.EndRender();
          var tmp = this.Renderer;
          var _tmp = new alphaTab.rendering.RenderFinishedEventArgs();
          _tmp.TotalWidth = _gthis.Width;
          _tmp.TotalHeight = _gthis.Height;
          _tmp.Width = partial.Width;
          _tmp.Height = _gthis.Height;
          _tmp.RenderResult = result1;
          _tmp.FirstMasterBarIndex = partial.MasterBars[0].Index;
          _tmp.LastMasterBarIndex =
            partial.MasterBars[partial.MasterBars.length - 1].Index;
          tmp.OnPartialRenderFinished(_tmp);
          currentBarIndex = currentBarIndex + partial.MasterBars.length;
          ++i;
        }
      },
      __class__: alphaTab.rendering.layout.HorizontalScreenLayout
    }
  );
  alphaTab.rendering.IEffectBarRendererInfo = function() {};
  alphaTab.rendering.IEffectBarRendererInfo.__name__ = [
    'alphaTab',
    'rendering',
    'IEffectBarRendererInfo'
  ];
  alphaTab.rendering.IEffectBarRendererInfo.prototype = {
    __class__: alphaTab.rendering.IEffectBarRendererInfo
  };
  alphaTab.rendering.effects = {};
  alphaTab.rendering.effects.TempoEffectInfo = function() {};
  alphaTab.rendering.effects.TempoEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'TempoEffectInfo'
  ];
  alphaTab.rendering.effects.TempoEffectInfo.__interfaces__ = [
    alphaTab.rendering.IEffectBarRendererInfo
  ];
  alphaTab.rendering.effects.TempoEffectInfo.prototype = {
    get_EffectId: function() {
      return 'tempo';
    },
    get_HideOnMultiTrack: function() {
      return true;
    },
    get_CanShareBand: function() {
      return false;
    },
    get_SizingMode: function() {
      return 0;
    },
    ShouldCreateGlyph: function(settings, beat) {
      if (
        beat.Voice.Bar.Staff.Index == 0 &&
        beat.Voice.Index == 0 &&
        beat.Index == 0
      ) {
        if (beat.Voice.Bar.get_MasterBar().TempoAutomation == null) {
          return beat.Voice.Bar.Index == 0;
        } else {
          return true;
        }
      } else {
        return false;
      }
    },
    CreateNewGlyph: function(renderer, beat) {
      var tempo;
      if (beat.Voice.Bar.get_MasterBar().TempoAutomation != null) {
        tempo = system.Convert.ToInt32_Single(
          beat.Voice.Bar.get_MasterBar().TempoAutomation.Value
        );
      } else {
        tempo = beat.Voice.Bar.Staff.Track.Score.Tempo;
      }
      return new alphaTab.rendering.glyphs.TempoGlyph(0, 0, tempo);
    },
    CanExpand: function(from, to) {
      return true;
    },
    __class__: alphaTab.rendering.effects.TempoEffectInfo
  };
  alphaTab.rendering.effects.TripletFeelEffectInfo = function() {};
  alphaTab.rendering.effects.TripletFeelEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'TripletFeelEffectInfo'
  ];
  alphaTab.rendering.effects.TripletFeelEffectInfo.__interfaces__ = [
    alphaTab.rendering.IEffectBarRendererInfo
  ];
  alphaTab.rendering.effects.TripletFeelEffectInfo.prototype = {
    get_EffectId: function() {
      return 'triplet-feel';
    },
    get_HideOnMultiTrack: function() {
      return true;
    },
    get_CanShareBand: function() {
      return false;
    },
    get_SizingMode: function() {
      return 0;
    },
    ShouldCreateGlyph: function(settings, beat) {
      if (beat.Index == 0) {
        if (
          !(
            beat.Voice.Bar.get_MasterBar().Index == 0 &&
            beat.Voice.Bar.get_MasterBar().TripletFeel != 0
          )
        ) {
          if (beat.Voice.Bar.get_MasterBar().Index > 0) {
            return (
              beat.Voice.Bar.get_MasterBar().TripletFeel !=
              beat.Voice.Bar.get_MasterBar().PreviousMasterBar.TripletFeel
            );
          } else {
            return false;
          }
        } else {
          return true;
        }
      } else {
        return false;
      }
    },
    CreateNewGlyph: function(renderer, beat) {
      return new alphaTab.rendering.glyphs.TripletFeelGlyph(
        beat.Voice.Bar.get_MasterBar().TripletFeel
      );
    },
    CanExpand: function(from, to) {
      return true;
    },
    __class__: alphaTab.rendering.effects.TripletFeelEffectInfo
  };
  alphaTab.rendering.effects.MarkerEffectInfo = function() {};
  alphaTab.rendering.effects.MarkerEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'MarkerEffectInfo'
  ];
  alphaTab.rendering.effects.MarkerEffectInfo.__interfaces__ = [
    alphaTab.rendering.IEffectBarRendererInfo
  ];
  alphaTab.rendering.effects.MarkerEffectInfo.prototype = {
    get_EffectId: function() {
      return 'marker';
    },
    get_HideOnMultiTrack: function() {
      return true;
    },
    get_CanShareBand: function() {
      return true;
    },
    get_SizingMode: function() {
      return 0;
    },
    ShouldCreateGlyph: function(settings, beat) {
      if (
        beat.Voice.Bar.Staff.Index == 0 &&
        beat.Voice.Index == 0 &&
        beat.Index == 0
      ) {
        return beat.Voice.Bar.get_MasterBar().get_IsSectionStart();
      } else {
        return false;
      }
    },
    CreateNewGlyph: function(renderer, beat) {
      var tmp;
      var s = beat.Voice.Bar.get_MasterBar().Section.Marker;
      if (s == null || s.length == 0) {
        tmp = beat.Voice.Bar.get_MasterBar().Section.Text;
      } else {
        tmp =
          '[' +
          beat.Voice.Bar.get_MasterBar().Section.Marker +
          '] ' +
          beat.Voice.Bar.get_MasterBar().Section.Text;
      }
      return new alphaTab.rendering.glyphs.TextGlyph(
        0,
        0,
        tmp,
        renderer.get_Resources().MarkerFont,
        0
      );
    },
    CanExpand: function(from, to) {
      return true;
    },
    __class__: alphaTab.rendering.effects.MarkerEffectInfo
  };
  alphaTab.rendering.effects.TextEffectInfo = function() {};
  alphaTab.rendering.effects.TextEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'TextEffectInfo'
  ];
  alphaTab.rendering.effects.TextEffectInfo.__interfaces__ = [
    alphaTab.rendering.IEffectBarRendererInfo
  ];
  alphaTab.rendering.effects.TextEffectInfo.prototype = {
    get_EffectId: function() {
      return 'text';
    },
    get_HideOnMultiTrack: function() {
      return false;
    },
    get_CanShareBand: function() {
      return false;
    },
    get_SizingMode: function() {
      return 1;
    },
    ShouldCreateGlyph: function(settings, beat) {
      var s = beat.Text;
      return !(s == null || StringTools.trim(s).length == 0);
    },
    CreateNewGlyph: function(renderer, beat) {
      return new alphaTab.rendering.glyphs.TextGlyph(
        0,
        0,
        beat.Text,
        renderer.get_Resources().EffectFont,
        0
      );
    },
    CanExpand: function(from, to) {
      return true;
    },
    __class__: alphaTab.rendering.effects.TextEffectInfo
  };
  alphaTab.rendering.effects.ChordsEffectInfo = function() {};
  alphaTab.rendering.effects.ChordsEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'ChordsEffectInfo'
  ];
  alphaTab.rendering.effects.ChordsEffectInfo.__interfaces__ = [
    alphaTab.rendering.IEffectBarRendererInfo
  ];
  alphaTab.rendering.effects.ChordsEffectInfo.prototype = {
    get_EffectId: function() {
      return 'chords';
    },
    get_HideOnMultiTrack: function() {
      return false;
    },
    get_CanShareBand: function() {
      return true;
    },
    get_SizingMode: function() {
      return 1;
    },
    ShouldCreateGlyph: function(settings, beat) {
      return beat.get_HasChord();
    },
    CreateNewGlyph: function(renderer, beat) {
      return new alphaTab.rendering.glyphs.TextGlyph(
        0,
        0,
        beat.get_Chord().Name,
        renderer.get_Resources().EffectFont,
        1
      );
    },
    CanExpand: function(from, to) {
      return false;
    },
    __class__: alphaTab.rendering.effects.ChordsEffectInfo
  };
  alphaTab.rendering.effects.FermataEffectInfo = function() {};
  alphaTab.rendering.effects.FermataEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'FermataEffectInfo'
  ];
  alphaTab.rendering.effects.FermataEffectInfo.__interfaces__ = [
    alphaTab.rendering.IEffectBarRendererInfo
  ];
  alphaTab.rendering.effects.FermataEffectInfo.prototype = {
    get_EffectId: function() {
      return 'fermata';
    },
    get_HideOnMultiTrack: function() {
      return false;
    },
    get_CanShareBand: function() {
      return false;
    },
    get_SizingMode: function() {
      return 1;
    },
    ShouldCreateGlyph: function(settings, beat) {
      return beat.Fermata != null;
    },
    CreateNewGlyph: function(renderer, beat) {
      return new alphaTab.rendering.glyphs.FermataGlyph(
        0,
        0,
        beat.Fermata.Type
      );
    },
    CanExpand: function(from, to) {
      return true;
    },
    __class__: alphaTab.rendering.effects.FermataEffectInfo
  };
  alphaTab.rendering.effects.WhammyBarEffectInfo = function() {};
  alphaTab.rendering.effects.WhammyBarEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'WhammyBarEffectInfo'
  ];
  alphaTab.rendering.effects.WhammyBarEffectInfo.__interfaces__ = [
    alphaTab.rendering.IEffectBarRendererInfo
  ];
  alphaTab.rendering.effects.WhammyBarEffectInfo.prototype = {
    get_EffectId: function() {
      return 'whammy';
    },
    get_HideOnMultiTrack: function() {
      return false;
    },
    get_CanShareBand: function() {
      return false;
    },
    get_SizingMode: function() {
      return 4;
    },
    ShouldCreateGlyph: function(settings, beat) {
      return beat.get_HasWhammyBar();
    },
    CreateNewGlyph: function(renderer, beat) {
      return new alphaTab.rendering.glyphs.LineRangedGlyph('w/bar');
    },
    CanExpand: function(from, to) {
      return true;
    },
    __class__: alphaTab.rendering.effects.WhammyBarEffectInfo
  };
  alphaTab.rendering.effects.NoteEffectInfoBase = function() {
    this.LastCreateInfo = null;
  };
  alphaTab.rendering.effects.NoteEffectInfoBase.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'NoteEffectInfoBase'
  ];
  alphaTab.rendering.effects.NoteEffectInfoBase.__interfaces__ = [
    alphaTab.rendering.IEffectBarRendererInfo
  ];
  alphaTab.rendering.effects.NoteEffectInfoBase.prototype = {
    ShouldCreateGlyph: function(settings, beat) {
      var this1 = [];
      this.LastCreateInfo = this1;
      var i = 0;
      var j = beat.Notes.length;
      while (i < j) {
        var n = beat.Notes[i];
        if (this.ShouldCreateGlyphForNote(n)) {
          this.LastCreateInfo.push(n);
        }
        ++i;
      }
      return this.LastCreateInfo.length > 0;
    },
    ShouldCreateGlyphForNote: function(note) {
      throw new js._Boot.HaxeError('abstract');
    },
    get_EffectId: function() {
      throw new js._Boot.HaxeError('abstract');
    },
    get_HideOnMultiTrack: function() {
      return false;
    },
    get_CanShareBand: function() {
      return true;
    },
    get_SizingMode: function() {
      throw new js._Boot.HaxeError('abstract');
    },
    CreateNewGlyph: function(renderer, beat) {
      throw new js._Boot.HaxeError('abstract');
    },
    CanExpand: function(from, to) {
      return true;
    },
    __class__: alphaTab.rendering.effects.NoteEffectInfoBase
  };
  alphaTab.rendering.effects.TrillEffectInfo = function() {
    alphaTab.rendering.effects.NoteEffectInfoBase.call(this);
  };
  alphaTab.rendering.effects.TrillEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'TrillEffectInfo'
  ];
  alphaTab.rendering.effects.TrillEffectInfo.__super__ =
    alphaTab.rendering.effects.NoteEffectInfoBase;
  alphaTab.rendering.effects.TrillEffectInfo.prototype = $extend(
    alphaTab.rendering.effects.NoteEffectInfoBase.prototype,
    {
      get_EffectId: function() {
        return 'trill';
      },
      ShouldCreateGlyphForNote: function(note) {
        return note.get_IsTrill();
      },
      get_SizingMode: function() {
        return 1;
      },
      CreateNewGlyph: function(renderer, beat) {
        return new alphaTab.rendering.glyphs.TrillGlyph(0, 0);
      },
      __class__: alphaTab.rendering.effects.TrillEffectInfo
    }
  );
  alphaTab.rendering.effects.OttaviaEffectInfo = function(aboveStaff) {
    this._aboveStaff = false;
    this._aboveStaff = aboveStaff;
  };
  alphaTab.rendering.effects.OttaviaEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'OttaviaEffectInfo'
  ];
  alphaTab.rendering.effects.OttaviaEffectInfo.__interfaces__ = [
    alphaTab.rendering.IEffectBarRendererInfo
  ];
  alphaTab.rendering.effects.OttaviaEffectInfo.prototype = {
    get_EffectId: function() {
      return 'ottavia-' + (this._aboveStaff ? 'above' : 'below');
    },
    get_HideOnMultiTrack: function() {
      return false;
    },
    get_CanShareBand: function() {
      return true;
    },
    get_SizingMode: function() {
      return 4;
    },
    ShouldCreateGlyph: function(settings, beat) {
      var _g = beat.Ottava;
      switch (_g) {
        case 0:
          return this._aboveStaff;
        case 1:
          return this._aboveStaff;
        case 3:
          return !this._aboveStaff;
        case 4:
          return !this._aboveStaff;
        default:
      }
      return false;
    },
    CreateNewGlyph: function(renderer, beat) {
      return new alphaTab.rendering.glyphs.OttavaGlyph(
        beat.Ottava,
        this._aboveStaff
      );
    },
    CanExpand: function(from, to) {
      return from.Ottava == to.Ottava;
    },
    __class__: alphaTab.rendering.effects.OttaviaEffectInfo
  };
  alphaTab.rendering.effects.WideBeatVibratoEffectInfo = function() {};
  alphaTab.rendering.effects.WideBeatVibratoEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'WideBeatVibratoEffectInfo'
  ];
  alphaTab.rendering.effects.WideBeatVibratoEffectInfo.__interfaces__ = [
    alphaTab.rendering.IEffectBarRendererInfo
  ];
  alphaTab.rendering.effects.WideBeatVibratoEffectInfo.prototype = {
    get_EffectId: function() {
      return 'wide-beat-vibrato';
    },
    get_HideOnMultiTrack: function() {
      return false;
    },
    get_CanShareBand: function() {
      return true;
    },
    get_SizingMode: function() {
      return 5;
    },
    ShouldCreateGlyph: function(settings, beat) {
      return beat.Vibrato == 2;
    },
    CreateNewGlyph: function(renderer, beat) {
      return new alphaTab.rendering.glyphs.BeatVibratoGlyph(2);
    },
    CanExpand: function(from, to) {
      return true;
    },
    __class__: alphaTab.rendering.effects.WideBeatVibratoEffectInfo
  };
  alphaTab.rendering.effects.SlightBeatVibratoEffectInfo = function() {};
  alphaTab.rendering.effects.SlightBeatVibratoEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'SlightBeatVibratoEffectInfo'
  ];
  alphaTab.rendering.effects.SlightBeatVibratoEffectInfo.__interfaces__ = [
    alphaTab.rendering.IEffectBarRendererInfo
  ];
  alphaTab.rendering.effects.SlightBeatVibratoEffectInfo.prototype = {
    get_EffectId: function() {
      return 'slight-beat-vibrato';
    },
    get_HideOnMultiTrack: function() {
      return false;
    },
    get_CanShareBand: function() {
      return true;
    },
    get_SizingMode: function() {
      return 5;
    },
    ShouldCreateGlyph: function(settings, beat) {
      return beat.Vibrato == 1;
    },
    CreateNewGlyph: function(renderer, beat) {
      return new alphaTab.rendering.glyphs.BeatVibratoGlyph(1);
    },
    CanExpand: function(from, to) {
      return true;
    },
    __class__: alphaTab.rendering.effects.SlightBeatVibratoEffectInfo
  };
  alphaTab.rendering.effects.WideNoteVibratoEffectInfo = function() {
    alphaTab.rendering.effects.NoteEffectInfoBase.call(this);
  };
  alphaTab.rendering.effects.WideNoteVibratoEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'WideNoteVibratoEffectInfo'
  ];
  alphaTab.rendering.effects.WideNoteVibratoEffectInfo.__super__ =
    alphaTab.rendering.effects.NoteEffectInfoBase;
  alphaTab.rendering.effects.WideNoteVibratoEffectInfo.prototype = $extend(
    alphaTab.rendering.effects.NoteEffectInfoBase.prototype,
    {
      get_EffectId: function() {
        return 'wide-note-vibrato';
      },
      ShouldCreateGlyphForNote: function(note) {
        if (!(note.Vibrato == 2)) {
          if (note.IsTieDestination) {
            return note.TieOrigin.Vibrato == 2;
          } else {
            return false;
          }
        } else {
          return true;
        }
      },
      get_SizingMode: function() {
        return 5;
      },
      CreateNewGlyph: function(renderer, beat) {
        return new alphaTab.rendering.glyphs.NoteVibratoGlyph(0, 0, 2, 1.2);
      },
      __class__: alphaTab.rendering.effects.WideNoteVibratoEffectInfo
    }
  );
  alphaTab.rendering.effects.SlightNoteVibratoEffectInfo = function() {
    alphaTab.rendering.effects.NoteEffectInfoBase.call(this);
  };
  alphaTab.rendering.effects.SlightNoteVibratoEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'SlightNoteVibratoEffectInfo'
  ];
  alphaTab.rendering.effects.SlightNoteVibratoEffectInfo.__super__ =
    alphaTab.rendering.effects.NoteEffectInfoBase;
  alphaTab.rendering.effects.SlightNoteVibratoEffectInfo.prototype = $extend(
    alphaTab.rendering.effects.NoteEffectInfoBase.prototype,
    {
      get_EffectId: function() {
        return 'slight-note-vibrato';
      },
      ShouldCreateGlyphForNote: function(note) {
        if (!(note.Vibrato == 1)) {
          if (note.IsTieDestination) {
            return note.TieOrigin.Vibrato == 1;
          } else {
            return false;
          }
        } else {
          return true;
        }
      },
      get_SizingMode: function() {
        return 5;
      },
      CreateNewGlyph: function(renderer, beat) {
        return new alphaTab.rendering.glyphs.NoteVibratoGlyph(0, 0, 1, 1.2);
      },
      __class__: alphaTab.rendering.effects.SlightNoteVibratoEffectInfo
    }
  );
  alphaTab.rendering.effects.AlternateEndingsEffectInfo = function() {};
  alphaTab.rendering.effects.AlternateEndingsEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'AlternateEndingsEffectInfo'
  ];
  alphaTab.rendering.effects.AlternateEndingsEffectInfo.__interfaces__ = [
    alphaTab.rendering.IEffectBarRendererInfo
  ];
  alphaTab.rendering.effects.AlternateEndingsEffectInfo.prototype = {
    get_EffectId: function() {
      return 'alternate-feel';
    },
    get_HideOnMultiTrack: function() {
      return true;
    },
    get_CanShareBand: function() {
      return false;
    },
    get_SizingMode: function() {
      return 6;
    },
    ShouldCreateGlyph: function(settings, beat) {
      if (beat.Index == 0) {
        return beat.Voice.Bar.get_MasterBar().AlternateEndings != 0;
      } else {
        return false;
      }
    },
    CreateNewGlyph: function(renderer, beat) {
      return new alphaTab.rendering.glyphs.AlternateEndingsGlyph(
        0,
        0,
        beat.Voice.Bar.get_MasterBar().AlternateEndings
      );
    },
    CanExpand: function(from, to) {
      return true;
    },
    __class__: alphaTab.rendering.effects.AlternateEndingsEffectInfo
  };
  alphaTab.rendering.BarRendererFactory = function() {
    this.IsInAccolade = false;
    this.HideOnMultiTrack = false;
    this.HideOnPercussionTrack = false;
    this.IsInAccolade = true;
    this.HideOnPercussionTrack = false;
    this.HideOnMultiTrack = false;
  };
  alphaTab.rendering.BarRendererFactory.__name__ = [
    'alphaTab',
    'rendering',
    'BarRendererFactory'
  ];
  alphaTab.rendering.BarRendererFactory.prototype = {
    get_StaffId: function() {
      throw new js._Boot.HaxeError('abstract');
    },
    CanCreate: function(track, staff) {
      if (!!this.HideOnPercussionTrack) {
        return !staff.IsPercussion;
      } else {
        return true;
      }
    },
    Create: function(renderer, bar, staveSettings) {
      throw new js._Boot.HaxeError('abstract');
    },
    __class__: alphaTab.rendering.BarRendererFactory
  };
  alphaTab.rendering.EffectBarRendererFactory = function(staffId, infos) {
    alphaTab.rendering.BarRendererFactory.call(this);
    this._infos = null;
    this._staffId = null;
    this._infos = infos;
    this._staffId = staffId;
    this.IsInAccolade = false;
  };
  alphaTab.rendering.EffectBarRendererFactory.__name__ = [
    'alphaTab',
    'rendering',
    'EffectBarRendererFactory'
  ];
  alphaTab.rendering.EffectBarRendererFactory.__super__ =
    alphaTab.rendering.BarRendererFactory;
  alphaTab.rendering.EffectBarRendererFactory.prototype = $extend(
    alphaTab.rendering.BarRendererFactory.prototype,
    {
      get_StaffId: function() {
        return this._staffId;
      },
      Create: function(renderer, bar, staveSettings) {
        return new alphaTab.rendering.EffectBarRenderer(
          renderer,
          bar,
          this._infos
        );
      },
      __class__: alphaTab.rendering.EffectBarRendererFactory
    }
  );
  alphaTab.rendering.ScoreBarRendererFactory = function() {
    alphaTab.rendering.BarRendererFactory.call(this);
  };
  alphaTab.rendering.ScoreBarRendererFactory.__name__ = [
    'alphaTab',
    'rendering',
    'ScoreBarRendererFactory'
  ];
  alphaTab.rendering.ScoreBarRendererFactory.__super__ =
    alphaTab.rendering.BarRendererFactory;
  alphaTab.rendering.ScoreBarRendererFactory.prototype = $extend(
    alphaTab.rendering.BarRendererFactory.prototype,
    {
      get_StaffId: function() {
        return 'score';
      },
      Create: function(renderer, bar, staveSettings) {
        return new alphaTab.rendering.ScoreBarRenderer(renderer, bar);
      },
      __class__: alphaTab.rendering.ScoreBarRendererFactory
    }
  );
  alphaTab.rendering.effects.CrescendoEffectInfo = function() {};
  alphaTab.rendering.effects.CrescendoEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'CrescendoEffectInfo'
  ];
  alphaTab.rendering.effects.CrescendoEffectInfo.__interfaces__ = [
    alphaTab.rendering.IEffectBarRendererInfo
  ];
  alphaTab.rendering.effects.CrescendoEffectInfo.prototype = {
    get_EffectId: function() {
      return 'crescendo';
    },
    get_HideOnMultiTrack: function() {
      return false;
    },
    get_CanShareBand: function() {
      return true;
    },
    get_SizingMode: function() {
      return 5;
    },
    ShouldCreateGlyph: function(settings, beat) {
      return beat.Crescendo != 0;
    },
    CreateNewGlyph: function(renderer, beat) {
      return new alphaTab.rendering.glyphs.CrescendoGlyph(0, 0, beat.Crescendo);
    },
    CanExpand: function(from, to) {
      return from.Crescendo == to.Crescendo;
    },
    __class__: alphaTab.rendering.effects.CrescendoEffectInfo
  };
  alphaTab.rendering.effects.DynamicsEffectInfo = function() {};
  alphaTab.rendering.effects.DynamicsEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'DynamicsEffectInfo'
  ];
  alphaTab.rendering.effects.DynamicsEffectInfo.__interfaces__ = [
    alphaTab.rendering.IEffectBarRendererInfo
  ];
  alphaTab.rendering.effects.DynamicsEffectInfo.prototype = {
    get_EffectId: function() {
      return 'dynamics';
    },
    get_HideOnMultiTrack: function() {
      return false;
    },
    get_CanShareBand: function() {
      return false;
    },
    get_SizingMode: function() {
      return 1;
    },
    ShouldCreateGlyph: function(settings, beat) {
      return this.InternalShouldCreateGlyph(settings, beat, true);
    },
    InternalShouldCreateGlyph: function(settings, beat, checkForDuplicates) {
      if (
        beat.Voice.Bar.Staff.Track.Score.Stylesheet.HideDynamics ||
        beat.IsEmpty ||
        beat.Voice.IsEmpty
      ) {
        return false;
      }
      var show =
        (beat.Voice.Index == 0 &&
          beat.Index == 0 &&
          beat.Voice.Bar.Index == 0) ||
        (beat.PreviousBeat != null &&
          beat.Dynamic != beat.PreviousBeat.Dynamic);
      if (show && beat.Voice.Index > 0) {
        var voice = $iterator(beat.Voice.Bar.Voices)();
        while (voice.hasNext()) {
          var voice1 = voice.next();
          if (voice1.Index < beat.Voice.Index) {
            var beatAtSamePos = voice1.GetBeatAtDisplayStart(beat.DisplayStart);
            if (
              beatAtSamePos != null &&
              beat.Dynamic == beatAtSamePos.Dynamic &&
              this.InternalShouldCreateGlyph(settings, beatAtSamePos, false)
            ) {
              show = false;
            }
          }
        }
      }
      return show;
    },
    CreateNewGlyph: function(renderer, beat) {
      return new alphaTab.rendering.glyphs.DynamicsGlyph(0, 0, beat.Dynamic);
    },
    CanExpand: function(from, to) {
      return true;
    },
    __class__: alphaTab.rendering.effects.DynamicsEffectInfo
  };
  alphaTab.rendering.effects.LyricsEffectInfo = function() {};
  alphaTab.rendering.effects.LyricsEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'LyricsEffectInfo'
  ];
  alphaTab.rendering.effects.LyricsEffectInfo.__interfaces__ = [
    alphaTab.rendering.IEffectBarRendererInfo
  ];
  alphaTab.rendering.effects.LyricsEffectInfo.prototype = {
    get_EffectId: function() {
      return 'lyrics';
    },
    get_HideOnMultiTrack: function() {
      return false;
    },
    get_CanShareBand: function() {
      return false;
    },
    get_SizingMode: function() {
      return 1;
    },
    ShouldCreateGlyph: function(settings, beat) {
      return beat.Lyrics != null;
    },
    CreateNewGlyph: function(renderer, beat) {
      return new alphaTab.rendering.glyphs.LyricsGlyph(
        0,
        0,
        beat.Lyrics,
        renderer.get_Resources().EffectFont,
        1
      );
    },
    CanExpand: function(from, to) {
      return true;
    },
    __class__: alphaTab.rendering.effects.LyricsEffectInfo
  };
  alphaTab.rendering.effects.TapEffectInfo = function() {};
  alphaTab.rendering.effects.TapEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'TapEffectInfo'
  ];
  alphaTab.rendering.effects.TapEffectInfo.__interfaces__ = [
    alphaTab.rendering.IEffectBarRendererInfo
  ];
  alphaTab.rendering.effects.TapEffectInfo.prototype = {
    get_EffectId: function() {
      return 'tap';
    },
    get_HideOnMultiTrack: function() {
      return false;
    },
    get_CanShareBand: function() {
      return true;
    },
    get_SizingMode: function() {
      return 1;
    },
    ShouldCreateGlyph: function(settings, beat) {
      if (!(beat.Slap || beat.Pop)) {
        return beat.Tap;
      } else {
        return true;
      }
    },
    CreateNewGlyph: function(renderer, beat) {
      var res = renderer.get_Resources();
      if (beat.Slap) {
        return new alphaTab.rendering.glyphs.TextGlyph(
          0,
          0,
          'S',
          res.EffectFont,
          0
        );
      }
      if (beat.Pop) {
        return new alphaTab.rendering.glyphs.TextGlyph(
          0,
          0,
          'P',
          res.EffectFont,
          0
        );
      }
      return new alphaTab.rendering.glyphs.TextGlyph(
        0,
        0,
        'T',
        res.EffectFont,
        0
      );
    },
    CanExpand: function(from, to) {
      return true;
    },
    __class__: alphaTab.rendering.effects.TapEffectInfo
  };
  alphaTab.rendering.effects.FadeInEffectInfo = function() {};
  alphaTab.rendering.effects.FadeInEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'FadeInEffectInfo'
  ];
  alphaTab.rendering.effects.FadeInEffectInfo.__interfaces__ = [
    alphaTab.rendering.IEffectBarRendererInfo
  ];
  alphaTab.rendering.effects.FadeInEffectInfo.prototype = {
    get_EffectId: function() {
      return 'fade-in';
    },
    get_HideOnMultiTrack: function() {
      return false;
    },
    get_CanShareBand: function() {
      return true;
    },
    get_SizingMode: function() {
      return 1;
    },
    ShouldCreateGlyph: function(settings, beat) {
      return beat.FadeIn;
    },
    CreateNewGlyph: function(renderer, beat) {
      return new alphaTab.rendering.glyphs.FadeInGlyph(0, 0);
    },
    CanExpand: function(from, to) {
      return true;
    },
    __class__: alphaTab.rendering.effects.FadeInEffectInfo
  };
  alphaTab.rendering.effects.HarmonicsEffectInfo = function(harmonicType) {
    alphaTab.rendering.effects.NoteEffectInfoBase.call(this);
    this._harmonicType = 0;
    this._beat = null;
    this._effectId = null;
    this._harmonicType = harmonicType;
    switch (harmonicType) {
      case 1:
        this._effectId = 'harmonics-natural';
        break;
      case 2:
        this._effectId = 'harmonics-artificial';
        break;
      case 3:
        this._effectId = 'harmonics-pinch';
        break;
      case 4:
        this._effectId = 'harmonics-tap';
        break;
      case 5:
        this._effectId = 'harmonics-semi';
        break;
      case 6:
        this._effectId = 'harmonics-feedback';
        break;
      default:
    }
  };
  alphaTab.rendering.effects.HarmonicsEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'HarmonicsEffectInfo'
  ];
  alphaTab.rendering.effects.HarmonicsEffectInfo.HarmonicToString = function(
    type
  ) {
    switch (type) {
      case 1:
        return 'N.H.';
      case 2:
        return 'A.H.';
      case 3:
        return 'P.H.';
      case 4:
        return 'T.H.';
      case 5:
        return 'S.H.';
      case 6:
        return 'Fdbk.';
      default:
    }
    return '';
  };
  alphaTab.rendering.effects.HarmonicsEffectInfo.__super__ =
    alphaTab.rendering.effects.NoteEffectInfoBase;
  alphaTab.rendering.effects.HarmonicsEffectInfo.prototype = $extend(
    alphaTab.rendering.effects.NoteEffectInfoBase.prototype,
    {
      get_EffectId: function() {
        return this._effectId;
      },
      ShouldCreateGlyphForNote: function(note) {
        if (!note.get_IsHarmonic() || note.HarmonicType != this._harmonicType) {
          return false;
        }
        if (note.Beat != this._beat) {
          this._beat = note.Beat;
        }
        return true;
      },
      get_SizingMode: function() {
        return 4;
      },
      CreateNewGlyph: function(renderer, beat) {
        return new alphaTab.rendering.glyphs.LineRangedGlyph(
          alphaTab.rendering.effects.HarmonicsEffectInfo.HarmonicToString(
            this._harmonicType
          )
        );
      },
      __class__: alphaTab.rendering.effects.HarmonicsEffectInfo
    }
  );
  alphaTab.rendering.effects.LetRingEffectInfo = function() {};
  alphaTab.rendering.effects.LetRingEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'LetRingEffectInfo'
  ];
  alphaTab.rendering.effects.LetRingEffectInfo.__interfaces__ = [
    alphaTab.rendering.IEffectBarRendererInfo
  ];
  alphaTab.rendering.effects.LetRingEffectInfo.prototype = {
    get_EffectId: function() {
      return 'let-ring';
    },
    get_CanShareBand: function() {
      return false;
    },
    get_HideOnMultiTrack: function() {
      return false;
    },
    ShouldCreateGlyph: function(settings, beat) {
      return beat.IsLetRing;
    },
    get_SizingMode: function() {
      return 4;
    },
    CreateNewGlyph: function(renderer, beat) {
      return new alphaTab.rendering.glyphs.LineRangedGlyph('LetRing');
    },
    CanExpand: function(from, to) {
      return true;
    },
    __class__: alphaTab.rendering.effects.LetRingEffectInfo
  };
  alphaTab.rendering.effects.CapoEffectInfo = function() {};
  alphaTab.rendering.effects.CapoEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'CapoEffectInfo'
  ];
  alphaTab.rendering.effects.CapoEffectInfo.__interfaces__ = [
    alphaTab.rendering.IEffectBarRendererInfo
  ];
  alphaTab.rendering.effects.CapoEffectInfo.prototype = {
    get_EffectId: function() {
      return 'capo';
    },
    get_HideOnMultiTrack: function() {
      return false;
    },
    get_CanShareBand: function() {
      return false;
    },
    get_SizingMode: function() {
      return 1;
    },
    ShouldCreateGlyph: function(settings, beat) {
      if (beat.Index == 0 && beat.Voice.Bar.Index == 0) {
        return beat.Voice.Bar.Staff.Capo != 0;
      } else {
        return false;
      }
    },
    CreateNewGlyph: function(renderer, beat) {
      return new alphaTab.rendering.glyphs.TextGlyph(
        0,
        0,
        'Capo. fret ' + beat.Voice.Bar.Staff.Capo,
        renderer.get_Resources().EffectFont,
        0
      );
    },
    CanExpand: function(from, to) {
      return false;
    },
    __class__: alphaTab.rendering.effects.CapoEffectInfo
  };
  alphaTab.rendering.effects.FingeringEffectInfo = function() {};
  alphaTab.rendering.effects.FingeringEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'FingeringEffectInfo'
  ];
  alphaTab.rendering.effects.FingeringEffectInfo.__interfaces__ = [
    alphaTab.rendering.IEffectBarRendererInfo
  ];
  alphaTab.rendering.effects.FingeringEffectInfo.prototype = {
    get_EffectId: function() {
      return 'fingering';
    },
    get_HideOnMultiTrack: function() {
      return false;
    },
    get_CanShareBand: function() {
      return true;
    },
    get_SizingMode: function() {
      return 1;
    },
    ShouldCreateGlyph: function(settings, beat) {
      if (
        beat.Voice.Index != 0 ||
        beat.get_IsRest() ||
        settings.FingeringMode != 1
      ) {
        return false;
      }
      if (beat.Notes.length != 1) {
        return false;
      }
      return beat.Notes[0].IsFingering;
    },
    CreateNewGlyph: function(renderer, beat) {
      var finger = -2;
      var isLeft = false;
      var note = beat.Notes[0];
      if (note.LeftHandFinger != -2) {
        finger = note.LeftHandFinger;
        isLeft = true;
      } else if (note.RightHandFinger != -2) {
        finger = note.RightHandFinger;
      }
      var s = alphaTab.model.ModelUtils.FingerToString(
        renderer.get_Settings(),
        beat,
        finger,
        isLeft
      );
      return new alphaTab.rendering.glyphs.TextGlyph(
        0,
        0,
        s,
        renderer.get_Resources().FingeringFont,
        0
      );
    },
    CanExpand: function(from, to) {
      return true;
    },
    __class__: alphaTab.rendering.effects.FingeringEffectInfo
  };
  alphaTab.rendering.effects.PalmMuteEffectInfo = function() {
    alphaTab.rendering.effects.NoteEffectInfoBase.call(this);
  };
  alphaTab.rendering.effects.PalmMuteEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'PalmMuteEffectInfo'
  ];
  alphaTab.rendering.effects.PalmMuteEffectInfo.__super__ =
    alphaTab.rendering.effects.NoteEffectInfoBase;
  alphaTab.rendering.effects.PalmMuteEffectInfo.prototype = $extend(
    alphaTab.rendering.effects.NoteEffectInfoBase.prototype,
    {
      get_EffectId: function() {
        return 'palm-mute';
      },
      ShouldCreateGlyphForNote: function(note) {
        return note.IsPalmMute;
      },
      get_SizingMode: function() {
        return 4;
      },
      CreateNewGlyph: function(renderer, beat) {
        return new alphaTab.rendering.glyphs.LineRangedGlyph('P.M.');
      },
      __class__: alphaTab.rendering.effects.PalmMuteEffectInfo
    }
  );
  alphaTab.rendering.effects.PickStrokeEffectInfo = function() {};
  alphaTab.rendering.effects.PickStrokeEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'PickStrokeEffectInfo'
  ];
  alphaTab.rendering.effects.PickStrokeEffectInfo.__interfaces__ = [
    alphaTab.rendering.IEffectBarRendererInfo
  ];
  alphaTab.rendering.effects.PickStrokeEffectInfo.prototype = {
    get_EffectId: function() {
      return 'pick-stroke';
    },
    get_HideOnMultiTrack: function() {
      return false;
    },
    get_CanShareBand: function() {
      return true;
    },
    get_SizingMode: function() {
      return 1;
    },
    ShouldCreateGlyph: function(settings, beat) {
      return beat.PickStroke != 0;
    },
    CreateNewGlyph: function(renderer, beat) {
      return new alphaTab.rendering.glyphs.PickStrokeGlyph(
        0,
        0,
        beat.PickStroke
      );
    },
    CanExpand: function(from, to) {
      return true;
    },
    __class__: alphaTab.rendering.effects.PickStrokeEffectInfo
  };
  alphaTab.rendering.effects.PickSlideEffectInfo = function() {
    alphaTab.rendering.effects.NoteEffectInfoBase.call(this);
  };
  alphaTab.rendering.effects.PickSlideEffectInfo.__name__ = [
    'alphaTab',
    'rendering',
    'effects',
    'PickSlideEffectInfo'
  ];
  alphaTab.rendering.effects.PickSlideEffectInfo.__super__ =
    alphaTab.rendering.effects.NoteEffectInfoBase;
  alphaTab.rendering.effects.PickSlideEffectInfo.prototype = $extend(
    alphaTab.rendering.effects.NoteEffectInfoBase.prototype,
    {
      get_EffectId: function() {
        return 'pick-slide';
      },
      ShouldCreateGlyphForNote: function(note) {
        if (!(note.SlideType == 7)) {
          return note.SlideType == 8;
        } else {
          return true;
        }
      },
      get_SizingMode: function() {
        return 4;
      },
      CreateNewGlyph: function(renderer, beat) {
        return new alphaTab.rendering.glyphs.LineRangedGlyph('P.S.');
      },
      __class__: alphaTab.rendering.effects.PickSlideEffectInfo
    }
  );
  alphaTab.rendering.TabBarRendererFactory = function(
    showTimeSignature,
    showRests,
    showTiedNotes
  ) {
    alphaTab.rendering.BarRendererFactory.call(this);
    this._showTimeSignature = false;
    this._showRests = false;
    this._showTiedNotes = false;
    this._showTimeSignature = showTimeSignature;
    this._showRests = showRests;
    this._showTiedNotes = showTiedNotes;
    this.HideOnPercussionTrack = true;
  };
  alphaTab.rendering.TabBarRendererFactory.__name__ = [
    'alphaTab',
    'rendering',
    'TabBarRendererFactory'
  ];
  alphaTab.rendering.TabBarRendererFactory.__super__ =
    alphaTab.rendering.BarRendererFactory;
  alphaTab.rendering.TabBarRendererFactory.prototype = $extend(
    alphaTab.rendering.BarRendererFactory.prototype,
    {
      get_StaffId: function() {
        return 'tab';
      },
      CanCreate: function(track, staff) {
        if (staff.Tuning.length > 0) {
          return alphaTab.rendering.BarRendererFactory.prototype.CanCreate.call(
            this,
            track,
            staff
          );
        } else {
          return false;
        }
      },
      Create: function(renderer, bar, staveSettings) {
        var tabBarRenderer = new alphaTab.rendering.TabBarRenderer(
          renderer,
          bar
        );
        tabBarRenderer.ShowRests = this._showRests;
        tabBarRenderer.ShowTimeSignature = this._showTimeSignature;
        tabBarRenderer.ShowTiedNotes = this._showTiedNotes;
        tabBarRenderer.RenderRhythm = staveSettings.Get(
          'rhythm',
          tabBarRenderer.RenderRhythm
        );
        tabBarRenderer.RhythmHeight = staveSettings.Get(
          'rhythmHeight',
          tabBarRenderer.RhythmHeight
        );
        tabBarRenderer.RhythmBeams = staveSettings.Get(
          'rhythmBeams',
          tabBarRenderer.RhythmBeams
        );
        return tabBarRenderer;
      },
      __class__: alphaTab.rendering.TabBarRendererFactory
    }
  );
  alphaTab.Environment = function() {};
  alphaTab.Environment.__name__ = ['alphaTab', 'Environment'];
  alphaTab.Environment.add_FontLoaded = function(value) {
    alphaTab.Environment.FontLoaded = system._EventAction.EventAction_Impl_.add(
      alphaTab.Environment.FontLoaded,
      value
    );
  };
  alphaTab.Environment.remove_FontLoaded = function(value) {
    alphaTab.Environment.FontLoaded = system._EventAction.EventAction_Impl_.sub(
      alphaTab.Environment.FontLoaded,
      value
    );
  };
  alphaTab.Environment.OnFontLoaded = function() {
    var _e = alphaTab.Environment.FontLoaded;
    var handler = function() {
      system._EventAction.EventAction_Impl_.Invoke(_e);
    };
    if (handler != null) {
      handler();
    }
  };
  alphaTab.Environment.PlatformInit = function() {
    alphaTab.Environment.RenderEngines[
      'svg'
    ] = new alphaTab.RenderEngineFactory(true, function() {
      return new alphaTab.platform.svg.CssFontSvgCanvas();
    });
    alphaTab.Environment.RenderEngines[
      'html5'
    ] = new alphaTab.RenderEngineFactory(false, function() {
      return new alphaTab.platform.javaScript.Html5Canvas();
    });
    alphaTab.Environment.RenderEngines['default'] =
      alphaTab.Environment.RenderEngines['svg'];
    alphaTab.Environment.RegisterJQueryPlugin();
    Math.log2 =
      Math.log2 ||
      function(x) {
        return Math.log(x) * Math.LOG2E;
      };
    if ($global.document) {
      window.AudioContext = window.AudioContext || window.webkitAudioContext;
      var document = window.document;
      var this1 = '';
      var vbAjaxLoader = this1;
      vbAjaxLoader =
        vbAjaxLoader + ('Function VbAjaxLoader(method, fileName)' + '\r\n');
      vbAjaxLoader = vbAjaxLoader + ('    Dim xhr' + '\r\n');
      vbAjaxLoader =
        vbAjaxLoader +
        ('    Set xhr = CreateObject("Microsoft.XMLHTTP")' + '\r\n');
      vbAjaxLoader =
        vbAjaxLoader + ('    xhr.Open method, fileName, False' + '\r\n');
      vbAjaxLoader =
        vbAjaxLoader +
        ('    xhr.setRequestHeader "Accept-Charset", "x-user-defined"' +
          '\r\n');
      vbAjaxLoader = vbAjaxLoader + ('    xhr.send' + '\r\n');
      vbAjaxLoader = vbAjaxLoader + ('    Dim byteArray()' + '\r\n');
      vbAjaxLoader = vbAjaxLoader + ('    if xhr.Status = 200 Then' + '\r\n');
      vbAjaxLoader = vbAjaxLoader + ('        Dim byteString' + '\r\n');
      vbAjaxLoader = vbAjaxLoader + ('        Dim i' + '\r\n');
      vbAjaxLoader =
        vbAjaxLoader + ('        byteString=xhr.responseBody' + '\r\n');
      vbAjaxLoader =
        vbAjaxLoader + ('        ReDim byteArray(LenB(byteString))' + '\r\n');
      vbAjaxLoader =
        vbAjaxLoader + ('        For i = 1 To LenB(byteString)' + '\r\n');
      vbAjaxLoader =
        vbAjaxLoader +
        ('            byteArray(i-1) = AscB(MidB(byteString, i, 1))' + '\r\n');
      vbAjaxLoader = vbAjaxLoader + ('        Next' + '\r\n');
      vbAjaxLoader = vbAjaxLoader + ('    End If' + '\r\n');
      vbAjaxLoader = vbAjaxLoader + ('    VbAjaxLoader=byteArray' + '\r\n');
      vbAjaxLoader = vbAjaxLoader + ('End Function' + '\r\n');
      var vbAjaxLoaderScript = document.createElement('script');
      vbAjaxLoaderScript.setAttribute('type', 'text/vbscript');
      var inlineScript = document.createTextNode(vbAjaxLoader);
      vbAjaxLoaderScript.appendChild(inlineScript);
      document.addEventListener(
        'DOMContentLoaded',
        function() {
          document.body.appendChild(vbAjaxLoaderScript);
        },
        false
      );
      var scriptElement = document.currentScript;
      if (!!!scriptElement) {
        try {
          var error = new Error();
          var stack = error.stack;
          if (!!!stack) {
            throw error;
          }
          alphaTab.Environment.ScriptFile = alphaTab.Environment.ScriptFileFromStack(
            stack
          );
        } catch (e) {
          if (e instanceof js._Boot.HaxeError) e = e.val;
          if (js.Boot.__instanceof(e, Error)) {
            var stack1 = e.stack;
            if (!!!stack1) {
              scriptElement = document.querySelector('script[data-alphatab]');
            } else {
              alphaTab.Environment.ScriptFile = alphaTab.Environment.ScriptFileFromStack(
                stack1
              );
            }
          } else throw e;
        }
      }
      var s = alphaTab.Environment.ScriptFile;
      if (s == null || s.length == 0) {
        if (!!!scriptElement) {
          alphaTab.util.Logger.Warning(
            'Environment',
            'Could not automatically find alphaTab script file for worker, please add the data-alphatab attribute to the script tag that includes alphaTab or provide it when initializing alphaTab',
            null
          );
        } else {
          alphaTab.Environment.ScriptFile = scriptElement.src;
        }
      }
      alphaTab.Environment.CheckForFontAvailability();
    } else {
      var isWebWorker =
        typeof WorkerGlobalScope !== 'undefined' &&
        self instanceof WorkerGlobalScope;
      if (isWebWorker) {
        alphaTab.platform.javaScript.AlphaTabWebWorker.Init();
        alphaTab.platform.javaScript.AlphaSynthWebWorker.Init();
      }
    }
  };
  alphaTab.Environment.RegisterJQueryPlugin = function() {
    var json = $global;
    if (json && 'jQuery' in json) {
      var jquery = window['jQuery'];
      var api = new alphaTab.platform.javaScript.JQueryAlphaTab();
      jquery.fn.alphaTab = function(method) {
        var _this = this;
        if (_this.length == 1) {
          var _this1 = _this[0];
          var tmp = Array.prototype.slice.call(arguments, 1);
          return api.Exec(_this1, method, tmp);
        } else {
          return this.each(function() {
            var tmp1 = Array.prototype.slice.call(arguments, 1);
            api.Exec(this, method, tmp1);
          });
        }
      };
      jquery.alphaTab = {
        restore: alphaTab.platform.javaScript.JQueryAlphaTab.Restore
      };
      jquery.fn.alphaTab.fn = api;
    }
  };
  alphaTab.Environment.ScriptFileFromStack = function(stack) {
    var matches = stack.match(
      '(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?'
    );
    if (!!!matches) {
      matches = stack.match(
        '^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?'
      );
      if (!!!matches) {
        matches = stack.match(
          '\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?'
        );
        if (!!!matches) {
          return null;
        }
      }
    }
    return matches[1];
  };
  alphaTab.Environment.CheckForFontAvailability = function() {
    var isWorker =
      typeof WorkerGlobalScope !== 'undefined' &&
      self instanceof WorkerGlobalScope;
    if (isWorker) {
      alphaTab.Environment.IsFontLoaded = false;
      return;
    }
    var cssFontLoadingModuleSupported =
      !!window.document.fonts && !!window.document.fonts['load'];
    if (cssFontLoadingModuleSupported) {
      var checkFont = null;
      checkFont = function() {
        window.document.fonts.load('1em alphaTab').then(function(_) {
          if (window.document.fonts.check('1em alphaTab')) {
            alphaTab.util.Logger.Info('Rendering', 'Font available', null);
            alphaTab.Environment.IsFontLoaded = true;
            alphaTab.Environment.OnFontLoaded();
          } else {
            window.setTimeout(function() {
              checkFont();
            }, 250);
          }
          return true;
        });
      };
      checkFont();
    } else {
      var checkFont1 = null;
      checkFont1 = function() {
        var document = window.document;
        var testItem = document.getElementById('alphaTabFontChecker');
        if (testItem == null) {
          testItem = document.createElement('div');
          testItem.setAttribute('id', 'alphaTabFontChecker');
          testItem.style.opacity = '0';
          testItem.style.position = 'absolute';
          testItem.style.left = '0';
          testItem.style.top = '0';
          testItem.style.fontSize = '100px';
          testItem.classList.add('at');
          testItem.innerHTML = '&#' + 57424 + ';';
          document.body.appendChild(testItem);
        }
        var width = testItem.offsetWidth;
        if (width > 30 && width < 100) {
          alphaTab.Environment.IsFontLoaded = true;
          document.body.removeChild(testItem);
          alphaTab.Environment.OnFontLoaded();
        } else {
          window.setTimeout(function() {
            checkFont1();
          }, 250);
        }
      };
      window.addEventListener('DOMContentLoaded', function() {
        checkFont1();
      });
    }
  };
  alphaTab.Environment.CreateScoreRenderer = function(settings) {
    return new alphaTab.rendering.ScoreRenderer(settings);
  };
  alphaTab.Environment.GetRenderEngineFactory = function(settings) {
    if (
      settings.Engine == null ||
      !alphaTab.Environment.RenderEngines.hasOwnProperty(settings.Engine)
    ) {
      return alphaTab.Environment.RenderEngines['default'];
    } else {
      return alphaTab.Environment.RenderEngines[settings.Engine];
    }
  };
  alphaTab.Environment.GetLayoutEngineFactory = function(settings) {
    if (
      settings.Layout.Mode == null ||
      !alphaTab.Environment.LayoutEngines.hasOwnProperty(settings.Layout.Mode)
    ) {
      return alphaTab.Environment.LayoutEngines['default'];
    } else {
      return alphaTab.Environment.LayoutEngines[settings.Layout.Mode];
    }
  };
  alphaTab.Environment.Init = function() {
    var this1 = {};
    alphaTab.Environment.RenderEngines = this1;
    var this2 = {};
    alphaTab.Environment.LayoutEngines = this2;
    var this3 = {};
    alphaTab.Environment.StaveProfiles = this3;
    alphaTab.Environment.PlatformInit();
    alphaTab.Environment.LayoutEngines[
      'page'
    ] = new alphaTab.LayoutEngineFactory(true, function(r) {
      return new alphaTab.rendering.layout.PageViewLayout(r);
    });
    alphaTab.Environment.LayoutEngines[
      'horizontal'
    ] = new alphaTab.LayoutEngineFactory(false, function(r1) {
      return new alphaTab.rendering.layout.HorizontalScreenLayout(r1);
    });
    alphaTab.Environment.LayoutEngines['default'] =
      alphaTab.Environment.LayoutEngines['page'];
    alphaTab.Environment.StaveProfiles[
      'default'
    ] = alphaTab.Environment.StaveProfiles['score-tab'] = [
      new alphaTab.rendering.EffectBarRendererFactory('score-effects', [
        new alphaTab.rendering.effects.TempoEffectInfo(),
        new alphaTab.rendering.effects.TripletFeelEffectInfo(),
        new alphaTab.rendering.effects.MarkerEffectInfo(),
        new alphaTab.rendering.effects.TextEffectInfo(),
        new alphaTab.rendering.effects.ChordsEffectInfo(),
        new alphaTab.rendering.effects.FermataEffectInfo(),
        new alphaTab.rendering.effects.WhammyBarEffectInfo(),
        new alphaTab.rendering.effects.TrillEffectInfo(),
        new alphaTab.rendering.effects.OttaviaEffectInfo(true),
        new alphaTab.rendering.effects.WideBeatVibratoEffectInfo(),
        new alphaTab.rendering.effects.SlightBeatVibratoEffectInfo(),
        new alphaTab.rendering.effects.WideNoteVibratoEffectInfo(),
        new alphaTab.rendering.effects.SlightNoteVibratoEffectInfo(),
        new alphaTab.rendering.effects.AlternateEndingsEffectInfo()
      ]),
      new alphaTab.rendering.ScoreBarRendererFactory(),
      new alphaTab.rendering.EffectBarRendererFactory('tab-effects', [
        new alphaTab.rendering.effects.CrescendoEffectInfo(),
        new alphaTab.rendering.effects.OttaviaEffectInfo(false),
        new alphaTab.rendering.effects.DynamicsEffectInfo(),
        new alphaTab.rendering.effects.LyricsEffectInfo(),
        new alphaTab.rendering.effects.TrillEffectInfo(),
        new alphaTab.rendering.effects.WideBeatVibratoEffectInfo(),
        new alphaTab.rendering.effects.SlightBeatVibratoEffectInfo(),
        new alphaTab.rendering.effects.WideNoteVibratoEffectInfo(),
        new alphaTab.rendering.effects.SlightNoteVibratoEffectInfo(),
        new alphaTab.rendering.effects.TapEffectInfo(),
        new alphaTab.rendering.effects.FadeInEffectInfo(),
        new alphaTab.rendering.effects.HarmonicsEffectInfo(1),
        new alphaTab.rendering.effects.HarmonicsEffectInfo(2),
        new alphaTab.rendering.effects.HarmonicsEffectInfo(3),
        new alphaTab.rendering.effects.HarmonicsEffectInfo(4),
        new alphaTab.rendering.effects.HarmonicsEffectInfo(5),
        new alphaTab.rendering.effects.HarmonicsEffectInfo(6),
        new alphaTab.rendering.effects.LetRingEffectInfo(),
        new alphaTab.rendering.effects.CapoEffectInfo(),
        new alphaTab.rendering.effects.FingeringEffectInfo(),
        new alphaTab.rendering.effects.PalmMuteEffectInfo(),
        new alphaTab.rendering.effects.PickStrokeEffectInfo(),
        new alphaTab.rendering.effects.PickSlideEffectInfo()
      ]),
      new alphaTab.rendering.TabBarRendererFactory(false, false, false)
    ];
    alphaTab.Environment.StaveProfiles['score'] = [
      new alphaTab.rendering.EffectBarRendererFactory('score-effects', [
        new alphaTab.rendering.effects.TempoEffectInfo(),
        new alphaTab.rendering.effects.TripletFeelEffectInfo(),
        new alphaTab.rendering.effects.MarkerEffectInfo(),
        new alphaTab.rendering.effects.TextEffectInfo(),
        new alphaTab.rendering.effects.ChordsEffectInfo(),
        new alphaTab.rendering.effects.FermataEffectInfo(),
        new alphaTab.rendering.effects.WhammyBarEffectInfo(),
        new alphaTab.rendering.effects.TrillEffectInfo(),
        new alphaTab.rendering.effects.OttaviaEffectInfo(true),
        new alphaTab.rendering.effects.WideBeatVibratoEffectInfo(),
        new alphaTab.rendering.effects.SlightBeatVibratoEffectInfo(),
        new alphaTab.rendering.effects.WideNoteVibratoEffectInfo(),
        new alphaTab.rendering.effects.SlightNoteVibratoEffectInfo(),
        new alphaTab.rendering.effects.FadeInEffectInfo(),
        new alphaTab.rendering.effects.LetRingEffectInfo(),
        new alphaTab.rendering.effects.PalmMuteEffectInfo(),
        new alphaTab.rendering.effects.PickStrokeEffectInfo(),
        new alphaTab.rendering.effects.PickSlideEffectInfo(),
        new alphaTab.rendering.effects.AlternateEndingsEffectInfo()
      ]),
      new alphaTab.rendering.ScoreBarRendererFactory(),
      new alphaTab.rendering.EffectBarRendererFactory('score-bottom-effects', [
        new alphaTab.rendering.effects.CrescendoEffectInfo(),
        new alphaTab.rendering.effects.OttaviaEffectInfo(false),
        new alphaTab.rendering.effects.DynamicsEffectInfo(),
        new alphaTab.rendering.effects.LyricsEffectInfo()
      ])
    ];
    alphaTab.Environment.StaveProfiles['tab'] = [
      new alphaTab.rendering.EffectBarRendererFactory('tab-effects', [
        new alphaTab.rendering.effects.TempoEffectInfo(),
        new alphaTab.rendering.effects.TripletFeelEffectInfo(),
        new alphaTab.rendering.effects.MarkerEffectInfo(),
        new alphaTab.rendering.effects.TextEffectInfo(),
        new alphaTab.rendering.effects.ChordsEffectInfo(),
        new alphaTab.rendering.effects.FermataEffectInfo(),
        new alphaTab.rendering.effects.TrillEffectInfo(),
        new alphaTab.rendering.effects.WideBeatVibratoEffectInfo(),
        new alphaTab.rendering.effects.SlightBeatVibratoEffectInfo(),
        new alphaTab.rendering.effects.WideNoteVibratoEffectInfo(),
        new alphaTab.rendering.effects.SlightNoteVibratoEffectInfo(),
        new alphaTab.rendering.effects.TapEffectInfo(),
        new alphaTab.rendering.effects.FadeInEffectInfo(),
        new alphaTab.rendering.effects.HarmonicsEffectInfo(2),
        new alphaTab.rendering.effects.HarmonicsEffectInfo(3),
        new alphaTab.rendering.effects.HarmonicsEffectInfo(4),
        new alphaTab.rendering.effects.HarmonicsEffectInfo(5),
        new alphaTab.rendering.effects.HarmonicsEffectInfo(6),
        new alphaTab.rendering.effects.LetRingEffectInfo(),
        new alphaTab.rendering.effects.CapoEffectInfo(),
        new alphaTab.rendering.effects.FingeringEffectInfo(),
        new alphaTab.rendering.effects.PalmMuteEffectInfo(),
        new alphaTab.rendering.effects.PickStrokeEffectInfo(),
        new alphaTab.rendering.effects.PickSlideEffectInfo(),
        new alphaTab.rendering.effects.AlternateEndingsEffectInfo()
      ]),
      new alphaTab.rendering.TabBarRendererFactory(true, true, true),
      new alphaTab.rendering.EffectBarRendererFactory('tab-bottom-effects', [
        new alphaTab.rendering.effects.LyricsEffectInfo()
      ])
    ];
    alphaTab.Environment.StaveProfiles['tab-mixed'] = [
      new alphaTab.rendering.EffectBarRendererFactory('tab-effects', [
        new alphaTab.rendering.effects.TempoEffectInfo(),
        new alphaTab.rendering.effects.TripletFeelEffectInfo(),
        new alphaTab.rendering.effects.MarkerEffectInfo(),
        new alphaTab.rendering.effects.TextEffectInfo(),
        new alphaTab.rendering.effects.ChordsEffectInfo(),
        new alphaTab.rendering.effects.TripletFeelEffectInfo(),
        new alphaTab.rendering.effects.TrillEffectInfo(),
        new alphaTab.rendering.effects.WideBeatVibratoEffectInfo(),
        new alphaTab.rendering.effects.SlightBeatVibratoEffectInfo(),
        new alphaTab.rendering.effects.WideNoteVibratoEffectInfo(),
        new alphaTab.rendering.effects.SlightNoteVibratoEffectInfo(),
        new alphaTab.rendering.effects.TapEffectInfo(),
        new alphaTab.rendering.effects.FadeInEffectInfo(),
        new alphaTab.rendering.effects.HarmonicsEffectInfo(2),
        new alphaTab.rendering.effects.HarmonicsEffectInfo(3),
        new alphaTab.rendering.effects.HarmonicsEffectInfo(4),
        new alphaTab.rendering.effects.HarmonicsEffectInfo(5),
        new alphaTab.rendering.effects.HarmonicsEffectInfo(6),
        new alphaTab.rendering.effects.LetRingEffectInfo(),
        new alphaTab.rendering.effects.CapoEffectInfo(),
        new alphaTab.rendering.effects.PalmMuteEffectInfo(),
        new alphaTab.rendering.effects.PickStrokeEffectInfo(),
        new alphaTab.rendering.effects.PickSlideEffectInfo(),
        new alphaTab.rendering.effects.AlternateEndingsEffectInfo()
      ]),
      new alphaTab.rendering.TabBarRendererFactory(false, false, false),
      new alphaTab.rendering.EffectBarRendererFactory('tab-bottom-effects', [
        new alphaTab.rendering.effects.LyricsEffectInfo()
      ])
    ];
  };
  alphaTab.Environment.prototype = {
    __class__: alphaTab.Environment
  };
  alphaTab._FingeringMode = {};
  alphaTab._FingeringMode.FingeringMode_Impl_ = $hx_exports['alphaTab'][
    '_FingeringMode'
  ]['FingeringMode_Impl_'] = {};
  alphaTab._FingeringMode.FingeringMode_Impl_.__name__ = [
    'alphaTab',
    '_FingeringMode',
    'FingeringMode_Impl_'
  ];
  alphaTab._FingeringMode.FingeringMode_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab._FingeringMode.FingeringMode_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab._FingeringMode.FingeringMode_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab._FingeringMode.FingeringMode_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab._FingeringMode.FingeringMode_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab._FingeringMode.FingeringMode_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab._FingeringMode.FingeringMode_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab._FingeringMode.FingeringMode_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab._FingeringMode.FingeringMode_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab._FingeringMode.FingeringMode_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab._FingeringMode.FingeringMode_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab._FingeringMode.FingeringMode_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab._FingeringMode.FingeringMode_Impl_.toString = function(this1) {
    switch (this1) {
      case 0:
        return 'Score';
      case 1:
        return 'SingleNoteEffectBand';
    }
    return '';
  };
  alphaTab.LayoutSettings = $hx_exports['alphaTab'][
    'LayoutSettings'
  ] = function() {
    this.Mode = null;
    this.AdditionalSettings = null;
    var this1 = {};
    this.AdditionalSettings = this1;
  };
  alphaTab.LayoutSettings.__name__ = ['alphaTab', 'LayoutSettings'];
  alphaTab.LayoutSettings.get_Defaults = function() {
    var settings = new alphaTab.LayoutSettings();
    settings.Mode = 'page';
    return settings;
  };
  alphaTab.LayoutSettings.prototype = {
    Get: function(key, def) {
      var this1 = this.AdditionalSettings;
      var key1 = key.toLowerCase();
      if (this1.hasOwnProperty(key1)) {
        return this.AdditionalSettings[key.toLowerCase()];
      }
      if (this.AdditionalSettings.hasOwnProperty(key)) {
        return this.AdditionalSettings[key];
      }
      return def;
    },
    __class__: alphaTab.LayoutSettings
  };
  alphaTab.Main = function() {};
  alphaTab.Main.__name__ = ['alphaTab', 'Main'];
  alphaTab.Main.main = function() {};
  alphaTab.ResizeEventArgs = $hx_exports['alphaTab'][
    'ResizeEventArgs'
  ] = function() {
    this.OldWidth = 0;
    this.NewWidth = 0;
    this.Settings = null;
  };
  alphaTab.ResizeEventArgs.__name__ = ['alphaTab', 'ResizeEventArgs'];
  alphaTab.ResizeEventArgs.prototype = {
    __class__: alphaTab.ResizeEventArgs
  };
  alphaTab._ScrollMode = {};
  alphaTab._ScrollMode.ScrollMode_Impl_ = $hx_exports['alphaTab'][
    '_ScrollMode'
  ]['ScrollMode_Impl_'] = {};
  alphaTab._ScrollMode.ScrollMode_Impl_.__name__ = [
    'alphaTab',
    '_ScrollMode',
    'ScrollMode_Impl_'
  ];
  alphaTab._ScrollMode.ScrollMode_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab._ScrollMode.ScrollMode_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab._ScrollMode.ScrollMode_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab._ScrollMode.ScrollMode_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab._ScrollMode.ScrollMode_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab._ScrollMode.ScrollMode_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab._ScrollMode.ScrollMode_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab._ScrollMode.ScrollMode_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab._ScrollMode.ScrollMode_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab._ScrollMode.ScrollMode_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab._ScrollMode.ScrollMode_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab._ScrollMode.ScrollMode_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab._ScrollMode.ScrollMode_Impl_.toString = function(this1) {
    switch (this1) {
      case 0:
        return 'Off';
      case 1:
        return 'Continuous';
      case 2:
        return 'OffScreen';
    }
    return '';
  };
  alphaTab.SelectionInfo = function(beat) {
    this.Beat = null;
    this.Bounds = null;
    this.Beat = beat;
  };
  alphaTab.SelectionInfo.__name__ = ['alphaTab', 'SelectionInfo'];
  alphaTab.SelectionInfo.prototype = {
    __class__: alphaTab.SelectionInfo
  };
  alphaTab.Settings = $hx_exports['alphaTab']['Settings'] = function() {
    this.ScriptFile = null;
    this.FontDirectory = null;
    this.DisableLazyLoading = false;
    this.SoundFontFile = null;
    this.ScrollElement = null;
    this.Scale = 0.0;
    this.Width = 0;
    this.Engine = null;
    this.Layout = null;
    this.ImporterSettings = null;
    this.StretchForce = 0.0;
    this.ForcePianoFingering = false;
    this.Staves = null;
    this.TranspositionPitches = null;
    this.DisplayTranspositionPitches = null;
    this.LogLevel = 0;
    this.SmallGraceTabNotes = false;
    this.ExtendBendArrowsOnTiedNotes = false;
    this.ShowParenthesisForTiedBends = false;
    this.ShowTabNoteOnTiedBend = false;
    this.DisplayMode = 0;
    this.FingeringMode = 0;
    this.ShowZeroOnDiveWhammy = false;
    this.ExtendLineEffectsToBeatEnd = false;
    this.Vibrato = null;
    this.SlurHeight = 0.0;
    this.SongBookBendDuration = 0;
    this.SongBookDipDuration = 0;
    this.IncludeNoteBounds = false;
    this.UseWorkers = false;
    this.EnablePlayer = false;
    this.EnableCursor = false;
    this.BeatCursorWidth = 0;
    this.ScrollOffsetX = 0;
    this.ScrollOffsetY = 0;
    this.ScrollMode = 0;
    this.ScrollSpeed = 0;
    this.RenderingResources = null;
  };
  alphaTab.Settings.__name__ = ['alphaTab', 'Settings'];
  alphaTab.Settings.SetDefaults = function(settings) {
    settings.ScrollElement = 'html,body';
  };
  alphaTab.Settings.FillPlayerOptions = function(
    settings,
    json,
    setDefaults,
    dataAttributes
  ) {
    if (json && 'cursor' in json) {
      settings.EnableCursor = json.cursor;
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('cursor')
    ) {
      settings.EnableCursor = dataAttributes['cursor'];
    } else if (setDefaults) {
      settings.EnableCursor = true;
    }
    if (settings.EnableCursor) {
      if (json && 'playerOffset' in json) {
        alphaTab.Settings.FillCursorOffset(settings, json.playerOffset);
      } else if (
        dataAttributes != null &&
        dataAttributes.hasOwnProperty('playerOffset')
      ) {
        alphaTab.Settings.FillCursorOffset(
          settings,
          dataAttributes['playerOffset']
        );
      }
    }
    if (json && 'autoScroll' in json) {
      settings.ScrollMode = alphaTab.Settings.DecodeScrollMode(json.autoScroll);
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('autoScroll')
    ) {
      settings.ScrollMode = alphaTab.Settings.DecodeScrollMode(
        dataAttributes['autoScroll']
      );
    }
    if (json && 'scrollSpeed' in json) {
      settings.ScrollSpeed = json.scrollSpeed;
    } else if (setDefaults) {
      settings.ScrollSpeed = 300;
    }
    if (json && 'scrollElement' in json) {
      settings.ScrollElement = json.scrollElement;
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('scrollElement')
    ) {
      settings.ScrollElement = dataAttributes['scrollElement'];
    } else if (setDefaults) {
      settings.ScrollElement = 'html,body';
    }
    if (json && 'beatCursorWidth' in json) {
      settings.BeatCursorWidth = json.beatCursorWidth;
    } else if (setDefaults) {
      settings.BeatCursorWidth = 3;
    }
  };
  alphaTab.Settings.FromJson = function(json, dataAttributes) {
    if (js.Boot.__instanceof(json, alphaTab.Settings)) {
      return js.Boot.__cast(json, alphaTab.Settings);
    }
    var settings = alphaTab.Settings.get_Defaults();
    settings.ScriptFile = alphaTab.Environment.ScriptFile;
    alphaTab.Settings.FillFromJson(settings, json, dataAttributes);
    if (json && json.fontSizes) {
      if (alphaTab.platform.svg.FontSizes.FontSizeLookupTables == null) {
        var this1 = {};
        alphaTab.platform.svg.FontSizes.FontSizeLookupTables = this1;
      }
      var json1 = json.fontSizes;
      var keys = Object.keys(json1);
      var font = HxOverrides.iter(keys);
      while (font.hasNext()) {
        var font1 = font.next();
        alphaTab.platform.svg.FontSizes.FontSizeLookupTables[font1] =
          json.fontSizes[font1];
      }
    }
    return settings;
  };
  alphaTab.Settings.FillFromJson = function(settings, json, dataAttributes) {
    var global = $global;
    if (global.document && global.ALPHATAB_ROOT) {
      settings.ScriptFile = global.ALPHATAB_ROOT;
      settings.ScriptFile = alphaTab.Settings.EnsureFullUrl(
        settings.ScriptFile
      );
      settings.ScriptFile = alphaTab.Settings.AppendScriptName(
        settings.ScriptFile
      );
    } else {
      settings.ScriptFile = alphaTab.Environment.ScriptFile;
    }
    if (global.document && global.ALPHATAB_FONT) {
      settings.FontDirectory = global.ALPHATAB_FONT;
      settings.FontDirectory = alphaTab.Settings.EnsureFullUrl(
        settings.FontDirectory
      );
    } else {
      settings.FontDirectory = settings.ScriptFile;
      var s = settings.FontDirectory;
      if (!(s == null || s.length == 0)) {
        var this1 = settings.FontDirectory;
        var this2 = system.Convert.ToUInt16(47);
        var lastSlash = this1.lastIndexOf(String.fromCharCode(this2));
        if (lastSlash >= 0) {
          settings.FontDirectory =
            HxOverrides.substr(settings.FontDirectory, 0, lastSlash) + '/Font/';
        }
      }
    }
    if (json && 'logging' in json) {
      settings.LogLevel = alphaTab.Settings.DecodeLogLevel(json.logging);
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('logging')
    ) {
      settings.LogLevel = alphaTab.Settings.DecodeLogLevel(
        dataAttributes['logging']
      );
    }
    if (json && 'useWorker' in json) {
      settings.UseWorkers = json.useWorker;
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('useWorker')
    ) {
      settings.UseWorkers = !!dataAttributes['useWorker'];
    }
    if (json && 'displayMode' in json) {
      settings.DisplayMode = alphaTab.Settings.DecodeDisplayMode(
        json.displayMode
      );
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('displayMode')
    ) {
      settings.DisplayMode = alphaTab.Settings.DecodeDisplayMode(
        dataAttributes['displayMode']
      );
    }
    if (settings.DisplayMode == 1) {
      settings.ApplySongBookDefaults();
    }
    if (json && 'scale' in json) {
      settings.Scale = json.scale;
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('scale')
    ) {
      settings.Scale = dataAttributes['scale'];
    }
    if (json && 'slurHeight' in json) {
      settings.SlurHeight = json.slurHeight;
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('slurHeight')
    ) {
      settings.SlurHeight = dataAttributes['slurHeight'];
    }
    if (json && 'width' in json) {
      settings.Width = json.width;
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('width')
    ) {
      settings.Width = dataAttributes['width'];
    }
    if (json && 'engine' in json) {
      settings.Engine = json.engine;
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('engine')
    ) {
      settings.Engine = dataAttributes['engine'];
    }
    if (json && 'stretchForce' in json) {
      settings.StretchForce = json.stretchForce;
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('stretchForce')
    ) {
      settings.StretchForce = dataAttributes['stretchForce'];
    }
    if (json && 'forcePianoFingering' in json) {
      settings.ForcePianoFingering = json.forcePianoFingering;
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('forcePianoFingering')
    ) {
      settings.ForcePianoFingering = dataAttributes['forcePianoFingering'];
    }
    if (json && 'lazy' in json) {
      settings.DisableLazyLoading = !json.lazy;
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('lazy')
    ) {
      settings.DisableLazyLoading = !!!dataAttributes['lazy'];
    }
    if (json && 'transpositionPitches' in json) {
      settings.TranspositionPitches = json.transpositionPitches;
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('transpositionPitches')
    ) {
      var pitchOffsets = dataAttributes['transpositionPitches'];
      if (pitchOffsets != null && pitchOffsets['length']) {
        settings.TranspositionPitches = pitchOffsets;
      }
    }
    if (json && 'displayTranspositionPitches' in json) {
      settings.DisplayTranspositionPitches = json.displayTranspositionPitches;
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('displayTranspositionPitches')
    ) {
      var pitchOffsets1 = dataAttributes['displayTranspositionPitches'];
      if (pitchOffsets1 != null && pitchOffsets1['length']) {
        settings.DisplayTranspositionPitches = pitchOffsets1;
      }
    }
    if (json && 'scriptFile' in json) {
      settings.ScriptFile = alphaTab.Settings.EnsureFullUrl(json.scriptFile);
      settings.ScriptFile = alphaTab.Settings.AppendScriptName(
        settings.ScriptFile
      );
    }
    if (json && 'fontDirectory' in json) {
      settings.FontDirectory = alphaTab.Settings.EnsureFullUrl(
        json.fontDirectory
      );
    }
    if (json && 'smallGraceTabNotes' in json) {
      settings.SmallGraceTabNotes = json.smallGraceTabNotes;
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('smallGraceTabNotes')
    ) {
      settings.SmallGraceTabNotes = dataAttributes['smallGraceTabNotes'];
    }
    if (json && 'fingeringMode' in json) {
      settings.FingeringMode = alphaTab.Settings.DecodeFingeringMode(
        json.fingeringMode
      );
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('fingeringMode')
    ) {
      settings.FingeringMode = alphaTab.Settings.DecodeFingeringMode(
        dataAttributes['fingeringMode']
      );
    }
    if (json && 'extendBendArrowsOnTiedNotes' in json) {
      settings.ExtendBendArrowsOnTiedNotes = json.extendBendArrowsOnTiedNotes;
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('extendBendArrowsOnTiedNotes')
    ) {
      settings.ExtendBendArrowsOnTiedNotes =
        dataAttributes['extendBendArrowsOnTiedNotes'];
    }
    if (json && 'showParenthesisForTiedBends' in json) {
      settings.ShowParenthesisForTiedBends = json.showParenthesisForTiedBends;
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('showParenthesisForTiedBends')
    ) {
      settings.ShowParenthesisForTiedBends =
        dataAttributes['showParenthesisForTiedBends'];
    }
    if (json && 'showTabNoteOnTiedBend' in json) {
      settings.ShowTabNoteOnTiedBend = json.showTabNoteOnTiedBend;
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('showTabNoteOnTiedBend')
    ) {
      settings.ShowTabNoteOnTiedBend = dataAttributes['showTabNoteOnTiedBend'];
    }
    if (json && 'showZeroOnDiveWhammy' in json) {
      settings.ShowZeroOnDiveWhammy = json.showZeroOnDiveWhammy;
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('showZeroOnDiveWhammy')
    ) {
      settings.ShowZeroOnDiveWhammy = dataAttributes['showZeroOnDiveWhammy'];
    }
    if (json && 'extendLineEffectsToBeatEnd' in json) {
      settings.ExtendLineEffectsToBeatEnd = json.extendLineEffectsToBeatEnd;
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('extendLineEffectsToBeatEnd')
    ) {
      settings.ExtendLineEffectsToBeatEnd =
        dataAttributes['extendLineEffectsToBeatEnd'];
    }
    if (json && 'songBookBendDuration' in json) {
      settings.SongBookBendDuration = json.songBookBendDuration;
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('songBookBendDuration')
    ) {
      settings.SongBookBendDuration = dataAttributes['songBookBendDuration'];
    }
    if (json && 'songBookDipDuration' in json) {
      settings.SongBookDipDuration = json.songBookDipDuration;
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('songBookDipDuration')
    ) {
      settings.SongBookDipDuration = dataAttributes['songBookDipDuration'];
    }
    if (json && 'layout' in json) {
      settings.Layout = alphaTab.Settings.LayoutFromJson(json.layout);
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('layout')
    ) {
      settings.Layout = alphaTab.Settings.LayoutFromJson(
        dataAttributes['layout']
      );
    }
    if (json && 'includeNoteBounds' in json) {
      settings.IncludeNoteBounds = json.includeNoteBounds;
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('includeNoteBounds')
    ) {
      settings.IncludeNoteBounds = dataAttributes['includeNoteBounds'];
    }
    if (json && 'vibrato' in json) {
      var vibrato = json.vibrato;
      if (vibrato.noteSlightAmplitude) {
        settings.Vibrato.NoteSlightAmplitude = vibrato.noteSlightAmplitude;
      }
      if (vibrato.noteWideAmplitude) {
        settings.Vibrato.NoteWideAmplitude = vibrato.noteWideAmplitude;
      }
      if (vibrato.noteSlightLength) {
        settings.Vibrato.NoteSlightLength = vibrato.noteSlightLength;
      }
      if (vibrato.noteWideLength) {
        settings.Vibrato.NoteWideLength = vibrato.noteWideLength;
      }
      if (vibrato.beatSlightAmplitude) {
        settings.Vibrato.BeatSlightAmplitude = vibrato.beatSlightAmplitude;
      }
      if (vibrato.beatWideAmplitude) {
        settings.Vibrato.BeatWideAmplitude = vibrato.beatWideAmplitude;
      }
      if (vibrato.beatSlightLength) {
        settings.Vibrato.BeatSlightLength = vibrato.beatSlightLength;
      }
      if (vibrato.beatWideLength) {
        settings.Vibrato.BeatWideLength = vibrato.beatWideLength;
      }
    } else if (dataAttributes != null) {
      if (dataAttributes.hasOwnProperty('vibratoNoteSlightLength')) {
        settings.Vibrato.NoteSlightLength =
          dataAttributes['vibratoNoteSlightLength'];
      }
      if (dataAttributes.hasOwnProperty('vibratoNoteSlightAmplitude')) {
        settings.Vibrato.NoteSlightAmplitude =
          dataAttributes['vibratoNoteSlightAmplitude'];
      }
      if (dataAttributes.hasOwnProperty('vibratoNoteWideLength')) {
        settings.Vibrato.NoteWideLength =
          dataAttributes['vibratoNoteWideLength'];
      }
      if (dataAttributes.hasOwnProperty('vibratoNoteWideAmplitude')) {
        settings.Vibrato.NoteWideAmplitude =
          dataAttributes['vibratoNoteWideAmplitude'];
      }
      if (dataAttributes.hasOwnProperty('vibratoBeatSlightLength')) {
        settings.Vibrato.BeatSlightLength =
          dataAttributes['vibratoBeatSlightLength'];
      }
      if (dataAttributes.hasOwnProperty('vibratoBeatSlightAmplitude')) {
        settings.Vibrato.BeatSlightAmplitude =
          dataAttributes['vibratoBeatSlightAmplitude'];
      }
      if (dataAttributes.hasOwnProperty('vibratoBeatWideLength')) {
        settings.Vibrato.BeatWideLength =
          dataAttributes['vibratoBeatWideLength'];
      }
      if (dataAttributes.hasOwnProperty('vibratoBeatWideAmplitude')) {
        settings.Vibrato.BeatWideAmplitude =
          dataAttributes['vibratoBeatWideAmplitude'];
      }
    }
    if (dataAttributes != null) {
      var key = $iterator(Object.keys(dataAttributes))();
      while (key.hasNext()) {
        var key1 = key.next();
        if (StringTools.startsWith(key1, 'layout')) {
          var property = HxOverrides.substr(key1, 6, null);
          settings.Layout.AdditionalSettings[property.toLowerCase()] =
            dataAttributes[key1];
        }
      }
    }
    if (json && 'staves' in json) {
      settings.Staves = alphaTab.Settings.StavesFromJson(json.staves);
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('staves')
    ) {
      settings.Staves = alphaTab.Settings.StavesFromJson(
        dataAttributes['staves']
      );
    }
    if (dataAttributes != null) {
      var key2 = $iterator(Object.keys(dataAttributes))();
      while (key2.hasNext()) {
        var key3 = key2.next();
        if (StringTools.startsWith(key3, 'staves')) {
          var property1 = HxOverrides.substr(key3, 6, null);
          settings.Staves.AdditionalSettings[property1.toLowerCase()] =
            dataAttributes[key3];
        }
      }
    }
    if (json && 'player' in json) {
      settings.EnablePlayer = true;
      settings.SoundFontFile = json.player;
    } else if (
      dataAttributes != null &&
      dataAttributes.hasOwnProperty('player')
    ) {
      settings.EnablePlayer = true;
      settings.SoundFontFile = dataAttributes['player'];
    }
    if (settings.EnablePlayer) {
      alphaTab.Settings.FillPlayerOptions(settings, json, true, dataAttributes);
    }
    if (json && 'importer' in json) {
      var json1 = json.importer;
      var keys = Object.keys(json1);
      var key4 = HxOverrides.iter(keys);
      while (key4.hasNext()) {
        var key5 = key4.next();
        settings.ImporterSettings[key5.toLowerCase()] = json.importer[key5];
      }
    } else if (dataAttributes != null) {
      var key6 = $iterator(Object.keys(dataAttributes))();
      while (key6.hasNext()) {
        var key7 = key6.next();
        if (StringTools.startsWith(key7, 'importer')) {
          var property2 = HxOverrides.substr(key7, 8, null);
          settings.ImporterSettings[property2.toLowerCase()] =
            dataAttributes[key7];
        }
      }
    }
    if (json && 'resources' in json) {
      var json2 = json.resources;
      var keys1 = Object.keys(json2);
      var key8 = HxOverrides.iter(keys1);
      while (key8.hasNext()) {
        var key9 = key8.next();
        alphaTab.Settings.DecodeResource(
          settings.RenderingResources,
          key9,
          json.resources[key9]
        );
      }
    } else if (dataAttributes != null) {
      var key10 = $iterator(Object.keys(dataAttributes))();
      while (key10.hasNext()) {
        var key11 = key10.next();
        if (StringTools.startsWith(key11, 'resources')) {
          var property3 = HxOverrides.substr(key11, 9, null);
          alphaTab.Settings.DecodeResource(
            settings.RenderingResources,
            property3,
            dataAttributes[key11]
          );
        }
      }
    }
  };
  alphaTab.Settings.DecodeResource = function(resources, key, value) {
    var _g = key.toLowerCase();
    switch (_g) {
      case 'barnumbercolor':
        resources.BarNumberColor = alphaTab.Settings.DecodeColor(
          value,
          resources.BarNumberColor
        );
        break;
      case 'barnumberfont':
        resources.BarNumberFont = alphaTab.Settings.DecodeFont(
          value,
          resources.BarNumberFont
        );
        break;
      case 'barseparatorcolor':
        resources.BarSeparatorColor = alphaTab.Settings.DecodeColor(
          value,
          resources.BarSeparatorColor
        );
        break;
      case 'copyrightfont':
        resources.CopyrightFont = alphaTab.Settings.DecodeFont(
          value,
          resources.CopyrightFont
        );
        break;
      case 'effectfont':
        resources.EffectFont = alphaTab.Settings.DecodeFont(
          value,
          resources.EffectFont
        );
        break;
      case 'fingeringfont':
        resources.FingeringFont = alphaTab.Settings.DecodeFont(
          value,
          resources.FingeringFont
        );
        break;
      case 'fretboardnumberfont':
        resources.FretboardNumberFont = alphaTab.Settings.DecodeFont(
          value,
          resources.FretboardNumberFont
        );
        break;
      case 'gracefont':
        resources.GraceFont = alphaTab.Settings.DecodeFont(
          value,
          resources.GraceFont
        );
        break;
      case 'mainglyphcolor':
        resources.MainGlyphColor = alphaTab.Settings.DecodeColor(
          value,
          resources.MainGlyphColor
        );
        break;
      case 'markerfont':
        resources.MarkerFont = alphaTab.Settings.DecodeFont(
          value,
          resources.MarkerFont
        );
        break;
      case 'scoreinfocolor':
        resources.ScoreInfoColor = alphaTab.Settings.DecodeColor(
          value,
          resources.ScoreInfoColor
        );
        break;
      case 'secondaryglyphcolor':
        resources.SecondaryGlyphColor = alphaTab.Settings.DecodeColor(
          value,
          resources.SecondaryGlyphColor
        );
        break;
      case 'stafflinecolor':
        resources.StaffLineColor = alphaTab.Settings.DecodeColor(
          value,
          resources.StaffLineColor
        );
        break;
      case 'subtitlefont':
        resources.SubTitleFont = alphaTab.Settings.DecodeFont(
          value,
          resources.SubTitleFont
        );
        break;
      case 'tablaturefont':
        resources.TablatureFont = alphaTab.Settings.DecodeFont(
          value,
          resources.TablatureFont
        );
        break;
      case 'titlefont':
        resources.TitleFont = alphaTab.Settings.DecodeFont(
          value,
          resources.TitleFont
        );
        break;
      case 'wordsfont':
        resources.WordsFont = alphaTab.Settings.DecodeFont(
          value,
          resources.WordsFont
        );
        break;
      default:
    }
  };
  alphaTab.Settings.EncodeColor = function(value) {
    return value.Raw;
  };
  alphaTab.Settings.DecodeColor = function(value, defaultColor) {
    if (value == null) {
      return defaultColor;
    }
    var _g = typeof value;
    switch (_g) {
      case 'number':
        var c = new alphaTab.platform.model.Color(0, 0, 0, 0);
        var raw = value;
        c.Raw = system.Convert.ToInt32_Double(raw);
        c.UpdateRgba();
        return c;
      case 'string':
        var s = value;
        if (StringTools.startsWith(s, '#')) {
          if (s.length == 4) {
            var s1 = HxOverrides.substr(s, 1, 1);
            var tmp = system.Convert.ToUInt8(parseInt(s1, 16) * 17);
            var s2 = HxOverrides.substr(s, 2, 1);
            var tmp1 = system.Convert.ToUInt8(parseInt(s2, 16) * 17);
            var s3 = HxOverrides.substr(s, 3, 1);
            return new alphaTab.platform.model.Color(
              tmp,
              tmp1,
              system.Convert.ToUInt8(parseInt(s3, 16) * 17),
              255
            );
          }
          if (s.length == 5) {
            var s4 = HxOverrides.substr(s, 1, 1);
            var tmp2 = system.Convert.ToUInt8(parseInt(s4, 16) * 17);
            var s5 = HxOverrides.substr(s, 2, 1);
            var tmp3 = system.Convert.ToUInt8(parseInt(s5, 16) * 17);
            var s6 = HxOverrides.substr(s, 3, 1);
            var tmp4 = system.Convert.ToUInt8(parseInt(s6, 16) * 17);
            var s7 = HxOverrides.substr(s, 4, 1);
            return new alphaTab.platform.model.Color(
              tmp2,
              tmp3,
              tmp4,
              system.Convert.ToUInt8(parseInt(s7, 16) * 17)
            );
          }
          if (s.length == 7) {
            var s8 = HxOverrides.substr(s, 1, 2);
            var tmp5 = system.Convert.ToUInt8(parseInt(s8, 16));
            var s9 = HxOverrides.substr(s, 3, 2);
            var tmp6 = system.Convert.ToUInt8(parseInt(s9, 16));
            var s10 = HxOverrides.substr(s, 5, 2);
            return new alphaTab.platform.model.Color(
              tmp5,
              tmp6,
              system.Convert.ToUInt8(parseInt(s10, 16)),
              255
            );
          }
          if (s.length == 9) {
            var s11 = HxOverrides.substr(s, 1, 2);
            var tmp7 = system.Convert.ToUInt8(parseInt(s11, 16));
            var s12 = HxOverrides.substr(s, 3, 2);
            var tmp8 = system.Convert.ToUInt8(parseInt(s12, 16));
            var s13 = HxOverrides.substr(s, 5, 2);
            var tmp9 = system.Convert.ToUInt8(parseInt(s13, 16));
            var s14 = HxOverrides.substr(s, 7, 2);
            return new alphaTab.platform.model.Color(
              tmp7,
              tmp8,
              tmp9,
              system.Convert.ToUInt8(parseInt(s14, 16))
            );
          }
        } else if (
          StringTools.startsWith(s, 'rgba') ||
          StringTools.startsWith(s, 'rgb')
        ) {
          var start = s.indexOf('(');
          var end = s.lastIndexOf(')');
          if (start == -1 || end == -1) {
            return defaultColor;
          }
          var a = HxOverrides.substr(s, start + 1, end - start - 1);
          var this1 = system.Convert.ToUInt16(44);
          var this2 = this1;
          var numbers = system._CsString.CsString_Impl_.Split_CharArray(a, [
            this2
          ]);
          if (numbers.length == 3) {
            return new alphaTab.platform.model.Color(
              system.Convert.ToUInt8(
                alphaTab.platform.Platform.ParseInt(numbers[0])
              ),
              system.Convert.ToUInt8(
                alphaTab.platform.Platform.ParseInt(numbers[1])
              ),
              system.Convert.ToUInt8(
                alphaTab.platform.Platform.ParseInt(numbers[2])
              ),
              255
            );
          }
          if (numbers.length == 4) {
            return new alphaTab.platform.model.Color(
              system.Convert.ToUInt8(
                alphaTab.platform.Platform.ParseInt(numbers[0])
              ),
              system.Convert.ToUInt8(
                alphaTab.platform.Platform.ParseInt(numbers[1])
              ),
              system.Convert.ToUInt8(
                alphaTab.platform.Platform.ParseInt(numbers[2])
              ),
              system.Convert.ToUInt8(
                system.Convert.ToInt32_Single(parseFloat(numbers[3]) * 255)
              )
            );
          }
        }
        break;
      default:
    }
    return defaultColor;
  };
  alphaTab.Settings.EncodeFont = function(value) {
    var font = {};
    font.family = value.Family;
    font.size = value.Size;
    font.style = value.Style;
    return font;
  };
  alphaTab.Settings.DecodeFont = function(value, defaultFont) {
    if (value == null) {
      return defaultFont;
    }
    if (typeof value == 'object' && value['family']) {
      return new alphaTab.platform.model.Font(
        value['family'],
        value['size'],
        js.Boot.__cast(value['style'], Int)
      );
    }
    if (typeof value == 'string' && $global.document) {
      var fontText = value;
      var el = window.document.createElement('span');
      el.setAttribute('style', 'font: ' + fontText);
      var style = el.style;
      var s = style.fontFamily;
      if (s == null || s.length == 0) {
        return defaultFont;
      }
      var family = style.fontFamily;
      if (
        (StringTools.startsWith(family, "'") &&
          StringTools.endsWith(family, "'")) ||
        (StringTools.startsWith(family, '"') &&
          StringTools.endsWith(family, '"'))
      ) {
        family = HxOverrides.substr(family, 1, family.length - 2);
      }
      alphaTab.platform.svg.FontSizes.GenerateFontLookup(family);
      var fontSizeString = style.fontSize.toLowerCase();
      var fontSize;
      switch (fontSizeString) {
        case 'large':
        case 'larger':
          fontSize = 18;
          break;
        case 'medium':
          fontSize = 16;
          break;
        case 'small':
        case 'smaller':
          fontSize = 13;
          break;
        case 'x-large':
          fontSize = 24;
          break;
        case 'x-small':
          fontSize = 10;
          break;
        case 'xx-large':
          fontSize = 32;
          break;
        case 'xx-small':
          fontSize = 7;
          break;
        default:
          try {
            if (StringTools.endsWith(fontSizeString, '%')) {
              fontSize = defaultFont.Size;
            } else if (StringTools.endsWith(fontSizeString, 'em')) {
              var s1 = HxOverrides.substr(
                fontSizeString,
                0,
                fontSizeString.length - 2
              );
              fontSize = parseFloat(s1) * 16;
            } else if (StringTools.endsWith(fontSizeString, 'pt')) {
              var s2 = HxOverrides.substr(
                fontSizeString,
                0,
                fontSizeString.length - 2
              );
              var this1 = 16.0;
              var this2 = 12.0;
              fontSize = (parseFloat(s2) * this1) / this2;
            } else if (StringTools.endsWith(fontSizeString, 'px')) {
              var s3 = HxOverrides.substr(
                fontSizeString,
                0,
                fontSizeString.length - 2
              );
              fontSize = parseFloat(s3);
            } else {
              fontSize = defaultFont.Size;
            }
          } catch (__e) {
            fontSize = defaultFont.Size;
          }
      }
      var fontStyle = 0;
      if (style.fontStyle == 'italic') {
        fontStyle |= 2;
      }
      var fontWeightString = style.fontWeight.toLowerCase();
      switch (fontWeightString) {
        case 'lighter':
        case 'normal':
          break;
        default:
          fontStyle |= 1;
      }
      return new alphaTab.platform.model.Font(family, fontSize, fontStyle);
    }
    return defaultFont;
  };
  alphaTab.Settings.DecodeDisplayMode = function(mode) {
    if (typeof mode == 'number') {
      return mode;
    }
    if (typeof mode == 'string') {
      var s = mode;
      var _g = s.toLowerCase();
      switch (_g) {
        case 'guitarpro':
          return 0;
        case 'songbook':
          return 1;
        default:
      }
    }
    return 0;
  };
  alphaTab.Settings.DecodeFingeringMode = function(mode) {
    if (typeof mode == 'number') {
      return mode;
    }
    if (typeof mode == 'string') {
      var s = mode;
      var _g = s.toLowerCase();
      switch (_g) {
        case 'effectband':
          return 1;
        case 'score':
          return 0;
        default:
      }
    }
    return 0;
  };
  alphaTab.Settings.DecodeLogLevel = function(log) {
    if (typeof log == 'number') {
      return log;
    }
    if (typeof log == 'string') {
      var s = log;
      var _g = s.toLowerCase();
      switch (_g) {
        case 'debug':
          return 1;
        case 'error':
          return 4;
        case 'info':
          return 2;
        case 'none':
          return 0;
        case 'warning':
          return 3;
        default:
      }
    }
    return 2;
  };
  alphaTab.Settings.FillCursorOffset = function(settings, playerOffset) {
    if (typeof playerOffset == 'number') {
      settings.ScrollOffsetX = playerOffset;
      settings.ScrollOffsetY = playerOffset;
    } else if (playerOffset && 'length' in playerOffset) {
      var offsets = playerOffset;
      settings.ScrollOffsetX = offsets[0];
      settings.ScrollOffsetY = offsets[1];
    }
  };
  alphaTab.Settings.StavesFromJson = function(json) {
    var staveSettings;
    if (typeof json == 'string') {
      staveSettings = new alphaTab.StaveSettings(json);
    } else if (json.id) {
      staveSettings = new alphaTab.StaveSettings(json.id);
      if (json.additionalSettings) {
        var json1 = json.additionalSettings;
        var keys2 = Object.keys(json1);
        var key2 = HxOverrides.iter(keys2);
        while (key2.hasNext()) {
          var key21 = key2.next();
          staveSettings.AdditionalSettings[key21.toLowerCase()] =
            json.additionalSettings[key21];
        }
      }
    } else {
      return new alphaTab.StaveSettings('score-tab');
    }
    return staveSettings;
  };
  alphaTab.Settings.LayoutFromJson = function(json) {
    var layout = new alphaTab.LayoutSettings();
    if (typeof json == 'string') {
      layout.Mode = json;
    } else {
      if (json.mode) {
        layout.Mode = json.mode;
      }
      if (json.additionalSettings) {
        var json1 = json.additionalSettings;
        var keys = Object.keys(json1);
        var key = HxOverrides.iter(keys);
        while (key.hasNext()) {
          var key1 = key.next();
          layout.AdditionalSettings[key1.toLowerCase()] =
            json.additionalSettings[key1];
        }
      }
    }
    return layout;
  };
  alphaTab.Settings.AppendScriptName = function(url) {
    if (
      !(url == null || url.length == 0) &&
      !StringTools.endsWith(url, '.js')
    ) {
      if (!StringTools.endsWith(url, '/')) {
        url = url + '/';
      }
      url = url + 'AlphaTab.js';
    }
    return url;
  };
  alphaTab.Settings.EnsureFullUrl = function(relativeUrl) {
    var global = $global;
    if (
      !StringTools.startsWith(relativeUrl, 'http') &&
      !StringTools.startsWith(relativeUrl, 'https') &&
      !StringTools.startsWith(relativeUrl, 'file')
    ) {
      var this1 = '';
      var root = this1;
      root += Std.string(global.location.protocol);
      root += Std.string('//');
      if (global.location.hostname) {
        root += Std.string(global.location.hostname);
      }
      if (global.location.port) {
        root += Std.string(':');
        root += Std.string(global.location.port);
      }
      var directory = global.location.pathname
        .split('/')
        .slice(0, -1)
        .join('/');
      if (directory.length > 0) {
        if (!StringTools.startsWith(directory, '/')) {
          root += Std.string('/');
        }
        root += Std.string(directory);
      }
      if (!StringTools.startsWith(relativeUrl, '/')) {
        root += Std.string('/');
      }
      root += Std.string(relativeUrl);
      return root;
    }
    return relativeUrl;
  };
  alphaTab.Settings.EncodeScrollMode = function(mode) {
    switch (mode) {
      case 0:
        return 'off';
      case 2:
        return 'offScreen';
      default:
        return 'continuous';
    }
  };
  alphaTab.Settings.DecodeScrollMode = function(mode) {
    if (typeof mode == 'number') {
      return mode;
    }
    if (typeof mode == 'string') {
      var s = mode;
      var _g = s.toLowerCase();
      switch (_g) {
        case 'continuous':
        case 'horizontal-bar':
        case 'vertical':
          return 1;
        case 'horizontal-offscreen':
        case 'offscreen':
          return 2;
        case 'off':
          return 0;
        default:
      }
    }
    return 1;
  };
  alphaTab.Settings.get_SongBook = function() {
    var settings = alphaTab.Settings.get_Defaults();
    settings.DisplayMode = 1;
    settings.ApplySongBookDefaults();
    return settings;
  };
  alphaTab.Settings.get_Defaults = function() {
    var settings = new alphaTab.Settings();
    settings.Scale = 1.0;
    settings.StretchForce = 1;
    settings.Width = -1;
    settings.Engine = 'default';
    var this1 = new Int32Array(0);
    settings.TranspositionPitches = this1;
    var this2 = new Int32Array(0);
    settings.DisplayTranspositionPitches = this2;
    settings.SmallGraceTabNotes = true;
    settings.ExtendBendArrowsOnTiedNotes = true;
    settings.ShowParenthesisForTiedBends = true;
    settings.ShowTabNoteOnTiedBend = true;
    settings.DisplayMode = 0;
    settings.FingeringMode = 0;
    settings.ShowZeroOnDiveWhammy = false;
    settings.ExtendLineEffectsToBeatEnd = false;
    settings.SlurHeight = 7;
    var this3 = {};
    settings.ImporterSettings = this3;
    settings.Layout = alphaTab.LayoutSettings.get_Defaults();
    settings.Staves = new alphaTab.StaveSettings('default');
    settings.LogLevel = 2;
    settings.Vibrato = new alphaTab.VibratoPlaybackSettings();
    settings.Vibrato.NoteSlightAmplitude = 2;
    settings.Vibrato.NoteWideAmplitude = 2;
    settings.Vibrato.NoteSlightLength = 480;
    settings.Vibrato.NoteWideLength = 480;
    settings.Vibrato.BeatSlightAmplitude = 3;
    settings.Vibrato.BeatWideAmplitude = 3;
    settings.Vibrato.BeatSlightLength = 240;
    settings.Vibrato.BeatWideLength = 240;
    settings.SongBookBendDuration = 75;
    settings.SongBookDipDuration = 150;
    settings.IncludeNoteBounds = false;
    settings.UseWorkers = true;
    settings.BeatCursorWidth = 3;
    settings.ScrollMode = 1;
    settings.ScrollSpeed = 300;
    settings.RenderingResources = new alphaTab.rendering.RenderingResources();
    alphaTab.Settings.SetDefaults(settings);
    return settings;
  };
  alphaTab.Settings.prototype = {
    ToJson: function() {
      var json = {};
      json.useWorker = this.UseWorkers;
      json.scale = this.Scale;
      json.slurHeight = this.SlurHeight;
      json.width = this.Width;
      json.engine = this.Engine;
      json.stretchForce = this.StretchForce;
      json.forcePianoFingering = this.ForcePianoFingering;
      json.transpositionPitches = this.TranspositionPitches;
      json.displayTranspositionPitches = this.DisplayTranspositionPitches;
      json.logging = this.LogLevel;
      json.smallGraceTabNotes = this.SmallGraceTabNotes;
      json.extendBendArrowsOnTiedNotes = this.ExtendBendArrowsOnTiedNotes;
      json.showParenthesisForTiedBends = this.ShowParenthesisForTiedBends;
      json.showTabNoteOnTiedBend = this.ShowTabNoteOnTiedBend;
      json.displayMode = this.DisplayMode;
      json.fingeringMode = this.FingeringMode;
      json.showZeroOnDiveWhammy = this.ShowZeroOnDiveWhammy;
      json.extendLineEffectsToBeatEnd = this.ExtendLineEffectsToBeatEnd;
      json.songBookBendDuration = this.SongBookBendDuration;
      json.songBookDipDuration = this.SongBookDipDuration;
      json.scriptFile = this.ScriptFile;
      json.fontDirectory = this.FontDirectory;
      json.lazy = this.DisableLazyLoading;
      json.includeNoteBounds = this.IncludeNoteBounds;
      json.vibrato = {};
      json.noteSlightAmplitude = this.Vibrato.NoteSlightAmplitude;
      json.noteWideAmplitude = this.Vibrato.NoteWideAmplitude;
      json.noteSlightLength = this.Vibrato.NoteSlightLength;
      json.noteWideLength = this.Vibrato.NoteWideLength;
      json.beatSlightAmplitude = this.Vibrato.BeatSlightAmplitude;
      json.beatWideAmplitude = this.Vibrato.BeatWideAmplitude;
      json.beatSlightLength = this.Vibrato.BeatSlightLength;
      json.beatWideLength = this.Vibrato.BeatWideLength;
      json.layout = {};
      json.layout.mode = this.Layout.Mode;
      json.layout.additionalSettings = {};
      var this1 = this.Layout.AdditionalSettings;
      var setting = $iterator(Object.keys(this1))();
      while (setting.hasNext()) {
        var setting1 = setting.next();
        json.layout.additionalSettings[
          setting1
        ] = this.Layout.AdditionalSettings[setting1];
      }
      json.importer = {};
      var this2 = this.ImporterSettings;
      var setting2 = $iterator(Object.keys(this2))();
      while (setting2.hasNext()) {
        var setting3 = setting2.next();
        json.importer[setting3] = this.ImporterSettings[setting3];
      }
      json.staves = {};
      json.staves.id = this.Staves.Id;
      json.staves.additionalSettings = {};
      var this3 = this.Staves.AdditionalSettings;
      var additionalSetting = $iterator(Object.keys(this3))();
      while (additionalSetting.hasNext()) {
        var additionalSetting1 = additionalSetting.next();
        json.staves.additionalSettings[
          additionalSetting1
        ] = this.Staves.AdditionalSettings[additionalSetting1];
      }
      json.resources = {};
      json.resources.CopyrightFont = alphaTab.Settings.EncodeFont(
        this.RenderingResources.CopyrightFont
      );
      json.resources.TitleFont = alphaTab.Settings.EncodeFont(
        this.RenderingResources.TitleFont
      );
      json.resources.SubTitleFont = alphaTab.Settings.EncodeFont(
        this.RenderingResources.SubTitleFont
      );
      json.resources.WordsFont = alphaTab.Settings.EncodeFont(
        this.RenderingResources.WordsFont
      );
      json.resources.EffectFont = alphaTab.Settings.EncodeFont(
        this.RenderingResources.EffectFont
      );
      json.resources.FretboardNumberFont = alphaTab.Settings.EncodeFont(
        this.RenderingResources.FretboardNumberFont
      );
      json.resources.TablatureFont = alphaTab.Settings.EncodeFont(
        this.RenderingResources.TablatureFont
      );
      json.resources.GraceFont = alphaTab.Settings.EncodeFont(
        this.RenderingResources.GraceFont
      );
      json.resources.BarNumberFont = alphaTab.Settings.EncodeFont(
        this.RenderingResources.BarNumberFont
      );
      json.resources.FingeringFont = alphaTab.Settings.EncodeFont(
        this.RenderingResources.FingeringFont
      );
      json.resources.MarkerFont = alphaTab.Settings.EncodeFont(
        this.RenderingResources.MarkerFont
      );
      json.resources.StaffLineColor = alphaTab.Settings.EncodeColor(
        this.RenderingResources.StaffLineColor
      );
      json.resources.BarNumberColor = alphaTab.Settings.EncodeColor(
        this.RenderingResources.BarNumberColor
      );
      json.resources.BarSeparatorColor = alphaTab.Settings.EncodeColor(
        this.RenderingResources.BarSeparatorColor
      );
      json.resources.MainGlyphColor = alphaTab.Settings.EncodeColor(
        this.RenderingResources.MainGlyphColor
      );
      json.resources.SecondaryGlyphColor = alphaTab.Settings.EncodeColor(
        this.RenderingResources.SecondaryGlyphColor
      );
      json.resources.ScoreInfoColor = alphaTab.Settings.EncodeColor(
        this.RenderingResources.ScoreInfoColor
      );
      json.fontSizes = alphaTab.platform.svg.FontSizes.FontSizeLookupTables;
      return json;
    },
    ApplySongBookDefaults: function() {
      this.SmallGraceTabNotes = false;
      this.FingeringMode = 1;
      this.ExtendBendArrowsOnTiedNotes = false;
      this.ShowParenthesisForTiedBends = false;
      this.ShowTabNoteOnTiedBend = false;
      this.ShowZeroOnDiveWhammy = true;
    },
    __class__: alphaTab.Settings
  };
  alphaTab.StaveSettings = $hx_exports['alphaTab']['StaveSettings'] = function(
    id
  ) {
    this.Id = null;
    this.AdditionalSettings = null;
    this.Id = id;
    var this1 = {};
    this.AdditionalSettings = this1;
  };
  alphaTab.StaveSettings.__name__ = ['alphaTab', 'StaveSettings'];
  alphaTab.StaveSettings.prototype = {
    Get: function(key, def) {
      var this1 = this.AdditionalSettings;
      var key1 = key.toLowerCase();
      if (this1.hasOwnProperty(key1)) {
        return this.AdditionalSettings[key.toLowerCase()];
      }
      if (this.AdditionalSettings.hasOwnProperty(key)) {
        return this.AdditionalSettings[key];
      }
      return def;
    },
    __class__: alphaTab.StaveSettings
  };
  alphaTab.VibratoPlaybackSettings = $hx_exports['alphaTab'][
    'VibratoPlaybackSettings'
  ] = function() {
    this.NoteWideLength = 0;
    this.NoteWideAmplitude = 0;
    this.NoteSlightLength = 0;
    this.NoteSlightAmplitude = 0;
    this.BeatWideLength = 0;
    this.BeatWideAmplitude = 0;
    this.BeatSlightLength = 0;
    this.BeatSlightAmplitude = 0;
  };
  alphaTab.VibratoPlaybackSettings.__name__ = [
    'alphaTab',
    'VibratoPlaybackSettings'
  ];
  alphaTab.VibratoPlaybackSettings.prototype = {
    __class__: alphaTab.VibratoPlaybackSettings
  };
  alphaTab.audio.BeatTickLookup = $hx_exports['alphaTab']['audio'][
    'BeatTickLookup'
  ] = function() {
    this.Start = 0;
    this.End = 0;
    this.Beat = null;
    this.IsEmptyBar = false;
  };
  alphaTab.audio.BeatTickLookup.__name__ = [
    'alphaTab',
    'audio',
    'BeatTickLookup'
  ];
  alphaTab.audio.BeatTickLookup.prototype = {
    __class__: alphaTab.audio.BeatTickLookup
  };
  alphaTab.audio.GeneralMidi = function() {};
  alphaTab.audio.GeneralMidi.__name__ = ['alphaTab', 'audio', 'GeneralMidi'];
  alphaTab.audio.GeneralMidi.GetValue = function(name) {
    if (alphaTab.audio.GeneralMidi._values == null) {
      var this1 = {};
      alphaTab.audio.GeneralMidi._values = this1;
      alphaTab.audio.GeneralMidi._values['acousticgrandpiano'] = 0;
      alphaTab.audio.GeneralMidi._values['brightacousticpiano'] = 1;
      alphaTab.audio.GeneralMidi._values['electricgrandpiano'] = 2;
      alphaTab.audio.GeneralMidi._values['honkytonkpiano'] = 3;
      alphaTab.audio.GeneralMidi._values['electricpiano1'] = 4;
      alphaTab.audio.GeneralMidi._values['electricpiano2'] = 5;
      alphaTab.audio.GeneralMidi._values['harpsichord'] = 6;
      alphaTab.audio.GeneralMidi._values['clavinet'] = 7;
      alphaTab.audio.GeneralMidi._values['celesta'] = 8;
      alphaTab.audio.GeneralMidi._values['glockenspiel'] = 9;
      alphaTab.audio.GeneralMidi._values['musicbox'] = 10;
      alphaTab.audio.GeneralMidi._values['vibraphone'] = 11;
      alphaTab.audio.GeneralMidi._values['marimba'] = 12;
      alphaTab.audio.GeneralMidi._values['xylophone'] = 13;
      alphaTab.audio.GeneralMidi._values['tubularbells'] = 14;
      alphaTab.audio.GeneralMidi._values['dulcimer'] = 15;
      alphaTab.audio.GeneralMidi._values['drawbarorgan'] = 16;
      alphaTab.audio.GeneralMidi._values['percussiveorgan'] = 17;
      alphaTab.audio.GeneralMidi._values['rockorgan'] = 18;
      alphaTab.audio.GeneralMidi._values['churchorgan'] = 19;
      alphaTab.audio.GeneralMidi._values['reedorgan'] = 20;
      alphaTab.audio.GeneralMidi._values['accordion'] = 21;
      alphaTab.audio.GeneralMidi._values['harmonica'] = 22;
      alphaTab.audio.GeneralMidi._values['tangoaccordion'] = 23;
      alphaTab.audio.GeneralMidi._values['acousticguitarnylon'] = 24;
      alphaTab.audio.GeneralMidi._values['acousticguitarsteel'] = 25;
      alphaTab.audio.GeneralMidi._values['electricguitarjazz'] = 26;
      alphaTab.audio.GeneralMidi._values['electricguitarclean'] = 27;
      alphaTab.audio.GeneralMidi._values['electricguitarmuted'] = 28;
      alphaTab.audio.GeneralMidi._values['overdrivenguitar'] = 29;
      alphaTab.audio.GeneralMidi._values['distortionguitar'] = 30;
      alphaTab.audio.GeneralMidi._values['guitarharmonics'] = 31;
      alphaTab.audio.GeneralMidi._values['acousticbass'] = 32;
      alphaTab.audio.GeneralMidi._values['electricbassfinger'] = 33;
      alphaTab.audio.GeneralMidi._values['electricbasspick'] = 34;
      alphaTab.audio.GeneralMidi._values['fretlessbass'] = 35;
      alphaTab.audio.GeneralMidi._values['slapbass1'] = 36;
      alphaTab.audio.GeneralMidi._values['slapbass2'] = 37;
      alphaTab.audio.GeneralMidi._values['synthbass1'] = 38;
      alphaTab.audio.GeneralMidi._values['synthbass2'] = 39;
      alphaTab.audio.GeneralMidi._values['violin'] = 40;
      alphaTab.audio.GeneralMidi._values['viola'] = 41;
      alphaTab.audio.GeneralMidi._values['cello'] = 42;
      alphaTab.audio.GeneralMidi._values['contrabass'] = 43;
      alphaTab.audio.GeneralMidi._values['tremolostrings'] = 44;
      alphaTab.audio.GeneralMidi._values['pizzicatostrings'] = 45;
      alphaTab.audio.GeneralMidi._values['orchestralharp'] = 46;
      alphaTab.audio.GeneralMidi._values['timpani'] = 47;
      alphaTab.audio.GeneralMidi._values['stringensemble1'] = 48;
      alphaTab.audio.GeneralMidi._values['stringensemble2'] = 49;
      alphaTab.audio.GeneralMidi._values['synthstrings1'] = 50;
      alphaTab.audio.GeneralMidi._values['synthstrings2'] = 51;
      alphaTab.audio.GeneralMidi._values['choiraahs'] = 52;
      alphaTab.audio.GeneralMidi._values['voiceoohs'] = 53;
      alphaTab.audio.GeneralMidi._values['synthvoice'] = 54;
      alphaTab.audio.GeneralMidi._values['orchestrahit'] = 55;
      alphaTab.audio.GeneralMidi._values['trumpet'] = 56;
      alphaTab.audio.GeneralMidi._values['trombone'] = 57;
      alphaTab.audio.GeneralMidi._values['tuba'] = 58;
      alphaTab.audio.GeneralMidi._values['mutedtrumpet'] = 59;
      alphaTab.audio.GeneralMidi._values['frenchhorn'] = 60;
      alphaTab.audio.GeneralMidi._values['brasssection'] = 61;
      alphaTab.audio.GeneralMidi._values['synthbrass1'] = 62;
      alphaTab.audio.GeneralMidi._values['synthbrass2'] = 63;
      alphaTab.audio.GeneralMidi._values['sopranosax'] = 64;
      alphaTab.audio.GeneralMidi._values['altosax'] = 65;
      alphaTab.audio.GeneralMidi._values['tenorsax'] = 66;
      alphaTab.audio.GeneralMidi._values['baritonesax'] = 67;
      alphaTab.audio.GeneralMidi._values['oboe'] = 68;
      alphaTab.audio.GeneralMidi._values['englishhorn'] = 69;
      alphaTab.audio.GeneralMidi._values['bassoon'] = 70;
      alphaTab.audio.GeneralMidi._values['clarinet'] = 71;
      alphaTab.audio.GeneralMidi._values['piccolo'] = 72;
      alphaTab.audio.GeneralMidi._values['flute'] = 73;
      alphaTab.audio.GeneralMidi._values['recorder'] = 74;
      alphaTab.audio.GeneralMidi._values['panflute'] = 75;
      alphaTab.audio.GeneralMidi._values['blownbottle'] = 76;
      alphaTab.audio.GeneralMidi._values['shakuhachi'] = 77;
      alphaTab.audio.GeneralMidi._values['whistle'] = 78;
      alphaTab.audio.GeneralMidi._values['ocarina'] = 79;
      alphaTab.audio.GeneralMidi._values['lead1square'] = 80;
      alphaTab.audio.GeneralMidi._values['lead2sawtooth'] = 81;
      alphaTab.audio.GeneralMidi._values['lead3calliope'] = 82;
      alphaTab.audio.GeneralMidi._values['lead4chiff'] = 83;
      alphaTab.audio.GeneralMidi._values['lead5charang'] = 84;
      alphaTab.audio.GeneralMidi._values['lead6voice'] = 85;
      alphaTab.audio.GeneralMidi._values['lead7fifths'] = 86;
      alphaTab.audio.GeneralMidi._values['lead8bassandlead'] = 87;
      alphaTab.audio.GeneralMidi._values['pad1newage'] = 88;
      alphaTab.audio.GeneralMidi._values['pad2warm'] = 89;
      alphaTab.audio.GeneralMidi._values['pad3polysynth'] = 90;
      alphaTab.audio.GeneralMidi._values['pad4choir'] = 91;
      alphaTab.audio.GeneralMidi._values['pad5bowed'] = 92;
      alphaTab.audio.GeneralMidi._values['pad6metallic'] = 93;
      alphaTab.audio.GeneralMidi._values['pad7halo'] = 94;
      alphaTab.audio.GeneralMidi._values['pad8sweep'] = 95;
      alphaTab.audio.GeneralMidi._values['fx1rain'] = 96;
      alphaTab.audio.GeneralMidi._values['fx2soundtrack'] = 97;
      alphaTab.audio.GeneralMidi._values['fx3crystal'] = 98;
      alphaTab.audio.GeneralMidi._values['fx4atmosphere'] = 99;
      alphaTab.audio.GeneralMidi._values['fx5brightness'] = 100;
      alphaTab.audio.GeneralMidi._values['fx6goblins'] = 101;
      alphaTab.audio.GeneralMidi._values['fx7echoes'] = 102;
      alphaTab.audio.GeneralMidi._values['fx8scifi'] = 103;
      alphaTab.audio.GeneralMidi._values['sitar'] = 104;
      alphaTab.audio.GeneralMidi._values['banjo'] = 105;
      alphaTab.audio.GeneralMidi._values['shamisen'] = 106;
      alphaTab.audio.GeneralMidi._values['koto'] = 107;
      alphaTab.audio.GeneralMidi._values['kalimba'] = 108;
      alphaTab.audio.GeneralMidi._values['bagpipe'] = 109;
      alphaTab.audio.GeneralMidi._values['fiddle'] = 110;
      alphaTab.audio.GeneralMidi._values['shanai'] = 111;
      alphaTab.audio.GeneralMidi._values['tinklebell'] = 112;
      alphaTab.audio.GeneralMidi._values['agogo'] = 113;
      alphaTab.audio.GeneralMidi._values['steeldrums'] = 114;
      alphaTab.audio.GeneralMidi._values['woodblock'] = 115;
      alphaTab.audio.GeneralMidi._values['taikodrum'] = 116;
      alphaTab.audio.GeneralMidi._values['melodictom'] = 117;
      alphaTab.audio.GeneralMidi._values['synthdrum'] = 118;
      alphaTab.audio.GeneralMidi._values['reversecymbal'] = 119;
      alphaTab.audio.GeneralMidi._values['guitarfretnoise'] = 120;
      alphaTab.audio.GeneralMidi._values['breathnoise'] = 121;
      alphaTab.audio.GeneralMidi._values['seashore'] = 122;
      alphaTab.audio.GeneralMidi._values['birdtweet'] = 123;
      alphaTab.audio.GeneralMidi._values['telephonering'] = 124;
      alphaTab.audio.GeneralMidi._values['helicopter'] = 125;
      alphaTab.audio.GeneralMidi._values['applause'] = 126;
      alphaTab.audio.GeneralMidi._values['gunshot'] = 127;
    }
    name = StringTools.replace(name.toLowerCase(), ' ', '');
    if (alphaTab.audio.GeneralMidi._values.hasOwnProperty(name)) {
      return alphaTab.audio.GeneralMidi._values[name];
    } else {
      return 0;
    }
  };
  alphaTab.audio.GeneralMidi.IsPiano = function(program) {
    if (!(program <= 7)) {
      if (program >= 16) {
        return program <= 23;
      } else {
        return false;
      }
    } else {
      return true;
    }
  };
  alphaTab.audio.GeneralMidi.IsGuitar = function(program) {
    if (!((program >= 24 && program <= 39) || program == 105)) {
      return program == 43;
    } else {
      return true;
    }
  };
  alphaTab.audio.GeneralMidi.prototype = {
    __class__: alphaTab.audio.GeneralMidi
  };
  alphaTab.audio.MasterBarTickLookup = $hx_exports['alphaTab']['audio'][
    'MasterBarTickLookup'
  ] = function() {
    this.Start = 0;
    this.End = 0;
    this.Tempo = 0;
    this.MasterBar = null;
    this.Beats = null;
    this.NextMasterBar = null;
    var this1 = [];
    this.Beats = this1;
  };
  alphaTab.audio.MasterBarTickLookup.__name__ = [
    'alphaTab',
    'audio',
    'MasterBarTickLookup'
  ];
  alphaTab.audio.MasterBarTickLookup.prototype = {
    Finish: function() {
      var comparison = function(a, b) {
        return a.Start - b.Start;
      };
      this.Beats.sort(function(a1, b1) {
        return comparison(a1, b1);
      });
    },
    AddBeat: function(beat) {
      this.Beats.push(beat);
    },
    __class__: alphaTab.audio.MasterBarTickLookup
  };
  alphaTab.audio.MidiTickLookup = $hx_exports['alphaTab']['audio'][
    'MidiTickLookup'
  ] = function() {
    this._currentMasterBar = null;
    this.MasterBarLookup = null;
    this.MasterBars = null;
    var this1 = [];
    this.MasterBars = this1;
    var this2 = {};
    this.MasterBarLookup = this2;
  };
  alphaTab.audio.MidiTickLookup.__name__ = [
    'alphaTab',
    'audio',
    'MidiTickLookup'
  ];
  alphaTab.audio.MidiTickLookup.prototype = {
    Finish: function() {
      var previous = null;
      var bar = $iterator(this.MasterBars)();
      while (bar.hasNext()) {
        var bar1 = bar.next();
        bar1.Finish();
        if (previous != null) {
          previous.NextMasterBar = bar1;
        }
        previous = bar1;
      }
    },
    FindBeat: function(tracks, tick) {
      var masterBar = this.FindMasterBar(tick);
      if (masterBar == null) {
        return null;
      }
      var this1 = {};
      var trackLookup = this1;
      var track = HxOverrides.iter(tracks);
      while (track.hasNext()) {
        var track1 = track.next();
        trackLookup[track1.Index] = true;
      }
      var beat = null;
      var index = 0;
      var beats = masterBar.Beats;
      var b = 0;
      while (b < beats.length) {
        var currentBeat = beats[b];
        if (
          !trackLookup.hasOwnProperty(
            currentBeat.Beat.Voice.Bar.Staff.Track.Index
          )
        ) {
          ++b;
          continue;
        }
        if (currentBeat.Start <= tick && tick < currentBeat.End) {
          if (beat == null || beat.Start < currentBeat.Start) {
            beat = beats[b];
            index = b;
          }
        } else if (currentBeat.End > tick) {
          break;
        }
        ++b;
      }
      if (beat == null) {
        return null;
      }
      var nextBeat = null;
      var b1 = index + 1;
      while (b1 < beats.length) {
        var currentBeat1 = beats[b1];
        if (
          currentBeat1.Start > beat.Start &&
          trackLookup.hasOwnProperty(
            currentBeat1.Beat.Voice.Bar.Staff.Track.Index
          )
        ) {
          nextBeat = currentBeat1;
          break;
        }
        ++b1;
      }
      if (nextBeat == null && masterBar.NextMasterBar != null) {
        var nextBar = masterBar.NextMasterBar;
        beats = nextBar.Beats;
        var b2 = 0;
        while (b2 < beats.length) {
          var currentBeat2 = beats[b2];
          if (
            trackLookup.hasOwnProperty(
              currentBeat2.Beat.Voice.Bar.Staff.Track.Index
            )
          ) {
            nextBeat = currentBeat2;
            break;
          }
          ++b2;
        }
      }
      var result = new alphaTab.audio.MidiTickLookupFindBeatResult();
      result.CurrentBeat = beat.Beat;
      result.NextBeat = nextBeat == null ? null : nextBeat.Beat;
      result.Duration = alphaTab.audio.MidiUtils.TicksToMillis(
        beat.End - beat.Start,
        masterBar.Tempo
      );
      return result;
    },
    FindMasterBar: function(tick) {
      var bars = this.MasterBars;
      var bottom = 0;
      var top = bars.length - 1;
      while (bottom <= top) {
        var middle = ((top + bottom) / 2) | 0;
        var bar = bars[middle];
        if (tick >= bar.Start && tick < bar.End) {
          return bar;
        }
        if (tick < bar.Start) {
          top = middle - 1;
        } else {
          bottom = middle + 1;
        }
      }
      return null;
    },
    GetMasterBar: function(bar) {
      if (!this.MasterBarLookup.hasOwnProperty(bar.Index)) {
        var _tmp = new alphaTab.audio.MasterBarTickLookup();
        _tmp.Start = 0;
        _tmp.End = 0;
        var this1 = [];
        _tmp.Beats = this1;
        _tmp.MasterBar = bar;
        return _tmp;
      }
      return this.MasterBarLookup[bar.Index];
    },
    GetMasterBarStart: function(bar) {
      if (!this.MasterBarLookup.hasOwnProperty(bar.Index)) {
        return 0;
      }
      return this.MasterBarLookup[bar.Index].Start;
    },
    AddMasterBar: function(masterBar) {
      this.MasterBars.push(masterBar);
      this._currentMasterBar = masterBar;
      if (!this.MasterBarLookup.hasOwnProperty(masterBar.MasterBar.Index)) {
        this.MasterBarLookup[masterBar.MasterBar.Index] = masterBar;
      }
    },
    AddBeat: function(beat) {
      this._currentMasterBar.AddBeat(beat);
    },
    __class__: alphaTab.audio.MidiTickLookup
  };
  alphaTab.audio.MidiTickLookupFindBeatResult = $hx_exports['alphaTab'][
    'audio'
  ]['MidiTickLookupFindBeatResult'] = function() {
    this.CurrentBeat = null;
    this.NextBeat = null;
    this.Duration = 0;
  };
  alphaTab.audio.MidiTickLookupFindBeatResult.__name__ = [
    'alphaTab',
    'audio',
    'MidiTickLookupFindBeatResult'
  ];
  alphaTab.audio.MidiTickLookupFindBeatResult.prototype = {
    __class__: alphaTab.audio.MidiTickLookupFindBeatResult
  };
  alphaTab.audio.MidiUtils = function() {};
  alphaTab.audio.MidiUtils.__name__ = ['alphaTab', 'audio', 'MidiUtils'];
  alphaTab.audio.MidiUtils.TicksToMillis = function(ticks, tempo) {
    return system.Convert.ToInt32_Double(ticks * (60000.0 / (tempo * 960)));
  };
  alphaTab.audio.MidiUtils.MillisToTicks = function(millis, tempo) {
    return system.Convert.ToInt32_Double(millis / (60000.0 / (tempo * 960)));
  };
  alphaTab.audio.MidiUtils.ToTicks = function(duration) {
    return alphaTab.audio.MidiUtils.ValueToTicks(duration);
  };
  alphaTab.audio.MidiUtils.ValueToTicks = function(duration) {
    var this1 = duration;
    var denomninator = this1;
    if (denomninator < 0) {
      denomninator = 1 / -denomninator;
    }
    return system.Convert.ToInt32_Single(960 * (4.0 / denomninator));
  };
  alphaTab.audio.MidiUtils.ApplyDot = function(ticks, doubleDotted) {
    if (doubleDotted) {
      return ticks + ((ticks / 4) | 0) * 3;
    }
    return ticks + ((ticks / 2) | 0);
  };
  alphaTab.audio.MidiUtils.ApplyTuplet = function(
    ticks,
    numerator,
    denominator
  ) {
    return ((ticks * denominator) / numerator) | 0;
  };
  alphaTab.audio.MidiUtils.RemoveTuplet = function(
    ticks,
    numerator,
    denominator
  ) {
    return ((ticks * numerator) / denominator) | 0;
  };
  alphaTab.audio.MidiUtils.DynamicToVelocity = function(dyn) {
    return 15 + dyn * 16;
  };
  alphaTab.audio.generator = {};
  alphaTab.audio.generator.IMidiFileHandler = $hx_exports['alphaTab']['audio'][
    'generator'
  ]['IMidiFileHandler'] = function() {};
  alphaTab.audio.generator.IMidiFileHandler.__name__ = [
    'alphaTab',
    'audio',
    'generator',
    'IMidiFileHandler'
  ];
  alphaTab.audio.generator.IMidiFileHandler.prototype = {
    __class__: alphaTab.audio.generator.IMidiFileHandler
  };
  alphaTab.audio.generator.AlphaSynthMidiFileHandler = $hx_exports['alphaTab'][
    'audio'
  ]['generator']['AlphaSynthMidiFileHandler'] = function(midiFile) {
    this._midiFile = null;
    this._midiFile = midiFile;
  };
  alphaTab.audio.generator.AlphaSynthMidiFileHandler.__name__ = [
    'alphaTab',
    'audio',
    'generator',
    'AlphaSynthMidiFileHandler'
  ];
  alphaTab.audio.generator.AlphaSynthMidiFileHandler.__interfaces__ = [
    alphaTab.audio.generator.IMidiFileHandler
  ];
  alphaTab.audio.generator.AlphaSynthMidiFileHandler.FixValue = function(
    value
  ) {
    if (value > 127) {
      return 127;
    }
    if (value < 0) {
      return 0;
    }
    return system.Convert.ToUInt8(value);
  };
  alphaTab.audio.generator.AlphaSynthMidiFileHandler.prototype = {
    AddTimeSignature: function(
      tick,
      timeSignatureNumerator,
      timeSignatureDenominator
    ) {
      var denominatorIndex = 0;
      while (true) {
        timeSignatureDenominator = timeSignatureDenominator >> 1;
        if (!(timeSignatureDenominator > 0)) {
          break;
        }
        ++denominatorIndex;
      }
      var message = new alphaTab.audio.synth.midi.event.MetaDataEvent(
        tick,
        255,
        system.Convert.ToUInt8(88),
        new Uint8Array([
          system.Convert.ToUInt8(timeSignatureNumerator & 255),
          system.Convert.ToUInt8(denominatorIndex & 255),
          48,
          8
        ])
      );
      this._midiFile.AddEvent(message);
    },
    AddRest: function(track, tick, channel) {
      var message = new alphaTab.audio.synth.midi.event.SystemExclusiveEvent(
        tick,
        system.Convert.ToUInt8(240),
        0,
        new Uint8Array([255])
      );
      this._midiFile.AddEvent(message);
    },
    AddNote: function(track, start, length, key, dynamicValue, channel) {
      var velocity = alphaTab.audio.MidiUtils.DynamicToVelocity(dynamicValue);
      var noteOn = this.MakeCommand(system.Convert.ToUInt8(144), channel);
      var noteOn1 = alphaTab.audio.generator.AlphaSynthMidiFileHandler.FixValue(
        key
      );
      var this1 = system.Convert.ToUInt8(velocity);
      var noteOn2 = new alphaTab.audio.synth.midi.event.MidiEvent(
        start,
        noteOn,
        noteOn1,
        alphaTab.audio.generator.AlphaSynthMidiFileHandler.FixValue(this1)
      );
      this._midiFile.AddEvent(noteOn2);
      var noteOff = this.MakeCommand(system.Convert.ToUInt8(128), channel);
      var noteOff1 = alphaTab.audio.generator.AlphaSynthMidiFileHandler.FixValue(
        key
      );
      var this2 = system.Convert.ToUInt8(velocity);
      var noteOff2 = new alphaTab.audio.synth.midi.event.MidiEvent(
        start + length,
        noteOff,
        noteOff1,
        alphaTab.audio.generator.AlphaSynthMidiFileHandler.FixValue(this2)
      );
      this._midiFile.AddEvent(noteOff2);
    },
    MakeCommand: function(command, channel) {
      return system.Convert.ToUInt8((command & 240) | (channel & 15));
    },
    AddControlChange: function(track, tick, channel, controller, value) {
      var message = new alphaTab.audio.synth.midi.event.MidiEvent(
        tick,
        this.MakeCommand(system.Convert.ToUInt8(176), channel),
        alphaTab.audio.generator.AlphaSynthMidiFileHandler.FixValue(controller),
        alphaTab.audio.generator.AlphaSynthMidiFileHandler.FixValue(value)
      );
      this._midiFile.AddEvent(message);
    },
    AddProgramChange: function(track, tick, channel, program) {
      var message = new alphaTab.audio.synth.midi.event.MidiEvent(
        tick,
        this.MakeCommand(system.Convert.ToUInt8(192), channel),
        alphaTab.audio.generator.AlphaSynthMidiFileHandler.FixValue(program),
        0
      );
      this._midiFile.AddEvent(message);
    },
    AddTempo: function(tick, tempo) {
      var tempoInUsq = (60000000 / tempo) | 0;
      var message = new alphaTab.audio.synth.midi.event.MetaNumberEvent(
        tick,
        255,
        system.Convert.ToUInt8(81),
        tempoInUsq
      );
      this._midiFile.AddEvent(message);
    },
    AddBend: function(track, tick, channel, value) {
      var message = new alphaTab.audio.synth.midi.event.MidiEvent(
        tick,
        this.MakeCommand(system.Convert.ToUInt8(224), channel),
        0,
        alphaTab.audio.generator.AlphaSynthMidiFileHandler.FixValue(value)
      );
      this._midiFile.AddEvent(message);
    },
    FinishTrack: function(track, tick) {
      var message = system.Convert.ToUInt8(47);
      var this1 = new Uint8Array(0);
      var message1 = new alphaTab.audio.synth.midi.event.MetaDataEvent(
        tick,
        255,
        message,
        this1
      );
      this._midiFile.AddEvent(message1);
    },
    __class__: alphaTab.audio.generator.AlphaSynthMidiFileHandler
  };
  alphaTab.audio.generator.MidiFileGenerator = $hx_exports['alphaTab']['audio'][
    'generator'
  ]['MidiFileGenerator'] = function(score, settings, handler) {
    this._score = null;
    this._settings = null;
    this._handler = null;
    this._currentTempo = 0;
    this._currentBarRepeatLookup = null;
    this.TickLookup = null;
    this._score = score;
    this._settings = settings;
    this._currentTempo = this._score.Tempo;
    this._handler = handler;
    this.TickLookup = new alphaTab.audio.MidiTickLookup();
  };
  alphaTab.audio.generator.MidiFileGenerator.__name__ = [
    'alphaTab',
    'audio',
    'generator',
    'MidiFileGenerator'
  ];
  alphaTab.audio.generator.MidiFileGenerator.ToChannelShort = function(data) {
    var value = Math.max(-32768, Math.min(32767, data * 8 - 1));
    return Math.max(value, -1) + 1;
  };
  alphaTab.audio.generator.MidiFileGenerator.prototype = {
    Generate: function() {
      var i = 0;
      var j = this._score.Tracks.length;
      while (i < j) {
        this.GenerateTrack(this._score.Tracks[i]);
        ++i;
      }
      alphaTab.util.Logger.Info('Midi', 'Begin midi generation', null);
      var controller = new alphaTab.audio.generator.MidiPlaybackController(
        this._score
      );
      var previousMasterBar = null;
      while (!controller.get_Finished()) {
        var index = controller.Index;
        var bar = this._score.MasterBars[index];
        var currentTick = controller.CurrentTick;
        controller.ProcessCurrent();
        if (controller.ShouldPlay) {
          this.GenerateMasterBar(bar, previousMasterBar, currentTick);
          var i1 = 0;
          var j1 = this._score.Tracks.length;
          while (i1 < j1) {
            var track = this._score.Tracks[i1];
            var k = 0;
            var l = track.Staves.length;
            while (k < l) {
              var staff = track.Staves[k];
              if (index < staff.Bars.length) {
                this.GenerateBar(staff.Bars[index], currentTick);
              }
              ++k;
            }
            ++i1;
          }
        }
        controller.MoveNext();
        previousMasterBar = bar;
      }
      var i2 = 0;
      var j2 = this._score.Tracks.length;
      while (i2 < j2) {
        this._handler.FinishTrack(
          this._score.Tracks[i2].Index,
          controller.CurrentTick
        );
        ++i2;
      }
      this.TickLookup.Finish();
      alphaTab.util.Logger.Info('Midi', 'Midi generation done', null);
    },
    GenerateTrack: function(track) {
      this.GenerateChannel(
        track,
        system.Convert.ToUInt8(track.PlaybackInfo.PrimaryChannel),
        track.PlaybackInfo
      );
      if (
        track.PlaybackInfo.PrimaryChannel != track.PlaybackInfo.SecondaryChannel
      ) {
        this.GenerateChannel(
          track,
          system.Convert.ToUInt8(track.PlaybackInfo.SecondaryChannel),
          track.PlaybackInfo
        );
      }
    },
    GenerateChannel: function(track, channel, playbackInfo) {
      var volume = alphaTab.audio.generator.MidiFileGenerator.ToChannelShort(
        playbackInfo.Volume
      );
      var balance = alphaTab.audio.generator.MidiFileGenerator.ToChannelShort(
        playbackInfo.Balance
      );
      this._handler.AddControlChange(
        track.Index,
        0,
        channel,
        system.Convert.ToUInt8(7),
        system.Convert.ToUInt8(volume)
      );
      this._handler.AddControlChange(
        track.Index,
        0,
        channel,
        system.Convert.ToUInt8(10),
        system.Convert.ToUInt8(balance)
      );
      this._handler.AddControlChange(
        track.Index,
        0,
        channel,
        system.Convert.ToUInt8(11),
        127
      );
      this._handler.AddControlChange(
        track.Index,
        0,
        channel,
        system.Convert.ToUInt8(100),
        0
      );
      this._handler.AddControlChange(
        track.Index,
        0,
        channel,
        system.Convert.ToUInt8(101),
        0
      );
      this._handler.AddControlChange(
        track.Index,
        0,
        channel,
        system.Convert.ToUInt8(38),
        0
      );
      this._handler.AddControlChange(
        track.Index,
        0,
        channel,
        system.Convert.ToUInt8(6),
        12
      );
      this._handler.AddProgramChange(
        track.Index,
        0,
        channel,
        system.Convert.ToUInt8(playbackInfo.Program)
      );
    },
    GenerateMasterBar: function(masterBar, previousMasterBar, currentTick) {
      if (
        previousMasterBar == null ||
        previousMasterBar.TimeSignatureDenominator !=
          masterBar.TimeSignatureDenominator ||
        previousMasterBar.TimeSignatureNumerator !=
          masterBar.TimeSignatureNumerator
      ) {
        this._handler.AddTimeSignature(
          currentTick,
          masterBar.TimeSignatureNumerator,
          masterBar.TimeSignatureDenominator
        );
      }
      if (previousMasterBar == null) {
        this._handler.AddTempo(currentTick, masterBar.Score.Tempo);
        this._currentTempo = masterBar.Score.Tempo;
      } else if (masterBar.TempoAutomation != null) {
        this._handler.AddTempo(
          currentTick,
          system.Convert.ToInt32_Single(masterBar.TempoAutomation.Value)
        );
        this._currentTempo = system.Convert.ToInt32_Single(
          masterBar.TempoAutomation.Value
        );
      }
      var masterBarLookup = new alphaTab.audio.MasterBarTickLookup();
      masterBarLookup.MasterBar = masterBar;
      masterBarLookup.Start = currentTick;
      masterBarLookup.Tempo = this._currentTempo;
      masterBarLookup.End =
        masterBarLookup.Start + masterBar.CalculateDuration();
      this.TickLookup.AddMasterBar(masterBarLookup);
    },
    GenerateBar: function(bar, barStartTick) {
      var playbackBar = this.GetPlaybackBar(bar);
      this._currentBarRepeatLookup = null;
      var i = 0;
      var j = playbackBar.Voices.length;
      while (i < j) {
        this.GenerateVoice(playbackBar.Voices[i], barStartTick, bar);
        ++i;
      }
    },
    GetPlaybackBar: function(bar) {
      var _g = bar.SimileMark;
      switch (_g) {
        case 1:
          if (bar.PreviousBar != null) {
            bar = this.GetPlaybackBar(bar.PreviousBar);
          }
          break;
        case 2:
          if (bar.PreviousBar != null && bar.PreviousBar.PreviousBar != null) {
            bar = this.GetPlaybackBar(bar.PreviousBar.PreviousBar);
          }
          break;
        case 3:
          if (bar.PreviousBar != null && bar.PreviousBar.PreviousBar != null) {
            bar = this.GetPlaybackBar(bar.PreviousBar.PreviousBar);
          }
          break;
        default:
      }
      return bar;
    },
    GenerateVoice: function(voice, barStartTick, realBar) {
      if (voice.IsEmpty && (!voice.Bar.get_IsEmpty() || voice.Index != 0)) {
        return;
      }
      var i = 0;
      var j = voice.Beats.length;
      while (i < j) {
        this.GenerateBeat(voice.Beats[i], barStartTick, realBar);
        ++i;
      }
    },
    GenerateBeat: function(beat, barStartTick, realBar) {
      var beatStart = beat.PlaybackStart;
      var audioDuration = beat.Voice.Bar.get_IsEmpty()
        ? beat.Voice.Bar.get_MasterBar().CalculateDuration()
        : beat.PlaybackDuration;
      var beatLookup = new alphaTab.audio.BeatTickLookup();
      beatLookup.Start = barStartTick + beatStart;
      var realTickOffset =
        beat.NextBeat == null
          ? audioDuration
          : beat.NextBeat.get_AbsolutePlaybackStart() -
            beat.get_AbsolutePlaybackStart();
      beatLookup.End = barStartTick + beatStart;
      beatLookup.End =
        beatLookup.End +
        (realTickOffset > audioDuration ? realTickOffset : audioDuration);
      if (realBar == beat.Voice.Bar) {
        beatLookup.Beat = beat;
        this.TickLookup.AddBeat(beatLookup);
      } else {
        beatLookup.IsEmptyBar = true;
        beatLookup.Beat = realBar.Voices[0].Beats[0];
        if (this._currentBarRepeatLookup == null) {
          this._currentBarRepeatLookup = beatLookup;
          this.TickLookup.AddBeat(this._currentBarRepeatLookup);
        } else {
          this._currentBarRepeatLookup.End = beatLookup.End;
        }
      }
      var track = beat.Voice.Bar.Staff.Track;
      var i = 0;
      var j = beat.Automations.length;
      while (i < j) {
        this.GenerateAutomation(beat, beat.Automations[i], barStartTick);
        ++i;
      }
      if (beat.get_IsRest()) {
        this._handler.AddRest(
          track.Index,
          barStartTick + beatStart,
          track.PlaybackInfo.PrimaryChannel
        );
      } else {
        var brushInfo = this.GetBrushInfo(beat);
        var i1 = 0;
        var j1 = beat.Notes.length;
        while (i1 < j1) {
          var n = beat.Notes[i1];
          this.GenerateNote(
            n,
            barStartTick + beatStart,
            audioDuration,
            brushInfo
          );
          ++i1;
        }
      }
      if (beat.Vibrato != 0) {
        var phaseLength = 240;
        var bendAmplitude = 3;
        var _g = beat.Vibrato;
        switch (_g) {
          case 1:
            phaseLength = this._settings.Vibrato.BeatSlightLength;
            bendAmplitude = this._settings.Vibrato.BeatSlightAmplitude;
            break;
          case 2:
            phaseLength = this._settings.Vibrato.BeatWideLength;
            bendAmplitude = this._settings.Vibrato.BeatWideAmplitude;
            break;
          default:
        }
        this.GenerateVibratorWithParams(
          beat.Voice.Bar.Staff.Track,
          barStartTick + beatStart,
          beat.PlaybackDuration,
          phaseLength,
          bendAmplitude,
          track.PlaybackInfo.SecondaryChannel
        );
      }
    },
    GenerateNote: function(note, beatStart, beatDuration, brushInfo) {
      var track = note.Beat.Voice.Bar.Staff.Track;
      var staff = note.Beat.Voice.Bar.Staff;
      var noteKey = note.get_RealValue();
      var brushOffset =
        note.get_IsStringed() && note.String <= brushInfo.length
          ? brushInfo[note.String - 1]
          : 0;
      var noteStart = beatStart + brushOffset;
      var noteDuration = this.GetNoteDuration(note, beatDuration);
      noteDuration.UntilTieEnd = noteDuration.UntilTieEnd - brushOffset;
      noteDuration.NoteOnly = noteDuration.NoteOnly - brushOffset;
      noteDuration.LetRingEnd = noteDuration.LetRingEnd - brushOffset;
      var dynamicValue = this.GetDynamicValue(note);
      var channel =
        note.get_HasBend() ||
        note.Beat.get_HasWhammyBar() ||
        note.Beat.Vibrato != 0
          ? track.PlaybackInfo.SecondaryChannel
          : track.PlaybackInfo.PrimaryChannel;
      var initialBend = 64;
      if (note.get_HasBend()) {
        var this1 = note.BendPoints[0].Value * 2.75;
        initialBend =
          initialBend + system.Convert.ToInt32_Double(Math.round(this1));
      } else if (note.Beat.get_HasWhammyBar()) {
        var this2 = note.Beat.WhammyBarPoints[0].Value * 2.75;
        initialBend =
          initialBend + system.Convert.ToInt32_Double(Math.round(this2));
      } else if (note.IsTieDestination) {
        initialBend = 0;
      }
      if (initialBend > 0) {
        this._handler.AddBend(
          track.Index,
          noteStart,
          system.Convert.ToUInt8(channel),
          initialBend
        );
      }
      if (note.Beat.FadeIn) {
        this.GenerateFadeIn(
          note,
          noteStart,
          noteDuration,
          noteKey,
          dynamicValue
        );
      }
      if (note.get_IsTrill() && !staff.IsPercussion) {
        this.GenerateTrill(
          note,
          noteStart,
          noteDuration,
          noteKey,
          dynamicValue,
          channel
        );
        return;
      }
      if (note.Beat.get_IsTremolo()) {
        this.GenerateTremoloPicking(
          note,
          noteStart,
          noteDuration,
          noteKey,
          dynamicValue,
          channel
        );
        return;
      }
      if (note.get_HasBend()) {
        this.GenerateBend(
          note,
          noteStart,
          noteDuration,
          noteKey,
          dynamicValue,
          channel
        );
      } else if (note.Beat.get_HasWhammyBar() && note.Index == 0) {
        this.GenerateWhammy(
          note.Beat,
          noteStart,
          noteDuration,
          noteKey,
          dynamicValue,
          channel
        );
      } else if (note.SlideType != 0) {
        this.GenerateSlide(
          note,
          noteStart,
          noteDuration,
          noteKey,
          dynamicValue,
          channel
        );
      } else if (note.Vibrato != 0) {
        this.GenerateVibrato(
          note,
          noteStart,
          noteDuration,
          noteKey,
          dynamicValue,
          channel
        );
      }
      if (!note.IsTieDestination) {
        var noteSoundDuration = Math.max(
          noteDuration.UntilTieEnd,
          noteDuration.LetRingEnd
        );
        this._handler.AddNote(
          track.Index,
          noteStart,
          noteSoundDuration,
          system.Convert.ToUInt8(noteKey),
          dynamicValue,
          system.Convert.ToUInt8(channel)
        );
      }
    },
    GetNoteDuration: function(note, duration) {
      var durationWithEffects = new alphaTab.audio.generator.MidiNoteDuration();
      durationWithEffects.NoteOnly = duration;
      durationWithEffects.UntilTieEnd = duration;
      durationWithEffects.LetRingEnd = duration;
      if (note.IsDead) {
        durationWithEffects.NoteOnly = this.ApplyStaticDuration(30, duration);
        durationWithEffects.UntilTieEnd = durationWithEffects.NoteOnly;
        durationWithEffects.LetRingEnd = durationWithEffects.NoteOnly;
        return durationWithEffects;
      }
      if (note.IsPalmMute) {
        durationWithEffects.NoteOnly = this.ApplyStaticDuration(80, duration);
        durationWithEffects.UntilTieEnd = durationWithEffects.NoteOnly;
        durationWithEffects.LetRingEnd = durationWithEffects.NoteOnly;
        return durationWithEffects;
      }
      if (note.IsStaccato) {
        durationWithEffects.NoteOnly = (duration / 2) | 0;
        durationWithEffects.UntilTieEnd = durationWithEffects.NoteOnly;
        durationWithEffects.LetRingEnd = durationWithEffects.NoteOnly;
        return durationWithEffects;
      }
      if (note.get_IsTieOrigin()) {
        var endNote = note.TieDestination;
        if (endNote != null) {
          if (!note.IsTieDestination) {
            var startTick = note.Beat.get_AbsolutePlaybackStart();
            var tieDestinationDuration = this.GetNoteDuration(
              endNote,
              endNote.Beat.PlaybackDuration
            );
            var endTick =
              endNote.Beat.get_AbsolutePlaybackStart() +
              tieDestinationDuration.UntilTieEnd;
            durationWithEffects.UntilTieEnd = endTick - startTick;
          } else {
            var tieDestinationDuration1 = this.GetNoteDuration(
              endNote,
              endNote.Beat.PlaybackDuration
            );
            durationWithEffects.UntilTieEnd =
              duration + tieDestinationDuration1.UntilTieEnd;
          }
        }
      }
      if (note.IsLetRing && this._settings.DisplayMode == 0) {
        var lastLetRingBeat = note.Beat;
        var letRingEnd = 0;
        var maxDuration = note.Beat.Voice.Bar.get_MasterBar().CalculateDuration();
        while (lastLetRingBeat.NextBeat != null) {
          var next = lastLetRingBeat.NextBeat;
          if (next.get_IsRest()) {
            break;
          }
          if (note.get_IsStringed() && next.HasNoteOnString(note.String)) {
            break;
          }
          lastLetRingBeat = lastLetRingBeat.NextBeat;
          letRingEnd =
            lastLetRingBeat.get_AbsolutePlaybackStart() -
            note.Beat.get_AbsolutePlaybackStart() +
            lastLetRingBeat.PlaybackDuration;
          if (letRingEnd > maxDuration) {
            letRingEnd = maxDuration;
            break;
          }
        }
        if (lastLetRingBeat == note.Beat) {
          durationWithEffects.LetRingEnd = duration;
        } else {
          durationWithEffects.LetRingEnd = letRingEnd;
        }
      } else {
        durationWithEffects.LetRingEnd = durationWithEffects.UntilTieEnd;
      }
      return durationWithEffects;
    },
    ApplyStaticDuration: function(duration, maximum) {
      var value = ((this._currentTempo * duration) / 60) | 0;
      return Math.min(value, maximum);
    },
    GetDynamicValue: function(note) {
      var dynamicValue = note.Dynamic;
      if (
        !note.Beat.Voice.Bar.Staff.IsPercussion &&
        note.HammerPullOrigin != null
      ) {
        --dynamicValue;
      }
      if (note.IsGhost) {
        --dynamicValue;
      }
      var _g = note.Accentuated;
      switch (_g) {
        case 1:
          ++dynamicValue;
          break;
        case 2:
          dynamicValue += 2;
          break;
        default:
      }
      return dynamicValue;
    },
    GenerateFadeIn: function(
      note,
      noteStart,
      noteDuration,
      noteKey,
      dynamicValue
    ) {
      var track = note.Beat.Voice.Bar.Staff.Track;
      var endVolume = alphaTab.audio.generator.MidiFileGenerator.ToChannelShort(
        track.PlaybackInfo.Volume
      );
      var volumeFactor =
        js.Boot.__cast(endVolume, Float) / noteDuration.NoteOnly;
      var tickStep = 120;
      var steps = (noteDuration.NoteOnly / tickStep) | 0;
      var endTick = noteStart + noteDuration.NoteOnly;
      var i = steps - 1;
      while (i >= 0) {
        var tick = endTick - i * tickStep;
        var volume = (tick - noteStart) * volumeFactor;
        if (i == steps - 1) {
          this._handler.AddControlChange(
            track.Index,
            noteStart,
            system.Convert.ToUInt8(track.PlaybackInfo.PrimaryChannel),
            system.Convert.ToUInt8(7),
            system.Convert.ToUInt8(system.Convert.ToInt32_Single(volume))
          );
          this._handler.AddControlChange(
            track.Index,
            noteStart,
            system.Convert.ToUInt8(track.PlaybackInfo.SecondaryChannel),
            system.Convert.ToUInt8(7),
            system.Convert.ToUInt8(system.Convert.ToInt32_Single(volume))
          );
        }
        this._handler.AddControlChange(
          track.Index,
          tick,
          system.Convert.ToUInt8(track.PlaybackInfo.PrimaryChannel),
          system.Convert.ToUInt8(7),
          system.Convert.ToUInt8(system.Convert.ToInt32_Single(volume))
        );
        this._handler.AddControlChange(
          track.Index,
          tick,
          system.Convert.ToUInt8(track.PlaybackInfo.SecondaryChannel),
          system.Convert.ToUInt8(7),
          system.Convert.ToUInt8(system.Convert.ToInt32_Single(volume))
        );
        --i;
      }
    },
    GenerateVibrato: function(
      note,
      noteStart,
      noteDuration,
      noteKey,
      dynamicValue,
      channel
    ) {
      var phaseLength;
      var bendAmplitude;
      var _g = note.Vibrato;
      switch (_g) {
        case 1:
          phaseLength = this._settings.Vibrato.NoteSlightLength;
          bendAmplitude = this._settings.Vibrato.NoteSlightAmplitude;
          break;
        case 2:
          phaseLength = this._settings.Vibrato.NoteWideLength;
          bendAmplitude = this._settings.Vibrato.NoteWideAmplitude;
          break;
        default:
          return;
      }
      var track = note.Beat.Voice.Bar.Staff.Track;
      this.GenerateVibratorWithParams(
        track,
        noteStart,
        noteDuration.NoteOnly,
        phaseLength,
        bendAmplitude,
        channel
      );
    },
    GenerateVibratorWithParams: function(
      track,
      noteStart,
      noteDuration,
      phaseLength,
      bendAmplitude,
      channel
    ) {
      var resolution = 16;
      var phaseHalf = (phaseLength / 2) | 0;
      noteStart = noteStart + phaseLength;
      var noteEnd = noteStart + noteDuration;
      while (noteStart < noteEnd) {
        var phase = 0;
        var phaseDuration =
          noteStart + phaseLength < noteEnd ? phaseLength : noteEnd - noteStart;
        while (phase < phaseDuration) {
          var bend =
            bendAmplitude * Math.sin((phase * 3.14159265358979) / phaseHalf);
          this._handler.AddBend(
            track.Index,
            noteStart + phase,
            system.Convert.ToUInt8(channel),
            system.Convert.ToInt32_Double(64 + bend)
          );
          phase = phase + resolution;
        }
        noteStart = noteStart + phaseLength;
      }
    },
    GenerateSlide: function(
      note,
      noteStart,
      noteDuration,
      noteKey,
      dynamicValue,
      channel
    ) {},
    GenerateBend: function(
      note,
      noteStart,
      noteDuration,
      noteKey,
      dynamicValue,
      channel
    ) {
      var bendPoints = note.BendPoints;
      var track = note.Beat.Voice.Bar.Staff.Track;
      var finalBendValue = null;
      var duration;
      if (
        note.get_IsTieOrigin() &&
        (this._settings == null || this._settings.ExtendBendArrowsOnTiedNotes)
      ) {
        var endNote = note;
        while (
          endNote.get_IsTieOrigin() &&
          !endNote.TieDestination.get_HasBend()
        )
          endNote = endNote.TieDestination;
        var this1 =
          endNote.Beat.get_AbsolutePlaybackStart() -
          note.Beat.get_AbsolutePlaybackStart() +
          this.GetNoteDuration(endNote, endNote.Beat.PlaybackDuration).NoteOnly;
        duration = this1;
      } else if (note.get_IsTieOrigin() && note.Beat.GraceType != 0) {
        var _g = note.TieDestination.BendType;
        switch (_g) {
          case 2:
          case 4:
          case 7:
            finalBendValue = note.TieDestination.BendPoints[1].Value;
            break;
          case 6:
          case 8:
            finalBendValue = note.TieDestination.BendPoints[0].Value;
            break;
          default:
        }
        if (this._settings == null) {
          var this2 = noteDuration.NoteOnly;
          duration = this2;
        } else {
          var this3 = Math.max(
            noteDuration.NoteOnly,
            alphaTab.audio.MidiUtils.MillisToTicks(
              this._settings.SongBookBendDuration,
              this._currentTempo
            )
          );
          duration = this3;
        }
      } else {
        var this4 = noteDuration.NoteOnly;
        duration = this4;
      }
      if (bendPoints[0].Value > 0 && !note.IsContinuedBend) {
        --noteStart;
      }
      var bendDuration;
      if (this._settings == null) {
        bendDuration = duration;
      } else {
        var this5 = alphaTab.audio.MidiUtils.MillisToTicks(
          this._settings.SongBookBendDuration,
          this._currentTempo
        );
        bendDuration = Math.min(duration, this5);
      }
      var this6 = [];
      var playedBendPoints = this6;
      var _g1 = note.BendType;
      switch (_g1) {
        case 1:
          playedBendPoints = bendPoints;
          break;
        case 2:
        case 3:
          var _g2 = note.BendStyle;
          switch (_g2) {
            case 0:
              playedBendPoints = bendPoints;
              break;
            case 1:
              playedBendPoints.push(
                new alphaTab.model.BendPoint(0, note.BendPoints[0].Value)
              );
              if (
                finalBendValue == null ||
                finalBendValue < note.BendPoints[1].Value
              ) {
                finalBendValue = note.BendPoints[1].Value;
              }
              playedBendPoints.push(
                new alphaTab.model.BendPoint(60, finalBendValue)
              );
              break;
            case 2:
              if (
                finalBendValue == null ||
                finalBendValue < note.BendPoints[1].Value
              ) {
                finalBendValue = note.BendPoints[1].Value;
              }
              if (note.Beat.GraceType == 3) {
                this.GenerateSongBookWhammyOrBend(
                  noteStart,
                  channel,
                  duration,
                  track,
                  true,
                  new Int32Array([note.BendPoints[0].Value, finalBendValue]),
                  bendDuration
                );
              } else {
                this.GenerateSongBookWhammyOrBend(
                  noteStart,
                  channel,
                  duration,
                  track,
                  false,
                  new Int32Array([note.BendPoints[0].Value, finalBendValue]),
                  bendDuration
                );
              }
              return;
            default:
          }
          break;
        case 4:
          var _g3 = note.BendStyle;
          switch (_g3) {
            case 0:
              playedBendPoints = bendPoints;
              break;
            case 1:
              playedBendPoints.push(
                new alphaTab.model.BendPoint(0, note.BendPoints[0].Value)
              );
              playedBendPoints.push(
                new alphaTab.model.BendPoint(
                  (60 / 2) | 0,
                  note.BendPoints[1].Value
                )
              );
              playedBendPoints.push(
                new alphaTab.model.BendPoint(60, note.BendPoints[2].Value)
              );
              break;
            case 2:
              this.GenerateSongBookWhammyOrBend(
                noteStart,
                channel,
                duration,
                track,
                false,
                new Int32Array([
                  note.BendPoints[0].Value,
                  note.BendPoints[1].Value,
                  note.BendPoints[2].Value
                ]),
                bendDuration
              );
              return;
            default:
          }
          break;
        case 5:
          playedBendPoints = bendPoints;
          break;
        case 6:
          playedBendPoints = bendPoints;
          break;
        case 7:
          var _g4 = note.BendStyle;
          switch (_g4) {
            case 0:
              playedBendPoints = bendPoints;
              break;
            case 1:
              playedBendPoints.push(
                new alphaTab.model.BendPoint(0, note.BendPoints[0].Value)
              );
              playedBendPoints.push(
                new alphaTab.model.BendPoint(60, note.BendPoints[1].Value)
              );
              break;
            case 2:
              var preBendValue = 64 + note.BendPoints[0].Value * 2.75;
              this._handler.AddBend(
                track.Index,
                noteStart,
                system.Convert.ToUInt8(channel),
                system.Convert.ToInt32_Single(preBendValue)
              );
              if (
                finalBendValue == null ||
                finalBendValue < note.BendPoints[1].Value
              ) {
                finalBendValue = note.BendPoints[1].Value;
              }
              this.GenerateSongBookWhammyOrBend(
                noteStart,
                channel,
                duration,
                track,
                false,
                new Int32Array([note.BendPoints[0].Value, finalBendValue]),
                bendDuration
              );
              return;
            default:
          }
          break;
        case 8:
          var _g5 = note.BendStyle;
          switch (_g5) {
            case 0:
              playedBendPoints = bendPoints;
              break;
            case 1:
              playedBendPoints.push(
                new alphaTab.model.BendPoint(0, note.BendPoints[0].Value)
              );
              playedBendPoints.push(
                new alphaTab.model.BendPoint(60, note.BendPoints[1].Value)
              );
              break;
            case 2:
              var preBendValue1 = 64 + note.BendPoints[0].Value * 2.75;
              this._handler.AddBend(
                track.Index,
                noteStart,
                system.Convert.ToUInt8(channel),
                system.Convert.ToInt32_Single(preBendValue1)
              );
              this.GenerateSongBookWhammyOrBend(
                noteStart,
                channel,
                duration,
                track,
                false,
                new Int32Array([
                  note.BendPoints[0].Value,
                  note.BendPoints[1].Value
                ]),
                bendDuration
              );
              return;
            default:
          }
          break;
        default:
      }
      this.GenerateWhammyOrBend(
        noteStart,
        channel,
        duration,
        playedBendPoints,
        track
      );
    },
    GenerateSongBookWhammyOrBend: function(
      noteStart,
      channel,
      duration,
      track,
      bendAtBeginning,
      bendValues,
      bendDuration
    ) {
      var startTick;
      if (bendAtBeginning) {
        var this1 = noteStart;
        startTick = this1;
      } else {
        startTick = noteStart + duration - bendDuration;
      }
      var ticksBetweenPoints = bendDuration / (bendValues.length - 1);
      var i = 0;
      while (i < bendValues.length - 1) {
        var currentBendValue = 64 + bendValues[i] * 2.75;
        var nextBendValue = 64 + bendValues[i + 1] * 2.75;
        var tick = startTick + ticksBetweenPoints * i;
        this.GenerateBendValues(
          tick,
          channel,
          track,
          ticksBetweenPoints,
          currentBendValue,
          nextBendValue
        );
        ++i;
      }
    },
    GenerateWhammy: function(
      beat,
      noteStart,
      noteDuration,
      noteKey,
      dynamicValue,
      channel
    ) {
      var bendPoints = beat.WhammyBarPoints;
      var track = beat.Voice.Bar.Staff.Track;
      var this1 = noteDuration.NoteOnly;
      var duration = this1;
      if (bendPoints[0].Value > 0 && !beat.IsContinuedWhammy) {
        --noteStart;
      }
      var this2 = [];
      var playedBendPoints = this2;
      var _g = beat.WhammyBarType;
      switch (_g) {
        case 1:
          playedBendPoints = bendPoints;
          break;
        case 2:
          var _g1 = beat.WhammyStyle;
          switch (_g1) {
            case 0:
              playedBendPoints = bendPoints;
              break;
            case 1:
              playedBendPoints.push(
                new alphaTab.model.BendPoint(0, bendPoints[0].Value)
              );
              playedBendPoints.push(
                new alphaTab.model.BendPoint(60, bendPoints[1].Value)
              );
              break;
            case 2:
              var whammyDuration;
              if (this._settings == null) {
                whammyDuration = duration;
              } else {
                var this3 = alphaTab.audio.MidiUtils.MillisToTicks(
                  this._settings.SongBookBendDuration,
                  this._currentTempo
                );
                whammyDuration = Math.min(duration, this3);
              }
              this.GenerateSongBookWhammyOrBend(
                noteStart,
                channel,
                duration,
                track,
                false,
                new Int32Array([bendPoints[0].Value, bendPoints[1].Value]),
                whammyDuration
              );
              return;
            default:
          }
          break;
        case 3:
          var _g2 = beat.WhammyStyle;
          switch (_g2) {
            case 0:
              playedBendPoints = bendPoints;
              break;
            case 1:
              playedBendPoints.push(
                new alphaTab.model.BendPoint(0, bendPoints[0].Value)
              );
              playedBendPoints.push(
                new alphaTab.model.BendPoint((60 / 2) | 0, bendPoints[1].Value)
              );
              playedBendPoints.push(
                new alphaTab.model.BendPoint(60, bendPoints[2].Value)
              );
              break;
            case 2:
              var whammyDuration1;
              if (this._settings == null) {
                whammyDuration1 = duration;
              } else {
                var this4 = alphaTab.audio.MidiUtils.MillisToTicks(
                  this._settings.SongBookDipDuration,
                  this._currentTempo
                );
                whammyDuration1 = Math.min(duration, this4);
              }
              this.GenerateSongBookWhammyOrBend(
                noteStart,
                channel,
                duration,
                track,
                true,
                new Int32Array([
                  bendPoints[0].Value,
                  bendPoints[1].Value,
                  bendPoints[2].Value
                ]),
                whammyDuration1
              );
              return;
            default:
          }
          break;
        case 4:
          playedBendPoints = bendPoints;
          break;
        case 5:
          playedBendPoints = bendPoints;
          break;
        case 6:
          var _g3 = beat.WhammyStyle;
          switch (_g3) {
            case 0:
              playedBendPoints = bendPoints;
              break;
            case 1:
              playedBendPoints.push(
                new alphaTab.model.BendPoint(0, bendPoints[0].Value)
              );
              playedBendPoints.push(
                new alphaTab.model.BendPoint((60 / 2) | 0, bendPoints[0].Value)
              );
              playedBendPoints.push(
                new alphaTab.model.BendPoint(60, bendPoints[1].Value)
              );
              break;
            case 2:
              var preDiveValue = 64 + bendPoints[0].Value * 2.75;
              this._handler.AddBend(
                track.Index,
                noteStart,
                system.Convert.ToUInt8(channel),
                system.Convert.ToInt32_Single(preDiveValue)
              );
              var whammyDuration2;
              if (this._settings == null) {
                whammyDuration2 = duration;
              } else {
                var this5 = alphaTab.audio.MidiUtils.MillisToTicks(
                  this._settings.SongBookBendDuration,
                  this._currentTempo
                );
                whammyDuration2 = Math.min(duration, this5);
              }
              this.GenerateSongBookWhammyOrBend(
                noteStart,
                channel,
                duration,
                track,
                false,
                new Int32Array([bendPoints[0].Value, bendPoints[1].Value]),
                whammyDuration2
              );
              return;
            default:
          }
          break;
        default:
      }
      this.GenerateWhammyOrBend(
        noteStart,
        channel,
        duration,
        playedBendPoints,
        track
      );
    },
    GenerateWhammyOrBend: function(
      noteStart,
      channel,
      duration,
      playedBendPoints,
      track
    ) {
      var ticksPerPosition = duration / 60;
      var i = 0;
      while (i < playedBendPoints.length - 1) {
        var currentPoint = playedBendPoints[i];
        var nextPoint = playedBendPoints[i + 1];
        var currentBendValue = 64 + currentPoint.Value * 2.75;
        var nextBendValue = 64 + nextPoint.Value * 2.75;
        var ticksBetweenPoints =
          ticksPerPosition * (nextPoint.Offset - currentPoint.Offset);
        var tick = noteStart + ticksPerPosition * currentPoint.Offset;
        this.GenerateBendValues(
          tick,
          channel,
          track,
          ticksBetweenPoints,
          currentBendValue,
          nextBendValue
        );
        ++i;
      }
    },
    GenerateBendValues: function(
      currentTick,
      channel,
      track,
      ticksBetweenPoints,
      currentBendValue,
      nextBendValue
    ) {
      var ticksPerValue =
        ticksBetweenPoints / Math.abs(nextBendValue - currentBendValue);
      if (currentBendValue < nextBendValue) {
        while (currentBendValue <= nextBendValue) {
          var this1 = currentBendValue;
          this._handler.AddBend(
            track.Index,
            system.Convert.ToInt32_Double(currentTick),
            system.Convert.ToUInt8(channel),
            system.Convert.ToInt32_Double(Math.round(this1))
          );
          ++currentBendValue;
          currentTick = currentTick + ticksPerValue;
        }
      } else if (currentBendValue > nextBendValue) {
        while (currentBendValue >= nextBendValue) {
          var this2 = currentBendValue;
          this._handler.AddBend(
            track.Index,
            system.Convert.ToInt32_Double(currentTick),
            system.Convert.ToUInt8(channel),
            system.Convert.ToInt32_Double(Math.round(this2))
          );
          --currentBendValue;
          currentTick = currentTick + ticksPerValue;
        }
      } else {
        var this3 = currentBendValue;
        this._handler.AddBend(
          track.Index,
          system.Convert.ToInt32_Double(currentTick),
          system.Convert.ToUInt8(channel),
          system.Convert.ToInt32_Double(Math.round(this3))
        );
      }
    },
    GenerateTrill: function(
      note,
      noteStart,
      noteDuration,
      noteKey,
      dynamicValue,
      channel
    ) {
      var track = note.Beat.Voice.Bar.Staff.Track;
      var trillKey = note.get_StringTuning() + note.get_TrillFret();
      var trillLength = alphaTab.audio.MidiUtils.ToTicks(note.TrillSpeed);
      var realKey = true;
      var tick = noteStart;
      var end = noteStart + noteDuration.UntilTieEnd;
      while (tick + 10 < end) {
        if (tick + trillLength >= end) {
          trillLength = end - tick;
        }
        this._handler.AddNote(
          track.Index,
          tick,
          trillLength,
          system.Convert.ToUInt8(realKey ? trillKey : noteKey),
          dynamicValue,
          system.Convert.ToUInt8(channel)
        );
        realKey = !realKey;
        tick = tick + trillLength;
      }
    },
    GenerateTremoloPicking: function(
      note,
      noteStart,
      noteDuration,
      noteKey,
      dynamicValue,
      channel
    ) {
      var track = note.Beat.Voice.Bar.Staff.Track;
      var tpLength = alphaTab.audio.MidiUtils.ToTicks(note.Beat.TremoloSpeed);
      var tick = noteStart;
      var end = noteStart + noteDuration.UntilTieEnd;
      while (tick + 10 < end) {
        if (tick + tpLength >= end) {
          tpLength = end - tick;
        }
        this._handler.AddNote(
          track.Index,
          tick,
          tpLength,
          system.Convert.ToUInt8(noteKey),
          dynamicValue,
          system.Convert.ToUInt8(channel)
        );
        tick = tick + tpLength;
      }
    },
    GetBrushInfo: function(beat) {
      var this1 = new Int32Array(beat.Voice.Bar.Staff.Tuning.length);
      var brushInfo = this1;
      if (beat.BrushType != 0) {
        var stringUsed = 0;
        var stringCount = 0;
        var i = 0;
        var j = beat.Notes.length;
        while (i < j) {
          var n = beat.Notes[i];
          if (n.IsTieDestination) {
            ++i;
            continue;
          }
          stringUsed = stringUsed | (1 << (n.String - 1));
          ++stringCount;
          ++i;
        }
        if (beat.Notes.length > 0) {
          var brushMove = 0;
          var brushIncrement = (beat.BrushDuration / (stringCount - 1)) | 0;
          var i1 = 0;
          var j1 = beat.Voice.Bar.Staff.Tuning.length;
          while (i1 < j1) {
            var index =
              beat.BrushType == 4 || beat.BrushType == 2
                ? i1
                : brushInfo.length - 1 - i1;
            if ((stringUsed & (1 << index)) != 0) {
              brushInfo[index] = brushMove;
              brushMove = brushMove + brushIncrement;
            }
            ++i1;
          }
        }
      }
      return brushInfo;
    },
    GetBrushIncrement: function(beat) {
      if (beat.BrushDuration == 0) {
        return 0;
      }
      var duration = beat.PlaybackDuration;
      if (duration == 0) {
        return 0;
      }
      return system.Convert.ToInt32_Double(
        (duration / 8.0) * (4.0 / beat.BrushDuration)
      );
    },
    GenerateAutomation: function(beat, automation, startMove) {
      var _g = automation.Type;
      switch (_g) {
        case 1:
          var volume = alphaTab.audio.generator.MidiFileGenerator.ToChannelShort(
            system.Convert.ToInt32_Single(automation.Value)
          );
          this._handler.AddControlChange(
            beat.Voice.Bar.Staff.Track.Index,
            beat.PlaybackStart + startMove,
            system.Convert.ToUInt8(
              beat.Voice.Bar.Staff.Track.PlaybackInfo.PrimaryChannel
            ),
            system.Convert.ToUInt8(7),
            system.Convert.ToUInt8(volume)
          );
          this._handler.AddControlChange(
            beat.Voice.Bar.Staff.Track.Index,
            beat.PlaybackStart + startMove,
            system.Convert.ToUInt8(
              beat.Voice.Bar.Staff.Track.PlaybackInfo.SecondaryChannel
            ),
            system.Convert.ToUInt8(7),
            system.Convert.ToUInt8(volume)
          );
          break;
        case 2:
          this._handler.AddProgramChange(
            beat.Voice.Bar.Staff.Track.Index,
            beat.PlaybackStart + startMove,
            system.Convert.ToUInt8(
              beat.Voice.Bar.Staff.Track.PlaybackInfo.PrimaryChannel
            ),
            system.Convert.ToUInt8(
              system.Convert.ToInt32_Single(automation.Value)
            )
          );
          this._handler.AddProgramChange(
            beat.Voice.Bar.Staff.Track.Index,
            beat.PlaybackStart + startMove,
            system.Convert.ToUInt8(
              beat.Voice.Bar.Staff.Track.PlaybackInfo.SecondaryChannel
            ),
            system.Convert.ToUInt8(
              system.Convert.ToInt32_Single(automation.Value)
            )
          );
          break;
        case 3:
          var balance = alphaTab.audio.generator.MidiFileGenerator.ToChannelShort(
            system.Convert.ToInt32_Single(automation.Value)
          );
          this._handler.AddControlChange(
            beat.Voice.Bar.Staff.Track.Index,
            beat.PlaybackStart + startMove,
            system.Convert.ToUInt8(
              beat.Voice.Bar.Staff.Track.PlaybackInfo.PrimaryChannel
            ),
            system.Convert.ToUInt8(10),
            system.Convert.ToUInt8(balance)
          );
          this._handler.AddControlChange(
            beat.Voice.Bar.Staff.Track.Index,
            beat.PlaybackStart + startMove,
            system.Convert.ToUInt8(
              beat.Voice.Bar.Staff.Track.PlaybackInfo.SecondaryChannel
            ),
            system.Convert.ToUInt8(10),
            system.Convert.ToUInt8(balance)
          );
          break;
        default:
      }
    },
    __class__: alphaTab.audio.generator.MidiFileGenerator
  };
  alphaTab.audio.generator.MidiNoteDuration = function() {
    this.NoteOnly = 0;
    this.UntilTieEnd = 0;
    this.LetRingEnd = 0;
  };
  alphaTab.audio.generator.MidiNoteDuration.__name__ = [
    'alphaTab',
    'audio',
    'generator',
    'MidiNoteDuration'
  ];
  alphaTab.audio.generator.MidiNoteDuration.prototype = {
    __class__: alphaTab.audio.generator.MidiNoteDuration
  };
  alphaTab.audio.generator.MidiPlaybackController = function(score) {
    this._score = null;
    this._repeatStartIndex = 0;
    this._repeatNumber = 0;
    this._repeatOpen = false;
    this.ShouldPlay = false;
    this.Index = 0;
    this.CurrentTick = 0;
    this._score = score;
    this.ShouldPlay = true;
    this.Index = 0;
    this.CurrentTick = 0;
  };
  alphaTab.audio.generator.MidiPlaybackController.__name__ = [
    'alphaTab',
    'audio',
    'generator',
    'MidiPlaybackController'
  ];
  alphaTab.audio.generator.MidiPlaybackController.prototype = {
    get_Finished: function() {
      return this.Index >= this._score.MasterBars.length;
    },
    ProcessCurrent: function() {
      var masterBar = this._score.MasterBars[this.Index];
      var masterBarAlternateEndings = masterBar.AlternateEndings;
      if (
        !masterBar.RepeatGroup.IsClosed &&
        masterBar.RepeatGroup.Openings[
          masterBar.RepeatGroup.Openings.length - 1
        ] == masterBar
      ) {
        this._repeatNumber = 0;
        this._repeatOpen = false;
      }
      if (
        (masterBar.IsRepeatStart || masterBar.Index == 0) &&
        this._repeatNumber == 0
      ) {
        this._repeatStartIndex = this.Index;
        this._repeatOpen = true;
      } else if (masterBar.IsRepeatStart) {
        this.ShouldPlay = true;
      }
      if (this._repeatOpen && masterBarAlternateEndings > 0) {
        if ((masterBarAlternateEndings & (1 << this._repeatNumber)) == 0) {
          this.ShouldPlay = false;
        } else {
          this.ShouldPlay = true;
        }
      }
      if (this.ShouldPlay) {
        this.CurrentTick = this.CurrentTick + masterBar.CalculateDuration();
      }
    },
    MoveNext: function() {
      var masterBar = this._score.MasterBars[this.Index];
      var masterBarRepeatCount = masterBar.RepeatCount - 1;
      if (this._repeatOpen && masterBarRepeatCount > 0) {
        if (this._repeatNumber < masterBarRepeatCount) {
          this.Index = this._repeatStartIndex;
          this._repeatNumber++;
        } else {
          this._repeatNumber = 0;
          this._repeatOpen = false;
          this.ShouldPlay = true;
          this.Index++;
        }
      } else {
        this.Index++;
      }
    },
    __class__: alphaTab.audio.generator.MidiPlaybackController
  };
  alphaTab.audio.synth.MidiFileSequencerTempoChange = function(
    bpm,
    ticks,
    time
  ) {
    this.Bpm = 0.0;
    this.Ticks = 0;
    this.Time = 0;
    this.Bpm = bpm;
    this.Ticks = ticks;
    this.Time = time;
  };
  alphaTab.audio.synth.MidiFileSequencerTempoChange.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'MidiFileSequencerTempoChange'
  ];
  alphaTab.audio.synth.MidiFileSequencerTempoChange.prototype = {
    __class__: alphaTab.audio.synth.MidiFileSequencerTempoChange
  };
  alphaTab.audio.synth._PlayerState = {};
  alphaTab.audio.synth._PlayerState.PlayerState_Impl_ = $hx_exports['alphaTab'][
    'audio'
  ]['synth']['_PlayerState']['PlayerState_Impl_'] = {};
  alphaTab.audio.synth._PlayerState.PlayerState_Impl_.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    '_PlayerState',
    'PlayerState_Impl_'
  ];
  alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth._PlayerState.PlayerState_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'Paused';
      case 1:
        return 'Playing';
    }
    return '';
  };
  alphaTab.audio.synth.PlayerStateChangedEventArgs = $hx_exports['alphaTab'][
    'audio'
  ]['synth']['PlayerStateChangedEventArgs'] = function(state) {
    this.State = 0;
    this.State = state;
  };
  alphaTab.audio.synth.PlayerStateChangedEventArgs.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'PlayerStateChangedEventArgs'
  ];
  alphaTab.audio.synth.PlayerStateChangedEventArgs.prototype = {
    __class__: alphaTab.audio.synth.PlayerStateChangedEventArgs
  };
  alphaTab.audio.synth.PositionChangedEventArgs = $hx_exports['alphaTab'][
    'audio'
  ]['synth']['PositionChangedEventArgs'] = function(
    currentTime,
    endTime,
    currentTick,
    endTick
  ) {
    this.CurrentTime = 0.0;
    this.EndTime = 0.0;
    this.CurrentTick = 0;
    this.EndTick = 0;
    this.CurrentTime = currentTime;
    this.EndTime = endTime;
    this.CurrentTick = currentTick;
    this.EndTick = endTick;
  };
  alphaTab.audio.synth.PositionChangedEventArgs.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'PositionChangedEventArgs'
  ];
  alphaTab.audio.synth.PositionChangedEventArgs.prototype = {
    __class__: alphaTab.audio.synth.PositionChangedEventArgs
  };
  alphaTab.audio.synth.ProgressEventArgs = $hx_exports['alphaTab']['audio'][
    'synth'
  ]['ProgressEventArgs'] = function(loaded, total) {
    this.Loaded = 0;
    this.Total = 0;
    this.Loaded = loaded;
    this.Total = total;
  };
  alphaTab.audio.synth.ProgressEventArgs.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'ProgressEventArgs'
  ];
  alphaTab.audio.synth.ProgressEventArgs.prototype = {
    __class__: alphaTab.audio.synth.ProgressEventArgs
  };
  alphaTab.audio.synth.bank.AssetManager = function() {
    this.PatchAssets = null;
    this.SampleAssets = null;
    var this1 = [];
    this.PatchAssets = this1;
    var this2 = [];
    this.SampleAssets = this2;
  };
  alphaTab.audio.synth.bank.AssetManager.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'AssetManager'
  ];
  alphaTab.audio.synth.bank.AssetManager.prototype = {
    FindPatch: function(name) {
      var patchAsset = $iterator(this.PatchAssets)();
      while (patchAsset.hasNext()) {
        var patchAsset1 = patchAsset.next();
        if (patchAsset1.Name == name) {
          return patchAsset1;
        }
      }
      return null;
    },
    FindSample: function(name) {
      var sampleDataAsset = $iterator(this.SampleAssets)();
      while (sampleDataAsset.hasNext()) {
        var sampleDataAsset1 = sampleDataAsset.next();
        if (sampleDataAsset1.Name == name) {
          return sampleDataAsset1;
        }
      }
      return null;
    },
    __class__: alphaTab.audio.synth.bank.AssetManager
  };
  alphaTab.audio.synth.bank.PatchAsset = function(name, patch) {
    this.Name = null;
    this.Patch = null;
    this.Name = name;
    this.Patch = patch;
  };
  alphaTab.audio.synth.bank.PatchAsset.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'PatchAsset'
  ];
  alphaTab.audio.synth.bank.PatchAsset.prototype = {
    __class__: alphaTab.audio.synth.bank.PatchAsset
  };
  alphaTab.audio.synth.bank.PatchBank = function() {
    this._bank = null;
    this._assets = null;
    this.Name = null;
    this.Comments = null;
    this.Reset();
  };
  alphaTab.audio.synth.bank.PatchBank.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'PatchBank'
  ];
  alphaTab.audio.synth.bank.PatchBank.prototype = {
    Reset: function() {
      var this1 = {};
      this._bank = this1;
      this._assets = new alphaTab.audio.synth.bank.AssetManager();
      this.Name = '';
      this.Comments = '';
    },
    get_LoadedBanks: function() {
      var this1 = [];
      var banks = this1;
      var this2 = this._bank;
      var bank = $iterator(Object.keys(this2))();
      while (bank.hasNext()) {
        var bank1 = bank.next();
        banks.push(bank1);
      }
      var comparison = function(a, b) {
        return a - b;
      };
      banks.sort(function(a1, b1) {
        return comparison(a1, b1);
      });
      return new Int32Array(banks);
    },
    GetBank: function(bankNumber) {
      if (this._bank.hasOwnProperty(bankNumber)) {
        return this._bank[bankNumber];
      } else {
        return null;
      }
    },
    GetPatchByNumber: function(bankNumber, patchNumber) {
      if (this._bank.hasOwnProperty(bankNumber)) {
        return this._bank[bankNumber][patchNumber];
      } else {
        return null;
      }
    },
    GetPatchByName: function(bankNumber, name) {
      if (this._bank.hasOwnProperty(bankNumber)) {
        var patches = this._bank[bankNumber];
        var patch = HxOverrides.iter(patches);
        while (patch.hasNext()) {
          var patch1 = patch.next();
          if (patch1 != null && patch1.Name == name) {
            return patch1;
          }
        }
      }
      return null;
    },
    IsBankLoaded: function(bankNumber) {
      return this._bank.hasOwnProperty(bankNumber);
    },
    LoadSf2: function(input) {
      this.Reset();
      alphaTab.util.Logger.Debug('PatchBank', 'Reading SF2', null);
      var sf = new alphaTab.audio.synth.sf2.SoundFont();
      sf.Load(input);
      alphaTab.util.Logger.Debug('PatchBank', 'Building patchbank', null);
      this.Name = sf.Info.BankName;
      this.Comments = sf.Info.Comments;
      var sampleHeader = HxOverrides.iter(sf.Presets.SampleHeaders);
      while (sampleHeader.hasNext()) {
        var sampleHeader1 = sampleHeader.next();
        this._assets.SampleAssets.push(
          new alphaTab.audio.synth.bank.SampleDataAsset(
            sampleHeader1,
            sf.SampleData
          )
        );
      }
      var sfinsts = this.ReadSf2Instruments(sf.Presets.Instruments);
      var p = HxOverrides.iter(sf.Presets.PresetHeaders);
      while (p.hasNext()) {
        var p1 = p.next();
        var globalGens = null;
        var i;
        if (
          p1.Zones[0].Generators.length == 0 ||
          p1.Zones[0].Generators[p1.Zones[0].Generators.length - 1]
            .GeneratorType != 41
        ) {
          globalGens = p1.Zones[0].Generators;
          i = 1;
        } else {
          i = 0;
        }
        var this1 = [];
        var regionList = this1;
        while (i < p1.Zones.length) {
          var presetLoKey = 0;
          var presetHiKey = 127;
          var presetLoVel = 0;
          var presetHiVel = 127;
          if (p1.Zones[i].Generators[0].GeneratorType == 43) {
            presetLoKey = alphaTab.platform.Platform.ToUInt8(
              p1.Zones[i].Generators[0].get_AmountInt16() & 255
            );
            presetHiKey = alphaTab.platform.Platform.ToUInt8(
              (p1.Zones[i].Generators[0].get_AmountInt16() >> 8) & 255
            );
            if (
              p1.Zones[i].Generators.length > 1 &&
              p1.Zones[i].Generators[1].GeneratorType == 44
            ) {
              presetLoVel = alphaTab.platform.Platform.ToUInt8(
                p1.Zones[i].Generators[1].get_AmountInt16() & 255
              );
              presetHiVel = alphaTab.platform.Platform.ToUInt8(
                (p1.Zones[i].Generators[1].get_AmountInt16() >> 8) & 255
              );
            }
          } else if (p1.Zones[i].Generators[0].GeneratorType == 44) {
            presetLoVel = alphaTab.platform.Platform.ToUInt8(
              p1.Zones[i].Generators[0].get_AmountInt16() & 255
            );
            presetHiVel = alphaTab.platform.Platform.ToUInt8(
              (p1.Zones[i].Generators[0].get_AmountInt16() >> 8) & 255
            );
          }
          if (
            p1.Zones[i].Generators[p1.Zones[i].Generators.length - 1]
              .GeneratorType == 41
          ) {
            var insts =
              sfinsts[
                p1.Zones[i].Generators[
                  p1.Zones[i].Generators.length - 1
                ].get_AmountInt16()
              ];
            var inst = HxOverrides.iter(insts);
            while (inst.hasNext()) {
              var inst1 = inst.next();
              var instLoKey;
              var instHiKey;
              var instLoVel;
              var instHiVel;
              instLoKey = alphaTab.platform.Platform.ToUInt8(
                inst1.Generators[43] & 255
              );
              instHiKey = alphaTab.platform.Platform.ToUInt8(
                (inst1.Generators[43] >> 8) & 255
              );
              instLoVel = alphaTab.platform.Platform.ToUInt8(
                inst1.Generators[44] & 255
              );
              instHiVel = alphaTab.platform.Platform.ToUInt8(
                (inst1.Generators[44] >> 8) & 255
              );
              if (
                instLoKey <= presetHiKey &&
                presetLoKey <= instHiKey &&
                (instLoVel <= presetHiVel && presetLoVel <= instHiVel)
              ) {
                var r = new alphaTab.audio.synth.sf2.Sf2Region();
                var src = inst1.Generators;
                var dst = r.Generators;
                var count = r.Generators.length;
                dst.set(src.subarray(0, 0 + count), 0);
                this.ReadSf2Region(r, globalGens, p1.Zones[i].Generators, true);
                regionList.push(r);
              }
            }
          }
          ++i;
        }
        var mp = new alphaTab.audio.synth.bank.patch.MultiPatch(p1.Name);
        mp.LoadSf2(regionList, this._assets);
        this._assets.PatchAssets.push(
          new alphaTab.audio.synth.bank.PatchAsset(mp.Name, mp)
        );
        this.AssignPatchToBank(
          mp,
          p1.BankNumber,
          p1.PatchNumber,
          p1.PatchNumber
        );
      }
    },
    ReadSf2Instruments: function(instruments) {
      var size = instruments.length;
      var this1 = new Array(size);
      var regions = this1;
      var x = 0;
      while (x < instruments.length) {
        var globalGens = null;
        var i;
        if (
          instruments[x].Zones[0].Generators.length == 0 ||
          instruments[x].Zones[0].Generators[
            instruments[x].Zones[0].Generators.length - 1
          ].GeneratorType != 53
        ) {
          globalGens = instruments[x].Zones[0].Generators;
          i = 1;
        } else {
          i = 0;
        }
        var size1 = instruments[x].Zones.length - i;
        var this2 = new Array(size1);
        regions[x] = this2;
        var j = 0;
        while (j < regions[x].length) {
          var r = new alphaTab.audio.synth.sf2.Sf2Region();
          r.ApplyDefaultValues();
          this.ReadSf2Region(
            r,
            globalGens,
            instruments[x].Zones[j + i].Generators,
            false
          );
          regions[x][j] = r;
          ++j;
        }
        ++x;
      }
      return regions;
    },
    ReadSf2Region: function(region, globals, gens, isRelative) {
      if (!isRelative) {
        if (globals != null) {
          var x = 0;
          while (x < globals.length) {
            region.Generators[globals[x].GeneratorType] = globals[
              x
            ].get_AmountInt16();
            ++x;
          }
        }
        var x1 = 0;
        while (x1 < gens.length) {
          region.Generators[gens[x1].GeneratorType] = gens[
            x1
          ].get_AmountInt16();
          ++x1;
        }
      } else {
        var this1 = [];
        var genList = this1;
        var generator = HxOverrides.iter(gens);
        while (generator.hasNext()) {
          var generator1 = generator.next();
          genList.push(generator1);
        }
        if (globals != null) {
          var x2 = 0;
          while (x2 < globals.length) {
            var found = false;
            var i = 0;
            while (i < genList.length) {
              if (genList[i].GeneratorType == globals[x2].GeneratorType) {
                found = true;
                break;
              }
              ++i;
            }
            if (!found) {
              genList.push(globals[x2]);
            }
            ++x2;
          }
        }
        var x3 = 0;
        while (x3 < genList.length) {
          var value = genList[x3].GeneratorType;
          if (
            value < 5 ||
            value == 12 ||
            value == 45 ||
            value == 46 ||
            value == 47 ||
            value == 50 ||
            value == 54 ||
            value == 57 ||
            value == 58
          ) {
            ++x3;
            continue;
          } else if (value == 43 || value == 44) {
            var lo_a;
            var hi_a;
            var lo_b;
            var hi_b;
            lo_a = alphaTab.platform.Platform.ToUInt8(
              region.Generators[value] & 255
            );
            hi_a = alphaTab.platform.Platform.ToUInt8(
              (region.Generators[value] >> 8) & 255
            );
            lo_b = alphaTab.platform.Platform.ToUInt8(
              genList[x3].get_AmountInt16() & 255
            );
            hi_b = alphaTab.platform.Platform.ToUInt8(
              (genList[x3].get_AmountInt16() >> 8) & 255
            );
            lo_a = Math.max(lo_a, lo_b);
            hi_a = Math.min(hi_a, hi_b);
            if (lo_a > hi_a) {
              throw new js._Boot.HaxeError(
                new system.Exception().Exception_CsString(
                  'Invalid sf2 region. The range generators do not intersect.'
                )
              );
            }
            region.Generators[value] = alphaTab.platform.Platform.ToInt16(
              lo_a | (hi_a << 8)
            );
          } else {
            region.Generators[value] = alphaTab.platform.Platform.ToInt16(
              region.Generators[value] + genList[x3].get_AmountInt16()
            );
          }
          ++x3;
        }
      }
    },
    AssignPatchToBank: function(patch, bankNumber, startRange, endRange) {
      if (bankNumber < 0) {
        return;
      }
      if (startRange > endRange) {
        var range = startRange;
        startRange = endRange;
        endRange = range;
      }
      if (startRange < 0 || startRange >= 128) {
        throw new js._Boot.HaxeError(
          new system.Exception().Exception_CsString('startRange out of range')
        );
      }
      if (endRange < 0 || endRange >= 128) {
        throw new js._Boot.HaxeError(
          new system.Exception().Exception_CsString('endRange out of range')
        );
      }
      var patches;
      if (this._bank.hasOwnProperty(bankNumber)) {
        patches = this._bank[bankNumber];
      } else {
        var this1 = new Array(128);
        patches = this1;
        this._bank[bankNumber] = patches;
      }
      var x = startRange;
      while (x <= endRange) {
        patches[x] = patch;
        ++x;
      }
    },
    __class__: alphaTab.audio.synth.bank.PatchBank
  };
  alphaTab.audio.synth.bank.PcmData = function(
    bits,
    pcmData,
    isDataInLittleEndianFormat
  ) {
    this.Data = null;
    this.Length = 0;
    this.BytesPerSample = 0;
    this.BytesPerSample = system.Convert.ToUInt8((bits / 8) | 0);
    this.Data = pcmData;
    this.Length = (this.Data.length / this.BytesPerSample) | 0;
    if (!isDataInLittleEndianFormat) {
      alphaTab.audio.synth.util.SynthHelper.SwapEndianess(this.Data, bits);
    }
  };
  alphaTab.audio.synth.bank.PcmData.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'PcmData'
  ];
  alphaTab.audio.synth.bank.PcmData.Create = function(
    bits,
    pcmData,
    isDataInLittleEndianFormat
  ) {
    switch (bits) {
      case 8:
        return new alphaTab.audio.synth.bank.PcmData8Bit(
          bits,
          pcmData,
          isDataInLittleEndianFormat
        );
      case 16:
        return new alphaTab.audio.synth.bank.PcmData16Bit(
          bits,
          pcmData,
          isDataInLittleEndianFormat
        );
      case 24:
        return new alphaTab.audio.synth.bank.PcmData24Bit(
          bits,
          pcmData,
          isDataInLittleEndianFormat
        );
      case 32:
        return new alphaTab.audio.synth.bank.PcmData32Bit(
          bits,
          pcmData,
          isDataInLittleEndianFormat
        );
      default:
        throw new js._Boot.HaxeError(
          new system.Exception().Exception_CsString(
            'Invalid PCM format. ' + bits + 'bit pcm data is not supported.'
          )
        );
    }
  };
  alphaTab.audio.synth.bank.PcmData.prototype = {
    get_BitsPerSample: function() {
      return this.BytesPerSample * 8;
    },
    get_Item: function(index) {
      throw new js._Boot.HaxeError('abstract');
    },
    __class__: alphaTab.audio.synth.bank.PcmData
  };
  alphaTab.audio.synth.bank.PcmData16Bit = function(
    bits,
    pcmData,
    isDataInLittleEndianFormat
  ) {
    alphaTab.audio.synth.bank.PcmData.call(
      this,
      bits,
      pcmData,
      isDataInLittleEndianFormat
    );
  };
  alphaTab.audio.synth.bank.PcmData16Bit.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'PcmData16Bit'
  ];
  alphaTab.audio.synth.bank.PcmData16Bit.__super__ =
    alphaTab.audio.synth.bank.PcmData;
  alphaTab.audio.synth.bank.PcmData16Bit.prototype = $extend(
    alphaTab.audio.synth.bank.PcmData.prototype,
    {
      get_Item: function(index) {
        index = index * 2;
        var this1 = 32768;
        return (
          (((this.Data[index] | (this.Data[index + 1] << 8)) << 16) >> 16) /
          this1
        );
      },
      __class__: alphaTab.audio.synth.bank.PcmData16Bit
    }
  );
  alphaTab.audio.synth.bank.PcmData24Bit = function(
    bits,
    pcmData,
    isDataInLittleEndianFormat
  ) {
    alphaTab.audio.synth.bank.PcmData.call(
      this,
      bits,
      pcmData,
      isDataInLittleEndianFormat
    );
  };
  alphaTab.audio.synth.bank.PcmData24Bit.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'PcmData24Bit'
  ];
  alphaTab.audio.synth.bank.PcmData24Bit.__super__ =
    alphaTab.audio.synth.bank.PcmData;
  alphaTab.audio.synth.bank.PcmData24Bit.prototype = $extend(
    alphaTab.audio.synth.bank.PcmData.prototype,
    {
      get_Item: function(index) {
        index = index * 3;
        var this1 = 8388608;
        return (
          (((this.Data[index] |
            (this.Data[index + 1] << 8) |
            (this.Data[index + 2] << 16)) <<
            12) >>
            12) /
          this1
        );
      },
      __class__: alphaTab.audio.synth.bank.PcmData24Bit
    }
  );
  alphaTab.audio.synth.bank.PcmData32Bit = function(
    bits,
    pcmData,
    isDataInLittleEndianFormat
  ) {
    alphaTab.audio.synth.bank.PcmData.call(
      this,
      bits,
      pcmData,
      isDataInLittleEndianFormat
    );
  };
  alphaTab.audio.synth.bank.PcmData32Bit.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'PcmData32Bit'
  ];
  alphaTab.audio.synth.bank.PcmData32Bit.__super__ =
    alphaTab.audio.synth.bank.PcmData;
  alphaTab.audio.synth.bank.PcmData32Bit.prototype = $extend(
    alphaTab.audio.synth.bank.PcmData.prototype,
    {
      get_Item: function(index) {
        index = index * 4;
        var this1 = 2147483648;
        return (
          (this.Data[index] |
            (this.Data[index + 1] << 8) |
            (this.Data[index + 2] << 16) |
            (this.Data[index + 3] << 24)) /
          this1
        );
      },
      __class__: alphaTab.audio.synth.bank.PcmData32Bit
    }
  );
  alphaTab.audio.synth.bank.PcmData8Bit = function(
    bits,
    pcmData,
    isDataInLittleEndianFormat
  ) {
    alphaTab.audio.synth.bank.PcmData.call(
      this,
      bits,
      pcmData,
      isDataInLittleEndianFormat
    );
  };
  alphaTab.audio.synth.bank.PcmData8Bit.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'PcmData8Bit'
  ];
  alphaTab.audio.synth.bank.PcmData8Bit.__super__ =
    alphaTab.audio.synth.bank.PcmData;
  alphaTab.audio.synth.bank.PcmData8Bit.prototype = $extend(
    alphaTab.audio.synth.bank.PcmData.prototype,
    {
      get_Item: function(index) {
        var this1 = 255;
        var this2 = 2;
        var this3 = 1;
        return (this.Data[index] / this1) * this2 - this3;
      },
      __class__: alphaTab.audio.synth.bank.PcmData8Bit
    }
  );
  alphaTab.audio.synth.bank.SampleDataAsset = function(sample, sampleData) {
    this.Name = null;
    this.Channels = 0;
    this.SampleRate = 0;
    this.RootKey = 0;
    this.Tune = 0;
    this.Start = 0.0;
    this.End = 0.0;
    this.LoopStart = 0.0;
    this.LoopEnd = 0.0;
    this.SampleData = null;
    this.Channels = 1;
    this.Name = sample.Name;
    this.SampleRate = sample.SampleRate;
    this.RootKey = sample.RootKey;
    this.Tune = sample.Tune;
    var this1 = sample.Start;
    this.Start = this1;
    var this2 = sample.End;
    this.End = this2;
    var this3 = sample.StartLoop;
    this.LoopStart = this3;
    var this4 = sample.EndLoop;
    this.LoopEnd = this4;
    if ((sample.SoundFontSampleLink & 16) != 0) {
      throw new js._Boot.HaxeError(
        new system.Exception().Exception_CsString(
          'Ogg Vobis encoded soundfonts not supported'
        )
      );
    } else {
      this.SampleData = alphaTab.audio.synth.bank.PcmData.Create(
        sampleData.BitsPerSample,
        sampleData.SampleData,
        true
      );
    }
  };
  alphaTab.audio.synth.bank.SampleDataAsset.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'SampleDataAsset'
  ];
  alphaTab.audio.synth.bank.SampleDataAsset.prototype = {
    __class__: alphaTab.audio.synth.bank.SampleDataAsset
  };
  alphaTab.audio.synth.bank.components._EnvelopeState = {};
  alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_ = {};
  alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'components',
    '_EnvelopeState',
    'EnvelopeState_Impl_'
  ];
  alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'Delay';
      case 1:
        return 'Attack';
      case 2:
        return 'Hold';
      case 3:
        return 'Decay';
      case 4:
        return 'Sustain';
      case 5:
        return 'Release';
      case 6:
        return 'None';
    }
    return '';
  };
  alphaTab.audio.synth.bank.components._FilterType = {};
  alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_ = {};
  alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'components',
    '_FilterType',
    'FilterType_Impl_'
  ];
  alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'None';
      case 1:
        return 'BiquadLowpass';
      case 2:
        return 'BiquadHighpass';
      case 3:
        return 'OnePoleLowpass';
    }
    return '';
  };
  alphaTab.audio.synth.bank.components._LfoState = {};
  alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_ = {};
  alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'components',
    '_LfoState',
    'LfoState_Impl_'
  ];
  alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'Delay';
      case 1:
        return 'Sustain';
    }
    return '';
  };
  alphaTab.audio.synth.bank.components._PanFormulaEnum = {};
  alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_ = {};
  alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'components',
    '_PanFormulaEnum',
    'PanFormulaEnum_Impl_'
  ];
  alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'Neg3dBCenter';
      case 1:
        return 'Neg6dBCenter';
      case 2:
        return 'ZeroCenter';
    }
    return '';
  };
  alphaTab.audio.synth.bank.components.generators._GeneratorState = {};
  alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_ = {};
  alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'components',
    'generators',
    '_GeneratorState',
    'GeneratorState_Impl_'
  ];
  alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'PreLoop';
      case 1:
        return 'Loop';
      case 2:
        return 'PostLoop';
      case 3:
        return 'Finished';
    }
    return '';
  };
  alphaTab.audio.synth.bank.components.generators._LoopMode = {};
  alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_ = {};
  alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'components',
    'generators',
    '_LoopMode',
    'LoopMode_Impl_'
  ];
  alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'NoLoop';
      case 1:
        return 'OneShot';
      case 2:
        return 'Continuous';
      case 3:
        return 'LoopUntilNoteOff';
    }
    return '';
  };
  alphaTab.audio.synth.bank.components.generators.SampleGenerator = function() {
    alphaTab.audio.synth.bank.components.generators.Generator.call(
      this,
      new alphaTab.audio.synth.bank.descriptors.GeneratorDescriptor()
    );
    this.Samples = null;
  };
  alphaTab.audio.synth.bank.components.generators.SampleGenerator.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'components',
    'generators',
    'SampleGenerator'
  ];
  alphaTab.audio.synth.bank.components.generators.SampleGenerator.__super__ =
    alphaTab.audio.synth.bank.components.generators.Generator;
  alphaTab.audio.synth.bank.components.generators.SampleGenerator.prototype = $extend(
    alphaTab.audio.synth.bank.components.generators.Generator.prototype,
    {
      GetValue: function(phase) {
        return this.Samples.get_Item(system.Convert.ToInt32_Double(phase));
      },
      GetValues: function(generatorParams, blockBuffer, increment) {
        var proccessed = 0;
        while (true) {
          var samplesAvailable = system.Convert.ToInt32_Double(
            Math.ceil(
              (generatorParams.CurrentEnd - generatorParams.Phase) / increment
            )
          );
          if (samplesAvailable > blockBuffer.length - proccessed) {
            this.Interpolate(
              generatorParams,
              blockBuffer,
              increment,
              proccessed,
              blockBuffer.length
            );
            return;
          } else {
            var endProccessed = proccessed + samplesAvailable;
            this.Interpolate(
              generatorParams,
              blockBuffer,
              increment,
              proccessed,
              endProccessed
            );
            proccessed = endProccessed;
            var _g = generatorParams.CurrentState;
            switch (_g) {
              case 0:
                generatorParams.CurrentStart = this.LoopStartPhase;
                generatorParams.CurrentEnd = this.LoopEndPhase;
                generatorParams.CurrentState = 1;
                break;
              case 1:
                generatorParams.Phase =
                  generatorParams.Phase +
                  (generatorParams.CurrentStart - generatorParams.CurrentEnd);
                break;
              case 2:
                generatorParams.CurrentState = 3;
                while (proccessed < blockBuffer.length) {
                  var index = proccessed++;
                  blockBuffer[index] = 0;
                }
                break;
              default:
            }
          }
          if (!(proccessed < blockBuffer.length)) {
            break;
          }
        }
      },
      Interpolate: function(
        generatorParams,
        blockBuffer,
        increment,
        start,
        end
      ) {
        var _end =
          generatorParams.CurrentState == 1
            ? this.LoopEndPhase - 1
            : this.EndPhase - 1;
        var index;
        var s1;
        var s2;
        var mu;
        while (start < end && generatorParams.Phase < _end) {
          index = system.Convert.ToInt32_Double(generatorParams.Phase);
          s1 = this.Samples.get_Item(index);
          s2 = this.Samples.get_Item(index + 1);
          mu = js.Boot.__cast(generatorParams.Phase - index, Float);
          var index1 = start++;
          blockBuffer[index1] = s1 + mu * (s2 - s1);
          generatorParams.Phase = generatorParams.Phase + increment;
        }
        while (start < end) {
          index = system.Convert.ToInt32_Double(generatorParams.Phase);
          s1 = this.Samples.get_Item(index);
          if (generatorParams.CurrentState == 1) {
            s2 = this.Samples.get_Item(
              system.Convert.ToInt32_Double(generatorParams.CurrentStart)
            );
          } else {
            s2 = s1;
          }
          mu = js.Boot.__cast(generatorParams.Phase - index, Float);
          var index2 = start++;
          blockBuffer[index2] = s1 + mu * (s2 - s1);
          generatorParams.Phase = generatorParams.Phase + increment;
        }
      },
      __class__: alphaTab.audio.synth.bank.components.generators.SampleGenerator
    }
  );
  alphaTab.audio.synth.bank.descriptors.EnvelopeDescriptor = function() {
    this.DelayTime = 0.0;
    this.AttackTime = 0.0;
    this.AttackGraph = 0;
    this.HoldTime = 0.0;
    this.DecayTime = 0.0;
    this.DecayGraph = 0;
    this.SustainTime = 0.0;
    this.ReleaseTime = 0.0;
    this.ReleaseGraph = 0;
    this.SustainLevel = 0.0;
    this.PeakLevel = 0.0;
    this.StartLevel = 0.0;
    this.Depth = 0.0;
    this.Vel2Delay = 0.0;
    this.Vel2Attack = 0.0;
    this.Vel2Hold = 0.0;
    this.Vel2Decay = 0.0;
    this.Vel2Sustain = 0.0;
    this.Vel2Release = 0.0;
    this.Vel2Depth = 0.0;
    this.DelayTime = 0;
    this.AttackTime = 0;
    this.AttackGraph = 1;
    this.HoldTime = 0;
    this.DecayTime = 0;
    this.DecayGraph = 1;
    this.SustainTime = 3600;
    this.ReleaseTime = 0;
    this.ReleaseGraph = 1;
    this.SustainLevel = 0;
    this.PeakLevel = 1;
    this.StartLevel = 0;
    this.Depth = 1;
    this.Vel2Delay = 0;
    this.Vel2Attack = 0;
    this.Vel2Hold = 0;
    this.Vel2Decay = 0;
    this.Vel2Sustain = 0;
    this.Vel2Release = 0;
    this.Vel2Depth = 0;
  };
  alphaTab.audio.synth.bank.descriptors.EnvelopeDescriptor.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'descriptors',
    'EnvelopeDescriptor'
  ];
  alphaTab.audio.synth.bank.descriptors.EnvelopeDescriptor.prototype = {
    __class__: alphaTab.audio.synth.bank.descriptors.EnvelopeDescriptor
  };
  alphaTab.audio.synth.bank.descriptors.FilterDescriptor = function() {
    this.FilterMethod = 0;
    this.CutOff = 0.0;
    this.Resonance = 0.0;
    this.RootKey = 0;
    this.KeyTrack = 0;
    this.VelTrack = 0;
    this.FilterMethod = 0;
    this.CutOff = -1;
    this.Resonance = 1;
    this.RootKey = 60;
    this.KeyTrack = 0;
    this.VelTrack = 0;
  };
  alphaTab.audio.synth.bank.descriptors.FilterDescriptor.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'descriptors',
    'FilterDescriptor'
  ];
  alphaTab.audio.synth.bank.descriptors.FilterDescriptor.prototype = {
    __class__: alphaTab.audio.synth.bank.descriptors.FilterDescriptor
  };
  alphaTab.audio.synth.bank.descriptors.LfoDescriptor = function() {
    this.DelayTime = 0.0;
    this.Frequency = 0.0;
    this.Depth = 0.0;
    this.Generator = null;
    this.DelayTime = 0;
    this.Frequency = 8.0;
    this.Depth = 1;
    this.Generator =
      alphaTab.audio.synth.bank.components.generators.DefaultGenerators.DefaultSine;
  };
  alphaTab.audio.synth.bank.descriptors.LfoDescriptor.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'descriptors',
    'LfoDescriptor'
  ];
  alphaTab.audio.synth.bank.descriptors.LfoDescriptor.prototype = {
    __class__: alphaTab.audio.synth.bank.descriptors.LfoDescriptor
  };
  alphaTab.audio.synth.bank.descriptors._Waveform = {};
  alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_ = {};
  alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'descriptors',
    '_Waveform',
    'Waveform_Impl_'
  ];
  alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'Sine';
      case 1:
        return 'Square';
      case 2:
        return 'Saw';
      case 3:
        return 'Triangle';
      case 4:
        return 'SampleData';
      case 5:
        return 'WhiteNoise';
    }
    return '';
  };
  alphaTab.audio.synth.bank.patch = {};
  alphaTab.audio.synth.bank.patch._IntervalType = {};
  alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_ = {};
  alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'patch',
    '_IntervalType',
    'IntervalType_Impl_'
  ];
  alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'ChannelKeyVelocity';
      case 1:
        return 'ChannelKey';
      case 2:
        return 'KeyVelocity';
      case 3:
        return 'Key';
    }
    return '';
  };
  alphaTab.audio.synth.bank.patch.Patch = function(name) {
    this.ExclusiveGroupTarget = 0;
    this.ExclusiveGroup = 0;
    this.Name = null;
    this.Name = name;
    this.ExclusiveGroup = 0;
    this.ExclusiveGroupTarget = 0;
  };
  alphaTab.audio.synth.bank.patch.Patch.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'patch',
    'Patch'
  ];
  alphaTab.audio.synth.bank.patch.Patch.prototype = {
    Start: function(voiceparams) {
      throw new js._Boot.HaxeError('abstract');
    },
    Process: function(
      voiceparams,
      startIndex,
      endIndex,
      isMuted,
      isSilentProcess
    ) {
      throw new js._Boot.HaxeError('abstract');
    },
    Stop: function(voiceparams) {
      throw new js._Boot.HaxeError('abstract');
    },
    __class__: alphaTab.audio.synth.bank.patch.Patch
  };
  alphaTab.audio.synth.bank.patch.MultiPatch = function(name) {
    alphaTab.audio.synth.bank.patch.Patch.call(this, name);
    this._intervalType = 0;
    this._intervalList = null;
    this._intervalType = 0;
  };
  alphaTab.audio.synth.bank.patch.MultiPatch.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'patch',
    'MultiPatch'
  ];
  alphaTab.audio.synth.bank.patch.MultiPatch.__super__ =
    alphaTab.audio.synth.bank.patch.Patch;
  alphaTab.audio.synth.bank.patch.MultiPatch.prototype = $extend(
    alphaTab.audio.synth.bank.patch.Patch.prototype,
    {
      FindPatches: function(channel, key, velocity, layers) {
        var count = 0;
        var _g = this._intervalType;
        switch (_g) {
          case 0:
            var x = 0;
            while (x < this._intervalList.length) {
              if (
                this._intervalList[x].CheckAllIntervals(channel, key, velocity)
              ) {
                layers[count++] = this._intervalList[x].Patch;
                if (count == layers.length) {
                  break;
                }
              }
              ++x;
            }
            break;
          case 1:
            var x1 = 0;
            while (x1 < this._intervalList.length) {
              if (this._intervalList[x1].CheckChannelAndKey(channel, key)) {
                layers[count++] = this._intervalList[x1].Patch;
                if (count == layers.length) {
                  break;
                }
              }
              ++x1;
            }
            break;
          case 2:
            var x2 = 0;
            while (x2 < this._intervalList.length) {
              if (this._intervalList[x2].CheckKeyAndVelocity(key, velocity)) {
                layers[count++] = this._intervalList[x2].Patch;
                if (count == layers.length) {
                  break;
                }
              }
              ++x2;
            }
            break;
          case 3:
            var x3 = 0;
            while (x3 < this._intervalList.length) {
              if (this._intervalList[x3].CheckKey(key)) {
                layers[count++] = this._intervalList[x3].Patch;
                if (count == layers.length) {
                  break;
                }
              }
              ++x3;
            }
            break;
          default:
        }
        return count;
      },
      Start: function(voiceparams) {
        return false;
      },
      Process: function(
        voiceparams,
        startIndex,
        endIndex,
        isMuted,
        isSilentProcess
      ) {},
      Stop: function(voiceparams) {},
      LoadSf2: function(regions, assets) {
        var size = regions.length;
        var this1 = new Array(size);
        this._intervalList = this1;
        var x = 0;
        while (x < regions.length) {
          var loKey;
          var hiKey;
          var loVel;
          var hiVel;
          loKey = alphaTab.platform.Platform.ToUInt8(
            regions[x].Generators[43] & 255
          );
          hiKey = alphaTab.platform.Platform.ToUInt8(
            (regions[x].Generators[43] >> 8) & 255
          );
          loVel = alphaTab.platform.Platform.ToUInt8(
            regions[x].Generators[44] & 255
          );
          hiVel = alphaTab.platform.Platform.ToUInt8(
            (regions[x].Generators[44] >> 8) & 255
          );
          var sf2 = new alphaTab.audio.synth.bank.patch.Sf2Patch(
            this.Name + '_' + Std.string(x)
          );
          sf2.Load(regions[x], assets);
          this._intervalList[
            x
          ] = new alphaTab.audio.synth.bank.patch.PatchInterval(
            sf2,
            0,
            15,
            loKey,
            hiKey,
            loVel,
            hiVel
          );
          ++x;
        }
        this.DetermineIntervalType();
      },
      DetermineIntervalType: function() {
        var checkChannel = false;
        var checkVelocity = false;
        var x = 0;
        while (x < this._intervalList.length) {
          if (
            this._intervalList[x].StartChannel != 0 ||
            this._intervalList[x].EndChannel != 15
          ) {
            checkChannel = true;
            if (checkChannel && checkVelocity) {
              break;
            }
          }
          if (
            this._intervalList[x].StartVelocity != 0 ||
            this._intervalList[x].EndVelocity != 127
          ) {
            checkVelocity = true;
            if (checkChannel && checkVelocity) {
              break;
            }
          }
          ++x;
        }
        if (checkChannel && checkVelocity) {
          this._intervalType = 0;
        } else if (checkChannel) {
          this._intervalType = 1;
        } else if (checkVelocity) {
          this._intervalType = 2;
        } else {
          this._intervalType = 3;
        }
      },
      __class__: alphaTab.audio.synth.bank.patch.MultiPatch
    }
  );
  alphaTab.audio.synth.bank.patch.PatchInterval = function(
    patch,
    startChannel,
    endChannel,
    startKey,
    endKey,
    startVelocity,
    endVelocity
  ) {
    this.Patch = null;
    this.StartChannel = 0;
    this.StartKey = 0;
    this.StartVelocity = 0;
    this.EndChannel = 0;
    this.EndKey = 0;
    this.EndVelocity = 0;
    this.Patch = patch;
    this.StartChannel = startChannel;
    this.EndChannel = endChannel;
    this.StartKey = startKey;
    this.EndKey = endKey;
    this.StartVelocity = startVelocity;
    this.EndVelocity = endVelocity;
  };
  alphaTab.audio.synth.bank.patch.PatchInterval.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'patch',
    'PatchInterval'
  ];
  alphaTab.audio.synth.bank.patch.PatchInterval.prototype = {
    CheckAllIntervals: function(channel, key, velocity) {
      if (
        channel >= this.StartChannel &&
        channel <= this.EndChannel &&
        (key >= this.StartKey && key <= this.EndKey)
      ) {
        if (velocity >= this.StartVelocity) {
          return velocity <= this.EndVelocity;
        } else {
          return false;
        }
      } else {
        return false;
      }
    },
    CheckChannelAndKey: function(channel, key) {
      if (channel >= this.StartChannel && channel <= this.EndChannel) {
        if (key >= this.StartKey) {
          return key <= this.EndKey;
        } else {
          return false;
        }
      } else {
        return false;
      }
    },
    CheckKeyAndVelocity: function(key, velocity) {
      if (key >= this.StartKey && key <= this.EndKey) {
        if (velocity >= this.StartVelocity) {
          return velocity <= this.EndVelocity;
        } else {
          return false;
        }
      } else {
        return false;
      }
    },
    CheckKey: function(key) {
      if (key >= this.StartKey) {
        return key <= this.EndKey;
      } else {
        return false;
      }
    },
    __class__: alphaTab.audio.synth.bank.patch.PatchInterval
  };
  alphaTab.audio.synth.bank.patch.Sf2Patch = function(name) {
    alphaTab.audio.synth.bank.patch.Patch.call(this, name);
    this.iniFilterFc = 0;
    this.filterQ = 0.0;
    this.initialAttn = 0.0;
    this.keyOverride = 0;
    this.velOverride = 0;
    this.keynumToModEnvHold = 0;
    this.keynumToModEnvDecay = 0;
    this.keynumToVolEnvHold = 0;
    this.keynumToVolEnvDecay = 0;
    this.pan = null;
    this.modLfoToPitch = 0;
    this.vibLfoToPitch = 0;
    this.modEnvToPitch = 0;
    this.modLfoToFilterFc = 0;
    this.modEnvToFilterFc = 0;
    this.modLfoToVolume = 0.0;
    this.gen = null;
    this.mod_env = null;
    this.vel_env = null;
    this.mod_lfo = null;
    this.vib_lfo = null;
    this.fltr = null;
  };
  alphaTab.audio.synth.bank.patch.Sf2Patch.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'bank',
    'patch',
    'Sf2Patch'
  ];
  alphaTab.audio.synth.bank.patch.Sf2Patch.CalculateModulator = function(
    s,
    t,
    d,
    p,
    value,
    min,
    max
  ) {
    var output = 0;
    var i;
    value = value - min;
    max = max - min;
    if (d == 1) {
      value = max - value;
    }
    switch (s) {
      case 0:
        var this1 = (value / max) | 0;
        output = this1;
        break;
      case 1:
        i = 127 - value;
        output =
          -0.20833333333333334 *
          (Math.log((i * i) / js.Boot.__cast(max * max, Float)) / Math.log(10));
        break;
      case 2:
        i = value;
        output =
          1 +
          0.20833333333333334 *
            (Math.log((i * i) / js.Boot.__cast(max * max, Float)) /
              Math.log(10));
        break;
      case 3:
        if (value <= ((max / 2) | 0)) {
          output = 0;
        } else {
          output = 1;
        }
        break;
      default:
    }
    if (p == 1) {
      output = output * 2 - 1;
    }
    if (t == 2) {
      output = Math.abs(output);
    }
    return output;
  };
  alphaTab.audio.synth.bank.patch.Sf2Patch.__super__ =
    alphaTab.audio.synth.bank.patch.Patch;
  alphaTab.audio.synth.bank.patch.Sf2Patch.prototype = $extend(
    alphaTab.audio.synth.bank.patch.Patch.prototype,
    {
      Start: function(voiceparams) {
        var note = this.keyOverride > -1 ? this.keyOverride : voiceparams.Note;
        var vel =
          this.velOverride > -1 ? this.velOverride : voiceparams.Velocity;
        voiceparams.GeneratorParams[0].QuickSetup(this.gen);
        voiceparams.Envelopes[0].QuickSetupSf2(
          voiceparams.SynthParams.Synth.SampleRate,
          note,
          this.keynumToModEnvHold,
          this.keynumToModEnvDecay,
          false,
          this.mod_env
        );
        voiceparams.Envelopes[1].QuickSetupSf2(
          voiceparams.SynthParams.Synth.SampleRate,
          note,
          this.keynumToVolEnvHold,
          this.keynumToVolEnvDecay,
          true,
          this.vel_env
        );
        voiceparams.Filters[0].Disable();
        voiceparams.Lfos[0].QuickSetup(
          voiceparams.SynthParams.Synth.SampleRate,
          this.mod_lfo
        );
        voiceparams.Lfos[1].QuickSetup(
          voiceparams.SynthParams.Synth.SampleRate,
          this.vib_lfo
        );
        voiceparams.PitchOffset =
          (note - this.gen.RootKey) * this.gen.KeyTrack + this.gen.Tune;
        voiceparams.PitchOffset =
          voiceparams.PitchOffset +
          ((100.0 *
            (voiceparams.SynthParams.MasterCoarseTune +
              (voiceparams.SynthParams.MasterFineTune.get_Combined() - 8192.0) /
                8192.0)) |
            0);
        voiceparams.VolOffset = this.initialAttn;
        var this1 = 96.0;
        voiceparams.VolOffset =
          voiceparams.VolOffset -
          this1 *
            js.Boot.__cast(
              alphaTab.audio.synth.bank.patch.Sf2Patch.CalculateModulator(
                1,
                0,
                1,
                0,
                voiceparams.Velocity,
                0,
                127
              ),
              Float
            );
        var this2 = 96.0;
        voiceparams.VolOffset =
          voiceparams.VolOffset -
          this2 *
            js.Boot.__cast(
              alphaTab.audio.synth.bank.patch.Sf2Patch.CalculateModulator(
                1,
                0,
                1,
                0,
                voiceparams.SynthParams.Volume.get_Coarse(),
                0,
                127
              ),
              Float
            );
        if (voiceparams.GeneratorParams[0].CurrentState != 3) {
          return voiceparams.Envelopes[1].CurrentStage != 6;
        } else {
          return false;
        }
      },
      Stop: function(voiceparams) {
        this.gen.Release(voiceparams.GeneratorParams[0]);
        if (this.gen.LoopMode != 1) {
          voiceparams.Envelopes[0].Release(1e-38);
          voiceparams.Envelopes[1].ReleaseSf2VolumeEnvelope();
        }
      },
      Process: function(
        voiceparams,
        startIndex,
        endIndex,
        isMuted,
        isSilentProcess
      ) {
        var basePitchFrequency =
          alphaTab.audio.synth.util.SynthHelper.CentsToPitch(
            voiceparams.SynthParams.CurrentPitch
          ) * this.gen.Frequency;
        var pitchWithBend =
          basePitchFrequency *
          alphaTab.audio.synth.util.SynthHelper.CentsToPitch(
            voiceparams.PitchOffset
          );
        var basePitch =
          pitchWithBend / voiceparams.SynthParams.Synth.SampleRate;
        var baseVolume =
          voiceparams.SynthParams.Synth.MasterVolume *
          voiceparams.SynthParams.CurrentVolume *
          0.35 *
          voiceparams.SynthParams.MixVolume;
        if (isSilentProcess) {
          voiceparams.State = 0;
        } else {
          var x = startIndex;
          while (x < endIndex) {
            voiceparams.Envelopes[0].Increment(64);
            voiceparams.Envelopes[1].Increment(64);
            voiceparams.Lfos[0].Increment(64);
            voiceparams.Lfos[1].Increment(64);
            this.gen.GetValues(
              voiceparams.GeneratorParams[0],
              voiceparams.BlockBuffer,
              basePitch *
                alphaTab.audio.synth.util.SynthHelper.CentsToPitch(
                  system.Convert.ToInt32_Single(
                    voiceparams.Envelopes[0].Value * this.modEnvToPitch +
                      voiceparams.Lfos[0].Value * this.modLfoToPitch +
                      voiceparams.Lfos[1].Value * this.vibLfoToPitch
                  )
                )
            );
            if (voiceparams.Filters[0].get_Enabled()) {
              var centsFc =
                voiceparams.PData[0].getInt32(0, true) +
                voiceparams.Lfos[0].Value * this.modLfoToFilterFc +
                voiceparams.Envelopes[0].Value * this.modEnvToFilterFc;
              if (centsFc > 13500) {
                centsFc = 13500;
              }
              voiceparams.Filters[0].set_CutOff(
                alphaTab.audio.synth.util.SynthHelper.KeyToFrequency(
                  centsFc / 100.0,
                  69
                )
              );
              if (voiceparams.Filters[0].CoeffNeedsUpdating) {
                voiceparams.Filters[0].ApplyFilterInterp(
                  voiceparams.BlockBuffer,
                  voiceparams.SynthParams.Synth.SampleRate
                );
              } else {
                voiceparams.Filters[0].ApplyFilter_SampleArray(
                  voiceparams.BlockBuffer
                );
              }
            }
            var this1 =
              voiceparams.VolOffset +
              voiceparams.Envelopes[1].Value +
              voiceparams.Lfos[0].Value * this.modLfoToVolume;
            var volume =
              js.Boot.__cast(
                alphaTab.audio.synth.util.SynthHelper.DBtoLinear(this1),
                Float
              ) * baseVolume;
            if (!isMuted) {
              voiceparams.MixMonoToStereoInterp(
                x,
                volume *
                  this.pan.Left *
                  voiceparams.SynthParams.CurrentPan.Left,
                volume *
                  this.pan.Right *
                  voiceparams.SynthParams.CurrentPan.Right
              );
            }
            if (
              (voiceparams.Envelopes[1].CurrentStage > 2 && volume <= 1e-5) ||
              voiceparams.GeneratorParams[0].CurrentState == 3
            ) {
              voiceparams.State = 0;
              return;
            }
            x = x + 64 * 2;
          }
        }
      },
      Load: function(region, assets) {
        this.ExclusiveGroup = region.Generators[57];
        this.ExclusiveGroupTarget = this.ExclusiveGroup;
        this.iniFilterFc = region.Generators[8];
        this.filterQ = alphaTab.audio.synth.util.SynthHelper.DBtoLinear(
          region.Generators[9] / 10.0
        );
        var this1 = 10;
        this.initialAttn = -region.Generators[48] / this1;
        this.keyOverride = region.Generators[46];
        this.velOverride = region.Generators[47];
        this.keynumToModEnvHold = region.Generators[31];
        this.keynumToModEnvDecay = region.Generators[32];
        this.keynumToVolEnvHold = region.Generators[39];
        this.keynumToVolEnvDecay = region.Generators[40];
        this.pan = new alphaTab.audio.synth.bank.components.PanComponent();
        var this2 = 500;
        this.pan.SetValue(region.Generators[17] / this2, 0);
        this.modLfoToPitch = region.Generators[5];
        this.vibLfoToPitch = region.Generators[6];
        this.modEnvToPitch = region.Generators[7];
        this.modLfoToFilterFc = region.Generators[10];
        this.modEnvToFilterFc = region.Generators[11];
        var this3 = 10;
        this.modLfoToVolume = region.Generators[13] / this3;
        this.LoadGen(region, assets);
        this.LoadEnvelopes(region);
        this.LoadLfos(region);
        this.LoadFilter(region);
      },
      LoadGen: function(region, assets) {
        var this1 = region.Generators[53];
        var sda = assets.SampleAssets[this1];
        this.gen = new alphaTab.audio.synth.bank.components.generators.SampleGenerator();
        var this2 =
          sda.End + region.Generators[1] + 32768 * region.Generators[12];
        this.gen.EndPhase = this2;
        var this3 = sda.SampleRate;
        this.gen.Frequency = this3;
        this.gen.KeyTrack = region.Generators[56];
        var this4 =
          sda.LoopEnd + region.Generators[3] + 32768 * region.Generators[50];
        this.gen.LoopEndPhase = this4;
        var _g = region.Generators[54] & 3;
        switch (_g) {
          case 1:
            this.gen.LoopMode = 2;
            break;
          case 0:
          case 2:
            this.gen.LoopMode = 0;
            break;
          case 3:
            this.gen.LoopMode = 3;
            break;
          default:
        }
        var this5 =
          sda.LoopStart + region.Generators[2] + 32768 * region.Generators[45];
        this.gen.LoopStartPhase = this5;
        this.gen.Offset = 0;
        this.gen.Period = 1.0;
        if (region.Generators[58] > -1) {
          this.gen.RootKey = region.Generators[58];
        } else {
          this.gen.RootKey = sda.RootKey;
        }
        var this6 =
          sda.Start + region.Generators[0] + 32768 * region.Generators[4];
        this.gen.StartPhase = this6;
        var this7 = region.Generators[52];
        var tmp = system.Convert.ToInt16(
          sda.Tune + this7 + 100 * region.Generators[51]
        );
        this.gen.Tune = tmp;
        this.gen.VelocityTrack = 0;
        js.Boot.__cast(
          this.gen,
          alphaTab.audio.synth.bank.components.generators.SampleGenerator
        ).Samples = sda.SampleData;
      },
      LoadEnvelopes: function(region) {
        this.mod_env = new alphaTab.audio.synth.bank.descriptors.EnvelopeDescriptor();
        this.mod_env.AttackTime = js.Boot.__cast(
          Math.pow(2, region.Generators[26] / 1200.0),
          Float
        );
        this.mod_env.AttackGraph = 3;
        this.mod_env.DecayTime = js.Boot.__cast(
          Math.pow(2, region.Generators[28] / 1200.0),
          Float
        );
        this.mod_env.DelayTime = js.Boot.__cast(
          Math.pow(2, region.Generators[25] / 1200.0),
          Float
        );
        this.mod_env.HoldTime = js.Boot.__cast(
          Math.pow(2, region.Generators[27] / 1200.0),
          Float
        );
        this.mod_env.PeakLevel = 1;
        this.mod_env.ReleaseTime = js.Boot.__cast(
          Math.pow(2, region.Generators[30] / 1200.0),
          Float
        );
        this.mod_env.StartLevel = 0;
        var this1 = 1;
        var tmp = alphaTab.audio.synth.util.SynthHelper.ClampS(
          region.Generators[29],
          0 | 0,
          1000 | 0
        );
        var this2 = 1000;
        this.mod_env.SustainLevel = this1 - tmp / this2;
        var this3 = 0.001;
        if (this.mod_env.AttackTime < this3) {
          this.mod_env.AttackTime = 0.001;
        } else {
          var this4 = 100;
          if (this.mod_env.AttackTime > this4) {
            this.mod_env.AttackTime = 100;
          }
        }
        var this5 = 0.001;
        if (this.mod_env.DecayTime < this5) {
          this.mod_env.DecayTime = 0;
        } else {
          var this6 = 100;
          if (this.mod_env.DecayTime > this6) {
            this.mod_env.DecayTime = 100;
          }
        }
        var this7 = 0.001;
        if (this.mod_env.DelayTime < this7) {
          this.mod_env.DelayTime = 0;
        } else {
          var this8 = 20;
          if (this.mod_env.DelayTime > this8) {
            this.mod_env.DelayTime = 20;
          }
        }
        var this9 = 0.001;
        if (this.mod_env.HoldTime < this9) {
          this.mod_env.HoldTime = 0;
        } else {
          var this10 = 20;
          if (this.mod_env.HoldTime > this10) {
            this.mod_env.HoldTime = 20;
          }
        }
        var this11 = 0.001;
        if (this.mod_env.ReleaseTime < this11) {
          this.mod_env.ReleaseTime = 0.001;
        } else {
          var this12 = 100;
          if (this.mod_env.ReleaseTime > this12) {
            this.mod_env.ReleaseTime = 100;
          }
        }
        this.vel_env = new alphaTab.audio.synth.bank.descriptors.EnvelopeDescriptor();
        this.vel_env.AttackTime = js.Boot.__cast(
          Math.pow(2, region.Generators[34] / 1200.0),
          Float
        );
        this.vel_env.AttackGraph = 3;
        this.vel_env.DecayTime = js.Boot.__cast(
          Math.pow(2, region.Generators[36] / 1200.0),
          Float
        );
        this.vel_env.DelayTime = js.Boot.__cast(
          Math.pow(2, region.Generators[33] / 1200.0),
          Float
        );
        this.vel_env.HoldTime = js.Boot.__cast(
          Math.pow(2, region.Generators[35] / 1200.0),
          Float
        );
        this.vel_env.PeakLevel = 0;
        this.vel_env.ReleaseTime = js.Boot.__cast(
          Math.pow(2, region.Generators[38] / 1200.0),
          Float
        );
        this.vel_env.StartLevel = -100;
        var this13 =
          (alphaTab.audio.synth.util.SynthHelper.ClampS(
            region.Generators[37],
            0 | 0,
            1000 | 0
          ) /
            -10) |
          0;
        this.vel_env.SustainLevel = this13;
        var this14 = 0.001;
        if (this.vel_env.AttackTime < this14) {
          this.vel_env.AttackTime = 0.001;
        } else {
          var this15 = 100;
          if (this.vel_env.AttackTime > this15) {
            this.vel_env.AttackTime = 100;
          }
        }
        var this16 = 0.001;
        if (this.vel_env.DecayTime < this16) {
          this.vel_env.DecayTime = 0;
        } else {
          var this17 = 100;
          if (this.vel_env.DecayTime > this17) {
            this.vel_env.DecayTime = 100;
          }
        }
        var this18 = 0.001;
        if (this.vel_env.DelayTime < this18) {
          this.vel_env.DelayTime = 0;
        } else {
          var this19 = 20;
          if (this.vel_env.DelayTime > this19) {
            this.vel_env.DelayTime = 20;
          }
        }
        var this20 = 0.001;
        if (this.vel_env.HoldTime < this20) {
          this.vel_env.HoldTime = 0;
        } else {
          var this21 = 20;
          if (this.vel_env.HoldTime > this21) {
            this.vel_env.HoldTime = 20;
          }
        }
        var this22 = 0.001;
        if (this.vel_env.ReleaseTime < this22) {
          this.vel_env.ReleaseTime = 0.001;
        } else {
          var this23 = 100;
          if (this.vel_env.ReleaseTime > this23) {
            this.vel_env.ReleaseTime = 100;
          }
        }
      },
      LoadLfos: function(region) {
        this.mod_lfo = new alphaTab.audio.synth.bank.descriptors.LfoDescriptor();
        this.mod_lfo.DelayTime = js.Boot.__cast(
          Math.pow(2, region.Generators[21] / 1200.0),
          Float
        );
        this.mod_lfo.Frequency = js.Boot.__cast(
          Math.pow(2, region.Generators[22] / 1200.0) * 8.176,
          Float
        );
        this.mod_lfo.Generator =
          alphaTab.audio.synth.bank.components.generators.DefaultGenerators.DefaultSine;
        this.vib_lfo = new alphaTab.audio.synth.bank.descriptors.LfoDescriptor();
        this.vib_lfo.DelayTime = js.Boot.__cast(
          Math.pow(2, region.Generators[23] / 1200.0),
          Float
        );
        this.vib_lfo.Frequency = js.Boot.__cast(
          Math.pow(2, region.Generators[24] / 1200.0) * 8.176,
          Float
        );
        this.vib_lfo.Generator =
          alphaTab.audio.synth.bank.components.generators.DefaultGenerators.DefaultSine;
      },
      LoadFilter: function(region) {
        this.fltr = new alphaTab.audio.synth.bank.descriptors.FilterDescriptor();
        this.fltr.FilterMethod = 1;
        this.fltr.CutOff = js.Boot.__cast(
          alphaTab.audio.synth.util.SynthHelper.KeyToFrequency(
            region.Generators[8] / 100.0,
            69
          ),
          Float
        );
        this.fltr.Resonance = js.Boot.__cast(
          alphaTab.audio.synth.util.SynthHelper.DBtoLinear(
            region.Generators[9] / 10.0
          ),
          Float
        );
      },
      __class__: alphaTab.audio.synth.bank.patch.Sf2Patch
    }
  );
  alphaTab.audio.synth.ds.CircularSampleBuffer = $hx_exports['alphaTab'][
    'audio'
  ]['synth']['ds']['CircularSampleBuffer'] = function(size) {
    this._buffer = null;
    this._writePosition = 0;
    this._readPosition = 0;
    this.Count = 0;
    var this1 = new Float32Array(size);
    this._buffer = this1;
    this._writePosition = 0;
    this._readPosition = 0;
    this.Count = 0;
  };
  alphaTab.audio.synth.ds.CircularSampleBuffer.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'ds',
    'CircularSampleBuffer'
  ];
  alphaTab.audio.synth.ds.CircularSampleBuffer.prototype = {
    Clear: function() {
      this._readPosition = 0;
      this._writePosition = 0;
      this.Count = 0;
      var this1 = new Float32Array(this._buffer.length);
      this._buffer = this1;
    },
    Write: function(data, offset, count) {
      var samplesWritten = 0;
      if (count > this._buffer.length - this.Count) {
        count = this._buffer.length - this.Count;
      }
      var writeToEnd = Math.min(
        this._buffer.length - this._writePosition,
        count
      );
      var destPos = this._writePosition;
      alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array(
        this._buffer
      ).set(
        alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array(
          data
        ).subarray(offset, offset + writeToEnd),
        destPos
      );
      this._writePosition = this._writePosition + writeToEnd;
      this._writePosition = this._writePosition % this._buffer.length;
      samplesWritten = samplesWritten + writeToEnd;
      if (samplesWritten < count) {
        var srcPos = offset + samplesWritten;
        var destPos1 = this._writePosition;
        alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array(
          this._buffer
        ).set(
          alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array(
            data
          ).subarray(srcPos, srcPos + (count - samplesWritten)),
          destPos1
        );
        this._writePosition = this._writePosition + (count - samplesWritten);
        samplesWritten = count;
      }
      this.Count = this.Count + samplesWritten;
      return samplesWritten;
    },
    Read: function(data, offset, count) {
      if (count > this.Count) {
        count = this.Count;
      }
      var samplesRead = 0;
      var readToEnd = Math.min(this._buffer.length - this._readPosition, count);
      var src = this._buffer;
      var srcPos = this._readPosition;
      alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array(
        data
      ).set(
        alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array(
          src
        ).subarray(srcPos, srcPos + readToEnd),
        offset
      );
      samplesRead = samplesRead + readToEnd;
      this._readPosition = this._readPosition + readToEnd;
      this._readPosition = this._readPosition % this._buffer.length;
      if (samplesRead < count) {
        var src1 = this._buffer;
        var srcPos1 = this._readPosition;
        alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array(
          data
        ).set(
          alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array(
            src1
          ).subarray(srcPos1, srcPos1 + (count - samplesRead)),
          offset + samplesRead
        );
        this._readPosition = this._readPosition + (count - samplesRead);
        samplesRead = count;
      }
      this.Count = this.Count - samplesRead;
      return samplesRead;
    },
    __class__: alphaTab.audio.synth.ds.CircularSampleBuffer
  };
  alphaTab.audio.synth.ds.LinkedListNode = function() {
    this._list = null;
    this._next = null;
    this._prev = null;
    this.Value = null;
  };
  alphaTab.audio.synth.ds.LinkedListNode.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'ds',
    'LinkedListNode'
  ];
  alphaTab.audio.synth.ds.LinkedListNode.prototype = {
    get_Next: function() {
      if (this._next == null || this._list.First == this._next) {
        return null;
      } else {
        return this._next;
      }
    },
    get_Prev: function() {
      if (this._prev == null || this == this._list.First) {
        return null;
      } else {
        return this._prev;
      }
    },
    Invalidate: function() {
      this._list = null;
      this._next = null;
      this._prev = null;
    },
    __class__: alphaTab.audio.synth.ds.LinkedListNode
  };
  alphaTab.audio.synth.ds._SampleArray = {};
  alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_ = $hx_exports[
    'alphaTab'
  ]['audio']['synth']['ds']['_SampleArray']['SampleArray_Impl_'] = {};
  alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'ds',
    '_SampleArray',
    'SampleArray_Impl_'
  ];
  alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_._new = function(
    length
  ) {
    var this1 = new Float32Array(length);
    return this1;
  };
  alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array = function(
    this1
  ) {
    return this1;
  };
  alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.get_Item = function(
    this1,
    index
  ) {
    return this1[index];
  };
  alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.set_Item = function(
    this1,
    index,
    value
  ) {
    this1[index] = value;
    return this1[index];
  };
  alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.get_Length = function(
    this1
  ) {
    return this1.length;
  };
  alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.Clear = function(
    this1
  ) {
    this1 = new Float32Array(this1.length);
  };
  alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.Blit = function(
    src,
    srcPos,
    dest,
    destPos,
    len
  ) {
    alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array(
      dest
    ).set(
      alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array(
        src
      ).subarray(srcPos, srcPos + len),
      destPos
    );
  };
  alphaTab.audio.synth.midi = {};
  alphaTab.audio.synth.midi.MidiFile = $hx_exports['alphaTab']['audio'][
    'synth'
  ]['midi']['MidiFile'] = function() {
    this.Division = 0;
    this.Events = null;
    this.Division = 960;
    var this1 = [];
    this.Events = this1;
  };
  alphaTab.audio.synth.midi.MidiFile.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'midi',
    'MidiFile'
  ];
  alphaTab.audio.synth.midi.MidiFile.WriteVariableInt = function(s, value) {
    var this1 = new Uint8Array(4);
    var array = this1;
    var n = 0;
    while (true) {
      array[n++] = system.Convert.ToUInt8(value & 127 & 255);
      value = value >> 7;
      if (!(value > 0)) {
        break;
      }
    }
    while (n > 0) {
      --n;
      if (n > 0) {
        s.WriteByte(system.Convert.ToUInt8(array[n] | 128));
      } else {
        s.WriteByte(array[n]);
      }
    }
  };
  alphaTab.audio.synth.midi.MidiFile.prototype = {
    AddEvent: function(e) {
      if (this.Events.length == 0) {
        this.Events.push(e);
      } else {
        var insertPos = this.Events.length;
        while (insertPos > 0) {
          var prevItem = this.Events[insertPos - 1];
          if (prevItem.Tick > e.Tick) {
            --insertPos;
          } else {
            break;
          }
        }
        this.Events.splice(insertPos, 0, e);
      }
    },
    ToBinary: function() {
      var data = alphaTab.io.ByteBuffer.Empty();
      this.WriteTo(data);
      return data.ToArray();
    },
    WriteTo: function(s) {
      var b = new Uint8Array([77, 84, 104, 100]);
      s.Write(b, 0, b.length);
      b = new Uint8Array([0, 0, 0, 6]);
      s.Write(b, 0, b.length);
      b = new Uint8Array([0, 0]);
      s.Write(b, 0, b.length);
      var v = 1;
      b = new Uint8Array([
        system.Convert.ToUInt8((v >> 8) & 255),
        system.Convert.ToUInt8(v & 255)
      ]);
      s.Write(b, 0, b.length);
      v = system.Convert.ToInt16(960);
      b = new Uint8Array([
        system.Convert.ToUInt8((v >> 8) & 255),
        system.Convert.ToUInt8(v & 255)
      ]);
      s.Write(b, 0, b.length);
      var trackData = alphaTab.io.ByteBuffer.Empty();
      var previousTick = 0;
      var midiEvent = $iterator(this.Events)();
      while (midiEvent.hasNext()) {
        var midiEvent1 = midiEvent.next();
        var delta = midiEvent1.Tick - previousTick;
        alphaTab.audio.synth.midi.MidiFile.WriteVariableInt(trackData, delta);
        midiEvent1.WriteTo(trackData);
        previousTick = midiEvent1.Tick;
      }
      b = new Uint8Array([77, 84, 114, 107]);
      s.Write(b, 0, b.length);
      var data = trackData.ToArray();
      var l = data.length;
      b = new Uint8Array([
        system.Convert.ToUInt8((l >> 24) & 255),
        system.Convert.ToUInt8((l >> 16) & 255),
        system.Convert.ToUInt8((l >> 8) & 255),
        system.Convert.ToUInt8(l & 255)
      ]);
      s.Write(b, 0, b.length);
      s.Write(data, 0, data.length);
    },
    __class__: alphaTab.audio.synth.midi.MidiFile
  };
  alphaTab.audio.synth.midi.MidiHelper = function() {};
  alphaTab.audio.synth.midi.MidiHelper.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'midi',
    'MidiHelper'
  ];
  alphaTab.audio.synth.midi.event = {};
  alphaTab.audio.synth.midi.event._ControllerType = {};
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_ = $hx_exports[
    'alphaTab'
  ]['audio']['synth']['midi']['event']['_ControllerType'][
    'ControllerType_Impl_'
  ] = {};
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'midi',
    'event',
    '_ControllerType',
    'ControllerType_Impl_'
  ];
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'BankSelectCoarse';
      case 1:
        return 'ModulationCoarse';
      case 6:
        return 'DataEntryCoarse';
      case 7:
        return 'VolumeCoarse';
      case 10:
        return 'PanCoarse';
      case 11:
        return 'ExpressionControllerCoarse';
      case 33:
        return 'ModulationFine';
      case 38:
        return 'DataEntryFine';
      case 39:
        return 'VolumeFine';
      case 42:
        return 'PanFine';
      case 43:
        return 'ExpressionControllerFine';
      case 64:
        return 'HoldPedal';
      case 68:
        return 'LegatoPedal';
      case 98:
        return 'NonRegisteredParameterFine';
      case 99:
        return 'NonRegisteredParameterCourse';
      case 100:
        return 'RegisteredParameterFine';
      case 101:
        return 'RegisteredParameterCourse';
      case 121:
        return 'ResetControllers';
      case 123:
        return 'AllNotesOff';
    }
    return '';
  };
  alphaTab.audio.synth.midi.event.MidiEvent = $hx_exports['alphaTab']['audio'][
    'synth'
  ]['midi']['event']['MidiEvent'] = function(tick, status, data1, data2) {
    this.Message = 0;
    this.Tick = 0;
    this.Tick = tick;
    this.Message = status | (data1 << 8) | (data2 << 16);
  };
  alphaTab.audio.synth.midi.event.MidiEvent.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'midi',
    'event',
    'MidiEvent'
  ];
  alphaTab.audio.synth.midi.event.MidiEvent.prototype = {
    get_Channel: function() {
      return this.Message & 15;
    },
    get_Command: function() {
      return js.Boot.__cast(this.Message & 240, Int);
    },
    get_Data1: function() {
      return (this.Message & 65280) >> 8;
    },
    set_Data1: function(value) {
      this.Message = this.Message & -65281;
      this.Message = this.Message | (value << 8);
      return this.get_Data1();
    },
    get_Data2: function() {
      return (this.Message & 16711680) >> 16;
    },
    set_Data2: function(value) {
      this.Message = this.Message & -16711681;
      this.Message = this.Message | (value << 16);
      return this.get_Data2();
    },
    WriteTo: function(s) {
      var b = new Uint8Array([
        system.Convert.ToUInt8((this.Message >> 24) & 255),
        system.Convert.ToUInt8((this.Message >> 16) & 255),
        system.Convert.ToUInt8((this.Message >> 8) & 255),
        system.Convert.ToUInt8(this.Message & 255)
      ]);
      s.Write(b, 0, b.length);
    },
    __class__: alphaTab.audio.synth.midi.event.MidiEvent
  };
  alphaTab.audio.synth.midi.event.MetaEvent = function(
    delta,
    status,
    data1,
    data2
  ) {
    alphaTab.audio.synth.midi.event.MidiEvent.call(
      this,
      delta,
      status,
      data1,
      data2
    );
  };
  alphaTab.audio.synth.midi.event.MetaEvent.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'midi',
    'event',
    'MetaEvent'
  ];
  alphaTab.audio.synth.midi.event.MetaEvent.__super__ =
    alphaTab.audio.synth.midi.event.MidiEvent;
  alphaTab.audio.synth.midi.event.MetaEvent.prototype = $extend(
    alphaTab.audio.synth.midi.event.MidiEvent.prototype,
    {
      get_Channel: function() {
        return -1;
      },
      get_Command: function() {
        return js.Boot.__cast(this.Message & 255, Int);
      },
      get_MetaStatus: function() {
        return this.get_Data1();
      },
      __class__: alphaTab.audio.synth.midi.event.MetaEvent
    }
  );
  alphaTab.audio.synth.midi.event.MetaDataEvent = function(
    delta,
    status,
    metaId,
    data
  ) {
    alphaTab.audio.synth.midi.event.MetaEvent.call(
      this,
      delta,
      status,
      metaId,
      0
    );
    this.Data = null;
    this.Data = data;
  };
  alphaTab.audio.synth.midi.event.MetaDataEvent.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'midi',
    'event',
    'MetaDataEvent'
  ];
  alphaTab.audio.synth.midi.event.MetaDataEvent.__super__ =
    alphaTab.audio.synth.midi.event.MetaEvent;
  alphaTab.audio.synth.midi.event.MetaDataEvent.prototype = $extend(
    alphaTab.audio.synth.midi.event.MetaEvent.prototype,
    {
      WriteTo: function(s) {
        s.WriteByte(255);
        s.WriteByte(system.Convert.ToUInt8(this.get_MetaStatus()));
        var l = this.Data.length;
        alphaTab.audio.synth.midi.MidiFile.WriteVariableInt(s, l);
        s.Write(this.Data, 0, this.Data.length);
      },
      __class__: alphaTab.audio.synth.midi.event.MetaDataEvent
    }
  );
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum = {};
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_ = {};
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'midi',
    'event',
    '_MetaEventTypeEnum',
    'MetaEventTypeEnum_Impl_'
  ];
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'SequenceNumber';
      case 1:
        return 'TextEvent';
      case 2:
        return 'CopyrightNotice';
      case 3:
        return 'SequenceOrTrackName';
      case 4:
        return 'InstrumentName';
      case 5:
        return 'LyricText';
      case 6:
        return 'MarkerText';
      case 7:
        return 'CuePoint';
      case 8:
        return 'PatchName';
      case 9:
        return 'PortName';
      case 32:
        return 'MidiChannel';
      case 33:
        return 'MidiPort';
      case 47:
        return 'EndOfTrack';
      case 81:
        return 'Tempo';
      case 84:
        return 'SmpteOffset';
      case 88:
        return 'TimeSignature';
      case 89:
        return 'KeySignature';
      case 127:
        return 'SequencerSpecific';
    }
    return '';
  };
  alphaTab.audio.synth.midi.event.MetaNumberEvent = function(
    delta,
    status,
    metaId,
    number
  ) {
    alphaTab.audio.synth.midi.event.MetaEvent.call(
      this,
      delta,
      status,
      metaId,
      0
    );
    this.Value = 0;
    this.Value = number;
  };
  alphaTab.audio.synth.midi.event.MetaNumberEvent.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'midi',
    'event',
    'MetaNumberEvent'
  ];
  alphaTab.audio.synth.midi.event.MetaNumberEvent.__super__ =
    alphaTab.audio.synth.midi.event.MetaEvent;
  alphaTab.audio.synth.midi.event.MetaNumberEvent.prototype = $extend(
    alphaTab.audio.synth.midi.event.MetaEvent.prototype,
    {
      WriteTo: function(s) {
        s.WriteByte(255);
        s.WriteByte(system.Convert.ToUInt8(this.get_MetaStatus()));
        alphaTab.audio.synth.midi.MidiFile.WriteVariableInt(s, 3);
        var b = new Uint8Array([
          system.Convert.ToUInt8((this.Value >> 16) & 255),
          system.Convert.ToUInt8((this.Value >> 8) & 255),
          system.Convert.ToUInt8(this.Value & 255)
        ]);
        s.Write(b, 0, b.length);
      },
      __class__: alphaTab.audio.synth.midi.event.MetaNumberEvent
    }
  );
  alphaTab.audio.synth.midi.event._MidiEventType = {};
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_ = $hx_exports[
    'alphaTab'
  ]['audio']['synth']['midi']['event']['_MidiEventType'][
    'MidiEventType_Impl_'
  ] = {};
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'midi',
    'event',
    '_MidiEventType',
    'MidiEventType_Impl_'
  ];
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 128:
        return 'NoteOff';
      case 144:
        return 'NoteOn';
      case 160:
        return 'NoteAftertouch';
      case 176:
        return 'Controller';
      case 192:
        return 'ProgramChange';
      case 208:
        return 'ChannelAftertouch';
      case 224:
        return 'PitchBend';
      case 255:
        return 'Meta';
    }
    return '';
  };
  alphaTab.audio.synth.midi.event.SystemCommonEvent = function(
    delta,
    status,
    data1,
    data2
  ) {
    alphaTab.audio.synth.midi.event.MidiEvent.call(
      this,
      delta,
      status,
      data1,
      data2
    );
  };
  alphaTab.audio.synth.midi.event.SystemCommonEvent.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'midi',
    'event',
    'SystemCommonEvent'
  ];
  alphaTab.audio.synth.midi.event.SystemCommonEvent.__super__ =
    alphaTab.audio.synth.midi.event.MidiEvent;
  alphaTab.audio.synth.midi.event.SystemCommonEvent.prototype = $extend(
    alphaTab.audio.synth.midi.event.MidiEvent.prototype,
    {
      get_Channel: function() {
        return -1;
      },
      get_Command: function() {
        return js.Boot.__cast(this.Message & 255, Int);
      },
      __class__: alphaTab.audio.synth.midi.event.SystemCommonEvent
    }
  );
  alphaTab.audio.synth.midi.event._SystemCommonTypeEnum = {};
  alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_ = {};
  alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'midi',
    'event',
    '_SystemCommonTypeEnum',
    'SystemCommonTypeEnum_Impl_'
  ];
  alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 240:
        return 'SystemExclusive';
      case 241:
        return 'MtcQuarterFrame';
      case 242:
        return 'SongPosition';
      case 243:
        return 'SongSelect';
      case 246:
        return 'TuneRequest';
      case 247:
        return 'SystemExclusive2';
    }
    return '';
  };
  alphaTab.audio.synth.midi.event.SystemExclusiveEvent = function(
    delta,
    status,
    id,
    data
  ) {
    alphaTab.audio.synth.midi.event.SystemCommonEvent.call(
      this,
      delta,
      status,
      system.Convert.ToUInt8(id & 255),
      system.Convert.ToUInt8(id >> 8)
    );
    this.Data = null;
    this.Data = data;
  };
  alphaTab.audio.synth.midi.event.SystemExclusiveEvent.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'midi',
    'event',
    'SystemExclusiveEvent'
  ];
  alphaTab.audio.synth.midi.event.SystemExclusiveEvent.__super__ =
    alphaTab.audio.synth.midi.event.SystemCommonEvent;
  alphaTab.audio.synth.midi.event.SystemExclusiveEvent.prototype = $extend(
    alphaTab.audio.synth.midi.event.SystemCommonEvent.prototype,
    {
      get_ManufacturerId: function() {
        return this.Message >> 8;
      },
      WriteTo: function(s) {
        s.WriteByte(240);
        var l = this.Data.length + 2;
        s.WriteByte(system.Convert.ToUInt8(this.get_ManufacturerId()));
        var b = new Uint8Array([
          system.Convert.ToUInt8((l >> 24) & 255),
          system.Convert.ToUInt8((l >> 16) & 255),
          system.Convert.ToUInt8((l >> 8) & 255),
          system.Convert.ToUInt8(l & 255)
        ]);
        s.Write(b, 0, b.length);
        s.WriteByte(247);
      },
      __class__: alphaTab.audio.synth.midi.event.SystemExclusiveEvent
    }
  );
  alphaTab.audio.synth.sf2 = {};
  alphaTab.audio.synth.sf2._DirectionEnum = {};
  alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_ = {};
  alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    '_DirectionEnum',
    'DirectionEnum_Impl_'
  ];
  alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'MinToMax';
      case 1:
        return 'MaxToMin';
    }
    return '';
  };
  alphaTab.audio.synth.sf2.Generator = function(input) {
    this._rawAmount = 0;
    this.GeneratorType = 0;
    this.GeneratorType = js.Boot.__cast(
      alphaTab.io.IOHelper.ReadUInt16LE(input),
      Int
    );
    this._rawAmount = alphaTab.io.IOHelper.ReadUInt16LE(input);
  };
  alphaTab.audio.synth.sf2.Generator.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    'Generator'
  ];
  alphaTab.audio.synth.sf2.Generator.prototype = {
    get_AmountInt16: function() {
      return alphaTab.platform.Platform.ToInt16(this._rawAmount);
    },
    set_AmountInt16: function(value) {
      this._rawAmount = alphaTab.platform.Platform.ToUInt16(value);
      return this.get_AmountInt16();
    },
    get_LowByteAmount: function() {
      return alphaTab.platform.Platform.ToUInt8(this._rawAmount & 255);
    },
    set_LowByteAmount: function(value) {
      this._rawAmount = alphaTab.platform.Platform.ToUInt16(
        (this._rawAmount & 65280) + alphaTab.platform.Platform.ToUInt8(value)
      );
      return this.get_LowByteAmount();
    },
    get_HighByteAmount: function() {
      return alphaTab.platform.Platform.ToUInt8((this._rawAmount & 65280) >> 8);
    },
    set_HighByteAmount: function(value) {
      this._rawAmount = alphaTab.platform.Platform.ToUInt16(
        (this._rawAmount & 255) +
          (alphaTab.platform.Platform.ToUInt8(value) << 8)
      );
      return this.get_HighByteAmount();
    },
    __class__: alphaTab.audio.synth.sf2.Generator
  };
  alphaTab.audio.synth.sf2._GeneratorEnum = {};
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_ = {};
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    '_GeneratorEnum',
    'GeneratorEnum_Impl_'
  ];
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'StartAddressOffset';
      case 1:
        return 'EndAddressOffset';
      case 2:
        return 'StartLoopAddressOffset';
      case 3:
        return 'EndLoopAddressOffset';
      case 4:
        return 'StartAddressCoarseOffset';
      case 5:
        return 'ModulationLFOToPitch';
      case 6:
        return 'VibratoLFOToPitch';
      case 7:
        return 'ModulationEnvelopeToPitch';
      case 8:
        return 'InitialFilterCutoffFrequency';
      case 9:
        return 'InitialFilterQ';
      case 10:
        return 'ModulationLFOToFilterCutoffFrequency';
      case 11:
        return 'ModulationEnvelopeToFilterCutoffFrequency';
      case 12:
        return 'EndAddressCoarseOffset';
      case 13:
        return 'ModulationLFOToVolume';
      case 14:
        return 'Unused1';
      case 15:
        return 'ChorusEffectsSend';
      case 16:
        return 'ReverbEffectsSend';
      case 17:
        return 'Pan';
      case 18:
        return 'Unused2';
      case 19:
        return 'Unused3';
      case 20:
        return 'Unused4';
      case 21:
        return 'DelayModulationLFO';
      case 22:
        return 'FrequencyModulationLFO';
      case 23:
        return 'DelayVibratoLFO';
      case 24:
        return 'FrequencyVibratoLFO';
      case 25:
        return 'DelayModulationEnvelope';
      case 26:
        return 'AttackModulationEnvelope';
      case 27:
        return 'HoldModulationEnvelope';
      case 28:
        return 'DecayModulationEnvelope';
      case 29:
        return 'SustainModulationEnvelope';
      case 30:
        return 'ReleaseModulationEnvelope';
      case 31:
        return 'KeyNumberToModulationEnvelopeHold';
      case 32:
        return 'KeyNumberToModulationEnvelopeDecay';
      case 33:
        return 'DelayVolumeEnvelope';
      case 34:
        return 'AttackVolumeEnvelope';
      case 35:
        return 'HoldVolumeEnvelope';
      case 36:
        return 'DecayVolumeEnvelope';
      case 37:
        return 'SustainVolumeEnvelope';
      case 38:
        return 'ReleaseVolumeEnvelope';
      case 39:
        return 'KeyNumberToVolumeEnvelopeHold';
      case 40:
        return 'KeyNumberToVolumeEnvelopeDecay';
      case 41:
        return 'Instrument';
      case 42:
        return 'Reserved1';
      case 43:
        return 'KeyRange';
      case 44:
        return 'VelocityRange';
      case 45:
        return 'StartLoopAddressCoarseOffset';
      case 46:
        return 'KeyNumber';
      case 47:
        return 'Velocity';
      case 48:
        return 'InitialAttenuation';
      case 49:
        return 'Reserved2';
      case 50:
        return 'EndLoopAddressCoarseOffset';
      case 51:
        return 'CoarseTune';
      case 52:
        return 'FineTune';
      case 53:
        return 'SampleID';
      case 54:
        return 'SampleModes';
      case 55:
        return 'Reserved3';
      case 56:
        return 'ScaleTuning';
      case 57:
        return 'ExclusiveClass';
      case 58:
        return 'OverridingRootKey';
      case 59:
        return 'Unused5';
      case 60:
        return 'UnusedEnd';
    }
    return '';
  };
  alphaTab.audio.synth.sf2.Instrument = function() {
    this.Name = null;
    this.Zones = null;
  };
  alphaTab.audio.synth.sf2.Instrument.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    'Instrument'
  ];
  alphaTab.audio.synth.sf2.Instrument.prototype = {
    __class__: alphaTab.audio.synth.sf2.Instrument
  };
  alphaTab.audio.synth.sf2.Modulator = function(input) {
    this._sourceModulationData = null;
    this._destinationGenerator = 0;
    this._amount = 0;
    this._sourceModulationAmount = null;
    this._sourceTransform = 0;
    this._sourceModulationData = new alphaTab.audio.synth.sf2.ModulatorType(
      input
    );
    this._destinationGenerator = alphaTab.io.IOHelper.ReadUInt16LE(input);
    this._amount = alphaTab.io.IOHelper.ReadInt16LE(input);
    this._sourceModulationAmount = new alphaTab.audio.synth.sf2.ModulatorType(
      input
    );
    this._sourceTransform = alphaTab.io.IOHelper.ReadUInt16LE(input);
  };
  alphaTab.audio.synth.sf2.Modulator.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    'Modulator'
  ];
  alphaTab.audio.synth.sf2.Modulator.prototype = {
    __class__: alphaTab.audio.synth.sf2.Modulator
  };
  alphaTab.audio.synth.sf2.ModulatorType = function(input) {
    this._controllerSource = 0;
    this.Polarity = 0;
    this.Direction = 0;
    this.SourceType = 0;
    this.IsMidiContinuousController = false;
    var raw = alphaTab.io.IOHelper.ReadUInt16LE(input);
    this.Polarity = (raw & 512) == 512 ? 1 : 0;
    this.Direction = (raw & 256) == 256 ? 1 : 0;
    this.IsMidiContinuousController = (raw & 128) == 128;
    this.SourceType = (raw & 64512) >> 10;
    this._controllerSource = alphaTab.platform.Platform.ToUInt16(raw & 127);
  };
  alphaTab.audio.synth.sf2.ModulatorType.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    'ModulatorType'
  ];
  alphaTab.audio.synth.sf2.ModulatorType.prototype = {
    __class__: alphaTab.audio.synth.sf2.ModulatorType
  };
  alphaTab.audio.synth.sf2._PolarityEnum = {};
  alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_ = {};
  alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    '_PolarityEnum',
    'PolarityEnum_Impl_'
  ];
  alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'Unipolar';
      case 1:
        return 'Bipolar';
    }
    return '';
  };
  alphaTab.audio.synth.sf2.PresetHeader = function() {
    this.Name = null;
    this.PatchNumber = 0;
    this.BankNumber = 0;
    this.Library = 0;
    this.Genre = 0;
    this.Morphology = 0;
    this.Zones = null;
  };
  alphaTab.audio.synth.sf2.PresetHeader.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    'PresetHeader'
  ];
  alphaTab.audio.synth.sf2.PresetHeader.prototype = {
    __class__: alphaTab.audio.synth.sf2.PresetHeader
  };
  alphaTab.audio.synth.sf2._SFSampleLink = {};
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_ = {};
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    '_SFSampleLink',
    'SFSampleLink_Impl_'
  ];
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 1:
        return 'MonoSample';
      case 2:
        return 'RightSample';
      case 4:
        return 'LeftSample';
      case 8:
        return 'LinkedSample';
      case 16:
        return 'OggVobis';
      case 32769:
        return 'RomMonoSample';
      case 32770:
        return 'RomRightSample';
      case 32772:
        return 'RomLeftSample';
      case 32776:
        return 'RomLinkedSample';
    }
    return '';
  };
  alphaTab.audio.synth.sf2.SampleHeader = function(input) {
    this.Name = null;
    this.Start = 0;
    this.End = 0;
    this.StartLoop = 0;
    this.EndLoop = 0;
    this.SampleRate = 0;
    this.RootKey = 0;
    this.Tune = 0;
    this.SampleLink = 0;
    this.SoundFontSampleLink = 1;
    this.Name = alphaTab.io.IOHelper.Read8BitStringLength(input, 20);
    this.Start = alphaTab.io.IOHelper.ReadInt32LE(input);
    this.End = alphaTab.io.IOHelper.ReadInt32LE(input);
    this.StartLoop = alphaTab.io.IOHelper.ReadInt32LE(input);
    this.EndLoop = alphaTab.io.IOHelper.ReadInt32LE(input);
    this.SampleRate = alphaTab.io.IOHelper.ReadInt32LE(input);
    this.RootKey = system.Convert.ToUInt8(input.ReadByte());
    this.Tune = alphaTab.platform.Platform.ToInt16(input.ReadByte());
    this.SampleLink = alphaTab.io.IOHelper.ReadUInt16LE(input);
    this.SoundFontSampleLink = js.Boot.__cast(
      alphaTab.io.IOHelper.ReadUInt16LE(input),
      Int
    );
  };
  alphaTab.audio.synth.sf2.SampleHeader.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    'SampleHeader'
  ];
  alphaTab.audio.synth.sf2.SampleHeader.prototype = {
    __class__: alphaTab.audio.synth.sf2.SampleHeader
  };
  alphaTab.audio.synth.sf2.Sf2Region = function() {
    this.Generators = null;
    var this1 = new Int16Array(61);
    this.Generators = this1;
  };
  alphaTab.audio.synth.sf2.Sf2Region.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    'Sf2Region'
  ];
  alphaTab.audio.synth.sf2.Sf2Region.prototype = {
    ApplyDefaultValues: function() {
      this.Generators[0] = 0;
      this.Generators[1] = 0;
      this.Generators[2] = 0;
      this.Generators[3] = 0;
      this.Generators[4] = 0;
      this.Generators[5] = 0;
      this.Generators[6] = 0;
      this.Generators[7] = 0;
      this.Generators[8] = 13500;
      this.Generators[9] = 0;
      this.Generators[10] = 0;
      this.Generators[11] = 0;
      this.Generators[12] = 0;
      this.Generators[13] = 0;
      this.Generators[15] = 0;
      this.Generators[16] = 0;
      this.Generators[17] = 0;
      this.Generators[21] = -12000 | 0;
      this.Generators[22] = 0;
      this.Generators[23] = -12000 | 0;
      this.Generators[24] = 0;
      this.Generators[25] = -12000 | 0;
      this.Generators[26] = -12000 | 0;
      this.Generators[27] = -12000 | 0;
      this.Generators[28] = -12000 | 0;
      this.Generators[29] = 0;
      this.Generators[30] = -12000 | 0;
      this.Generators[31] = 0;
      this.Generators[32] = 0;
      this.Generators[33] = -12000 | 0;
      this.Generators[34] = -12000 | 0;
      this.Generators[35] = -12000 | 0;
      this.Generators[36] = -12000 | 0;
      this.Generators[37] = 0;
      this.Generators[38] = -12000 | 0;
      this.Generators[39] = 0;
      this.Generators[40] = 0;
      this.Generators[43] = 32512;
      this.Generators[44] = 32512;
      this.Generators[45] = 0;
      this.Generators[46] = -1 | 0;
      this.Generators[47] = -1 | 0;
      this.Generators[48] = 0;
      this.Generators[50] = 0;
      this.Generators[51] = 0;
      this.Generators[52] = 0;
      this.Generators[54] = 0;
      this.Generators[56] = 100;
      this.Generators[57] = 0;
      this.Generators[58] = -1 | 0;
    },
    __class__: alphaTab.audio.synth.sf2.Sf2Region
  };
  alphaTab.audio.synth.sf2.SoundFont = function() {
    this.Info = null;
    this.SampleData = null;
    this.Presets = null;
  };
  alphaTab.audio.synth.sf2.SoundFont.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    'SoundFont'
  ];
  alphaTab.audio.synth.sf2.SoundFont.prototype = {
    Load: function(input) {
      var id = alphaTab.io.IOHelper.Read8BitChars(input, 4);
      var size = alphaTab.io.IOHelper.ReadInt32LE(input);
      if (id.toLowerCase() != 'riff') {
        throw new js._Boot.HaxeError(
          new system.Exception().Exception_CsString(
            'Invalid soundfont. Could not find RIFF header.'
          )
        );
      }
      id = alphaTab.io.IOHelper.Read8BitChars(input, 4);
      if (id.toLowerCase() != 'sfbk') {
        throw new js._Boot.HaxeError(
          new system.Exception().Exception_CsString(
            'Invalid soundfont. Riff type is invalid.'
          )
        );
      }
      alphaTab.util.Logger.Debug('SF2', 'Reading info chunk', null);
      this.Info = new alphaTab.audio.synth.sf2.SoundFontInfo(input);
      alphaTab.util.Logger.Debug('SF2', 'Reading sampledata chunk', null);
      this.SampleData = new alphaTab.audio.synth.sf2.SoundFontSampleData(input);
      alphaTab.util.Logger.Debug('SF2', 'Reading preset chunk', null);
      this.Presets = new alphaTab.audio.synth.sf2.SoundFontPresets(input);
    },
    __class__: alphaTab.audio.synth.sf2.SoundFont
  };
  alphaTab.audio.synth.sf2.SoundFontInfo = function(input) {
    this.RomVersionMajor = 0;
    this.RomVersionMinor = 0;
    this.SfVersionMajor = 0;
    this.SfVersionMinor = 0;
    this.SoundEngine = null;
    this.BankName = null;
    this.DataRom = null;
    this.CreationDate = null;
    this.Author = null;
    this.TargetProduct = null;
    this.Copyright = null;
    this.Comments = null;
    this.Tools = null;
    this.Tools = '';
    this.Comments = '';
    this.Copyright = '';
    this.TargetProduct = '';
    this.Author = '';
    this.DataRom = '';
    this.CreationDate = '';
    this.BankName = '';
    this.SoundEngine = '';
    var id = alphaTab.io.IOHelper.Read8BitChars(input, 4);
    var size = alphaTab.io.IOHelper.ReadInt32LE(input);
    if (id.toLowerCase() != 'list') {
      throw new js._Boot.HaxeError(
        new system.Exception().Exception_CsString(
          'Invalid soundfont. Could not find INFO LIST chunk.'
        )
      );
    }
    var readTo = input.get_Position() + size;
    id = alphaTab.io.IOHelper.Read8BitChars(input, 4);
    if (id.toLowerCase() != 'info') {
      throw new js._Boot.HaxeError(
        new system.Exception().Exception_CsString(
          'Invalid soundfont. The LIST chunk is not of type INFO.'
        )
      );
    }
    while (input.get_Position() < readTo) {
      id = alphaTab.io.IOHelper.Read8BitChars(input, 4);
      size = alphaTab.io.IOHelper.ReadInt32LE(input);
      var _g = id.toLowerCase();
      switch (_g) {
        case 'icmt':
          this.Comments = alphaTab.io.IOHelper.Read8BitStringLength(
            input,
            size
          );
          break;
        case 'icop':
          this.Copyright = alphaTab.io.IOHelper.Read8BitStringLength(
            input,
            size
          );
          break;
        case 'icrd':
          this.CreationDate = alphaTab.io.IOHelper.Read8BitStringLength(
            input,
            size
          );
          break;
        case 'ieng':
          this.Author = alphaTab.io.IOHelper.Read8BitStringLength(input, size);
          break;
        case 'ifil':
          this.SfVersionMajor = alphaTab.io.IOHelper.ReadInt16LE(input);
          this.SfVersionMinor = alphaTab.io.IOHelper.ReadInt16LE(input);
          break;
        case 'inam':
          this.BankName = alphaTab.io.IOHelper.Read8BitStringLength(
            input,
            size
          );
          break;
        case 'iprd':
          this.TargetProduct = alphaTab.io.IOHelper.Read8BitStringLength(
            input,
            size
          );
          break;
        case 'irom':
          this.DataRom = alphaTab.io.IOHelper.Read8BitStringLength(input, size);
          break;
        case 'isft':
          this.Tools = alphaTab.io.IOHelper.Read8BitStringLength(input, size);
          break;
        case 'isng':
          this.SoundEngine = alphaTab.io.IOHelper.Read8BitStringLength(
            input,
            size
          );
          break;
        case 'iver':
          this.RomVersionMajor = alphaTab.io.IOHelper.ReadInt16LE(input);
          this.RomVersionMinor = alphaTab.io.IOHelper.ReadInt16LE(input);
          break;
        default:
          throw new js._Boot.HaxeError(
            new system.Exception().Exception_CsString(
              'Invalid soundfont. The Chunk: ' + id + ' was not expected.'
            )
          );
      }
    }
  };
  alphaTab.audio.synth.sf2.SoundFontInfo.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    'SoundFontInfo'
  ];
  alphaTab.audio.synth.sf2.SoundFontInfo.prototype = {
    __class__: alphaTab.audio.synth.sf2.SoundFontInfo
  };
  alphaTab.audio.synth.sf2.SoundFontPresets = function(input) {
    this.SampleHeaders = null;
    this.PresetHeaders = null;
    this.Instruments = null;
    var id = alphaTab.io.IOHelper.Read8BitChars(input, 4);
    var size = alphaTab.io.IOHelper.ReadInt32LE(input);
    if (id.toLowerCase() != 'list') {
      throw new js._Boot.HaxeError(
        new system.Exception().Exception_CsString(
          'Invalid soundfont. Could not find pdta LIST chunk.'
        )
      );
    }
    var readTo = input.get_Position() + size;
    id = alphaTab.io.IOHelper.Read8BitChars(input, 4);
    if (id.toLowerCase() != 'pdta') {
      throw new js._Boot.HaxeError(
        new system.Exception().Exception_CsString(
          'Invalid soundfont. The LIST chunk is not of type pdta.'
        )
      );
    }
    var presetModulators = null;
    var presetGenerators = null;
    var instrumentModulators = null;
    var instrumentGenerators = null;
    var pbag = null;
    var ibag = null;
    var phdr = null;
    var inst = null;
    while (input.get_Position() < readTo) {
      id = alphaTab.io.IOHelper.Read8BitChars(input, 4);
      size = alphaTab.io.IOHelper.ReadInt32LE(input);
      var _g = id.toLowerCase();
      switch (_g) {
        case 'ibag':
          ibag = new alphaTab.audio.synth.sf2.chunks.ZoneChunk(id, size, input);
          break;
        case 'igen':
          instrumentGenerators = new alphaTab.audio.synth.sf2.chunks.GeneratorChunk(
            id,
            size,
            input
          ).Generators;
          break;
        case 'imod':
          instrumentModulators = new alphaTab.audio.synth.sf2.chunks.ModulatorChunk(
            id,
            size,
            input
          ).Modulators;
          break;
        case 'inst':
          inst = new alphaTab.audio.synth.sf2.chunks.InstrumentChunk(
            id,
            size,
            input
          );
          break;
        case 'pbag':
          pbag = new alphaTab.audio.synth.sf2.chunks.ZoneChunk(id, size, input);
          break;
        case 'pgen':
          presetGenerators = new alphaTab.audio.synth.sf2.chunks.GeneratorChunk(
            id,
            size,
            input
          ).Generators;
          break;
        case 'phdr':
          phdr = new alphaTab.audio.synth.sf2.chunks.PresetHeaderChunk(
            id,
            size,
            input
          );
          break;
        case 'pmod':
          presetModulators = new alphaTab.audio.synth.sf2.chunks.ModulatorChunk(
            id,
            size,
            input
          ).Modulators;
          break;
        case 'shdr':
          this.SampleHeaders = new alphaTab.audio.synth.sf2.chunks.SampleHeaderChunk(
            id,
            size,
            input
          ).SampleHeaders;
          break;
        default:
          throw new js._Boot.HaxeError(
            new system.Exception().Exception_CsString(
              'Invalid soundfont. Unrecognized sub chunk: ' + id
            )
          );
      }
    }
    var pZones = pbag.ToZones(presetModulators, presetGenerators);
    this.PresetHeaders = phdr.ToPresets(pZones);
    var iZones = ibag.ToZones(instrumentModulators, instrumentGenerators);
    this.Instruments = inst.ToInstruments(iZones);
  };
  alphaTab.audio.synth.sf2.SoundFontPresets.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    'SoundFontPresets'
  ];
  alphaTab.audio.synth.sf2.SoundFontPresets.prototype = {
    __class__: alphaTab.audio.synth.sf2.SoundFontPresets
  };
  alphaTab.audio.synth.sf2.SoundFontSampleData = function(input) {
    this.BitsPerSample = 0;
    this.SampleData = null;
    var id = alphaTab.io.IOHelper.Read8BitChars(input, 4);
    var size = alphaTab.io.IOHelper.ReadInt32LE(input);
    if (id.toLowerCase() != 'list') {
      throw new js._Boot.HaxeError(
        new system.Exception().Exception_CsString(
          'Invalid soundfont. Could not find sdta LIST chunk.'
        )
      );
    }
    var readTo = input.get_Position() + size;
    id = alphaTab.io.IOHelper.Read8BitChars(input, 4);
    if (id.toLowerCase() != 'sdta') {
      throw new js._Boot.HaxeError(
        new system.Exception().Exception_CsString(
          'Invalid soundfont. The LIST chunk is not of type sdta.'
        )
      );
    }
    this.BitsPerSample = 0;
    var rawSampleData = null;
    while (input.get_Position() < readTo) {
      var subID = alphaTab.io.IOHelper.Read8BitChars(input, 4);
      size = alphaTab.io.IOHelper.ReadInt32LE(input);
      var _g = subID.toLowerCase();
      switch (_g) {
        case 'sm24':
          if (
            rawSampleData == null ||
            size != Math.ceil(this.SampleData.length / 2.0)
          ) {
            input.Skip(size);
          } else {
            this.BitsPerSample = 24;
            var x = 0;
            while (x < this.SampleData.length) {
              var this1 = new Uint8Array(3);
              var b = this1;
              b[0] = system.Convert.ToUInt8(input.ReadByte());
              b[1] = rawSampleData[2 * x];
              b[2] = rawSampleData[2 * x + 1];
              ++x;
            }
          }
          if (size % 2 == 1) {
            if (input.ReadByte() != 0) {
              var _g1 = input;
              var _g11 = _g1.get_Position();
              _g1.set_Position(_g11 - 1);
            }
          }
          break;
        case 'smpl':
          this.BitsPerSample = 16;
          rawSampleData = alphaTab.io.IOHelper.ReadByteArray(input, size);
          break;
        default:
          throw new js._Boot.HaxeError(
            new system.Exception().Exception_CsString(
              'Invalid soundfont. Unknown chunk id: ' + subID + '.'
            )
          );
      }
    }
    if (this.BitsPerSample == 16) {
      this.SampleData = rawSampleData;
    } else if (this.BitsPerSample != 24) {
      throw new js._Boot.HaxeError(
        new system.Exception().Exception_CsString(
          'Only 16 and 24 bit samples are supported.'
        )
      );
    }
  };
  alphaTab.audio.synth.sf2.SoundFontSampleData.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    'SoundFontSampleData'
  ];
  alphaTab.audio.synth.sf2.SoundFontSampleData.prototype = {
    __class__: alphaTab.audio.synth.sf2.SoundFontSampleData
  };
  alphaTab.audio.synth.sf2._SourceTypeEnum = {};
  alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_ = {};
  alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    '_SourceTypeEnum',
    'SourceTypeEnum_Impl_'
  ];
  alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'Linear';
      case 1:
        return 'Concave';
      case 2:
        return 'Convex';
      case 3:
        return 'Switch';
    }
    return '';
  };
  alphaTab.audio.synth.sf2._TransformEnum = {};
  alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_ = {};
  alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    '_TransformEnum',
    'TransformEnum_Impl_'
  ];
  alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'Linear';
      case 2:
        return 'AbsoluteValue';
    }
    return '';
  };
  alphaTab.audio.synth.sf2.Zone = function() {
    this.Modulators = null;
    this.Generators = null;
  };
  alphaTab.audio.synth.sf2.Zone.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    'Zone'
  ];
  alphaTab.audio.synth.sf2.Zone.prototype = {
    __class__: alphaTab.audio.synth.sf2.Zone
  };
  alphaTab.audio.synth.sf2.chunks = {};
  alphaTab.audio.synth.sf2.chunks.Chunk = function(id, size) {
    this.Id = null;
    this.Size = 0;
    this.Id = id;
    this.Size = size;
  };
  alphaTab.audio.synth.sf2.chunks.Chunk.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    'chunks',
    'Chunk'
  ];
  alphaTab.audio.synth.sf2.chunks.Chunk.prototype = {
    __class__: alphaTab.audio.synth.sf2.chunks.Chunk
  };
  alphaTab.audio.synth.sf2.chunks.GeneratorChunk = function(id, size, input) {
    alphaTab.audio.synth.sf2.chunks.Chunk.call(this, id, size);
    this.Generators = null;
    if (size % 4 != 0) {
      throw new js._Boot.HaxeError(
        new system.Exception().Exception_CsString(
          'Invalid SoundFont. The presetzone chunk was invalid'
        )
      );
    }
    var size1 = system.Convert.ToInt32_Double(size / 4.0 - 1);
    var this1 = new Array(size1);
    this.Generators = this1;
    var x = 0;
    while (x < this.Generators.length) {
      this.Generators[x] = new alphaTab.audio.synth.sf2.Generator(input);
      ++x;
    }
    new alphaTab.audio.synth.sf2.Generator(input);
  };
  alphaTab.audio.synth.sf2.chunks.GeneratorChunk.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    'chunks',
    'GeneratorChunk'
  ];
  alphaTab.audio.synth.sf2.chunks.GeneratorChunk.__super__ =
    alphaTab.audio.synth.sf2.chunks.Chunk;
  alphaTab.audio.synth.sf2.chunks.GeneratorChunk.prototype = $extend(
    alphaTab.audio.synth.sf2.chunks.Chunk.prototype,
    {
      __class__: alphaTab.audio.synth.sf2.chunks.GeneratorChunk
    }
  );
  alphaTab.audio.synth.sf2.chunks.InstrumentChunk = function(id, size, input) {
    alphaTab.audio.synth.sf2.chunks.Chunk.call(this, id, size);
    this._rawInstruments = null;
    if (size % 22 != 0) {
      throw new js._Boot.HaxeError(
        new system.Exception().Exception_CsString(
          'Invalid SoundFont. The preset chunk was invalid.'
        )
      );
    }
    var size1 = system.Convert.ToInt32_Double(size / 22.0);
    var this1 = new Array(size1);
    this._rawInstruments = this1;
    var lastInstrument = null;
    var x = 0;
    while (x < this._rawInstruments.length) {
      var i = new alphaTab.audio.synth.sf2.chunks.RawInstrument();
      i.Name = alphaTab.io.IOHelper.Read8BitStringLength(input, 20);
      i.StartInstrumentZoneIndex = alphaTab.io.IOHelper.ReadUInt16LE(input);
      if (lastInstrument != null) {
        lastInstrument.EndInstrumentZoneIndex = alphaTab.platform.Platform.ToUInt16(
          i.StartInstrumentZoneIndex - 1
        );
      }
      this._rawInstruments[x] = i;
      lastInstrument = i;
      ++x;
    }
  };
  alphaTab.audio.synth.sf2.chunks.InstrumentChunk.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    'chunks',
    'InstrumentChunk'
  ];
  alphaTab.audio.synth.sf2.chunks.InstrumentChunk.__super__ =
    alphaTab.audio.synth.sf2.chunks.Chunk;
  alphaTab.audio.synth.sf2.chunks.InstrumentChunk.prototype = $extend(
    alphaTab.audio.synth.sf2.chunks.Chunk.prototype,
    {
      ToInstruments: function(zones) {
        var size = this._rawInstruments.length - 1;
        var this1 = new Array(size);
        var inst = this1;
        var x = 0;
        while (x < inst.length) {
          var rawInst = this._rawInstruments[x];
          var i = new alphaTab.audio.synth.sf2.Instrument();
          i.Name = rawInst.Name;
          var size1 =
            rawInst.EndInstrumentZoneIndex -
            rawInst.StartInstrumentZoneIndex +
            1;
          var this2 = new Array(size1);
          i.Zones = this2;
          alphaTab.platform.Platform.ArrayCopy_TArray_Int32_TArray_Int32_Int321(
            zones,
            rawInst.StartInstrumentZoneIndex,
            i.Zones,
            0,
            i.Zones.length
          );
          inst[x] = i;
          ++x;
        }
        return inst;
      },
      __class__: alphaTab.audio.synth.sf2.chunks.InstrumentChunk
    }
  );
  alphaTab.audio.synth.sf2.chunks.ModulatorChunk = function(id, size, input) {
    alphaTab.audio.synth.sf2.chunks.Chunk.call(this, id, size);
    this.Modulators = null;
    if (size % 10 != 0) {
      throw new js._Boot.HaxeError(
        new system.Exception().Exception_CsString(
          'Invalid SoundFont. The presetzone chunk was invalid.'
        )
      );
    }
    var this1 = new Array(((size / 10) | 0) - 1);
    this.Modulators = this1;
    var x = 0;
    while (x < this.Modulators.length) {
      this.Modulators[x] = new alphaTab.audio.synth.sf2.Modulator(input);
      ++x;
    }
    new alphaTab.audio.synth.sf2.Modulator(input);
  };
  alphaTab.audio.synth.sf2.chunks.ModulatorChunk.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    'chunks',
    'ModulatorChunk'
  ];
  alphaTab.audio.synth.sf2.chunks.ModulatorChunk.__super__ =
    alphaTab.audio.synth.sf2.chunks.Chunk;
  alphaTab.audio.synth.sf2.chunks.ModulatorChunk.prototype = $extend(
    alphaTab.audio.synth.sf2.chunks.Chunk.prototype,
    {
      __class__: alphaTab.audio.synth.sf2.chunks.ModulatorChunk
    }
  );
  alphaTab.audio.synth.sf2.chunks.PresetHeaderChunk = function(
    id,
    size,
    input
  ) {
    alphaTab.audio.synth.sf2.chunks.Chunk.call(this, id, size);
    this._rawPresets = null;
    if (size % 38 != 0) {
      throw new js._Boot.HaxeError(
        new system.Exception().Exception_CsString(
          'Invalid SoundFont. The preset chunk was invalid.'
        )
      );
    }
    var size1 = system.Convert.ToInt32_Double(size / 38.0);
    var this1 = new Array(size1);
    this._rawPresets = this1;
    var lastPreset = null;
    var x = 0;
    while (x < this._rawPresets.length) {
      var p = new alphaTab.audio.synth.sf2.chunks.RawPreset();
      p.Name = alphaTab.io.IOHelper.Read8BitStringLength(input, 20);
      p.PatchNumber = alphaTab.io.IOHelper.ReadUInt16LE(input);
      p.BankNumber = alphaTab.io.IOHelper.ReadUInt16LE(input);
      p.StartPresetZoneIndex = alphaTab.io.IOHelper.ReadUInt16LE(input);
      p.Library = alphaTab.io.IOHelper.ReadInt32LE(input);
      p.Genre = alphaTab.io.IOHelper.ReadInt32LE(input);
      p.Morphology = alphaTab.io.IOHelper.ReadInt32LE(input);
      if (lastPreset != null) {
        lastPreset.EndPresetZoneIndex = alphaTab.platform.Platform.ToUInt16(
          p.StartPresetZoneIndex - 1
        );
      }
      this._rawPresets[x] = p;
      lastPreset = p;
      ++x;
    }
  };
  alphaTab.audio.synth.sf2.chunks.PresetHeaderChunk.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    'chunks',
    'PresetHeaderChunk'
  ];
  alphaTab.audio.synth.sf2.chunks.PresetHeaderChunk.__super__ =
    alphaTab.audio.synth.sf2.chunks.Chunk;
  alphaTab.audio.synth.sf2.chunks.PresetHeaderChunk.prototype = $extend(
    alphaTab.audio.synth.sf2.chunks.Chunk.prototype,
    {
      ToPresets: function(presetZones) {
        var size = this._rawPresets.length - 1;
        var this1 = new Array(size);
        var presets = this1;
        var x = 0;
        while (x < presets.length) {
          var rawPreset = this._rawPresets[x];
          var p = new alphaTab.audio.synth.sf2.PresetHeader();
          p.BankNumber = rawPreset.BankNumber;
          p.Genre = rawPreset.Genre;
          p.Library = rawPreset.Library;
          p.Morphology = rawPreset.Morphology;
          p.Name = rawPreset.Name;
          p.PatchNumber = rawPreset.PatchNumber;
          var size1 =
            rawPreset.EndPresetZoneIndex - rawPreset.StartPresetZoneIndex + 1;
          var this2 = new Array(size1);
          p.Zones = this2;
          alphaTab.platform.Platform.ArrayCopy_TArray_Int32_TArray_Int32_Int321(
            presetZones,
            rawPreset.StartPresetZoneIndex,
            p.Zones,
            0,
            p.Zones.length
          );
          presets[x] = p;
          ++x;
        }
        return presets;
      },
      __class__: alphaTab.audio.synth.sf2.chunks.PresetHeaderChunk
    }
  );
  alphaTab.audio.synth.sf2.chunks.RawInstrument = function() {
    this.Name = null;
    this.StartInstrumentZoneIndex = 0;
    this.EndInstrumentZoneIndex = 0;
  };
  alphaTab.audio.synth.sf2.chunks.RawInstrument.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    'chunks',
    'RawInstrument'
  ];
  alphaTab.audio.synth.sf2.chunks.RawInstrument.prototype = {
    __class__: alphaTab.audio.synth.sf2.chunks.RawInstrument
  };
  alphaTab.audio.synth.sf2.chunks.RawPreset = function() {
    this.Name = null;
    this.PatchNumber = 0;
    this.BankNumber = 0;
    this.StartPresetZoneIndex = 0;
    this.EndPresetZoneIndex = 0;
    this.Library = 0;
    this.Genre = 0;
    this.Morphology = 0;
  };
  alphaTab.audio.synth.sf2.chunks.RawPreset.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    'chunks',
    'RawPreset'
  ];
  alphaTab.audio.synth.sf2.chunks.RawPreset.prototype = {
    __class__: alphaTab.audio.synth.sf2.chunks.RawPreset
  };
  alphaTab.audio.synth.sf2.chunks.RawZoneData = function() {
    this.GeneratorIndex = 0;
    this.ModulatorIndex = 0;
    this.GeneratorCount = 0;
    this.ModulatorCount = 0;
  };
  alphaTab.audio.synth.sf2.chunks.RawZoneData.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    'chunks',
    'RawZoneData'
  ];
  alphaTab.audio.synth.sf2.chunks.RawZoneData.prototype = {
    __class__: alphaTab.audio.synth.sf2.chunks.RawZoneData
  };
  alphaTab.audio.synth.sf2.chunks.SampleHeaderChunk = function(
    id,
    size,
    input
  ) {
    alphaTab.audio.synth.sf2.chunks.Chunk.call(this, id, size);
    this.SampleHeaders = null;
    if (size % 46 != 0) {
      throw new js._Boot.HaxeError(
        new system.Exception().Exception_CsString(
          'Invalid SoundFont. The sample header chunk was invalid.'
        )
      );
    }
    var size1 = system.Convert.ToInt32_Double(size / 46.0 - 1);
    var this1 = new Array(size1);
    this.SampleHeaders = this1;
    var x = 0;
    while (x < this.SampleHeaders.length) {
      this.SampleHeaders[x] = new alphaTab.audio.synth.sf2.SampleHeader(input);
      ++x;
    }
    new alphaTab.audio.synth.sf2.SampleHeader(input);
  };
  alphaTab.audio.synth.sf2.chunks.SampleHeaderChunk.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    'chunks',
    'SampleHeaderChunk'
  ];
  alphaTab.audio.synth.sf2.chunks.SampleHeaderChunk.__super__ =
    alphaTab.audio.synth.sf2.chunks.Chunk;
  alphaTab.audio.synth.sf2.chunks.SampleHeaderChunk.prototype = $extend(
    alphaTab.audio.synth.sf2.chunks.Chunk.prototype,
    {
      __class__: alphaTab.audio.synth.sf2.chunks.SampleHeaderChunk
    }
  );
  alphaTab.audio.synth.sf2.chunks.ZoneChunk = function(id, size, input) {
    alphaTab.audio.synth.sf2.chunks.Chunk.call(this, id, size);
    this._zoneData = null;
    var size1 = system.Convert.ToInt32_Double(size / 4.0);
    var this1 = new Array(size1);
    this._zoneData = this1;
    var lastZone = null;
    var x = 0;
    while (x < this._zoneData.length) {
      var z = new alphaTab.audio.synth.sf2.chunks.RawZoneData();
      z.GeneratorIndex = alphaTab.io.IOHelper.ReadUInt16LE(input);
      z.ModulatorIndex = alphaTab.io.IOHelper.ReadUInt16LE(input);
      if (lastZone != null) {
        lastZone.GeneratorCount = alphaTab.platform.Platform.ToUInt16(
          z.GeneratorIndex - lastZone.GeneratorIndex
        );
        lastZone.ModulatorCount = alphaTab.platform.Platform.ToUInt16(
          z.ModulatorIndex - lastZone.ModulatorIndex
        );
      }
      this._zoneData[x] = z;
      lastZone = z;
      ++x;
    }
  };
  alphaTab.audio.synth.sf2.chunks.ZoneChunk.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'sf2',
    'chunks',
    'ZoneChunk'
  ];
  alphaTab.audio.synth.sf2.chunks.ZoneChunk.__super__ =
    alphaTab.audio.synth.sf2.chunks.Chunk;
  alphaTab.audio.synth.sf2.chunks.ZoneChunk.prototype = $extend(
    alphaTab.audio.synth.sf2.chunks.Chunk.prototype,
    {
      ToZones: function(modulators, generators) {
        var size = this._zoneData.length - 1;
        var this1 = new Array(size);
        var zones = this1;
        var x = 0;
        while (x < zones.length) {
          var rawZone = this._zoneData[x];
          var zone = new alphaTab.audio.synth.sf2.Zone();
          var size1 = rawZone.GeneratorCount;
          var this2 = new Array(size1);
          zone.Generators = this2;
          alphaTab.platform.Platform.ArrayCopy_TArray_Int32_TArray_Int32_Int321(
            generators,
            rawZone.GeneratorIndex,
            zone.Generators,
            0,
            rawZone.GeneratorCount
          );
          var size2 = rawZone.ModulatorCount;
          var this3 = new Array(size2);
          zone.Modulators = this3;
          alphaTab.platform.Platform.ArrayCopy_TArray_Int32_TArray_Int32_Int321(
            modulators,
            rawZone.ModulatorIndex,
            zone.Modulators,
            0,
            rawZone.ModulatorCount
          );
          zones[x] = zone;
          ++x;
        }
        return zones;
      },
      __class__: alphaTab.audio.synth.sf2.chunks.ZoneChunk
    }
  );
  alphaTab.audio.synth.synthesis.PlaybackRange = $hx_exports['alphaTab'][
    'audio'
  ]['synth']['synthesis']['PlaybackRange'] = function() {
    this.StartTick = 0;
    this.EndTick = 0;
  };
  alphaTab.audio.synth.synthesis.PlaybackRange.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'synthesis',
    'PlaybackRange'
  ];
  alphaTab.audio.synth.synthesis.PlaybackRange.prototype = {
    __class__: alphaTab.audio.synth.synthesis.PlaybackRange
  };
  alphaTab.audio.synth.synthesis.SynthEvent = function(eventIndex, e) {
    this.EventIndex = 0;
    this.Event = null;
    this.IsMetronome = false;
    this.Time = 0.0;
    this.EventIndex = eventIndex;
    this.Event = e;
  };
  alphaTab.audio.synth.synthesis.SynthEvent.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'synthesis',
    'SynthEvent'
  ];
  alphaTab.audio.synth.synthesis.SynthEvent.NewMetronomeEvent = function(
    eventIndex,
    metronomeLength
  ) {
    var x = new alphaTab.audio.synth.synthesis.SynthEvent(eventIndex, null);
    x.IsMetronome = true;
    return x;
  };
  alphaTab.audio.synth.synthesis.SynthEvent.prototype = {
    __class__: alphaTab.audio.synth.synthesis.SynthEvent
  };
  alphaTab.audio.synth.synthesis._VoiceStateEnum = {};
  alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_ = {};
  alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'synthesis',
    '_VoiceStateEnum',
    'VoiceStateEnum_Impl_'
  ];
  alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'Stopped';
      case 1:
        return 'Stopping';
      case 2:
        return 'Playing';
    }
    return '';
  };
  alphaTab.audio.synth.util.SynthConstants = function() {};
  alphaTab.audio.synth.util.SynthConstants.__name__ = [
    'alphaTab',
    'audio',
    'synth',
    'util',
    'SynthConstants'
  ];
  alphaTab.collections = {};
  alphaTab.collections._FastDictionary = {};
  alphaTab.collections._FastDictionary.FastDictionary_Impl_ = $hx_exports[
    'alphaTab'
  ]['collections']['_FastDictionary']['FastDictionary_Impl_'] = {};
  alphaTab.collections._FastDictionary.FastDictionary_Impl_.__name__ = [
    'alphaTab',
    'collections',
    '_FastDictionary',
    'FastDictionary_Impl_'
  ];
  alphaTab.collections._FastDictionary.FastDictionary_Impl_._new = function() {
    var this1 = {};
    return this1;
  };
  alphaTab.collections._FastDictionary.FastDictionary_Impl_.get_Item = function(
    this1,
    index
  ) {
    return this1[index];
  };
  alphaTab.collections._FastDictionary.FastDictionary_Impl_.set_Item = function(
    this1,
    index,
    value
  ) {
    return (this1[index] = value);
  };
  alphaTab.collections._FastDictionary.FastDictionary_Impl_.get_Count = function(
    this1
  ) {
    return Object.keys(this1).length;
  };
  alphaTab.collections._FastDictionary.FastDictionary_Impl_.GetEnumerator = function(
    this1
  ) {
    return Object.keys(this1);
  };
  alphaTab.collections._FastDictionary.FastDictionary_Impl_.Remove = function(
    this1,
    key
  ) {
    delete this1[key];
  };
  alphaTab.collections._FastDictionary.FastDictionary_Impl_.ContainsKey = function(
    this1,
    key
  ) {
    return this1.hasOwnProperty(key);
  };
  alphaTab.collections._FastList = {};
  alphaTab.collections._FastList.FastList_Impl_ = $hx_exports['alphaTab'][
    'collections'
  ]['_FastList']['FastList_Impl_'] = {};
  alphaTab.collections._FastList.FastList_Impl_.__name__ = [
    'alphaTab',
    'collections',
    '_FastList',
    'FastList_Impl_'
  ];
  alphaTab.collections._FastList.FastList_Impl_._new = function() {
    var this1 = [];
    return this1;
  };
  alphaTab.collections._FastList.FastList_Impl_.get_Count = function(this1) {
    return this1.length;
  };
  alphaTab.collections._FastList.FastList_Impl_.get_Item = function(
    this1,
    index
  ) {
    return this1[index];
  };
  alphaTab.collections._FastList.FastList_Impl_.set_Item = function(
    this1,
    index,
    value
  ) {
    return (this1[index] = value);
  };
  alphaTab.collections._FastList.FastList_Impl_.Add = function(this1, item) {
    this1.push(item);
  };
  alphaTab.collections._FastList.FastList_Impl_.Sort = function(
    this1,
    comparison
  ) {
    this1.sort(function(a, b) {
      return comparison(a, b);
    });
  };
  alphaTab.collections._FastList.FastList_Impl_.Clone = function(this1) {
    return this1.slice(0);
  };
  alphaTab.collections._FastList.FastList_Impl_.RemoveAt = function(
    this1,
    index
  ) {
    if (index != -1) {
      this1.splice(index, 1);
    }
  };
  alphaTab.collections._FastList.FastList_Impl_.ToArray = function(this1) {
    return this1;
  };
  alphaTab.collections._FastList.FastList_Impl_.GetEnumerator = function(
    this1
  ) {
    return this1;
  };
  alphaTab.collections._FastList.FastList_Impl_.IndexOf = function(
    this1,
    item
  ) {
    return this1.indexOf(item);
  };
  alphaTab.collections._FastList.FastList_Impl_.Reverse = function(this1) {
    this1.reverse();
  };
  alphaTab.collections._FastList.FastList_Impl_.ToEnumerable = function(this1) {
    return new system.collections.generic.IterableEnumerable(this1);
  };
  alphaTab.collections._FastList.FastList_Impl_.InsertAt = function(
    this1,
    insertPos,
    item
  ) {
    this1.splice(insertPos, 0, item);
  };
  alphaTab.collections._StringBuilder = {};
  alphaTab.collections._StringBuilder.StringBuilder_Impl_ = {};
  alphaTab.collections._StringBuilder.StringBuilder_Impl_.__name__ = [
    'alphaTab',
    'collections',
    '_StringBuilder',
    'StringBuilder_Impl_'
  ];
  alphaTab.collections._StringBuilder.StringBuilder_Impl_._new = function() {
    var this1 = '';
    return this1;
  };
  alphaTab.collections._StringBuilder.StringBuilder_Impl_.Append = function(
    this1,
    s
  ) {
    this1 += Std.string(s);
  };
  alphaTab.collections._StringBuilder.StringBuilder_Impl_.AppendChar = function(
    this1,
    i
  ) {
    this1 += String.fromCharCode(i);
  };
  alphaTab.collections._StringBuilder.StringBuilder_Impl_.AppendLine = function(
    this1,
    s
  ) {
    if (s == null) {
      s = '';
    }
    this1 = this1 + (s + '\r\n');
  };
  alphaTab.collections._StringBuilder.StringBuilder_Impl_.ToString = function(
    this1
  ) {
    return this1;
  };
  alphaTab.exporter = {};
  alphaTab.exporter.AlphaTexExporter = $hx_exports['alphaTab']['exporter'][
    'AlphaTexExporter'
  ] = function() {
    this._builder = null;
    var this1 = '';
    this._builder = this1;
  };
  alphaTab.exporter.AlphaTexExporter.__name__ = [
    'alphaTab',
    'exporter',
    'AlphaTexExporter'
  ];
  alphaTab.exporter.AlphaTexExporter.prototype = {
    Export: function(track) {
      this.Score(track);
    },
    Score: function(track) {
      this.MetaData(track);
      this.Bars(track);
    },
    ToTex: function() {
      return this._builder;
    },
    MetaData: function(track) {
      var score = track.Score;
      this.StringMetaData('title', score.Title);
      this.StringMetaData('subtitle', score.SubTitle);
      this.StringMetaData('artist', score.Artist);
      this.StringMetaData('album', score.Album);
      this.StringMetaData('words', score.Words);
      this.StringMetaData('music', score.Music);
      this.StringMetaData('copyright', score.Copyright);
      this._builder += Std.string('\\tempo ');
      this._builder += Std.string(score.Tempo);
      this._builder = this._builder + ('' + '\r\n');
      var staff = track.Staves[0];
      if (staff.Capo > 0) {
        this._builder += Std.string('\\capo ');
        this._builder += Std.string(staff.Capo);
        this._builder = this._builder + ('' + '\r\n');
      }
      this._builder += Std.string('\\tuning');
      var i = 0;
      while (i < staff.Tuning.length) {
        this._builder += Std.string(' ');
        var s = alphaTab.model.Tuning.GetTextForTuning(staff.Tuning[i], true);
        this._builder += Std.string(s);
        ++i;
      }
      this._builder += Std.string('\\instrument ');
      this._builder += Std.string(track.PlaybackInfo.Program);
      this._builder = this._builder + ('' + '\r\n');
      this._builder += Std.string('.');
      this._builder = this._builder + ('' + '\r\n');
    },
    StringMetaData: function(key, value) {
      if (!(value == null || StringTools.trim(value).length == 0)) {
        this._builder += Std.string('\\');
        this._builder += Std.string(key);
        this._builder += Std.string(' "');
        var s = StringTools.replace(value, '"', '\\"');
        this._builder += Std.string(s);
        this._builder += Std.string('"');
        this._builder = this._builder + ('' + '\r\n');
      }
    },
    Bars: function(track) {
      var i = 0;
      while (i < 1) {
        var j = 0;
        while (j < track.Staves[i].Bars.length) {
          if (i > 0) {
            this._builder += Std.string(' |');
            this._builder = this._builder + ('' + '\r\n');
          }
          this.Bar(track.Staves[i].Bars[j]);
          ++j;
        }
        ++i;
      }
    },
    Bar: function(bar) {
      this.BarMeta(bar);
      this.Voice(bar.Voices[0]);
    },
    Voice: function(voice) {
      var i = 0;
      while (i < voice.Beats.length) {
        this.Beat(voice.Beats[i]);
        ++i;
      }
    },
    Beat: function(beat) {
      if (beat.get_IsRest()) {
        this._builder += Std.string('r');
      } else {
        if (beat.Notes.length > 1) {
          this._builder += Std.string('(');
        }
        var i = 0;
        while (i < beat.Notes.length) {
          this.Note(beat.Notes[i]);
          ++i;
        }
        if (beat.Notes.length > 1) {
          this._builder += Std.string(')');
        }
      }
      this._builder += Std.string('.');
      this._builder += Std.string(beat.Duration);
      this._builder += Std.string(' ');
      this.BeatEffects(beat);
    },
    Note: function(note) {
      if (note.IsDead) {
        this._builder += Std.string('x');
      } else if (note.IsTieDestination) {
        this._builder += Std.string('-');
      } else {
        this._builder += Std.string(note.Fret);
      }
      this._builder += Std.string('.');
      this._builder += Std.string(
        note.Beat.Voice.Bar.Staff.Tuning.length - note.String + 1
      );
      this._builder += Std.string(' ');
      this.NoteEffects(note);
    },
    NoteEffects: function(note) {
      var hasEffectOpen = false;
      if (note.get_HasBend()) {
        hasEffectOpen = this.EffectOpen(hasEffectOpen);
        this._builder += Std.string('be (');
        var i = 0;
        while (i < note.BendPoints.length) {
          this._builder += Std.string(note.BendPoints[i].Offset);
          this._builder += Std.string(' ');
          this._builder += Std.string(note.BendPoints[i].Value);
          this._builder += Std.string(' ');
          ++i;
        }
        this._builder += Std.string(')');
      }
      var _g = note.HarmonicType;
      switch (_g) {
        case 1:
          hasEffectOpen = this.EffectOpen(hasEffectOpen);
          this._builder += Std.string('nh ');
          break;
        case 2:
          hasEffectOpen = this.EffectOpen(hasEffectOpen);
          this._builder += Std.string('ah ');
          break;
        case 3:
          hasEffectOpen = this.EffectOpen(hasEffectOpen);
          this._builder += Std.string('ph ');
          break;
        case 4:
          hasEffectOpen = this.EffectOpen(hasEffectOpen);
          this._builder += Std.string('th ');
          break;
        case 5:
          hasEffectOpen = this.EffectOpen(hasEffectOpen);
          this._builder += Std.string('sh ');
          break;
        default:
      }
      if (note.get_IsTrill()) {
        hasEffectOpen = this.EffectOpen(hasEffectOpen);
        this._builder += Std.string('tr ');
        var s = note.get_TrillFret();
        this._builder += Std.string(s);
        this._builder += Std.string(' ');
        var _g1 = note.TrillSpeed;
        switch (_g1) {
          case 16:
            this._builder += Std.string('16 ');
            break;
          case 32:
            this._builder += Std.string('32 ');
            break;
          case 64:
            this._builder += Std.string('64 ');
            break;
          default:
        }
      }
      if (note.Vibrato != 0) {
        hasEffectOpen = this.EffectOpen(hasEffectOpen);
        this._builder += Std.string('v ');
      }
      if (note.SlideType == 2) {
        hasEffectOpen = this.EffectOpen(hasEffectOpen);
        this._builder += Std.string('sl ');
      }
      if (note.SlideType == 1) {
        hasEffectOpen = this.EffectOpen(hasEffectOpen);
        this._builder += Std.string('ss ');
      }
      if (note.IsHammerPullOrigin) {
        hasEffectOpen = this.EffectOpen(hasEffectOpen);
        this._builder += Std.string('h ');
      }
      if (note.IsGhost) {
        hasEffectOpen = this.EffectOpen(hasEffectOpen);
        this._builder += Std.string('g ');
      }
      if (note.Accentuated == 1) {
        hasEffectOpen = this.EffectOpen(hasEffectOpen);
        this._builder += Std.string('ac ');
      } else if (note.Accentuated == 2) {
        hasEffectOpen = this.EffectOpen(hasEffectOpen);
        this._builder += Std.string('hac ');
      }
      if (note.IsPalmMute) {
        hasEffectOpen = this.EffectOpen(hasEffectOpen);
        this._builder += Std.string('pm ');
      }
      if (note.IsStaccato) {
        hasEffectOpen = this.EffectOpen(hasEffectOpen);
        this._builder += Std.string('st ');
      }
      if (note.IsLetRing) {
        hasEffectOpen = this.EffectOpen(hasEffectOpen);
        this._builder += Std.string('lr ');
      }
      var _g11 = note.LeftHandFinger;
      switch (_g11) {
        case 0:
          hasEffectOpen = this.EffectOpen(hasEffectOpen);
          this._builder += Std.string('1 ');
          break;
        case 1:
          hasEffectOpen = this.EffectOpen(hasEffectOpen);
          this._builder += Std.string('2 ');
          break;
        case 2:
          hasEffectOpen = this.EffectOpen(hasEffectOpen);
          this._builder += Std.string('3 ');
          break;
        case 3:
          hasEffectOpen = this.EffectOpen(hasEffectOpen);
          this._builder += Std.string('4 ');
          break;
        case 4:
          hasEffectOpen = this.EffectOpen(hasEffectOpen);
          this._builder += Std.string('5 ');
          break;
        default:
      }
      var _g2 = note.RightHandFinger;
      switch (_g2) {
        case 0:
          hasEffectOpen = this.EffectOpen(hasEffectOpen);
          this._builder += Std.string('1 ');
          break;
        case 1:
          hasEffectOpen = this.EffectOpen(hasEffectOpen);
          this._builder += Std.string('2 ');
          break;
        case 2:
          hasEffectOpen = this.EffectOpen(hasEffectOpen);
          this._builder += Std.string('3 ');
          break;
        case 3:
          hasEffectOpen = this.EffectOpen(hasEffectOpen);
          this._builder += Std.string('4 ');
          break;
        case 4:
          hasEffectOpen = this.EffectOpen(hasEffectOpen);
          this._builder += Std.string('5 ');
          break;
        default:
      }
      this.EffectClose(hasEffectOpen);
    },
    EffectOpen: function(hasBeatEffectOpen) {
      if (!hasBeatEffectOpen) {
        this._builder += Std.string('{');
      }
      return true;
    },
    EffectClose: function(hasBeatEffectOpen) {
      if (hasBeatEffectOpen) {
        this._builder += Std.string('}');
      }
    },
    BeatEffects: function(beat) {
      var hasEffectOpen = false;
      if (beat.FadeIn) {
        hasEffectOpen = this.EffectOpen(hasEffectOpen);
        this._builder += Std.string('f ');
      }
      var _g = beat.GraceType;
      switch (_g) {
        case 1:
          this._builder += Std.string('gr ob ');
          break;
        case 2:
          this._builder += Std.string('gr ');
          break;
        case 3:
          this._builder += Std.string('gr b ');
          break;
        default:
      }
      if (beat.Vibrato != 0) {
        hasEffectOpen = this.EffectOpen(hasEffectOpen);
        this._builder += Std.string('v ');
      }
      if (beat.Slap) {
        hasEffectOpen = this.EffectOpen(hasEffectOpen);
        this._builder += Std.string('s ');
      }
      if (beat.Pop) {
        hasEffectOpen = this.EffectOpen(hasEffectOpen);
        this._builder += Std.string('p ');
      }
      if (beat.Dots == 2) {
        hasEffectOpen = this.EffectOpen(hasEffectOpen);
        this._builder += Std.string('dd ');
      } else if (beat.Dots == 1) {
        hasEffectOpen = this.EffectOpen(hasEffectOpen);
        this._builder += Std.string('d ');
      }
      if (beat.PickStroke == 1) {
        hasEffectOpen = this.EffectOpen(hasEffectOpen);
        this._builder += Std.string('su ');
      } else if (beat.PickStroke == 2) {
        hasEffectOpen = this.EffectOpen(hasEffectOpen);
        this._builder += Std.string('sd ');
      }
      if (beat.get_HasTuplet()) {
        var tupletValue = 0;
        if (beat.TupletDenominator == 3 && beat.TupletNumerator == 2) {
          tupletValue = 3;
        } else if (beat.TupletDenominator == 5 && beat.TupletNumerator == 4) {
          tupletValue = 5;
        } else if (beat.TupletDenominator == 6 && beat.TupletNumerator == 4) {
          tupletValue = 6;
        } else if (beat.TupletDenominator == 7 && beat.TupletNumerator == 4) {
          tupletValue = 7;
        } else if (beat.TupletDenominator == 9 && beat.TupletNumerator == 8) {
          tupletValue = 9;
        } else if (beat.TupletDenominator == 10 && beat.TupletNumerator == 8) {
          tupletValue = 10;
        } else if (beat.TupletDenominator == 11 && beat.TupletNumerator == 8) {
          tupletValue = 11;
        } else if (beat.TupletDenominator == 12 && beat.TupletNumerator == 8) {
          tupletValue = 12;
        }
        if (tupletValue != 0) {
          hasEffectOpen = this.EffectOpen(hasEffectOpen);
          this._builder += Std.string('tu ');
          this._builder += Std.string(tupletValue);
          this._builder += Std.string(' ');
        }
      }
      if (beat.get_HasWhammyBar()) {
        hasEffectOpen = this.EffectOpen(hasEffectOpen);
        this._builder += Std.string('tbe (');
        var i = 0;
        while (i < beat.WhammyBarPoints.length) {
          this._builder += Std.string(beat.WhammyBarPoints[i].Offset);
          this._builder += Std.string(' ');
          this._builder += Std.string(beat.WhammyBarPoints[i].Value);
          this._builder += Std.string(' ');
          ++i;
        }
        this._builder += Std.string(')');
      }
      if (beat.get_IsTremolo()) {
        hasEffectOpen = this.EffectOpen(hasEffectOpen);
        this._builder += Std.string('tp ');
        if (beat.TremoloSpeed == 8) {
          this._builder += Std.string('8 ');
        } else if (beat.TremoloSpeed == 16) {
          this._builder += Std.string('16 ');
        } else if (beat.TremoloSpeed == 32) {
          this._builder += Std.string('32 ');
        } else {
          this._builder += Std.string('8 ');
        }
      }
      this.EffectClose(hasEffectOpen);
    },
    BarMeta: function(bar) {
      var masterBar = bar.get_MasterBar();
      if (masterBar.Index > 0) {
        var previousMasterBar = masterBar.PreviousMasterBar;
        var previousBar = bar.PreviousBar;
        if (
          previousMasterBar.TimeSignatureDenominator !=
            masterBar.TimeSignatureDenominator ||
          previousMasterBar.TimeSignatureNumerator !=
            masterBar.TimeSignatureNumerator
        ) {
          this._builder += Std.string('\\ts ');
          this._builder += Std.string(masterBar.TimeSignatureNumerator);
          this._builder += Std.string(' ');
          this._builder += Std.string(masterBar.TimeSignatureDenominator);
          this._builder = this._builder + ('' + '\r\n');
        }
        if (previousMasterBar.KeySignature != masterBar.KeySignature) {
          this._builder += Std.string('\\ks ');
          var _g = masterBar.KeySignature;
          switch (_g) {
            case -7:
              this._builder += Std.string('cb');
              break;
            case -6:
              this._builder += Std.string('gb');
              break;
            case -5:
              this._builder += Std.string('db');
              break;
            case -4:
              this._builder += Std.string('ab');
              break;
            case -3:
              this._builder += Std.string('eb');
              break;
            case -2:
              this._builder += Std.string('bb');
              break;
            case -1:
              this._builder += Std.string('f');
              break;
            case 0:
              this._builder += Std.string('c');
              break;
            case 1:
              this._builder += Std.string('g');
              break;
            case 2:
              this._builder += Std.string('d');
              break;
            case 3:
              this._builder += Std.string('a');
              break;
            case 4:
              this._builder += Std.string('e');
              break;
            case 5:
              this._builder += Std.string('b');
              break;
            case 6:
              this._builder += Std.string('f#');
              break;
            case 7:
              this._builder += Std.string('c#');
              break;
            default:
          }
          this._builder = this._builder + ('' + '\r\n');
        }
        if (bar.Clef != previousBar.Clef) {
          this._builder += Std.string('\\clef ');
          var _g1 = bar.Clef;
          switch (_g1) {
            case 0:
              this._builder += Std.string('n');
              break;
            case 1:
              this._builder += Std.string('c3');
              break;
            case 2:
              this._builder += Std.string('c4');
              break;
            case 3:
              this._builder += Std.string('f4');
              break;
            case 4:
              this._builder += Std.string('g2');
              break;
            default:
          }
          this._builder = this._builder + ('' + '\r\n');
        }
        if (masterBar.TempoAutomation != null) {
          this._builder += Std.string('\\tempo ');
          this._builder += Std.string(masterBar.TempoAutomation.Value);
          this._builder = this._builder + ('' + '\r\n');
        }
      }
      if (masterBar.IsRepeatStart) {
        this._builder += Std.string('\\ro ');
        this._builder = this._builder + ('' + '\r\n');
      }
      if (masterBar.get_IsRepeatEnd()) {
        this._builder += Std.string('\\rc ');
        this._builder += Std.string(masterBar.RepeatCount + 1);
        this._builder = this._builder + ('' + '\r\n');
      }
    },
    __class__: alphaTab.exporter.AlphaTexExporter
  };
  alphaTab.importer = {};
  alphaTab.importer.AlphaTexException = function() {
    alphaTab.AlphaTabException.call(this);
    this.Position = 0;
    this.NonTerm = null;
    this.Expected = 0;
    this.Symbol = 0;
    this.SymbolData = null;
  };
  alphaTab.importer.AlphaTexException.__name__ = [
    'alphaTab',
    'importer',
    'AlphaTexException'
  ];
  alphaTab.importer.AlphaTexException.SymbolError = function(
    position,
    nonTerm,
    expected,
    symbol,
    symbolData
  ) {
    var message;
    if (symbolData == null) {
      message =
        'MalFormed AlphaTex: @' +
        position +
        ': Error on block ' +
        nonTerm +
        ', expected a ' +
        alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.toString(
          expected
        ) +
        ' found a ' +
        alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.toString(
          symbol
        );
    } else {
      message =
        'MalFormed AlphaTex: @' +
        position +
        ': Error on block ' +
        nonTerm +
        ', invalid value: ' +
        symbolData;
    }
    var exception = new alphaTab.importer.AlphaTexException().AlphaTexException(
      message
    );
    exception.Position = position;
    exception.NonTerm = nonTerm;
    exception.Expected = expected;
    exception.Symbol = symbol;
    exception.SymbolData = symbolData;
    return exception;
  };
  alphaTab.importer.AlphaTexException.ErrorMessage = function(
    position,
    message
  ) {
    message = 'MalFormed AlphaTex: @' + position + ': ' + message;
    var exception = new alphaTab.importer.AlphaTexException().AlphaTexException(
      message
    );
    exception.Position = position;
    return exception;
  };
  alphaTab.importer.AlphaTexException.__super__ = alphaTab.AlphaTabException;
  alphaTab.importer.AlphaTexException.prototype = $extend(
    alphaTab.AlphaTabException.prototype,
    {
      AlphaTexException: function(message) {
        this.AlphaTabException(message);
        this.Position = 0;
        this.NonTerm = null;
        this.Expected = 0;
        this.Symbol = 0;
        this.SymbolData = null;
        return this;
      },
      __class__: alphaTab.importer.AlphaTexException
    }
  );
  alphaTab.importer.ScoreImporter = $hx_exports['alphaTab']['importer'][
    'ScoreImporter'
  ] = function() {
    this.Data = null;
    this.Settings = null;
  };
  alphaTab.importer.ScoreImporter.__name__ = [
    'alphaTab',
    'importer',
    'ScoreImporter'
  ];
  alphaTab.importer.ScoreImporter.BuildImporters = function() {
    return [
      new alphaTab.importer.Gp3To5Importer(),
      new alphaTab.importer.GpxImporter(),
      new alphaTab.importer.Gp7Importer(),
      new alphaTab.importer.AlphaTexImporter(),
      new alphaTab.importer.MusicXmlImporter()
    ];
  };
  alphaTab.importer.ScoreImporter.prototype = {
    Init: function(data, settings) {
      this.Data = data;
      this.Settings = settings;
    },
    GetSetting: function(key, defaultValue) {
      key = key.toLowerCase();
      if (
        this.Settings == null ||
        this.Settings.ImporterSettings == null ||
        !this.Settings.ImporterSettings.hasOwnProperty(key)
      ) {
        return defaultValue;
      }
      return this.Settings.ImporterSettings[key];
    },
    get_Name: function() {
      throw new js._Boot.HaxeError('abstract');
    },
    ReadScore: function() {
      throw new js._Boot.HaxeError('abstract');
    },
    __class__: alphaTab.importer.ScoreImporter
  };
  alphaTab.importer.AlphaTexImporter = function() {
    this._trackChannel = 0;
    alphaTab.importer.ScoreImporter.call(this);
  };
  alphaTab.importer.AlphaTexImporter.__name__ = [
    'alphaTab',
    'importer',
    'AlphaTexImporter'
  ];
  alphaTab.importer.AlphaTexImporter.IsLetter = function(code) {
    if (!alphaTab.importer.AlphaTexImporter.IsTerminal(code)) {
      if (!((code >= 33 && code <= 47) || (code >= 58 && code <= 126))) {
        return code > 128;
      } else {
        return true;
      }
    } else {
      return false;
    }
  };
  alphaTab.importer.AlphaTexImporter.IsTerminal = function(ch) {
    if (
      !(
        ch == 46 ||
        ch == 123 ||
        ch == 125 ||
        ch == 91 ||
        ch == 93 ||
        ch == 40 ||
        ch == 41 ||
        ch == 124 ||
        ch == 39 ||
        ch == 34
      )
    ) {
      return ch == 92;
    } else {
      return true;
    }
  };
  alphaTab.importer.AlphaTexImporter.__super__ =
    alphaTab.importer.ScoreImporter;
  alphaTab.importer.AlphaTexImporter.prototype = $extend(
    alphaTab.importer.ScoreImporter.prototype,
    {
      get_Name: function() {
        return 'AlphaTex';
      },
      ReadScore: function() {
        try {
          this._allowTuning = true;
          var this1 = {};
          this._lyrics = this1;
          this.CreateDefaultScore();
          this._curChPos = 0;
          this._currentDuration = 4;
          this._currentTuplet = 1;
          this.NextChar();
          this.NewSy();
          if (this._sy == 14) {
            throw new js._Boot.HaxeError(
              new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException(
                'Unknown start sign <'
              )
            );
          }
          this.Score();
          this.Consolidate();
          this._score.Finish(this.Settings);
          var this2 = this._lyrics;
          var track = $iterator(Object.keys(this2))();
          while (track.hasNext()) {
            var track1 = track.next();
            this._score.Tracks[track1].ApplyLyrics(this._lyrics[track1]);
          }
          return this._score;
        } catch (e) {
          if (e instanceof js._Boot.HaxeError) e = e.val;
          if (js.Boot.__instanceof(e, alphaTab.importer.AlphaTexException)) {
            throw new js._Boot.HaxeError(
              new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException(
                e.Message
              )
            );
          } else throw e;
        }
      },
      Consolidate: function() {
        var track = $iterator(this._score.Tracks)();
        while (track.hasNext()) {
          var track1 = track.next();
          var staff = $iterator(track1.Staves)();
          while (staff.hasNext()) {
            var staff1 = staff.next();
            while (staff1.Bars.length < this._score.MasterBars.length) {
              var bar = this.NewBar(staff1);
              var emptyBeat = new alphaTab.model.Beat();
              emptyBeat.IsEmpty = true;
              bar.Voices[0].AddBeat(emptyBeat);
            }
          }
        }
      },
      Error: function(nonterm, expected, symbolError) {
        if (symbolError == null) {
          symbolError = true;
        }
        var e;
        if (symbolError) {
          e = alphaTab.importer.AlphaTexException.SymbolError(
            this._curChPos,
            nonterm,
            expected,
            this._sy,
            null
          );
        } else {
          e = alphaTab.importer.AlphaTexException.SymbolError(
            this._curChPos,
            nonterm,
            expected,
            expected,
            this._syData
          );
        }
        alphaTab.util.Logger.Error(this.get_Name(), e.Message, null);
        throw new js._Boot.HaxeError(e);
      },
      ErrorMessage: function(message) {
        var e = alphaTab.importer.AlphaTexException.ErrorMessage(
          this._curChPos,
          message
        );
        alphaTab.util.Logger.Error(this.get_Name(), e.Message, null);
        throw new js._Boot.HaxeError(e);
      },
      CreateDefaultScore: function() {
        this._score = new alphaTab.model.Score();
        this._score.Tempo = 120;
        this._score.TempoLabel = '';
        this.NewTrack();
      },
      NewTrack: function() {
        this._currentTrack = new alphaTab.model.Track(1);
        this._currentTrack.PlaybackInfo.Program = 25;
        this._currentTrack.PlaybackInfo.PrimaryChannel = this._trackChannel++;
        this._currentTrack.PlaybackInfo.SecondaryChannel = this._trackChannel++;
        this._currentStaff = this._currentTrack.Staves[0];
        this._currentStaff.Tuning = alphaTab.model.Tuning.GetDefaultTuningFor(
          6
        ).Tunings;
        this._score.AddTrack(this._currentTrack);
        var this1 = this._lyrics;
        var index = this._currentTrack.Index;
        var this2 = [];
        this1[index] = this2;
      },
      ParseClefFromString: function(str) {
        var _g = str.toLowerCase();
        switch (_g) {
          case 'c3':
          case 'tenor':
            return 1;
          case 'alto':
          case 'c4':
            return 2;
          case 'bass':
          case 'f4':
            return 3;
          case 'n':
          case 'neutral':
            return 0;
          case 'g2':
          case 'treble':
            return 4;
          default:
            return 4;
        }
      },
      ParseClefFromInt: function(i) {
        switch (i) {
          case 43:
            return 4;
          case 48:
            return 1;
          case 60:
            return 2;
          case 65:
            return 3;
          default:
            return 4;
        }
      },
      ParseTripletFeelFromString: function(str) {
        var _g = str.toLowerCase();
        switch (_g) {
          case 'd16':
          case 'dotted-16th':
            return 3;
          case 'd8':
          case 'dotted-8th':
            return 4;
          case 'no':
          case 'none':
            return 0;
          case 's8':
          case 'scottish-8th':
            return 6;
          case 's16':
          case 'scottish-16th':
            return 5;
          case 't8':
          case 'triplet-8th':
            return 2;
          case 't16':
          case 'triplet-16th':
            return 1;
          default:
            return 0;
        }
      },
      ParseTripletFeelFromInt: function(i) {
        switch (i) {
          case 0:
            return 0;
          case 1:
            return 1;
          case 2:
            return 2;
          case 3:
            return 3;
          case 4:
            return 4;
          case 5:
            return 5;
          case 6:
            return 6;
          default:
            return 0;
        }
      },
      ParseKeySignature: function(str) {
        var _g = str.toLowerCase();
        switch (_g) {
          case 'a':
            return 3;
          case 'ab':
            return -4;
          case 'b':
            return 5;
          case 'bb':
            return -2;
          case 'c':
            return 0;
          case 'c#':
            return 7;
          case 'cb':
            return -7;
          case 'd':
            return 2;
          case 'db':
            return -5;
          case 'e':
            return 4;
          case 'eb':
            return -3;
          case 'f':
            return -1;
          case 'f#':
            return 6;
          case 'g':
            return 1;
          case 'gb':
            return -6;
          default:
            return 0;
        }
      },
      NextChar: function() {
        var b = this.Data.ReadByte();
        if (b == -1) {
          this._ch = 0;
        } else {
          this._ch = b;
          this._curChPos++;
        }
      },
      NewSy: function() {
        this._sy = 0;
        while (true) {
          if (this._ch == 0) {
            this._sy = 1;
          } else if (alphaTab.platform.Platform.IsWhiteSpace(this._ch)) {
            this.NextChar();
          } else if (this._ch == 47) {
            this.NextChar();
            if (this._ch == 47) {
              while (this._ch != 13 && this._ch != 10 && this._ch != 0)
                this.NextChar();
            } else if (this._ch == 42) {
              while (this._ch != 0)
                if (this._ch == 42) {
                  this.NextChar();
                  if (this._ch == 47) {
                    this.NextChar();
                    break;
                  }
                } else {
                  this.NextChar();
                }
            } else {
              this.Error('symbol', 5, false);
            }
          } else if (this._ch == 34 || this._ch == 39) {
            var startChar = this._ch;
            this.NextChar();
            var this1 = '';
            var s = this1;
            this._sy = 5;
            while (this._ch != startChar && this._ch != 0) {
              s += String.fromCharCode(this._ch);
              this.NextChar();
            }
            this._syData = s;
            this.NextChar();
          } else if (this._ch == 45) {
            if (this._allowNegatives && this.IsDigit(this._ch)) {
              var number = this.ReadNumber();
              this._sy = 2;
              this._syData = number;
            } else {
              this._sy = 5;
              this._syData = this.ReadName();
            }
          } else if (this._ch == 46) {
            this._sy = 4;
            this.NextChar();
          } else if (this._ch == 58) {
            this._sy = 3;
            this.NextChar();
          } else if (this._ch == 40) {
            this._sy = 7;
            this.NextChar();
          } else if (this._ch == 92) {
            this.NextChar();
            var name = this.ReadName();
            this._sy = 12;
            this._syData = name;
          } else if (this._ch == 41) {
            this._sy = 8;
            this.NextChar();
          } else if (this._ch == 123) {
            this._sy = 9;
            this.NextChar();
          } else if (this._ch == 125) {
            this._sy = 10;
            this.NextChar();
          } else if (this._ch == 124) {
            this._sy = 11;
            this.NextChar();
          } else if (this._ch == 42) {
            this._sy = 13;
            this.NextChar();
          } else if (this._ch == 60) {
            this._sy = 14;
            this.NextChar();
          } else if (this.IsDigit(this._ch)) {
            var number1 = this.ReadNumber();
            this._sy = 2;
            this._syData = number1;
          } else if (alphaTab.importer.AlphaTexImporter.IsLetter(this._ch)) {
            var name1 = this.ReadName();
            var tuning = this._allowTuning
              ? alphaTab.model.TuningParser.Parse(name1)
              : null;
            if (tuning != null) {
              this._sy = 6;
              this._syData = tuning;
            } else {
              this._sy = 5;
              this._syData = name1;
            }
          } else {
            this.Error('symbol', 5, false);
          }
          if (!(this._sy == 0)) {
            break;
          }
        }
      },
      IsDigit: function(code) {
        if (!(code >= 48 && code <= 57)) {
          if (code == 45) {
            return this._allowNegatives;
          } else {
            return false;
          }
        } else {
          return true;
        }
      },
      ReadName: function() {
        var this1 = '';
        var str = this1;
        while (true) {
          str += String.fromCharCode(this._ch);
          this.NextChar();
          if (
            !(
              alphaTab.importer.AlphaTexImporter.IsLetter(this._ch) ||
              this.IsDigit(this._ch) ||
              this._ch == 35
            )
          ) {
            break;
          }
        }
        return str;
      },
      ReadNumber: function() {
        var this1 = '';
        var str = this1;
        while (true) {
          str += String.fromCharCode(this._ch);
          this.NextChar();
          if (!this.IsDigit(this._ch)) {
            break;
          }
        }
        return alphaTab.platform.Platform.ParseInt(str);
      },
      Score: function() {
        this.MetaData();
        this.Bars();
      },
      MetaData: function() {
        var anyMeta = false;
        var continueReading = true;
        while (this._sy == 12 && continueReading) {
          var syData = Std.string(this._syData).toLowerCase();
          switch (syData) {
            case 'album':
              this.NewSy();
              if (this._sy == 5) {
                this._score.Album = Std.string(this._syData);
              } else {
                this.Error('album', 5, true);
              }
              this.NewSy();
              anyMeta = true;
              break;
            case 'artist':
              this.NewSy();
              if (this._sy == 5) {
                this._score.Artist = Std.string(this._syData);
              } else {
                this.Error('artist', 5, true);
              }
              this.NewSy();
              anyMeta = true;
              break;
            case 'copyright':
              this.NewSy();
              if (this._sy == 5) {
                this._score.Copyright = Std.string(this._syData);
              } else {
                this.Error('copyright', 5, true);
              }
              this.NewSy();
              anyMeta = true;
              break;
            case 'music':
              this.NewSy();
              if (this._sy == 5) {
                this._score.Music = Std.string(this._syData);
              } else {
                this.Error('music', 5, true);
              }
              this.NewSy();
              anyMeta = true;
              break;
            case 'subtitle':
              this.NewSy();
              if (this._sy == 5) {
                this._score.SubTitle = Std.string(this._syData);
              } else {
                this.Error('subtitle', 5, true);
              }
              this.NewSy();
              anyMeta = true;
              break;
            case 'tempo':
              this.NewSy();
              if (this._sy == 2) {
                this._score.Tempo = this._syData;
              } else {
                this.Error('tempo', 2, true);
              }
              this.NewSy();
              anyMeta = true;
              break;
            case 'title':
              this.NewSy();
              if (this._sy == 5) {
                this._score.Title = Std.string(this._syData);
              } else {
                this.Error('title', 5, true);
              }
              this.NewSy();
              anyMeta = true;
              break;
            case 'words':
              this.NewSy();
              if (this._sy == 5) {
                this._score.Words = Std.string(this._syData);
              } else {
                this.Error('words', 5, true);
              }
              this.NewSy();
              anyMeta = true;
              break;
            default:
              if (this.HandleStaffMeta()) {
                anyMeta = true;
              } else if (anyMeta) {
                this.Error('metaDataTags', 5, false);
              } else {
                continueReading = false;
              }
          }
        }
        if (anyMeta) {
          if (this._sy != 4) {
            this.Error('song', 4, true);
          }
          this.NewSy();
        } else if (this._sy == 4) {
          this.NewSy();
        }
        if (
          alphaTab.audio.GeneralMidi.IsGuitar(
            this._currentTrack.PlaybackInfo.Program
          )
        ) {
          this._currentStaff.DisplayTranspositionPitch = -12;
        }
      },
      HandleStaffMeta: function() {
        var syData = Std.string(this._syData).toLowerCase();
        switch (syData) {
          case 'capo':
            this.NewSy();
            if (this._sy == 2) {
              this._currentStaff.Capo = this._syData;
            } else {
              this.Error('capo', 2, true);
            }
            this.NewSy();
            return true;
          case 'chord':
            this.NewSy();
            var chord = new alphaTab.model.Chord();
            this.ChordProperties(chord);
            if (this._sy == 5) {
              chord.Name = this._syData;
              this.NewSy();
            } else {
              this.Error('chord-name', 2, true);
            }
            var i = 0;
            while (i < this._currentStaff.Tuning.length) {
              if (this._sy == 2) {
                chord.Strings.push(this._syData);
              } else if (
                this._sy == 5 &&
                Std.string(this._syData).toLowerCase() == 'x'
              ) {
                chord.Strings.push(-1);
              }
              this.NewSy();
              ++i;
            }
            this._currentStaff.AddChord(chord.Name.toLowerCase(), chord);
            return true;
          case 'instrument':
            this.NewSy();
            if (this._sy == 2) {
              var instrument = this._syData;
              if (instrument >= 0 && instrument <= 128) {
                this._currentTrack.PlaybackInfo.Program = this._syData;
              } else {
                this.Error('instrument', 2, false);
              }
            } else if (this._sy == 5) {
              var instrumentName = Std.string(this._syData).toLowerCase();
              this._currentTrack.PlaybackInfo.Program = alphaTab.audio.GeneralMidi.GetValue(
                instrumentName
              );
            } else {
              this.Error('instrument', 2, true);
            }
            this.NewSy();
            return true;
          case 'lyrics':
            this.NewSy();
            var lyrics = new alphaTab.model.Lyrics();
            lyrics.StartBar = 0;
            lyrics.Text = '';
            if (this._sy == 2) {
              lyrics.StartBar = this._syData;
              this.NewSy();
            }
            if (this._sy == 5) {
              lyrics.Text = this._syData;
              this.NewSy();
            } else {
              this.Error('lyrics', 5, true);
            }
            this._lyrics[this._currentTrack.Index].push(lyrics);
            return true;
          case 'tuning':
            this.NewSy();
            var strings = this._currentStaff.Tuning.length;
            var _g = this._sy;
            switch (_g) {
              case 5:
                var text = Std.string(this._syData).toLowerCase();
                if (text == 'piano' || text == 'none' || text == 'voice') {
                  var this1 = new Int32Array(0);
                  this._currentStaff.Tuning = this1;
                } else {
                  this.Error('tuning', 6, true);
                }
                this.NewSy();
                break;
              case 6:
                var this2 = [];
                var tuning = this2;
                while (true) {
                  var t = this._syData;
                  tuning.push(t.get_RealValue());
                  this.NewSy();
                  if (!(this._sy == 6)) {
                    break;
                  }
                }
                this._currentStaff.Tuning = new Int32Array(tuning);
                break;
              default:
                this.Error('tuning', 6, true);
            }
            var tmp;
            if (strings != this._currentStaff.Tuning.length) {
              var this3 = this._currentStaff.Chords;
              tmp = Object.keys(this3).length > 0;
            } else {
              tmp = false;
            }
            if (tmp) {
              this.ErrorMessage('Tuning must be defined before any chord');
            }
            return true;
          default:
            return false;
        }
      },
      ChordProperties: function(chord) {
        if (this._sy != 9) {
          return;
        }
        this.NewSy();
        while (this._sy == 5) {
          var _g = Std.string(this._syData).toLowerCase();
          switch (_g) {
            case 'barre':
              this.NewSy();
              while (this._sy == 2) {
                chord.BarreFrets.push(this._syData);
                this.NewSy();
              }
              break;
            case 'firstfret':
              this.NewSy();
              var _g1 = this._sy;
              if (_g1 == 2) {
                chord.FirstFret = this._syData;
              } else {
                this.Error('chord-firstfret', 2, true);
              }
              this.NewSy();
              break;
            case 'showdiagram':
              this.NewSy();
              var _g2 = this._sy;
              switch (_g2) {
                case 2:
                  chord.ShowDiagram = this._syData != 0;
                  break;
                case 5:
                  chord.ShowDiagram =
                    Std.string(this._syData).toLowerCase() != 'false';
                  break;
                default:
                  this.Error('chord-showdiagram', 5, true);
              }
              this.NewSy();
              break;
            case 'showfingering':
              this.NewSy();
              var _g3 = this._sy;
              switch (_g3) {
                case 2:
                  chord.ShowFingering = this._syData != 0;
                  break;
                case 5:
                  chord.ShowDiagram =
                    Std.string(this._syData).toLowerCase() != 'false';
                  break;
                default:
                  this.Error('chord-showfingering', 5, true);
              }
              this.NewSy();
              break;
            case 'showname':
              this.NewSy();
              var _g4 = this._sy;
              switch (_g4) {
                case 2:
                  chord.ShowName = this._syData != 0;
                  break;
                case 5:
                  chord.ShowName =
                    Std.string(this._syData).toLowerCase() != 'false';
                  break;
                default:
                  this.Error('chord-showname', 5, true);
              }
              this.NewSy();
              break;
            default:
              this.Error('chord-properties', 5, false);
          }
        }
        if (this._sy != 10) {
          this.Error('chord-properties', 10, true);
        }
        this.NewSy();
      },
      Bars: function() {
        this.Bar();
        while (this._sy != 1) {
          if (this._sy != 11) {
            this.Error('bar', 11, true);
          }
          this.NewSy();
          this.Bar();
        }
      },
      TrackStaffMeta: function() {
        if (this._sy == 12) {
          var syData = Std.string(this._syData).toLowerCase();
          if (syData == 'track') {
            this.NewSy();
            if (this._score.MasterBars.length > 0) {
              this.NewTrack();
            }
            if (this._sy == 5) {
              this._currentTrack.Name = Std.string(this._syData);
              this.NewSy();
            }
            if (this._sy == 5) {
              this._currentTrack.ShortName = Std.string(this._syData);
              this.NewSy();
            }
          }
          syData = Std.string(this._syData).toLowerCase();
          if (syData == 'staff') {
            this.NewSy();
            if (this._currentTrack.Staves[0].Bars.length > 0) {
              this._currentTrack.EnsureStaveCount(
                this._currentTrack.Staves.length + 1
              );
              this._currentStaff = this._currentTrack.Staves[
                this._currentTrack.Staves.length - 1
              ];
            }
            this.StaffProperties();
          }
        }
      },
      StaffProperties: function() {
        if (this._sy != 9) {
          return;
        }
        this.NewSy();
        var showStandardNotation = false;
        var showTabs = false;
        while (this._sy == 5) {
          var _g = Std.string(this._syData).toLowerCase();
          switch (_g) {
            case 'score':
              showStandardNotation = true;
              this.NewSy();
              break;
            case 'tabs':
              showTabs = true;
              this.NewSy();
              break;
            default:
              this.Error('staff-properties', 5, false);
          }
        }
        if (showStandardNotation || showTabs) {
          this._currentStaff.ShowStandardNotation = showStandardNotation;
          this._currentStaff.ShowTablature = showTabs;
        }
        if (this._sy != 10) {
          this.Error('staff-properties', 10, true);
        }
        this.NewSy();
      },
      Bar: function() {
        this.TrackStaffMeta();
        var bar = this.NewBar(this._currentStaff);
        if (this._currentStaff.Bars.length > this._score.MasterBars.length) {
          var master = new alphaTab.model.MasterBar();
          this._score.AddMasterBar(master);
          if (master.Index > 0) {
            master.KeySignature = master.PreviousMasterBar.KeySignature;
            master.KeySignatureType = master.PreviousMasterBar.KeySignatureType;
            master.TimeSignatureDenominator =
              master.PreviousMasterBar.TimeSignatureDenominator;
            master.TimeSignatureNumerator =
              master.PreviousMasterBar.TimeSignatureNumerator;
            master.TripletFeel = master.PreviousMasterBar.TripletFeel;
          }
        }
        this.BarMeta(bar);
        var voice = bar.Voices[0];
        while (this._sy != 11 && this._sy != 1) this.Beat(voice);
        if (voice.Beats.length == 0) {
          var emptyBeat = new alphaTab.model.Beat();
          emptyBeat.IsEmpty = true;
          voice.AddBeat(emptyBeat);
        }
      },
      NewBar: function(staff) {
        var bar = new alphaTab.model.Bar();
        staff.AddBar(bar);
        if (bar.Index > 0) {
          bar.Clef = bar.PreviousBar.Clef;
        }
        var voice = new alphaTab.model.Voice();
        bar.AddVoice(voice);
        return bar;
      },
      Beat: function(voice) {
        this.BeatDuration();
        var beat = new alphaTab.model.Beat();
        voice.AddBeat(beat);
        if (
          voice.Bar.get_MasterBar().TempoAutomation != null &&
          voice.Beats.length == 1
        ) {
          beat.Automations.push(voice.Bar.get_MasterBar().TempoAutomation);
        }
        if (this._sy == 7) {
          this.NewSy();
          this.Note(beat);
          while (this._sy != 8 && this._sy != 1) this.Note(beat);
          if (this._sy != 8) {
            this.Error('note-list', 8, true);
          }
          this.NewSy();
        } else if (
          this._sy == 5 &&
          Std.string(this._syData).toLowerCase() == 'r'
        ) {
          this.NewSy();
        } else {
          this.Note(beat);
        }
        if (this._sy == 4) {
          this._allowNegatives = true;
          this.NewSy();
          this._allowNegatives = false;
          if (this._sy != 2) {
            this.Error('duration', 2, true);
          }
          this._currentDuration = this.ParseDuration(this._syData);
          this.NewSy();
        }
        beat.Duration = this._currentDuration;
        if (this._currentTuplet != 1 && !beat.get_HasTuplet()) {
          this.ApplyTuplet(beat, this._currentTuplet);
        }
        var beatRepeat = 1;
        if (this._sy == 13) {
          this.NewSy();
          if (this._sy != 2) {
            this.Error('multiplier', 2, true);
          } else {
            beatRepeat = this._syData;
          }
          this.NewSy();
        }
        this.BeatEffects(beat);
        var i = 0;
        while (i < beatRepeat - 1) {
          voice.AddBeat(beat.Clone());
          ++i;
        }
      },
      BeatDuration: function() {
        if (this._sy != 3) {
          return;
        }
        this._allowNegatives = true;
        this.NewSy();
        this._allowNegatives = false;
        if (this._sy != 2) {
          this.Error('duration', 2, true);
        }
        this._currentDuration = this.ParseDuration(this._syData);
        this._currentTuplet = 1;
        this.NewSy();
        if (this._sy != 9) {
          return;
        }
        this.NewSy();
        while (this._sy == 5) {
          var effect = Std.string(this._syData).toLowerCase();
          if (effect == 'tu') {
            this.NewSy();
            if (this._sy != 2) {
              this.Error('duration-tuplet', 2, true);
            }
            this._currentTuplet = this._syData;
            this.NewSy();
          } else {
            this.Error('beat-duration', 5, false);
          }
        }
        if (this._sy != 10) {
          this.Error('beat-duration', 10, true);
        }
        this.NewSy();
      },
      BeatEffects: function(beat) {
        if (this._sy != 9) {
          return;
        }
        this.NewSy();
        while (this._sy == 5) {
          this._syData = Std.string(this._syData).toLowerCase();
          if (!this.ApplyBeatEffect(beat)) {
            this.Error('beat-effects', 5, false);
          }
        }
        if (this._sy != 10) {
          this.Error('beat-effects', 10, true);
        }
        this.NewSy();
      },
      ApplyBeatEffect: function(beat) {
        var syData = Std.string(this._syData).toLowerCase();
        if (syData == 'f') {
          beat.FadeIn = true;
          this.NewSy();
          return true;
        }
        if (syData == 'v') {
          beat.Vibrato = 1;
          this.NewSy();
          return true;
        }
        if (syData == 's') {
          beat.Slap = true;
          this.NewSy();
          return true;
        }
        if (syData == 'p') {
          beat.Pop = true;
          this.NewSy();
          return true;
        }
        if (syData == 'tt') {
          beat.Tap = true;
          this.NewSy();
          return true;
        }
        if (syData == 'dd') {
          beat.Dots = 2;
          this.NewSy();
          return true;
        }
        if (syData == 'd') {
          beat.Dots = 1;
          this.NewSy();
          return true;
        }
        if (syData == 'su') {
          beat.PickStroke = 1;
          this.NewSy();
          return true;
        }
        if (syData == 'sd') {
          beat.PickStroke = 2;
          this.NewSy();
          return true;
        }
        if (syData == 'tu') {
          this.NewSy();
          if (this._sy != 2) {
            this.Error('tuplet', 2, true);
            return false;
          }
          this.ApplyTuplet(beat, this._syData);
          this.NewSy();
          return true;
        }
        if (syData == 'tb' || syData == 'tbe') {
          var exact = syData == 'tbe';
          this.NewSy();
          if (this._sy != 7) {
            this.Error('tremolobar-effect', 7, true);
            return false;
          }
          this._allowNegatives = true;
          this.NewSy();
          while (this._sy != 8 && this._sy != 1) {
            var offset;
            var value;
            if (exact) {
              if (this._sy != 2) {
                this.Error('tremolobar-effect', 2, true);
                return false;
              }
              offset = this._syData;
              this.NewSy();
              if (this._sy != 2) {
                this.Error('tremolobar-effect', 2, true);
                return false;
              }
              value = this._syData;
            } else {
              if (this._sy != 2) {
                this.Error('tremolobar-effect', 2, true);
                return false;
              }
              offset = 0;
              value = this._syData;
            }
            beat.AddWhammyBarPoint(new alphaTab.model.BendPoint(offset, value));
            this.NewSy();
          }
          while (beat.WhammyBarPoints.length > 60)
            beat.RemoveWhammyBarPoint(beat.WhammyBarPoints.length - 1);
          if (!exact) {
            var count = beat.WhammyBarPoints.length;
            var step = (60 / count) | 0;
            var i = 0;
            while (i < count) {
              beat.WhammyBarPoints[i].Offset = Math.min(60, i * step);
              ++i;
            }
          } else {
            var comparison = function(a, b) {
              return a.Offset - b.Offset;
            };
            beat.WhammyBarPoints.sort(function(a1, b1) {
              return comparison(a1, b1);
            });
          }
          this._allowNegatives = false;
          if (this._sy != 8) {
            this.Error('tremolobar-effect', 8, true);
            return false;
          }
          this.NewSy();
          return true;
        }
        if (syData == 'ch') {
          this.NewSy();
          var chordName = Std.string(this._syData);
          var chordId = chordName.toLowerCase();
          if (!this._currentStaff.Chords.hasOwnProperty(chordId)) {
            var chord = new alphaTab.model.Chord();
            chord.ShowDiagram = false;
            chord.Name = chordName;
            this._currentStaff.AddChord(chordId, chord);
          }
          beat.ChordId = chordId;
          this.NewSy();
          return true;
        }
        if (syData == 'gr') {
          this.NewSy();
          if (Std.string(this._syData).toLowerCase() == 'ob') {
            beat.GraceType = 1;
            this.NewSy();
          } else if (Std.string(this._syData).toLowerCase() == 'b') {
            beat.GraceType = 3;
            this.NewSy();
          } else {
            beat.GraceType = 2;
          }
          return true;
        }
        if (syData == 'tp') {
          this.NewSy();
          var duration = 8;
          if (this._sy == 2) {
            var _g = this._syData;
            switch (_g) {
              case 8:
                duration = 8;
                break;
              case 16:
                duration = 16;
                break;
              case 32:
                duration = 32;
                break;
              default:
                duration = 8;
            }
            this.NewSy();
          }
          beat.TremoloSpeed = duration;
          return true;
        }
        return false;
      },
      ApplyTuplet: function(beat, tuplet) {
        switch (tuplet) {
          case 3:
            beat.TupletNumerator = 3;
            beat.TupletDenominator = 2;
            break;
          case 5:
            beat.TupletNumerator = 5;
            beat.TupletDenominator = 4;
            break;
          case 6:
            beat.TupletNumerator = 6;
            beat.TupletDenominator = 4;
            break;
          case 7:
            beat.TupletNumerator = 7;
            beat.TupletDenominator = 4;
            break;
          case 9:
            beat.TupletNumerator = 9;
            beat.TupletDenominator = 8;
            break;
          case 10:
            beat.TupletNumerator = 10;
            beat.TupletDenominator = 8;
            break;
          case 11:
            beat.TupletNumerator = 11;
            beat.TupletDenominator = 8;
            break;
          case 12:
            beat.TupletNumerator = 12;
            beat.TupletDenominator = 8;
            break;
          default:
            beat.TupletNumerator = 1;
            beat.TupletDenominator = 1;
        }
      },
      Note: function(beat) {
        var isDead = Std.string(this._syData) == 'x';
        var isTie = Std.string(this._syData) == '-';
        var fret = -1;
        var octave = -1;
        var tone = -1;
        var _g = this._sy;
        switch (_g) {
          case 2:
            fret = this._syData;
            break;
          case 5:
            if (isTie || isDead) {
              fret = 0;
            } else {
              this.Error('note-fret', 2, true);
            }
            break;
          case 6:
            var tuning = this._syData;
            octave = tuning.Octave;
            tone = tuning.NoteValue;
            break;
          default:
            this.Error('note-fret', 2, true);
        }
        this.NewSy();
        var isFretted = octave == -1 && this._currentStaff.Tuning.length > 0;
        var string = -1;
        if (isFretted) {
          if (this._sy != 4) {
            this.Error('note', 4, true);
          }
          this.NewSy();
          if (this._sy != 2) {
            this.Error('note-string', 2, true);
          }
          string = this._syData;
          if (string < 1 || string > this._currentStaff.Tuning.length) {
            this.Error('note-string', 2, false);
          }
          this.NewSy();
        }
        var note = new alphaTab.model.Note();
        if (isFretted) {
          note.String = this._currentStaff.Tuning.length - (string - 1);
          note.IsDead = isDead;
          note.IsTieDestination = isTie;
          if (!isTie) {
            note.Fret = fret;
          }
        } else {
          note.Octave = octave;
          note.Tone = tone;
          note.IsTieDestination = isTie;
        }
        beat.AddNote(note);
        this.NoteEffects(note);
      },
      NoteEffects: function(note) {
        if (this._sy != 9) {
          return;
        }
        this.NewSy();
        while (this._sy == 5) {
          var syData = Std.string(this._syData).toLowerCase();
          this._syData = syData;
          if (syData == 'b' || syData == 'be') {
            var exact = this._syData == 'be';
            this.NewSy();
            if (this._sy != 7) {
              this.Error('bend-effect', 7, true);
            }
            this.NewSy();
            while (this._sy != 8 && this._sy != 1) {
              var offset = 0;
              var value = 0;
              if (exact) {
                if (this._sy != 2) {
                  this.Error('bend-effect-value', 2, true);
                }
                offset = this._syData;
                this.NewSy();
                if (this._sy != 2) {
                  this.Error('bend-effect-value', 2, true);
                }
                value = this._syData;
              } else {
                if (this._sy != 2) {
                  this.Error('bend-effect-value', 2, true);
                }
                value = this._syData;
              }
              note.AddBendPoint(new alphaTab.model.BendPoint(offset, value));
              this.NewSy();
            }
            while (note.BendPoints.length > 60) {
              var index = note.BendPoints.length - 1;
              if (index != -1) {
                note.BendPoints.splice(index, 1);
              }
            }
            if (exact) {
              note.BendPoints.sort(
                (function(comparison) {
                  return function(a, b) {
                    return comparison[0](a, b);
                  };
                })([
                  (function() {
                    return function(a1, b1) {
                      return a1.Offset - b1.Offset;
                    };
                  })()
                ])
              );
            } else {
              var count = note.BendPoints.length;
              var step = (60 / (count - 1)) | 0;
              var i = 0;
              while (i < count) {
                note.BendPoints[i].Offset = Math.min(60, i * step);
                ++i;
              }
            }
            if (this._sy != 8) {
              this.Error('bend-effect', 8, true);
            }
            this.NewSy();
          } else if (syData == 'nh') {
            note.HarmonicType = 1;
            this.NewSy();
          } else if (syData == 'ah') {
            note.HarmonicType = 2;
            this.NewSy();
          } else if (syData == 'th') {
            note.HarmonicType = 4;
            this.NewSy();
          } else if (syData == 'ph') {
            note.HarmonicType = 3;
            this.NewSy();
          } else if (syData == 'sh') {
            note.HarmonicType = 5;
            this.NewSy();
          } else if (syData == 'tr') {
            this.NewSy();
            if (this._sy != 2) {
              this.Error('trill-effect', 2, true);
            }
            var fret = this._syData;
            this.NewSy();
            var duration = 16;
            if (this._sy == 2) {
              var _g = this._syData;
              switch (_g) {
                case 16:
                  duration = 16;
                  break;
                case 32:
                  duration = 32;
                  break;
                case 64:
                  duration = 64;
                  break;
                default:
                  duration = 16;
              }
              this.NewSy();
            }
            note.TrillValue = fret + note.get_StringTuning();
            note.TrillSpeed = duration;
          } else if (syData == 'v') {
            this.NewSy();
            note.Vibrato = 1;
          } else if (syData == 'sl') {
            this.NewSy();
            note.SlideType = 2;
          } else if (syData == 'ss') {
            this.NewSy();
            note.SlideType = 1;
          } else if (syData == 'sib') {
            this.NewSy();
            note.SlideType = 3;
          } else if (syData == 'sia') {
            this.NewSy();
            note.SlideType = 4;
          } else if (syData == 'sou') {
            this.NewSy();
            note.SlideType = 5;
          } else if (syData == 'sod') {
            this.NewSy();
            note.SlideType = 6;
          } else if (syData == 'psd') {
            this.NewSy();
            note.SlideType = 7;
          } else if (syData == 'psu') {
            this.NewSy();
            note.SlideType = 8;
          } else if (syData == 'h') {
            this.NewSy();
            note.IsHammerPullOrigin = true;
          } else if (syData == 'g') {
            this.NewSy();
            note.IsGhost = true;
          } else if (syData == 'ac') {
            this.NewSy();
            note.Accentuated = 1;
          } else if (syData == 'hac') {
            this.NewSy();
            note.Accentuated = 2;
          } else if (syData == 'pm') {
            this.NewSy();
            note.IsPalmMute = true;
          } else if (syData == 'st') {
            this.NewSy();
            note.IsStaccato = true;
          } else if (syData == 'lr') {
            this.NewSy();
            note.IsLetRing = true;
          } else if (syData == 'x') {
            this.NewSy();
            note.Fret = 0;
            note.IsDead = true;
          } else if (syData == '-' || syData == 't') {
            this.NewSy();
            note.IsTieDestination = true;
          } else if (syData == 'lf') {
            this.NewSy();
            var finger = 0;
            if (this._sy == 2) {
              finger = this.ToFinger(this._syData);
              this.NewSy();
            }
            note.LeftHandFinger = finger;
          } else if (syData == 'rf') {
            this.NewSy();
            var finger1 = 0;
            if (this._sy == 2) {
              finger1 = this.ToFinger(this._syData);
              this.NewSy();
            }
            note.RightHandFinger = finger1;
          } else if (!this.ApplyBeatEffect(note.Beat)) {
            this.Error(syData, 5, false);
          }
        }
        if (this._sy != 10) {
          this.Error('note-effect', 10, false);
        }
        this.NewSy();
      },
      ToFinger: function(syData) {
        switch (syData) {
          case 1:
            return 0;
          case 2:
            return 1;
          case 3:
            return 2;
          case 4:
            return 3;
          case 5:
            return 4;
          default:
        }
        return 0;
      },
      ParseDuration: function(duration) {
        switch (duration) {
          case -4:
            return -4;
          case -2:
            return -2;
          case 1:
            return 1;
          case 2:
            return 2;
          case 4:
            return 4;
          case 8:
            return 8;
          case 16:
            return 16;
          case 32:
            return 32;
          case 64:
            return 64;
          case 128:
            return 128;
          default:
            return 4;
        }
      },
      BarMeta: function(bar) {
        var master = bar.get_MasterBar();
        while (this._sy == 12) {
          var syData = Std.string(this._syData).toLowerCase();
          if (syData == 'ts') {
            this.NewSy();
            if (this._sy != 2) {
              this.Error('timesignature-numerator', 2, true);
            }
            master.TimeSignatureNumerator = this._syData;
            this.NewSy();
            if (this._sy != 2) {
              this.Error('timesignature-denominator', 2, true);
            }
            master.TimeSignatureDenominator = this._syData;
            this.NewSy();
          } else if (syData == 'ro') {
            master.IsRepeatStart = true;
            this.NewSy();
          } else if (syData == 'rc') {
            this.NewSy();
            if (this._sy != 2) {
              this.Error('repeatclose', 2, true);
            }
            master.RepeatCount = this._syData - 1;
            this.NewSy();
          } else if (syData == 'ks') {
            this.NewSy();
            if (this._sy != 5) {
              this.Error('keysignature', 5, true);
            }
            master.KeySignature = js.Boot.__cast(
              this.ParseKeySignature(Std.string(this._syData).toLowerCase()),
              Int
            );
            this.NewSy();
          } else if (syData == 'clef') {
            this.NewSy();
            var _g = this._sy;
            switch (_g) {
              case 2:
                bar.Clef = this.ParseClefFromInt(this._syData);
                break;
              case 5:
                bar.Clef = this.ParseClefFromString(
                  Std.string(this._syData).toLowerCase()
                );
                break;
              case 6:
                var parseResult = this._syData;
                bar.Clef = this.ParseClefFromInt(parseResult.get_RealValue());
                break;
              default:
                this.Error('clef', 5, true);
            }
            this.NewSy();
          } else if (syData == 'tempo') {
            this.NewSy();
            if (this._sy != 2) {
              this.Error('tempo', 2, true);
            }
            var tempoAutomation = new alphaTab.model.Automation();
            tempoAutomation.IsLinear = true;
            tempoAutomation.Type = 0;
            tempoAutomation.Value = this._syData;
            master.TempoAutomation = tempoAutomation;
            this.NewSy();
          } else if (syData == 'section') {
            this.NewSy();
            if (this._sy != 5) {
              this.Error('section', 5, true);
            }
            var text = this._syData;
            this.NewSy();
            var marker = '';
            if (this._sy == 5) {
              marker = text;
              text = this._syData;
              this.NewSy();
            }
            var section = new alphaTab.model.Section();
            section.Marker = marker;
            section.Text = text;
            master.Section = section;
          } else if (syData == 'tf') {
            this._allowTuning = false;
            this.NewSy();
            this._allowTuning = true;
            var _g1 = this._sy;
            switch (_g1) {
              case 2:
                master.TripletFeel = this.ParseTripletFeelFromInt(this._syData);
                break;
              case 5:
                master.TripletFeel = this.ParseTripletFeelFromString(
                  Std.string(this._syData).toLowerCase()
                );
                break;
              default:
                this.Error('triplet-feel', 5, true);
            }
            this.NewSy();
          } else if (syData == 'ac') {
            master.IsAnacrusis = true;
            this.NewSy();
          } else if (bar.Index == 0 && !this.HandleStaffMeta()) {
            this.Error('measure-effects', 5, false);
          }
        }
      },
      __class__: alphaTab.importer.AlphaTexImporter
    }
  );
  alphaTab.importer._AlphaTexSymbols = {};
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_ = {};
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.__name__ = [
    'alphaTab',
    'importer',
    '_AlphaTexSymbols',
    'AlphaTexSymbols_Impl_'
  ];
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'No';
      case 1:
        return 'Eof';
      case 2:
        return 'Number';
      case 3:
        return 'DoubleDot';
      case 4:
        return 'Dot';
      case 5:
        return 'String';
      case 6:
        return 'Tuning';
      case 7:
        return 'LParensis';
      case 8:
        return 'RParensis';
      case 9:
        return 'LBrace';
      case 10:
        return 'RBrace';
      case 11:
        return 'Pipe';
      case 12:
        return 'MetaCommand';
      case 13:
        return 'Multiply';
      case 14:
        return 'LowerThan';
      case 15:
        return 'Property';
    }
    return '';
  };
  alphaTab.importer.BinaryStylesheet = function() {
    this.Raw = null;
    var this1 = {};
    this.Raw = this1;
  };
  alphaTab.importer.BinaryStylesheet.__name__ = [
    'alphaTab',
    'importer',
    'BinaryStylesheet'
  ];
  alphaTab.importer.BinaryStylesheet.prototype = {
    Apply: function(score) {
      var this1 = this.Raw;
      var key = $iterator(Object.keys(this1))();
      while (key.hasNext()) {
        var key1 = key.next();
        if (key1 == 'StandardNotation/hideDynamics') {
          score.Stylesheet.HideDynamics = this.Raw[key1];
        }
      }
    },
    AddValue: function(key, value) {
      this.Raw[key] = value;
    },
    __class__: alphaTab.importer.BinaryStylesheet
  };
  alphaTab.importer.BinaryStylesheetParser = function() {
    this.Stylesheet = null;
  };
  alphaTab.importer.BinaryStylesheetParser.__name__ = [
    'alphaTab',
    'importer',
    'BinaryStylesheetParser'
  ];
  alphaTab.importer.BinaryStylesheetParser.prototype = {
    Parse: function(data) {
      this.Stylesheet = new alphaTab.importer.BinaryStylesheet();
      var readable = alphaTab.io.ByteBuffer.FromBuffer(data);
      var entryCount = alphaTab.io.IOHelper.ReadInt32BE(readable);
      var i = 0;
      while (i < entryCount) {
        var key = alphaTab.importer.GpBinaryHelpers.GpReadString(
          readable,
          readable.ReadByte(),
          'utf-8'
        );
        var type = js.Boot.__cast(readable.ReadByte(), Int);
        switch (type) {
          case 0:
            var flag = readable.ReadByte() == 1;
            this.Stylesheet.AddValue(key, flag);
            break;
          case 1:
            var ivalue = alphaTab.io.IOHelper.ReadInt32BE(readable);
            this.Stylesheet.AddValue(key, ivalue);
            break;
          case 2:
            var fvalue = alphaTab.importer.GpBinaryHelpers.GpReadFloat(
              readable
            );
            this.Stylesheet.AddValue(key, fvalue);
            break;
          case 3:
            var s = alphaTab.importer.GpBinaryHelpers.GpReadString(
              readable,
              alphaTab.io.IOHelper.ReadInt16BE(readable),
              'utf-8'
            );
            this.Stylesheet.AddValue(key, s);
            break;
          case 4:
            var x = alphaTab.io.IOHelper.ReadInt32BE(readable);
            var y = alphaTab.io.IOHelper.ReadInt32BE(readable);
            this.Stylesheet.AddValue(key, new alphaTab.model.BendPoint(x, y));
            break;
          case 5:
            var width = alphaTab.io.IOHelper.ReadInt32BE(readable);
            var height = alphaTab.io.IOHelper.ReadInt32BE(readable);
            this.Stylesheet.AddValue(
              key,
              new alphaTab.model.BendPoint(width, height)
            );
            break;
          case 6:
            var rectX = alphaTab.io.IOHelper.ReadInt32BE(readable);
            var rectY = alphaTab.io.IOHelper.ReadInt32BE(readable);
            var rectW = alphaTab.io.IOHelper.ReadInt32BE(readable);
            var rectH = alphaTab.io.IOHelper.ReadInt32BE(readable);
            var tmp = this.Stylesheet;
            var _tmp = new alphaTab.rendering.utils.Bounds();
            var this1 = rectX;
            _tmp.X = this1;
            var this2 = rectY;
            _tmp.Y = this2;
            var this3 = rectW;
            _tmp.W = this3;
            var this4 = rectH;
            _tmp.H = this4;
            tmp.AddValue(key, _tmp);
            break;
          case 7:
            var color = alphaTab.importer.GpBinaryHelpers.GpReadColor(
              readable,
              true
            );
            this.Stylesheet.AddValue(key, color);
            break;
          default:
        }
        ++i;
      }
    },
    __class__: alphaTab.importer.BinaryStylesheetParser
  };
  alphaTab.importer._BinaryStylesheetParser_DataType = {};
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_ = {};
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.__name__ = [
    'alphaTab',
    'importer',
    '_BinaryStylesheetParser_DataType',
    'BinaryStylesheetParser_DataType_Impl_'
  ];
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'Boolean';
      case 1:
        return 'Integer';
      case 2:
        return 'Float';
      case 3:
        return 'String';
      case 4:
        return 'Point';
      case 5:
        return 'Size';
      case 6:
        return 'Rectangle';
      case 7:
        return 'Color';
    }
    return '';
  };
  alphaTab.importer.FileLoadException = $hx_exports['alphaTab']['importer'][
    'FileLoadException'
  ] = function() {
    alphaTab.AlphaTabException.call(this);
    this.Xhr = null;
  };
  alphaTab.importer.FileLoadException.__name__ = [
    'alphaTab',
    'importer',
    'FileLoadException'
  ];
  alphaTab.importer.FileLoadException.__super__ = alphaTab.AlphaTabException;
  alphaTab.importer.FileLoadException.prototype = $extend(
    alphaTab.AlphaTabException.prototype,
    {
      FileLoadException: function(message, xhr) {
        this.AlphaTabException(message);
        this.Xhr = null;
        this.Xhr = xhr;
        return this;
      },
      __class__: alphaTab.importer.FileLoadException
    }
  );
  alphaTab.importer.Gp3To5Importer = function() {
    alphaTab.importer.ScoreImporter.call(this);
  };
  alphaTab.importer.Gp3To5Importer.__name__ = [
    'alphaTab',
    'importer',
    'Gp3To5Importer'
  ];
  alphaTab.importer.Gp3To5Importer.ToStrokeValue = function(value) {
    switch (value) {
      case 1:
        return 30;
      case 2:
        return 30;
      case 3:
        return 60;
      case 4:
        return 120;
      case 5:
        return 240;
      case 6:
        return 480;
      default:
        return 0;
    }
  };
  alphaTab.importer.Gp3To5Importer.__super__ = alphaTab.importer.ScoreImporter;
  alphaTab.importer.Gp3To5Importer.prototype = $extend(
    alphaTab.importer.ScoreImporter.prototype,
    {
      get_Name: function() {
        return 'Guitar Pro 3-5';
      },
      ReadScore: function() {
        this._encoding = this.GetSetting('encoding', 'utf-8');
        this.ReadVersion();
        this._score = new alphaTab.model.Score();
        this.ReadScoreInformation();
        if (this._versionNumber < 500) {
          this._globalTripletFeel = alphaTab.importer.GpBinaryHelpers.GpReadBool(
            this.Data
          )
            ? 2
            : 0;
        }
        if (this._versionNumber >= 400) {
          this.ReadLyrics();
        }
        if (this._versionNumber >= 510) {
          this.Data.Skip(19);
        }
        if (this._versionNumber >= 500) {
          this.ReadPageSetup();
          this._score.TempoLabel = alphaTab.importer.GpBinaryHelpers.GpReadStringIntByte(
            this.Data,
            this._encoding
          );
        }
        this._score.Tempo = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
        if (this._versionNumber >= 510) {
          alphaTab.importer.GpBinaryHelpers.GpReadBool(this.Data);
        }
        alphaTab.io.IOHelper.ReadInt32LE(this.Data);
        if (this._versionNumber >= 400) {
          this.Data.ReadByte();
        }
        this.ReadPlaybackInfos();
        if (this._versionNumber >= 500) {
          this.Data.Skip(38);
          this.Data.Skip(4);
        }
        this._barCount = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
        this._trackCount = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
        this.ReadMasterBars();
        this.ReadTracks();
        this.ReadBars();
        this._score.Finish(this.Settings);
        if (this._lyrics != null && this._lyricsTrack >= 0) {
          this._score.Tracks[this._lyricsTrack].ApplyLyrics(this._lyrics);
        }
        return this._score;
      },
      ReadVersion: function() {
        var version = alphaTab.importer.GpBinaryHelpers.GpReadStringByteLength(
          this.Data,
          30,
          this._encoding
        );
        if (!StringTools.startsWith(version, 'FICHIER GUITAR PRO ')) {
          throw new js._Boot.HaxeError(
            new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException(
              'Unsupported format'
            )
          );
        }
        version = HxOverrides.substr(
          version,
          'FICHIER GUITAR PRO '.length + 1,
          null
        );
        var this1 = system.Convert.ToUInt16(46);
        var dot = version.indexOf(String.fromCharCode(this1));
        this._versionNumber =
          100 *
            alphaTab.platform.Platform.ParseInt(
              HxOverrides.substr(version, 0, dot)
            ) +
          alphaTab.platform.Platform.ParseInt(
            HxOverrides.substr(version, dot + 1, null)
          );
        alphaTab.util.Logger.Info(
          this.get_Name(),
          'Guitar Pro version ' + version + ' detected',
          null
        );
      },
      ReadScoreInformation: function() {
        this._score.Title = alphaTab.importer.GpBinaryHelpers.GpReadStringIntUnused(
          this.Data,
          this._encoding
        );
        this._score.SubTitle = alphaTab.importer.GpBinaryHelpers.GpReadStringIntUnused(
          this.Data,
          this._encoding
        );
        this._score.Artist = alphaTab.importer.GpBinaryHelpers.GpReadStringIntUnused(
          this.Data,
          this._encoding
        );
        this._score.Album = alphaTab.importer.GpBinaryHelpers.GpReadStringIntUnused(
          this.Data,
          this._encoding
        );
        this._score.Words = alphaTab.importer.GpBinaryHelpers.GpReadStringIntUnused(
          this.Data,
          this._encoding
        );
        var tmp =
          this._versionNumber >= 500
            ? alphaTab.importer.GpBinaryHelpers.GpReadStringIntUnused(
                this.Data,
                this._encoding
              )
            : this._score.Words;
        this._score.Music = tmp;
        this._score.Copyright = alphaTab.importer.GpBinaryHelpers.GpReadStringIntUnused(
          this.Data,
          this._encoding
        );
        this._score.Tab = alphaTab.importer.GpBinaryHelpers.GpReadStringIntUnused(
          this.Data,
          this._encoding
        );
        this._score.Instructions = alphaTab.importer.GpBinaryHelpers.GpReadStringIntUnused(
          this.Data,
          this._encoding
        );
        var noticeLines = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
        var this1 = '';
        var notice = this1;
        var i = 0;
        while (i < noticeLines) {
          if (i > 0) {
            notice = notice + ('' + '\r\n');
          }
          notice += Std.string(
            alphaTab.importer.GpBinaryHelpers.GpReadStringIntUnused(
              this.Data,
              this._encoding
            )
          );
          ++i;
        }
        this._score.Notices = notice;
      },
      ReadLyrics: function() {
        var this1 = [];
        this._lyrics = this1;
        this._lyricsTrack = alphaTab.io.IOHelper.ReadInt32LE(this.Data) - 1;
        var i = 0;
        while (i < 5) {
          var lyrics = new alphaTab.model.Lyrics();
          lyrics.StartBar = alphaTab.io.IOHelper.ReadInt32LE(this.Data) - 1;
          lyrics.Text = alphaTab.importer.GpBinaryHelpers.GpReadStringInt(
            this.Data,
            this._encoding
          );
          this._lyrics.push(lyrics);
          ++i;
        }
      },
      ReadPageSetup: function() {
        this.Data.Skip(30);
        var i = 0;
        while (i < 10) {
          alphaTab.importer.GpBinaryHelpers.GpReadStringIntByte(
            this.Data,
            this._encoding
          );
          ++i;
        }
      },
      ReadPlaybackInfos: function() {
        var this1 = [];
        this._playbackInfos = this1;
        var i = 0;
        while (i < 64) {
          var info = new alphaTab.model.PlaybackInformation();
          info.PrimaryChannel = i;
          info.SecondaryChannel = i;
          info.Program = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
          info.Volume = this.Data.ReadByte();
          info.Balance = this.Data.ReadByte();
          this.Data.Skip(6);
          this._playbackInfos.push(info);
          ++i;
        }
      },
      ReadMasterBars: function() {
        var i = 0;
        while (i < this._barCount) {
          this.ReadMasterBar();
          ++i;
        }
      },
      ReadMasterBar: function() {
        var previousMasterBar = null;
        if (this._score.MasterBars.length > 0) {
          previousMasterBar = this._score.MasterBars[
            this._score.MasterBars.length - 1
          ];
        }
        var newMasterBar = new alphaTab.model.MasterBar();
        var flags = this.Data.ReadByte();
        if ((flags & 1) != 0) {
          newMasterBar.TimeSignatureNumerator = this.Data.ReadByte();
        } else if (previousMasterBar != null) {
          newMasterBar.TimeSignatureNumerator =
            previousMasterBar.TimeSignatureNumerator;
        }
        if ((flags & 2) != 0) {
          newMasterBar.TimeSignatureDenominator = this.Data.ReadByte();
        } else if (previousMasterBar != null) {
          newMasterBar.TimeSignatureDenominator =
            previousMasterBar.TimeSignatureDenominator;
        }
        newMasterBar.IsRepeatStart = (flags & 4) != 0;
        if ((flags & 8) != 0) {
          newMasterBar.RepeatCount =
            this.Data.ReadByte() + (this._versionNumber >= 500 ? 0 : 1);
        }
        if ((flags & 16) != 0) {
          if (this._versionNumber < 500) {
            var currentMasterBar = previousMasterBar;
            var existentAlternatives = 0;
            while (currentMasterBar != null) {
              if (
                currentMasterBar.get_IsRepeatEnd() &&
                currentMasterBar != previousMasterBar
              ) {
                break;
              }
              if (currentMasterBar.IsRepeatStart) {
                break;
              }
              existentAlternatives =
                existentAlternatives | currentMasterBar.AlternateEndings;
              currentMasterBar = currentMasterBar.PreviousMasterBar;
            }
            var repeatAlternative = 0;
            var repeatMask = this.Data.ReadByte();
            var i = 0;
            while (i < 8) {
              var repeating = 1 << i;
              if (repeatMask > i && (existentAlternatives & repeating) == 0) {
                repeatAlternative = repeatAlternative | repeating;
              }
              ++i;
            }
            newMasterBar.AlternateEndings = system.Convert.ToUInt8(
              repeatAlternative
            );
          } else {
            newMasterBar.AlternateEndings = system.Convert.ToUInt8(
              this.Data.ReadByte()
            );
          }
        }
        if ((flags & 32) != 0) {
          var section = new alphaTab.model.Section();
          section.Text = alphaTab.importer.GpBinaryHelpers.GpReadStringIntByte(
            this.Data,
            this._encoding
          );
          section.Marker = '';
          alphaTab.importer.GpBinaryHelpers.GpReadColor(this.Data, false);
          newMasterBar.Section = section;
        }
        if ((flags & 64) != 0) {
          newMasterBar.KeySignature = js.Boot.__cast(
            alphaTab.platform.Platform.ReadSignedByte(this.Data),
            Int
          );
          newMasterBar.KeySignatureType = js.Boot.__cast(
            this.Data.ReadByte(),
            Int
          );
        } else if (previousMasterBar != null) {
          newMasterBar.KeySignature = previousMasterBar.KeySignature;
          newMasterBar.KeySignatureType = previousMasterBar.KeySignatureType;
        }
        if (this._versionNumber >= 500 && (flags & 3) != 0) {
          this.Data.Skip(4);
        }
        if (this._versionNumber >= 500 && (flags & 16) == 0) {
          newMasterBar.AlternateEndings = system.Convert.ToUInt8(
            this.Data.ReadByte()
          );
        }
        if (this._versionNumber >= 500) {
          var tripletFeel = this.Data.ReadByte();
          switch (tripletFeel) {
            case 1:
              newMasterBar.TripletFeel = 2;
              break;
            case 2:
              newMasterBar.TripletFeel = 1;
              break;
            default:
          }
          this.Data.ReadByte();
        } else {
          newMasterBar.TripletFeel = this._globalTripletFeel;
        }
        newMasterBar.IsDoubleBar = (flags & 128) != 0;
        this._score.AddMasterBar(newMasterBar);
      },
      ReadTracks: function() {
        var i = 0;
        while (i < this._trackCount) {
          this.ReadTrack();
          ++i;
        }
      },
      ReadTrack: function() {
        var newTrack = new alphaTab.model.Track(1);
        this._score.AddTrack(newTrack);
        var mainStaff = newTrack.Staves[0];
        var flags = this.Data.ReadByte();
        newTrack.Name = alphaTab.importer.GpBinaryHelpers.GpReadStringByteLength(
          this.Data,
          40,
          this._encoding
        );
        if ((flags & 1) != 0) {
          mainStaff.IsPercussion = true;
        }
        var stringCount = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
        var this1 = [];
        var tuning = this1;
        var i = 0;
        while (i < 7) {
          var stringTuning = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
          if (stringCount > i) {
            tuning.push(stringTuning);
          }
          ++i;
        }
        mainStaff.Tuning = new Int32Array(tuning);
        var port = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
        var index = alphaTab.io.IOHelper.ReadInt32LE(this.Data) - 1;
        var effectChannel = alphaTab.io.IOHelper.ReadInt32LE(this.Data) - 1;
        this.Data.Skip(4);
        if (index >= 0 && index < this._playbackInfos.length) {
          var info = this._playbackInfos[index];
          info.Port = port;
          info.IsSolo = (flags & 16) != 0;
          info.IsMute = (flags & 32) != 0;
          info.SecondaryChannel = effectChannel;
          if (alphaTab.audio.GeneralMidi.IsGuitar(info.Program)) {
            mainStaff.DisplayTranspositionPitch = -12;
          }
          newTrack.PlaybackInfo = info;
        }
        mainStaff.Capo = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
        newTrack.Color = alphaTab.importer.GpBinaryHelpers.GpReadColor(
          this.Data,
          false
        );
        if (this._versionNumber >= 500) {
          this.Data.ReadByte();
          this.Data.ReadByte();
          this.Data.Skip(43);
        }
        if (this._versionNumber >= 510) {
          this.Data.Skip(4);
          alphaTab.importer.GpBinaryHelpers.GpReadStringIntByte(
            this.Data,
            this._encoding
          );
          alphaTab.importer.GpBinaryHelpers.GpReadStringIntByte(
            this.Data,
            this._encoding
          );
        }
      },
      ReadBars: function() {
        var i = 0;
        while (i < this._barCount) {
          var t = 0;
          while (t < this._trackCount) {
            this.ReadBar(this._score.Tracks[t]);
            ++t;
          }
          ++i;
        }
      },
      ReadBar: function(track) {
        var newBar = new alphaTab.model.Bar();
        var mainStaff = track.Staves[0];
        if (mainStaff.IsPercussion) {
          newBar.Clef = 0;
        }
        mainStaff.AddBar(newBar);
        var voiceCount = 1;
        if (this._versionNumber >= 500) {
          this.Data.ReadByte();
          voiceCount = 2;
        }
        var v = 0;
        while (v < voiceCount) {
          this.ReadVoice(track, newBar);
          ++v;
        }
      },
      ReadVoice: function(track, bar) {
        var beatCount = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
        if (beatCount == 0) {
          return;
        }
        var newVoice = new alphaTab.model.Voice();
        bar.AddVoice(newVoice);
        var i = 0;
        while (i < beatCount) {
          this.ReadBeat(track, bar, newVoice);
          ++i;
        }
      },
      ReadBeat: function(track, bar, voice) {
        var newBeat = new alphaTab.model.Beat();
        var flags = this.Data.ReadByte();
        if ((flags & 1) != 0) {
          newBeat.Dots = 1;
        }
        if ((flags & 64) != 0) {
          var type = this.Data.ReadByte();
          newBeat.IsEmpty = (type & 2) == 0;
        }
        voice.AddBeat(newBeat);
        var duration = alphaTab.platform.Platform.ReadSignedByte(this.Data);
        switch (duration) {
          case -2:
            newBeat.Duration = 1;
            break;
          case -1:
            newBeat.Duration = 2;
            break;
          case 0:
            newBeat.Duration = 4;
            break;
          case 1:
            newBeat.Duration = 8;
            break;
          case 2:
            newBeat.Duration = 16;
            break;
          case 3:
            newBeat.Duration = 32;
            break;
          case 4:
            newBeat.Duration = 64;
            break;
          default:
            newBeat.Duration = 4;
        }
        if ((flags & 32) != 0) {
          newBeat.TupletNumerator = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
          var _g = newBeat.TupletNumerator;
          switch (_g) {
            case 1:
              newBeat.TupletDenominator = 1;
              break;
            case 3:
              newBeat.TupletDenominator = 2;
              break;
            case 5:
            case 6:
            case 7:
              newBeat.TupletDenominator = 4;
              break;
            case 2:
            case 4:
            case 8:
              break;
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
              newBeat.TupletDenominator = 8;
              break;
            default:
              newBeat.TupletNumerator = 1;
              newBeat.TupletDenominator = 1;
          }
        }
        if ((flags & 2) != 0) {
          this.ReadChord(newBeat);
        }
        if ((flags & 4) != 0) {
          newBeat.Text = alphaTab.importer.GpBinaryHelpers.GpReadStringIntUnused(
            this.Data,
            this._encoding
          );
        }
        if ((flags & 8) != 0) {
          this.ReadBeatEffects(newBeat);
        }
        if ((flags & 16) != 0) {
          this.ReadMixTableChange(newBeat);
        }
        var stringFlags = this.Data.ReadByte();
        var i = 6;
        while (i >= 0) {
          if (
            (stringFlags & (1 << i)) != 0 &&
            6 - i < bar.Staff.Tuning.length
          ) {
            this.ReadNote(track, bar, voice, newBeat, 6 - i);
          }
          --i;
        }
        if (this._versionNumber >= 500) {
          this.Data.ReadByte();
          var flag = this.Data.ReadByte();
          if ((flag & 8) != 0) {
            this.Data.ReadByte();
          }
        }
      },
      ReadChord: function(beat) {
        var chord = new alphaTab.model.Chord();
        var chordId = alphaTab.platform.Platform.NewGuid();
        if (this._versionNumber >= 500) {
          this.Data.Skip(17);
          chord.Name = alphaTab.importer.GpBinaryHelpers.GpReadStringByteLength(
            this.Data,
            21,
            this._encoding
          );
          this.Data.Skip(4);
          chord.FirstFret = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
          var i = 0;
          while (i < 7) {
            var fret = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
            if (i < beat.Voice.Bar.Staff.Tuning.length) {
              chord.Strings.push(fret);
            }
            ++i;
          }
          var numberOfBarres = this.Data.ReadByte();
          var this1 = new Uint8Array(5);
          var barreFrets = this1;
          this.Data.Read(barreFrets, 0, barreFrets.length);
          var i1 = 0;
          while (i1 < numberOfBarres) {
            var this2 = barreFrets[i1];
            chord.BarreFrets.push(this2);
            ++i1;
          }
          this.Data.Skip(26);
        } else if (this.Data.ReadByte() != 0) {
          if (this._versionNumber >= 400) {
            this.Data.Skip(16);
            chord.Name = alphaTab.importer.GpBinaryHelpers.GpReadStringByteLength(
              this.Data,
              21,
              this._encoding
            );
            this.Data.Skip(4);
            chord.FirstFret = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
            var i2 = 0;
            while (i2 < 7) {
              var fret1 = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
              if (i2 < beat.Voice.Bar.Staff.Tuning.length) {
                chord.Strings.push(fret1);
              }
              ++i2;
            }
            var numberOfBarres1 = this.Data.ReadByte();
            var this3 = new Uint8Array(5);
            var barreFrets1 = this3;
            this.Data.Read(barreFrets1, 0, barreFrets1.length);
            var i3 = 0;
            while (i3 < numberOfBarres1) {
              var this4 = barreFrets1[i3];
              chord.BarreFrets.push(this4);
              ++i3;
            }
            this.Data.Skip(26);
          } else {
            this.Data.Skip(25);
            chord.Name = alphaTab.importer.GpBinaryHelpers.GpReadStringByteLength(
              this.Data,
              34,
              this._encoding
            );
            chord.FirstFret = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
            var i4 = 0;
            while (i4 < 6) {
              var fret2 = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
              if (i4 < beat.Voice.Bar.Staff.Tuning.length) {
                chord.Strings.push(fret2);
              }
              ++i4;
            }
            this.Data.Skip(36);
          }
        } else {
          var strings = this._versionNumber >= 406 ? 7 : 6;
          chord.Name = alphaTab.importer.GpBinaryHelpers.GpReadStringIntByte(
            this.Data,
            this._encoding
          );
          chord.FirstFret = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
          if (chord.FirstFret > 0) {
            var i5 = 0;
            while (i5 < strings) {
              var fret3 = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
              if (i5 < beat.Voice.Bar.Staff.Tuning.length) {
                chord.Strings.push(fret3);
              }
              ++i5;
            }
          }
        }
        var s = chord.Name;
        if (!(s == null || s.length == 0)) {
          beat.ChordId = chordId;
          beat.Voice.Bar.Staff.AddChord(beat.ChordId, chord);
        }
      },
      ReadBeatEffects: function(beat) {
        var flags = this.Data.ReadByte();
        var flags2 = 0;
        if (this._versionNumber >= 400) {
          flags2 = this.Data.ReadByte();
        }
        beat.FadeIn = (flags & 16) != 0;
        if (
          (this._versionNumber < 400 && (flags & 1) != 0) ||
          (flags & 2) != 0
        ) {
          beat.Vibrato = 1;
        }
        beat.HasRasgueado = (flags2 & 1) != 0;
        if ((flags & 32) != 0 && this._versionNumber >= 400) {
          var slapPop = alphaTab.platform.Platform.ReadSignedByte(this.Data);
          switch (slapPop) {
            case 1:
              beat.Tap = true;
              break;
            case 2:
              beat.Slap = true;
              break;
            case 3:
              beat.Pop = true;
              break;
            default:
          }
        } else if ((flags & 32) != 0) {
          var slapPop1 = alphaTab.platform.Platform.ReadSignedByte(this.Data);
          switch (slapPop1) {
            case 1:
              beat.Tap = true;
              break;
            case 2:
              beat.Slap = true;
              break;
            case 3:
              beat.Pop = true;
              break;
            default:
          }
          this.Data.Skip(4);
        }
        if ((flags2 & 4) != 0) {
          this.ReadTremoloBarEffect(beat);
        }
        if ((flags & 64) != 0) {
          var strokeUp;
          var strokeDown;
          if (this._versionNumber < 500) {
            strokeDown = this.Data.ReadByte();
            strokeUp = this.Data.ReadByte();
          } else {
            strokeUp = this.Data.ReadByte();
            strokeDown = this.Data.ReadByte();
          }
          if (strokeUp > 0) {
            beat.BrushType = 1;
            beat.BrushDuration = alphaTab.importer.Gp3To5Importer.ToStrokeValue(
              strokeUp
            );
          } else if (strokeDown > 0) {
            beat.BrushType = 2;
            beat.BrushDuration = alphaTab.importer.Gp3To5Importer.ToStrokeValue(
              strokeDown
            );
          }
        }
        if ((flags2 & 2) != 0) {
          var _g = alphaTab.platform.Platform.ReadSignedByte(this.Data);
          switch (_g) {
            case 0:
              beat.PickStroke = 0;
              break;
            case 1:
              beat.PickStroke = 1;
              break;
            case 2:
              beat.PickStroke = 2;
              break;
            default:
          }
        }
      },
      ReadTremoloBarEffect: function(beat) {
        this.Data.ReadByte();
        alphaTab.io.IOHelper.ReadInt32LE(this.Data);
        var pointCount = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
        if (pointCount > 0) {
          var i = 0;
          while (i < pointCount) {
            var point = new alphaTab.model.BendPoint(0, 0);
            point.Offset = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
            point.Value =
              (alphaTab.io.IOHelper.ReadInt32LE(this.Data) / 25) | 0;
            alphaTab.importer.GpBinaryHelpers.GpReadBool(this.Data);
            beat.AddWhammyBarPoint(point);
            ++i;
          }
        }
      },
      ReadMixTableChange: function(beat) {
        var tableChange = new alphaTab.importer.MixTableChange();
        tableChange.Instrument = alphaTab.platform.Platform.ReadSignedByte(
          this.Data
        );
        if (this._versionNumber >= 500) {
          this.Data.Skip(16);
        }
        tableChange.Volume = alphaTab.platform.Platform.ReadSignedByte(
          this.Data
        );
        tableChange.Balance = alphaTab.platform.Platform.ReadSignedByte(
          this.Data
        );
        var chorus = alphaTab.platform.Platform.ReadSignedByte(this.Data);
        var reverb = alphaTab.platform.Platform.ReadSignedByte(this.Data);
        var phaser = alphaTab.platform.Platform.ReadSignedByte(this.Data);
        var tremolo = alphaTab.platform.Platform.ReadSignedByte(this.Data);
        if (this._versionNumber >= 500) {
          tableChange.TempoName = alphaTab.importer.GpBinaryHelpers.GpReadStringIntByte(
            this.Data,
            this._encoding
          );
        }
        tableChange.Tempo = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
        if (tableChange.Volume >= 0) {
          this.Data.ReadByte();
        }
        if (tableChange.Balance >= 0) {
          this.Data.ReadByte();
        }
        if (chorus >= 0) {
          this.Data.ReadByte();
        }
        if (reverb >= 0) {
          this.Data.ReadByte();
        }
        if (phaser >= 0) {
          this.Data.ReadByte();
        }
        if (tremolo >= 0) {
          this.Data.ReadByte();
        }
        if (tableChange.Tempo >= 0) {
          tableChange.Duration = alphaTab.platform.Platform.ReadSignedByte(
            this.Data
          );
          if (this._versionNumber >= 510) {
            this.Data.ReadByte();
          }
        }
        if (this._versionNumber >= 400) {
          this.Data.ReadByte();
        }
        if (this._versionNumber >= 500) {
          this.Data.ReadByte();
        }
        if (this._versionNumber >= 510) {
          alphaTab.importer.GpBinaryHelpers.GpReadStringIntByte(
            this.Data,
            this._encoding
          );
          alphaTab.importer.GpBinaryHelpers.GpReadStringIntByte(
            this.Data,
            this._encoding
          );
        }
        if (tableChange.Volume >= 0) {
          var volumeAutomation = new alphaTab.model.Automation();
          volumeAutomation.IsLinear = true;
          volumeAutomation.Type = 1;
          var this1 = tableChange.Volume;
          volumeAutomation.Value = this1;
          beat.Automations.push(volumeAutomation);
        }
        if (tableChange.Balance >= 0) {
          var balanceAutomation = new alphaTab.model.Automation();
          balanceAutomation.IsLinear = true;
          balanceAutomation.Type = 3;
          var this2 = tableChange.Balance;
          balanceAutomation.Value = this2;
          beat.Automations.push(balanceAutomation);
        }
        if (tableChange.Instrument >= 0) {
          var instrumentAutomation = new alphaTab.model.Automation();
          instrumentAutomation.IsLinear = true;
          instrumentAutomation.Type = 2;
          var this3 = tableChange.Instrument;
          instrumentAutomation.Value = this3;
          beat.Automations.push(instrumentAutomation);
        }
        if (tableChange.Tempo >= 0) {
          var tempoAutomation = new alphaTab.model.Automation();
          tempoAutomation.IsLinear = true;
          tempoAutomation.Type = 0;
          var this4 = tableChange.Tempo;
          tempoAutomation.Value = this4;
          beat.Automations.push(tempoAutomation);
          beat.Voice.Bar.get_MasterBar().TempoAutomation = tempoAutomation;
        }
      },
      ReadNote: function(track, bar, voice, beat, stringIndex) {
        var newNote = new alphaTab.model.Note();
        newNote.String = bar.Staff.Tuning.length - stringIndex;
        var flags = this.Data.ReadByte();
        if ((flags & 2) != 0) {
          newNote.Accentuated = 2;
        } else if ((flags & 64) != 0) {
          newNote.Accentuated = 1;
        }
        newNote.IsGhost = (flags & 4) != 0;
        if ((flags & 32) != 0) {
          var noteType = this.Data.ReadByte();
          if (noteType == 3) {
            newNote.IsDead = true;
          } else if (noteType == 2) {
            newNote.IsTieDestination = true;
          }
        }
        if ((flags & 1) != 0 && this._versionNumber < 500) {
          this.Data.ReadByte();
          this.Data.ReadByte();
        }
        if ((flags & 16) != 0) {
          var dynamicNumber = alphaTab.platform.Platform.ReadSignedByte(
            this.Data
          );
          newNote.Dynamic = this.ToDynamicValue(dynamicNumber);
          beat.Dynamic = newNote.Dynamic;
        }
        if ((flags & 32) != 0) {
          newNote.Fret = alphaTab.platform.Platform.ReadSignedByte(this.Data);
        }
        if ((flags & 128) != 0) {
          newNote.LeftHandFinger = js.Boot.__cast(
            alphaTab.platform.Platform.ReadSignedByte(this.Data),
            Int
          );
          newNote.RightHandFinger = js.Boot.__cast(
            alphaTab.platform.Platform.ReadSignedByte(this.Data),
            Int
          );
          newNote.IsFingering = true;
        }
        if (this._versionNumber >= 500) {
          if ((flags & 1) != 0) {
            newNote.DurationPercent = alphaTab.importer.GpBinaryHelpers.GpReadDouble(
              this.Data
            );
          }
          var flags2 = this.Data.ReadByte();
          newNote.AccidentalMode = (flags2 & 2) != 0 ? 1 : 0;
        }
        beat.AddNote(newNote);
        if ((flags & 8) != 0) {
          this.ReadNoteEffects(track, voice, beat, newNote);
        }
      },
      ToDynamicValue: function(value) {
        switch (value) {
          case 1:
            return 0;
          case 2:
            return 1;
          case 3:
            return 2;
          case 4:
            return 3;
          case 5:
            return 4;
          case 6:
            return 5;
          case 7:
            return 6;
          case 8:
            return 7;
          default:
            return 5;
        }
      },
      ReadNoteEffects: function(track, voice, beat, note) {
        var flags = this.Data.ReadByte();
        var flags2 = 0;
        if (this._versionNumber >= 400) {
          flags2 = this.Data.ReadByte();
        }
        if ((flags & 1) != 0) {
          this.ReadBend(note);
        }
        if ((flags & 16) != 0) {
          this.ReadGrace(voice, note);
        }
        if ((flags2 & 4) != 0) {
          this.ReadTremoloPicking(beat);
        }
        if ((flags2 & 8) != 0) {
          this.ReadSlide(note);
        } else if (this._versionNumber < 400) {
          if ((flags & 4) != 0) {
            note.SlideType = 1;
          }
        }
        if ((flags2 & 16) != 0) {
          this.ReadArtificialHarmonic(note);
        } else if (this._versionNumber < 400) {
          if ((flags & 4) != 0) {
            note.HarmonicType = 1;
            note.HarmonicValue = this.DeltaFretToHarmonicValue(note.Fret);
          }
          if ((flags & 8) != 0) {
            note.HarmonicType = 2;
          }
        }
        if ((flags2 & 32) != 0) {
          this.ReadTrill(note);
        }
        note.IsLetRing = (flags & 8) != 0;
        note.IsHammerPullOrigin = (flags & 2) != 0;
        if ((flags2 & 64) != 0) {
          note.Vibrato = 1;
        }
        note.IsPalmMute = (flags2 & 2) != 0;
        note.IsStaccato = (flags2 & 1) != 0;
      },
      ReadBend: function(note) {
        this.Data.ReadByte();
        alphaTab.io.IOHelper.ReadInt32LE(this.Data);
        var pointCount = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
        if (pointCount > 0) {
          var i = 0;
          while (i < pointCount) {
            var point = new alphaTab.model.BendPoint(0, 0);
            point.Offset = alphaTab.io.IOHelper.ReadInt32LE(this.Data);
            point.Value =
              (alphaTab.io.IOHelper.ReadInt32LE(this.Data) / 25) | 0;
            alphaTab.importer.GpBinaryHelpers.GpReadBool(this.Data);
            note.AddBendPoint(point);
            ++i;
          }
        }
      },
      ReadGrace: function(voice, note) {
        var graceBeat = new alphaTab.model.Beat();
        var graceNote = new alphaTab.model.Note();
        graceNote.String = note.String;
        graceNote.Fret = alphaTab.platform.Platform.ReadSignedByte(this.Data);
        graceBeat.Duration = 32;
        graceBeat.Dynamic = this.ToDynamicValue(
          alphaTab.platform.Platform.ReadSignedByte(this.Data)
        );
        var transition = alphaTab.platform.Platform.ReadSignedByte(this.Data);
        switch (transition) {
          case 0:
            break;
          case 1:
            graceNote.SlideType = 2;
            graceNote.SlideTarget = note;
            break;
          case 2:
            break;
          case 3:
            graceNote.IsHammerPullOrigin = true;
            break;
          default:
        }
        graceNote.Dynamic = graceBeat.Dynamic;
        this.Data.Skip(1);
        if (this._versionNumber < 500) {
          graceBeat.GraceType = 2;
        } else {
          var flags = this.Data.ReadByte();
          graceNote.IsDead = (flags & 1) != 0;
          graceBeat.GraceType = (flags & 2) != 0 ? 1 : 2;
        }
        voice.AddGraceBeat(graceBeat);
        graceBeat.AddNote(graceNote);
      },
      ReadTremoloPicking: function(beat) {
        var speed = this.Data.ReadByte();
        switch (speed) {
          case 1:
            beat.TremoloSpeed = 8;
            break;
          case 2:
            beat.TremoloSpeed = 16;
            break;
          case 3:
            beat.TremoloSpeed = 32;
            break;
          default:
        }
      },
      ReadSlide: function(note) {
        if (this._versionNumber >= 500) {
          var type = alphaTab.platform.Platform.ReadSignedByte(this.Data);
          switch (type) {
            case 1:
              note.SlideType = 1;
              break;
            case 2:
              note.SlideType = 2;
              break;
            case 4:
              note.SlideType = 6;
              break;
            case 8:
              note.SlideType = 5;
              break;
            case 16:
              note.SlideType = 3;
              break;
            case 32:
              note.SlideType = 4;
              break;
            default:
              note.SlideType = 0;
          }
        } else {
          var type1 = alphaTab.platform.Platform.ReadSignedByte(this.Data);
          switch (type1) {
            case -2:
              note.SlideType = 4;
              break;
            case -1:
              note.SlideType = 3;
              break;
            case 1:
              note.SlideType = 1;
              break;
            case 2:
              note.SlideType = 2;
              break;
            case 3:
              note.SlideType = 6;
              break;
            case 4:
              note.SlideType = 5;
              break;
            default:
              note.SlideType = 0;
          }
        }
      },
      ReadArtificialHarmonic: function(note) {
        var type = this.Data.ReadByte();
        if (this._versionNumber >= 500) {
          switch (type) {
            case 1:
              note.HarmonicType = 1;
              note.HarmonicValue = this.DeltaFretToHarmonicValue(note.Fret);
              break;
            case 2:
              var harmonicTone = this.Data.ReadByte();
              var harmonicKey = this.Data.ReadByte();
              var harmonicOctaveOffset = this.Data.ReadByte();
              note.HarmonicType = 2;
              break;
            case 3:
              note.HarmonicType = 4;
              note.HarmonicValue = this.DeltaFretToHarmonicValue(
                this.Data.ReadByte()
              );
              break;
            case 4:
              note.HarmonicType = 3;
              note.HarmonicValue = 12;
              break;
            case 5:
              note.HarmonicType = 5;
              note.HarmonicValue = 12;
              break;
            default:
          }
        } else if (this._versionNumber >= 400) {
          switch (type) {
            case 1:
              note.HarmonicType = 1;
              break;
            case 3:
              note.HarmonicType = 4;
              break;
            case 4:
              note.HarmonicType = 3;
              break;
            case 5:
              note.HarmonicType = 5;
              break;
            case 15:
              note.HarmonicType = 2;
              break;
            case 17:
              note.HarmonicType = 2;
              break;
            case 22:
              note.HarmonicType = 2;
              break;
            default:
          }
        }
      },
      DeltaFretToHarmonicValue: function(deltaFret) {
        switch (deltaFret) {
          case 2:
            return 2.4;
          case 3:
            return 3.2;
          case 8:
            return 8.2;
          case 10:
            return 9.6;
          case 14:
          case 15:
            return 14.7;
          case 21:
          case 22:
            return 21.7;
          case 4:
          case 5:
          case 7:
          case 9:
          case 12:
          case 16:
          case 17:
          case 19:
          case 24:
            var this1 = deltaFret;
            return this1;
          default:
            return 12;
        }
      },
      ReadTrill: function(note) {
        note.TrillValue = this.Data.ReadByte() + note.get_StringTuning();
        var _g = this.Data.ReadByte();
        switch (_g) {
          case 1:
            note.TrillSpeed = 16;
            break;
          case 2:
            note.TrillSpeed = 32;
            break;
          case 3:
            note.TrillSpeed = 64;
            break;
          default:
        }
      },
      __class__: alphaTab.importer.Gp3To5Importer
    }
  );
  alphaTab.importer.Gp7Importer = function() {
    alphaTab.importer.ScoreImporter.call(this);
  };
  alphaTab.importer.Gp7Importer.__name__ = [
    'alphaTab',
    'importer',
    'Gp7Importer'
  ];
  alphaTab.importer.Gp7Importer.__super__ = alphaTab.importer.ScoreImporter;
  alphaTab.importer.Gp7Importer.prototype = $extend(
    alphaTab.importer.ScoreImporter.prototype,
    {
      get_Name: function() {
        return 'Guitar Pro 7';
      },
      ReadScore: function() {
        alphaTab.util.Logger.Info(this.get_Name(), 'Loading ZIP entries', null);
        var fileSystem = new alphaTab.io.ZipFile();
        fileSystem.FileFilter = function(s) {
          if (
            !(
              StringTools.endsWith(s, 'score.gpif') ||
              StringTools.endsWith(s, 'BinaryStylesheet')
            )
          ) {
            return StringTools.endsWith(s, 'PartConfiguration');
          } else {
            return true;
          }
        };
        try {
          fileSystem.Load(this.Data);
        } catch (e) {
          if (e instanceof js._Boot.HaxeError) e = e.val;
          if (js.Boot.__instanceof(e, system.Exception)) {
            throw new js._Boot.HaxeError(
              new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException(
                e.Message
              )
            );
          } else throw e;
        }
        alphaTab.util.Logger.Info(this.get_Name(), 'Zip entries loaded', null);
        var xml = null;
        var binaryStylesheet = null;
        var partConfiguration = null;
        var entry = $iterator(fileSystem.Entries)();
        while (entry.hasNext()) {
          var entry1 = entry.next();
          var _g = entry1.FileName;
          switch (_g) {
            case 'BinaryStylesheet':
              binaryStylesheet = entry1.Data;
              break;
            case 'PartConfiguration':
              partConfiguration = entry1.Data;
              break;
            case 'score.gpif':
              xml = alphaTab.platform.Platform.ToString(
                entry1.Data,
                this.GetSetting('encoding', 'utf-8')
              );
              break;
            default:
          }
        }
        fileSystem.Entries = null;
        fileSystem = null;
        alphaTab.util.Logger.Info(
          this.get_Name(),
          'Start Parsing score.gpif',
          null
        );
        var gpifParser = new alphaTab.importer.GpifParser();
        gpifParser.ParseXml(xml, this.Settings);
        alphaTab.util.Logger.Info(this.get_Name(), 'score.gpif parsed', null);
        var score = gpifParser.Score;
        if (binaryStylesheet != null) {
          alphaTab.util.Logger.Info(
            this.get_Name(),
            'Start Parsing BinaryStylesheet',
            null
          );
          var stylesheetParser = new alphaTab.importer.BinaryStylesheetParser();
          stylesheetParser.Parse(binaryStylesheet);
          if (stylesheetParser.Stylesheet != null) {
            stylesheetParser.Stylesheet.Apply(score);
          }
          alphaTab.util.Logger.Info(
            this.get_Name(),
            'BinaryStylesheet parsed',
            null
          );
        }
        if (partConfiguration != null) {
          alphaTab.util.Logger.Info(
            this.get_Name(),
            'Start Parsing Part Configuration',
            null
          );
          var partConfigurationParser = new alphaTab.importer.PartConfigurationParser();
          partConfigurationParser.Parse(partConfiguration);
          if (partConfigurationParser.Configuration != null) {
            partConfigurationParser.Configuration.Apply(score);
          }
          alphaTab.util.Logger.Info(
            this.get_Name(),
            'Part Configuration parsed',
            null
          );
        }
        return score;
      },
      __class__: alphaTab.importer.Gp7Importer
    }
  );
  alphaTab.importer.GpBinaryHelpers = function() {};
  alphaTab.importer.GpBinaryHelpers.__name__ = [
    'alphaTab',
    'importer',
    'GpBinaryHelpers'
  ];
  alphaTab.importer.GpBinaryHelpers.GpReadDouble = function(data) {
    var this1 = new Uint8Array(8);
    var bytes = this1;
    data.Read(bytes, 0, bytes.length);
    return alphaTab.platform.Platform.ToDouble(bytes);
  };
  alphaTab.importer.GpBinaryHelpers.GpReadFloat = function(data) {
    var this1 = new Uint8Array(4);
    var bytes = this1;
    bytes[3] = system.Convert.ToUInt8(data.ReadByte());
    bytes[2] = system.Convert.ToUInt8(data.ReadByte());
    bytes[2] = system.Convert.ToUInt8(data.ReadByte());
    bytes[1] = system.Convert.ToUInt8(data.ReadByte());
    return alphaTab.platform.Platform.ToFloat(bytes);
  };
  alphaTab.importer.GpBinaryHelpers.GpReadColor = function(data, readAlpha) {
    if (readAlpha == null) {
      readAlpha = false;
    }
    var r = system.Convert.ToUInt8(data.ReadByte());
    var g = system.Convert.ToUInt8(data.ReadByte());
    var b = system.Convert.ToUInt8(data.ReadByte());
    var a = 255;
    if (readAlpha) {
      a = system.Convert.ToUInt8(data.ReadByte());
    } else {
      data.Skip(1);
    }
    return new alphaTab.platform.model.Color(r, g, b, a);
  };
  alphaTab.importer.GpBinaryHelpers.GpReadBool = function(data) {
    return data.ReadByte() != 0;
  };
  alphaTab.importer.GpBinaryHelpers.GpReadStringIntUnused = function(
    data,
    encoding
  ) {
    data.Skip(4);
    return alphaTab.importer.GpBinaryHelpers.GpReadString(
      data,
      data.ReadByte(),
      encoding
    );
  };
  alphaTab.importer.GpBinaryHelpers.GpReadStringInt = function(data, encoding) {
    return alphaTab.importer.GpBinaryHelpers.GpReadString(
      data,
      alphaTab.io.IOHelper.ReadInt32LE(data),
      encoding
    );
  };
  alphaTab.importer.GpBinaryHelpers.GpReadStringIntByte = function(
    data,
    encoding
  ) {
    var length = alphaTab.io.IOHelper.ReadInt32LE(data) - 1;
    data.ReadByte();
    return alphaTab.importer.GpBinaryHelpers.GpReadString(
      data,
      length,
      encoding
    );
  };
  alphaTab.importer.GpBinaryHelpers.GpReadString = function(
    data,
    length,
    encoding
  ) {
    var this1 = new Uint8Array(length);
    var b = this1;
    data.Read(b, 0, b.length);
    return alphaTab.platform.Platform.ToString(b, encoding);
  };
  alphaTab.importer.GpBinaryHelpers.GpReadStringByteLength = function(
    data,
    length,
    encoding
  ) {
    var stringLength = data.ReadByte();
    var s = alphaTab.importer.GpBinaryHelpers.GpReadString(
      data,
      stringLength,
      encoding
    );
    if (stringLength < length) {
      data.Skip(length - stringLength);
    }
    return s;
  };
  alphaTab.importer.GpifParser = function() {
    this.Score = null;
    this._masterTrackAutomations = null;
    this._tracksMapping = null;
    this._tracksById = null;
    this._masterBars = null;
    this._barsOfMasterBar = null;
    this._barsById = null;
    this._voicesOfBar = null;
    this._voiceById = null;
    this._beatsOfVoice = null;
    this._rhythmOfBeat = null;
    this._beatById = null;
    this._rhythmById = null;
    this._noteById = null;
    this._notesOfBeat = null;
    this._tappedNotes = null;
    this._lyricsByTrack = null;
    this._hasAnacrusis = false;
  };
  alphaTab.importer.GpifParser.__name__ = [
    'alphaTab',
    'importer',
    'GpifParser'
  ];
  alphaTab.importer.GpifParser.prototype = {
    ParseXml: function(xml, settings) {
      var this1 = {};
      this._masterTrackAutomations = this1;
      var this2 = new Array(0);
      this._tracksMapping = this2;
      var this3 = {};
      this._tracksById = this3;
      var this4 = [];
      this._masterBars = this4;
      var this5 = [];
      this._barsOfMasterBar = this5;
      var this6 = {};
      this._voicesOfBar = this6;
      var this7 = {};
      this._barsById = this7;
      var this8 = {};
      this._voiceById = this8;
      var this9 = {};
      this._beatsOfVoice = this9;
      var this10 = {};
      this._beatById = this10;
      var this11 = {};
      this._rhythmOfBeat = this11;
      var this12 = {};
      this._rhythmById = this12;
      var this13 = {};
      this._notesOfBeat = this13;
      var this14 = {};
      this._noteById = this14;
      var this15 = {};
      this._tappedNotes = this15;
      var this16 = {};
      this._lyricsByTrack = this16;
      var dom;
      try {
        dom = new alphaTab.xml.XmlDocument(xml);
      } catch (__e) {
        if (__e instanceof js._Boot.HaxeError) __e = __e.val;
        if (js.Boot.__instanceof(__e, system.Exception)) {
          throw new js._Boot.HaxeError(
            new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException(
              'Unsupported format'
            )
          );
        } else throw __e;
      }
      this.ParseDom(dom);
      this.BuildModel();
      this.Score.Finish(settings);
      var this17 = this._lyricsByTrack;
      if (Object.keys(this17).length > 0) {
        var this18 = this._lyricsByTrack;
        var trackId = $iterator(Object.keys(this18))();
        while (trackId.hasNext()) {
          var trackId1 = trackId.next();
          var track = this._tracksById[trackId1];
          track.ApplyLyrics(this._lyricsByTrack[trackId1]);
        }
      }
    },
    ParseDom: function(dom) {
      var root = dom.DocumentElement;
      if (root == null) {
        return;
      }
      if (root.LocalName == 'GPIF') {
        this.Score = new alphaTab.model.Score();
        var n = $iterator(root.ChildNodes)();
        while (n.hasNext()) {
          var n1 = n.next();
          if (n1.NodeType == 1) {
            var _g = n1.LocalName;
            switch (_g) {
              case 'Bars':
                this.ParseBars(n1);
                break;
              case 'Beats':
                this.ParseBeats(n1);
                break;
              case 'MasterBars':
                this.ParseMasterBarsNode(n1);
                break;
              case 'MasterTrack':
                this.ParseMasterTrackNode(n1);
                break;
              case 'Notes':
                this.ParseNotes(n1);
                break;
              case 'Rhythms':
                this.ParseRhythms(n1);
                break;
              case 'Score':
                this.ParseScoreNode(n1);
                break;
              case 'Tracks':
                this.ParseTracksNode(n1);
                break;
              case 'Voices':
                this.ParseVoices(n1);
                break;
              default:
            }
          }
        }
      } else {
        throw new js._Boot.HaxeError(
          new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException(
            'Unsupported format'
          )
        );
      }
    },
    ParseScoreNode: function(element) {
      var c = $iterator(element.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          switch (_g) {
            case 'Album':
              this.Score.Album = c1.FirstChild.get_InnerText();
              break;
            case 'Artist':
              this.Score.Artist = c1.FirstChild.get_InnerText();
              break;
            case 'Copyright':
              this.Score.Copyright = c1.FirstChild.get_InnerText();
              break;
            case 'Instructions':
              this.Score.Instructions = c1.FirstChild.get_InnerText();
              break;
            case 'Music':
              this.Score.Music = c1.FirstChild.get_InnerText();
              break;
            case 'Notices':
              this.Score.Notices = c1.FirstChild.get_InnerText();
              break;
            case 'SubTitle':
              this.Score.SubTitle = c1.FirstChild.get_InnerText();
              break;
            case 'Tabber':
              this.Score.Tab = c1.FirstChild.get_InnerText();
              break;
            case 'Title':
              this.Score.Title = c1.FirstChild.get_InnerText();
              break;
            case 'Words':
              this.Score.Words = c1.FirstChild.get_InnerText();
              break;
            case 'WordsAndMusic':
              if (
                c1.FirstChild != null &&
                c1.FirstChild.get_InnerText() != ''
              ) {
                var wordsAndMusic = c1.FirstChild.get_InnerText();
                var tmp;
                if (!(wordsAndMusic == null || wordsAndMusic.length == 0)) {
                  var s = this.Score.Words;
                  if (s != null) {
                    tmp = s.length == 0;
                  } else {
                    tmp = true;
                  }
                } else {
                  tmp = false;
                }
                if (tmp) {
                  this.Score.Words = wordsAndMusic;
                }
                var tmp1;
                if (!(wordsAndMusic == null || wordsAndMusic.length == 0)) {
                  var s1 = this.Score.Music;
                  if (s1 != null) {
                    tmp1 = s1.length == 0;
                  } else {
                    tmp1 = true;
                  }
                } else {
                  tmp1 = false;
                }
                if (tmp1) {
                  this.Score.Music = wordsAndMusic;
                }
              }
              break;
            default:
          }
        }
      }
    },
    ParseMasterTrackNode: function(node) {
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          switch (_g) {
            case 'Anacrusis':
              this._hasAnacrusis = true;
              break;
            case 'Automations':
              this.ParseAutomations(c1, this._masterTrackAutomations);
              break;
            case 'Tracks':
              var a = c1.get_InnerText();
              var this1 = system.Convert.ToUInt16(32);
              var this2 = this1;
              this._tracksMapping = system._CsString.CsString_Impl_.Split_CharArray(
                a,
                [this2]
              );
              break;
            default:
          }
        }
      }
    },
    ParseAutomations: function(node, automations) {
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'Automation') {
            this.ParseAutomation(c1, automations);
          }
        }
      }
    },
    ParseAutomation: function(node, automations) {
      var type = null;
      var isLinear = false;
      var barId = null;
      var ratioPosition = 0;
      var value = 0;
      var reference = 0;
      var text = null;
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          switch (_g) {
            case 'Bar':
              barId = c1.get_InnerText();
              break;
            case 'Linear':
              isLinear = c1.get_InnerText().toLowerCase() == 'true';
              break;
            case 'Position':
              var s = c1.get_InnerText();
              ratioPosition = parseFloat(s);
              break;
            case 'Text':
              text = c1.get_InnerText();
              break;
            case 'Type':
              type = c1.get_InnerText();
              break;
            case 'Value':
              var a = c1.get_InnerText();
              var this1 = system.Convert.ToUInt16(32);
              var this2 = this1;
              var parts = system._CsString.CsString_Impl_.Split_CharArray(a, [
                this2
              ]);
              value = parseFloat(parts[0]);
              reference = alphaTab.platform.Platform.ParseInt(parts[1]);
              break;
            default:
          }
        }
      }
      if (type == null) {
        return;
      }
      var automation = null;
      if (type == 'Tempo') {
        automation = alphaTab.model.Automation.BuildTempoAutomation(
          isLinear,
          ratioPosition,
          value,
          reference
        );
      }
      if (automation != null) {
        automation.Text = text;
      }
      if (barId != null) {
        if (!automations.hasOwnProperty(barId)) {
          var this3 = [];
          automations[barId] = this3;
        }
        automations[barId].push(automation);
      }
    },
    ParseTracksNode: function(node) {
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'Track') {
            this.ParseTrack(c1);
          }
        }
      }
    },
    ParseTrack: function(node) {
      var track = new alphaTab.model.Track(1);
      var staff = track.Staves[0];
      staff.ShowStandardNotation = true;
      var trackId = node.GetAttribute('id');
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          switch (_g) {
            case 'Color':
              var a = c1.get_InnerText();
              var this1 = system.Convert.ToUInt16(32);
              var this2 = this1;
              var parts = system._CsString.CsString_Impl_.Split_CharArray(a, [
                this2
              ]);
              if (parts.length >= 3) {
                var r = alphaTab.platform.Platform.ParseInt(parts[0]);
                var g = alphaTab.platform.Platform.ParseInt(parts[1]);
                var b = alphaTab.platform.Platform.ParseInt(parts[2]);
                track.Color = new alphaTab.platform.model.Color(
                  system.Convert.ToUInt8(r),
                  system.Convert.ToUInt8(g),
                  system.Convert.ToUInt8(b),
                  255
                );
              }
              break;
            case 'Instrument':
              var instrumentName = c1.GetAttribute('ref');
              if (
                StringTools.endsWith(instrumentName, '-gs') ||
                StringTools.endsWith(instrumentName, 'GrandStaff')
              ) {
                track.EnsureStaveCount(2);
                track.Staves[1].ShowStandardNotation = true;
              }
              break;
            case 'InstrumentSet':
              this.ParseInstrumentSet(track, c1);
              break;
            case 'Lyrics':
              this.ParseLyrics(trackId, c1);
              break;
            case 'GeneralMidi':
            case 'MidiConnection':
              this.ParseGeneralMidi(track, c1);
              break;
            case 'Name':
              track.Name = c1.get_InnerText();
              break;
            case 'PartSounding':
              this.ParsePartSounding(track, c1);
              break;
            case 'PlaybackState':
              var state = c1.get_InnerText();
              track.PlaybackInfo.IsSolo = state == 'Solo';
              track.PlaybackInfo.IsMute = state == 'Mute';
              break;
            case 'Properties':
              this.ParseTrackProperties(track, c1);
              break;
            case 'ShortName':
              track.ShortName = c1.get_InnerText();
              break;
            case 'Sounds':
              this.ParseSounds(track, c1);
              break;
            case 'Staves':
              this.ParseStaves(track, c1);
              break;
            case 'Transpose':
              this.ParseTranspose(track, c1);
              break;
            default:
          }
        }
      }
      this._tracksById[trackId] = track;
    },
    ParseInstrumentSet: function(track, node) {
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'Type') {
            var _g1 = c1.get_InnerText();
            if (_g1 == 'drumKit') {
              var staff = $iterator(track.Staves)();
              while (staff.hasNext()) {
                var staff1 = staff.next();
                staff1.IsPercussion = true;
              }
            }
            if (c1.get_InnerText() == 'drumKit') {
              var staff2 = $iterator(track.Staves)();
              while (staff2.hasNext()) {
                var staff3 = staff2.next();
                staff3.IsPercussion = true;
              }
            }
          }
        }
      }
    },
    ParseStaves: function(track, node) {
      var staffIndex = 0;
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'Staff') {
            track.EnsureStaveCount(staffIndex + 1);
            var staff = track.Staves[staffIndex];
            this.ParseStaff(staff, c1);
            ++staffIndex;
          }
        }
      }
    },
    ParseStaff: function(staff, node) {
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'Properties') {
            this.ParseStaffProperties(staff, c1);
          }
        }
      }
    },
    ParseStaffProperties: function(staff, node) {
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'Property') {
            this.ParseStaffProperty(staff, c1);
          }
        }
      }
    },
    ParseStaffProperty: function(staff, node) {
      var propertyName = node.GetAttribute('name');
      switch (propertyName) {
        case 'CapoFret':
          var capo = alphaTab.platform.Platform.ParseInt(
            node.FindChildElement('Fret').get_InnerText()
          );
          staff.Capo = capo;
          break;
        case 'ChordCollection':
        case 'DiagramCollection':
          this.ParseDiagramCollection_Staff_XmlNode(staff, node);
          break;
        case 'Tuning':
          var a = node.FindChildElement('Pitches').get_InnerText();
          var this1 = system.Convert.ToUInt16(32);
          var this2 = this1;
          var tuningParts = system._CsString.CsString_Impl_.Split_CharArray(a, [
            this2
          ]);
          var this3 = new Int32Array(tuningParts.length);
          var tuning = this3;
          var i = 0;
          while (i < tuning.length) {
            tuning[tuning.length - 1 - i] = alphaTab.platform.Platform.ParseInt(
              tuningParts[i]
            );
            ++i;
          }
          staff.Tuning = tuning;
          if (!staff.IsPercussion) {
            staff.ShowTablature = true;
          }
          break;
        default:
      }
    },
    ParseLyrics: function(trackId, node) {
      var this1 = [];
      var tracks = this1;
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'Line') {
            tracks.push(this.ParseLyricsLine(c1));
          }
        }
      }
      this._lyricsByTrack[trackId] = tracks;
    },
    ParseLyricsLine: function(node) {
      var lyrics = new alphaTab.model.Lyrics();
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          switch (_g) {
            case 'Offset':
              lyrics.StartBar = alphaTab.platform.Platform.ParseInt(
                c1.get_InnerText()
              );
              break;
            case 'Text':
              lyrics.Text = c1.get_InnerText();
              break;
            default:
          }
        }
      }
      return lyrics;
    },
    ParseDiagramCollection_Track_XmlNode: function(track, node) {
      var items = node.FindChildElement('Items');
      var c = $iterator(items.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'Item') {
            this.ParseDiagramItem_Track_XmlNode(track, c1);
          }
        }
      }
    },
    ParseDiagramCollection_Staff_XmlNode: function(staff, node) {
      var items = node.FindChildElement('Items');
      var c = $iterator(items.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'Item') {
            this.ParseDiagramItem_Staff_XmlNode(staff, c1);
          }
        }
      }
    },
    ParseDiagramItem_Track_XmlNode: function(track, node) {
      var chord = new alphaTab.model.Chord();
      var chordId = node.GetAttribute('id');
      var staff = $iterator(track.Staves)();
      while (staff.hasNext()) {
        var staff1 = staff.next();
        staff1.AddChord(chordId, chord);
      }
      this.ParseDiagramItem_Chord_XmlNode(chord, node);
    },
    ParseDiagramItem_Staff_XmlNode: function(staff, node) {
      var chord = new alphaTab.model.Chord();
      var chordId = node.GetAttribute('id');
      staff.AddChord(chordId, chord);
      this.ParseDiagramItem_Chord_XmlNode(chord, node);
    },
    ParseDiagramItem_Chord_XmlNode: function(chord, node) {
      chord.Name = node.GetAttribute('name');
      var diagram = node.FindChildElement('Diagram');
      var stringCount = alphaTab.platform.Platform.ParseInt(
        diagram.GetAttribute('stringCount')
      );
      var baseFret = alphaTab.platform.Platform.ParseInt(
        diagram.GetAttribute('baseFret')
      );
      chord.FirstFret = baseFret + 1;
      var i = 0;
      while (i < stringCount) {
        chord.Strings.push(-1);
        ++i;
      }
      var c = $iterator(diagram.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          switch (_g) {
            case 'Fingering':
              var this1 = {};
              var existingFingers = this1;
              var p = $iterator(c1.ChildNodes)();
              while (p.hasNext()) {
                var p1 = p.next();
                if (p1.NodeType == 1) {
                  var _g1 = p1.LocalName;
                  if (_g1 == 'Position') {
                    var finger = -2;
                    var fret =
                      baseFret +
                      alphaTab.platform.Platform.ParseInt(
                        p1.GetAttribute('fret')
                      );
                    var _g2 = p1.GetAttribute('finger');
                    switch (_g2) {
                      case 'Index':
                        finger = 1;
                        break;
                      case 'Middle':
                        finger = 2;
                        break;
                      case 'None':
                        break;
                      case 'Pinky':
                        finger = 4;
                        break;
                      case 'Rank':
                        finger = 3;
                        break;
                      case 'Thumb':
                        finger = 0;
                        break;
                      default:
                    }
                    if (finger != -2) {
                      if (existingFingers.hasOwnProperty(finger)) {
                        chord.BarreFrets.push(fret);
                      } else {
                        existingFingers[finger] = true;
                      }
                    }
                  }
                }
              }
              break;
            case 'Fret':
              var guitarString = alphaTab.platform.Platform.ParseInt(
                c1.GetAttribute('string')
              );
              chord.Strings[stringCount - guitarString - 1] =
                baseFret +
                alphaTab.platform.Platform.ParseInt(c1.GetAttribute('fret'));
              break;
            case 'Property':
              var _g3 = c1.GetAttribute('name');
              switch (_g3) {
                case 'ShowDiagram':
                  chord.ShowDiagram = c1.GetAttribute('value') == 'true';
                  break;
                case 'ShowFingering':
                  chord.ShowFingering = c1.GetAttribute('value') == 'true';
                  break;
                case 'ShowName':
                  chord.ShowName = c1.GetAttribute('value') == 'true';
                  break;
                default:
              }
              break;
            default:
          }
        }
      }
    },
    ParseTrackProperties: function(track, node) {
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'Property') {
            this.ParseTrackProperty(track, c1);
          }
        }
      }
    },
    ParseTrackProperty: function(track, node) {
      var propertyName = node.GetAttribute('name');
      switch (propertyName) {
        case 'CapoFret':
          var capo = alphaTab.platform.Platform.ParseInt(
            node.FindChildElement('Fret').get_InnerText()
          );
          var staff = $iterator(track.Staves)();
          while (staff.hasNext()) {
            var staff1 = staff.next();
            staff1.Capo = capo;
          }
          break;
        case 'ChordCollection':
        case 'DiagramCollection':
          this.ParseDiagramCollection_Track_XmlNode(track, node);
          break;
        case 'Tuning':
          var a = node.FindChildElement('Pitches').get_InnerText();
          var this1 = system.Convert.ToUInt16(32);
          var this2 = this1;
          var tuningParts = system._CsString.CsString_Impl_.Split_CharArray(a, [
            this2
          ]);
          var this3 = new Int32Array(tuningParts.length);
          var tuning = this3;
          var i = 0;
          while (i < tuning.length) {
            tuning[tuning.length - 1 - i] = alphaTab.platform.Platform.ParseInt(
              tuningParts[i]
            );
            ++i;
          }
          var staff2 = $iterator(track.Staves)();
          while (staff2.hasNext()) {
            var staff3 = staff2.next();
            staff3.Tuning = tuning;
            staff3.ShowStandardNotation = true;
            staff3.ShowTablature = true;
          }
          break;
        default:
      }
    },
    ParseGeneralMidi: function(track, node) {
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          switch (_g) {
            case 'Port':
              var tmp = c1.get_InnerText();
              track.PlaybackInfo.Port = alphaTab.platform.Platform.ParseInt(
                tmp
              );
              break;
            case 'PrimaryChannel':
              var tmp1 = c1.get_InnerText();
              track.PlaybackInfo.PrimaryChannel = alphaTab.platform.Platform.ParseInt(
                tmp1
              );
              break;
            case 'Program':
              var tmp2 = c1.get_InnerText();
              track.PlaybackInfo.Program = alphaTab.platform.Platform.ParseInt(
                tmp2
              );
              break;
            case 'SecondaryChannel':
              var tmp3 = c1.get_InnerText();
              track.PlaybackInfo.SecondaryChannel = alphaTab.platform.Platform.ParseInt(
                tmp3
              );
              break;
            default:
          }
        }
      }
      var isPercussion = node.GetAttribute('table') == 'Percussion';
      if (isPercussion) {
        var staff = $iterator(track.Staves)();
        while (staff.hasNext()) {
          var staff1 = staff.next();
          staff1.IsPercussion = true;
        }
      }
    },
    ParseSounds: function(track, node) {
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'Sound') {
            this.ParseSound(track, c1);
          }
        }
      }
    },
    ParseSound: function(track, node) {
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'MIDI') {
            this.ParseSoundMidi(track, c1);
          }
        }
      }
    },
    ParseSoundMidi: function(track, node) {
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'Program') {
            var tmp = c1.get_InnerText();
            track.PlaybackInfo.Program = alphaTab.platform.Platform.ParseInt(
              tmp
            );
          }
        }
      }
    },
    ParsePartSounding: function(track, node) {
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'TranspositionPitch') {
            var staff = $iterator(track.Staves)();
            while (staff.hasNext()) {
              var staff1 = staff.next();
              staff1.DisplayTranspositionPitch = alphaTab.platform.Platform.ParseInt(
                c1.get_InnerText()
              );
            }
          }
        }
      }
    },
    ParseTranspose: function(track, node) {
      var octave = 0;
      var chromatic = 0;
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          switch (_g) {
            case 'Chromatic':
              chromatic = alphaTab.platform.Platform.ParseInt(
                c1.get_InnerText()
              );
              break;
            case 'Octave':
              octave = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
              break;
            default:
          }
        }
      }
      var staff = $iterator(track.Staves)();
      while (staff.hasNext()) {
        var staff1 = staff.next();
        staff1.DisplayTranspositionPitch = octave * 12 + chromatic;
      }
    },
    ParseMasterBarsNode: function(node) {
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'MasterBar') {
            this.ParseMasterBar(c1);
          }
        }
      }
    },
    ParseMasterBar: function(node) {
      var masterBar = new alphaTab.model.MasterBar();
      if (this._masterBars.length == 0 && this._hasAnacrusis) {
        masterBar.IsAnacrusis = true;
      }
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          switch (_g) {
            case 'AlternateEndings':
              var a = c1.get_InnerText();
              var this1 = system.Convert.ToUInt16(32);
              var this2 = this1;
              var alternateEndings = system._CsString.CsString_Impl_.Split_CharArray(
                a,
                [this2]
              );
              var i = 0;
              var k = 0;
              while (k < alternateEndings.length) {
                i =
                  i |
                  (1 <<
                    (-1 +
                      alphaTab.platform.Platform.ParseInt(
                        alternateEndings[k]
                      )));
                ++k;
              }
              masterBar.AlternateEndings = system.Convert.ToUInt8(i);
              break;
            case 'Bars':
              var this3 = this._barsOfMasterBar;
              var a1 = c1.get_InnerText();
              var this4 = system.Convert.ToUInt16(32);
              var this5 = this4;
              this3.push(
                system._CsString.CsString_Impl_.Split_CharArray(a1, [this5])
              );
              break;
            case 'DoubleBar':
              masterBar.IsDoubleBar = true;
              break;
            case 'Fermatas':
              this.ParseFermatas(masterBar, c1);
              break;
            case 'Key':
              masterBar.KeySignature = js.Boot.__cast(
                alphaTab.platform.Platform.ParseInt(
                  c1.FindChildElement('AccidentalCount').get_InnerText()
                ),
                Int
              );
              var mode = c1.FindChildElement('Mode');
              if (mode != null) {
                var _g1 = mode.get_InnerText().toLowerCase();
                switch (_g1) {
                  case 'major':
                    masterBar.KeySignatureType = 0;
                    break;
                  case 'minor':
                    masterBar.KeySignatureType = 1;
                    break;
                  default:
                }
              }
              break;
            case 'Repeat':
              if (c1.GetAttribute('start').toLowerCase() == 'true') {
                masterBar.IsRepeatStart = true;
              }
              if (
                c1.GetAttribute('end').toLowerCase() == 'true' &&
                c1.GetAttribute('count') != null
              ) {
                masterBar.RepeatCount = alphaTab.platform.Platform.ParseInt(
                  c1.GetAttribute('count')
                );
              }
              break;
            case 'Section':
              masterBar.Section = new alphaTab.model.Section();
              masterBar.Section.Marker = c1
                .FindChildElement('Letter')
                .get_InnerText();
              masterBar.Section.Text = c1
                .FindChildElement('Text')
                .get_InnerText();
              break;
            case 'Time':
              var a2 = c1.get_InnerText();
              var this6 = system.Convert.ToUInt16(47);
              var this7 = this6;
              var timeParts = system._CsString.CsString_Impl_.Split_CharArray(
                a2,
                [this7]
              );
              masterBar.TimeSignatureNumerator = alphaTab.platform.Platform.ParseInt(
                timeParts[0]
              );
              masterBar.TimeSignatureDenominator = alphaTab.platform.Platform.ParseInt(
                timeParts[1]
              );
              break;
            case 'TripletFeel':
              var _g2 = c1.get_InnerText();
              switch (_g2) {
                case 'Dotted16th':
                  masterBar.TripletFeel = 3;
                  break;
                case 'Dotted8th':
                  masterBar.TripletFeel = 4;
                  break;
                case 'NoTripletFeel':
                  masterBar.TripletFeel = 0;
                  break;
                case 'Scottish16th':
                  masterBar.TripletFeel = 5;
                  break;
                case 'Scottish8th':
                  masterBar.TripletFeel = 6;
                  break;
                case 'Triplet16th':
                  masterBar.TripletFeel = 1;
                  break;
                case 'Triplet8th':
                  masterBar.TripletFeel = 2;
                  break;
                default:
              }
              break;
            default:
          }
        }
      }
      this._masterBars.push(masterBar);
    },
    ParseFermatas: function(masterBar, node) {
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'Fermata') {
            this.ParseFermata(masterBar, c1);
          }
        }
      }
    },
    ParseFermata: function(masterBar, node) {
      var offset = 0;
      var fermata = new alphaTab.model.Fermata();
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          switch (_g) {
            case 'Length':
              var s = c1.get_InnerText();
              fermata.Length = parseFloat(s);
              break;
            case 'Offset':
              var a = c1.get_InnerText();
              var this1 = system.Convert.ToUInt16(47);
              var this2 = this1;
              var parts = system._CsString.CsString_Impl_.Split_CharArray(a, [
                this2
              ]);
              if (parts.length == 2) {
                var this3 = alphaTab.platform.Platform.ParseInt(parts[0]);
                var numerator = this3;
                var this4 = alphaTab.platform.Platform.ParseInt(parts[1]);
                var denominator = this4;
                offset = system.Convert.ToInt32_Single(
                  (numerator / denominator) * 960
                );
              }
              break;
            case 'Type':
              var _g1 = c1.get_InnerText();
              switch (_g1) {
                case 'Long':
                  fermata.Type = 2;
                  break;
                case 'Medium':
                  fermata.Type = 1;
                  break;
                case 'Short':
                  fermata.Type = 0;
                  break;
                default:
              }
              break;
            default:
          }
        }
      }
      masterBar.AddFermata(offset, fermata);
    },
    ParseBars: function(node) {
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'Bar') {
            this.ParseBar(c1);
          }
        }
      }
    },
    ParseBar: function(node) {
      var bar = new alphaTab.model.Bar();
      var barId = node.GetAttribute('id');
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          switch (_g) {
            case 'Clef':
              var _g1 = c1.get_InnerText();
              switch (_g1) {
                case 'C3':
                  bar.Clef = 1;
                  break;
                case 'C4':
                  bar.Clef = 2;
                  break;
                case 'F4':
                  bar.Clef = 3;
                  break;
                case 'G2':
                  bar.Clef = 4;
                  break;
                case 'Neutral':
                  bar.Clef = 0;
                  break;
                default:
              }
              break;
            case 'Ottavia':
              var _g2 = c1.get_InnerText();
              switch (_g2) {
                case '15ma':
                  bar.ClefOttava = 0;
                  break;
                case '15mb':
                  bar.ClefOttava = 4;
                  break;
                case '8va':
                  bar.ClefOttava = 1;
                  break;
                case '8vb':
                  bar.ClefOttava = 3;
                  break;
                default:
              }
              break;
            case 'SimileMark':
              var _g3 = c1.get_InnerText();
              switch (_g3) {
                case 'FirstOfDouble':
                  bar.SimileMark = 2;
                  break;
                case 'SecondOfDouble':
                  bar.SimileMark = 3;
                  break;
                case 'Simple':
                  bar.SimileMark = 1;
                  break;
                default:
              }
              break;
            case 'Voices':
              var this1 = this._voicesOfBar;
              var a = c1.get_InnerText();
              var this2 = system.Convert.ToUInt16(32);
              var this3 = this2;
              this1[barId] = system._CsString.CsString_Impl_.Split_CharArray(
                a,
                [this3]
              );
              break;
            default:
          }
        }
      }
      this._barsById[barId] = bar;
    },
    ParseVoices: function(node) {
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'Voice') {
            this.ParseVoice(c1);
          }
        }
      }
    },
    ParseVoice: function(node) {
      var voice = new alphaTab.model.Voice();
      var voiceId = node.GetAttribute('id');
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'Beats') {
            var this1 = this._beatsOfVoice;
            var a = c1.get_InnerText();
            var this2 = system.Convert.ToUInt16(32);
            var this3 = this2;
            this1[voiceId] = system._CsString.CsString_Impl_.Split_CharArray(
              a,
              [this3]
            );
          }
        }
      }
      this._voiceById[voiceId] = voice;
    },
    ParseBeats: function(node) {
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'Beat') {
            this.ParseBeat(c1);
          }
        }
      }
    },
    ParseBeat: function(node) {
      var beat = new alphaTab.model.Beat();
      var beatId = node.GetAttribute('id');
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          switch (_g) {
            case 'Arpeggio':
              if (c1.get_InnerText() == 'Up') {
                beat.BrushType = 3;
              } else {
                beat.BrushType = 4;
              }
              break;
            case 'Chord':
              beat.ChordId = c1.get_InnerText();
              break;
            case 'Dynamic':
              var _g1 = c1.get_InnerText();
              switch (_g1) {
                case 'F':
                  beat.Dynamic = 5;
                  break;
                case 'FF':
                  beat.Dynamic = 6;
                  break;
                case 'FFF':
                  beat.Dynamic = 7;
                  break;
                case 'MF':
                  beat.Dynamic = 4;
                  break;
                case 'MP':
                  beat.Dynamic = 3;
                  break;
                case 'P':
                  beat.Dynamic = 2;
                  break;
                case 'PP':
                  beat.Dynamic = 1;
                  break;
                case 'PPP':
                  beat.Dynamic = 0;
                  break;
                default:
              }
              break;
            case 'Fadding':
              if (c1.get_InnerText() == 'FadeIn') {
                beat.FadeIn = true;
              }
              break;
            case 'FreeText':
              beat.Text = c1.get_InnerText();
              break;
            case 'GraceNotes':
              var _g2 = c1.get_InnerText();
              switch (_g2) {
                case 'BeforeBeat':
                  beat.GraceType = 2;
                  break;
                case 'OnBeat':
                  beat.GraceType = 1;
                  break;
                default:
              }
              break;
            case 'Hairpin':
              var _g3 = c1.get_InnerText();
              switch (_g3) {
                case 'Crescendo':
                  beat.Crescendo = 1;
                  break;
                case 'Decrescendo':
                  beat.Crescendo = 2;
                  break;
                default:
              }
              break;
            case 'Legato':
              if (c1.GetAttribute('origin') == 'true') {
                beat.IsLegatoOrigin = true;
              }
              break;
            case 'Notes':
              var this1 = this._notesOfBeat;
              var a = c1.get_InnerText();
              var this2 = system.Convert.ToUInt16(32);
              var this3 = this2;
              this1[beatId] = system._CsString.CsString_Impl_.Split_CharArray(
                a,
                [this3]
              );
              break;
            case 'Ottavia':
              var _g4 = c1.get_InnerText();
              switch (_g4) {
                case '15ma':
                  beat.Ottava = 0;
                  break;
                case '15mb':
                  beat.Ottava = 4;
                  break;
                case '8va':
                  beat.Ottava = 1;
                  break;
                case '8vb':
                  beat.Ottava = 3;
                  break;
                default:
              }
              break;
            case 'Properties':
              this.ParseBeatProperties(c1, beat);
              break;
            case 'Rhythm':
              this._rhythmOfBeat[beatId] = c1.GetAttribute('ref');
              break;
            case 'Tremolo':
              var _g5 = c1.get_InnerText();
              switch (_g5) {
                case '1/2':
                  beat.TremoloSpeed = 8;
                  break;
                case '1/4':
                  beat.TremoloSpeed = 16;
                  break;
                case '1/8':
                  beat.TremoloSpeed = 32;
                  break;
                default:
              }
              break;
            case 'Whammy':
              var whammyOrigin = new alphaTab.model.BendPoint(0, 0);
              var s = c1.GetAttribute('originValue');
              var this4 = parseFloat(s);
              whammyOrigin.Value = this.ToBendValue(this4);
              var s1 = c1.GetAttribute('originOffset');
              whammyOrigin.Offset = this.ToBendOffset(parseFloat(s1));
              beat.AddWhammyBarPoint(whammyOrigin);
              var whammyMiddle1 = new alphaTab.model.BendPoint(0, 0);
              var s2 = c1.GetAttribute('middleValue');
              var this5 = parseFloat(s2);
              whammyMiddle1.Value = this.ToBendValue(this5);
              var s3 = c1.GetAttribute('middleOffset1');
              whammyMiddle1.Offset = this.ToBendOffset(parseFloat(s3));
              beat.AddWhammyBarPoint(whammyMiddle1);
              var whammyMiddle2 = new alphaTab.model.BendPoint(0, 0);
              var s4 = c1.GetAttribute('middleValue');
              var this6 = parseFloat(s4);
              whammyMiddle2.Value = this.ToBendValue(this6);
              var s5 = c1.GetAttribute('middleOffset2');
              whammyMiddle2.Offset = this.ToBendOffset(parseFloat(s5));
              beat.AddWhammyBarPoint(whammyMiddle2);
              var whammyDestination = new alphaTab.model.BendPoint(0, 0);
              var s6 = c1.GetAttribute('destinationValue');
              var this7 = parseFloat(s6);
              whammyDestination.Value = this.ToBendValue(this7);
              var s7 = c1.GetAttribute('destinationOffset');
              whammyDestination.Offset = this.ToBendOffset(parseFloat(s7));
              beat.AddWhammyBarPoint(whammyDestination);
              break;
            case 'XProperties':
              this.ParseBeatXProperties(c1, beat);
              break;
            default:
          }
        }
      }
      this._beatById[beatId] = beat;
    },
    ParseBeatXProperties: function(node, beat) {
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'XProperty') {
            var id = c1.GetAttribute('id');
            var val;
            switch (id) {
              case '1124204545':
                val = alphaTab.platform.Platform.ParseInt(
                  c1.FindChildElement('Int').get_InnerText()
                );
                beat.InvertBeamDirection = val == 1;
                break;
              case '687935489':
                val = alphaTab.platform.Platform.ParseInt(
                  c1.FindChildElement('Int').get_InnerText()
                );
                beat.BrushDuration = val;
                break;
              default:
            }
          }
        }
      }
    },
    ParseBeatProperties: function(node, beat) {
      var isWhammy = false;
      var whammyOrigin = null;
      var whammyMiddleValue = null;
      var whammyMiddleOffset1 = null;
      var whammyMiddleOffset2 = null;
      var whammyDestination = null;
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'Property') {
            var name = c1.GetAttribute('name');
            switch (name) {
              case 'Brush':
                if (c1.FindChildElement('Direction').get_InnerText() == 'Up') {
                  beat.BrushType = 1;
                } else {
                  beat.BrushType = 2;
                }
                break;
              case 'PickStroke':
                if (c1.FindChildElement('Direction').get_InnerText() == 'Up') {
                  beat.PickStroke = 1;
                } else {
                  beat.PickStroke = 2;
                }
                break;
              case 'Popped':
                if (c1.FindChildElement('Enable') != null) {
                  beat.Pop = true;
                }
                break;
              case 'Slapped':
                if (c1.FindChildElement('Enable') != null) {
                  beat.Slap = true;
                }
                break;
              case 'VibratoWTremBar':
                var _g1 = c1.FindChildElement('Strength').get_InnerText();
                switch (_g1) {
                  case 'Slight':
                    beat.Vibrato = 1;
                    break;
                  case 'Wide':
                    beat.Vibrato = 2;
                    break;
                  default:
                }
                break;
              case 'WhammyBar':
                isWhammy = true;
                break;
              case 'WhammyBarDestinationOffset':
                if (whammyDestination == null) {
                  whammyDestination = new alphaTab.model.BendPoint(0, 0);
                }
                var s = c1.FindChildElement('Float').get_InnerText();
                whammyDestination.Offset = this.ToBendOffset(parseFloat(s));
                break;
              case 'WhammyBarDestinationValue':
                if (whammyDestination == null) {
                  whammyDestination = new alphaTab.model.BendPoint(60, 0);
                }
                var s1 = c1.FindChildElement('Float').get_InnerText();
                var this1 = parseFloat(s1);
                whammyDestination.Value = this.ToBendValue(this1);
                break;
              case 'WhammyBarExtend':
                break;
              case 'WhammyBarMiddleOffset1':
                var s2 = c1.FindChildElement('Float').get_InnerText();
                whammyMiddleOffset1 = this.ToBendOffset(parseFloat(s2));
                break;
              case 'WhammyBarMiddleOffset2':
                var s3 = c1.FindChildElement('Float').get_InnerText();
                whammyMiddleOffset2 = this.ToBendOffset(parseFloat(s3));
                break;
              case 'WhammyBarMiddleValue':
                var s4 = c1.FindChildElement('Float').get_InnerText();
                var this2 = parseFloat(s4);
                whammyMiddleValue = this.ToBendValue(this2);
                break;
              case 'WhammyBarOriginOffset':
                if (whammyOrigin == null) {
                  whammyOrigin = new alphaTab.model.BendPoint(0, 0);
                }
                var s5 = c1.FindChildElement('Float').get_InnerText();
                whammyOrigin.Offset = this.ToBendOffset(parseFloat(s5));
                break;
              case 'WhammyBarOriginValue':
                if (whammyOrigin == null) {
                  whammyOrigin = new alphaTab.model.BendPoint(0, 0);
                }
                var s6 = c1.FindChildElement('Float').get_InnerText();
                var this3 = parseFloat(s6);
                whammyOrigin.Value = this.ToBendValue(this3);
                break;
              default:
            }
          }
        }
      }
      if (isWhammy) {
        if (whammyOrigin == null) {
          whammyOrigin = new alphaTab.model.BendPoint(0, 0);
        }
        if (whammyDestination == null) {
          whammyDestination = new alphaTab.model.BendPoint(60, 0);
        }
        beat.AddWhammyBarPoint(whammyOrigin);
        if (whammyMiddleOffset1 != null && whammyMiddleValue != null) {
          beat.AddWhammyBarPoint(
            new alphaTab.model.BendPoint(whammyMiddleOffset1, whammyMiddleValue)
          );
        }
        if (whammyMiddleOffset2 != null && whammyMiddleValue != null) {
          beat.AddWhammyBarPoint(
            new alphaTab.model.BendPoint(whammyMiddleOffset2, whammyMiddleValue)
          );
        }
        if (
          whammyMiddleOffset1 == null &&
          whammyMiddleOffset2 == null &&
          whammyMiddleValue != null
        ) {
          beat.AddWhammyBarPoint(
            new alphaTab.model.BendPoint((60 / 2) | 0, whammyMiddleValue)
          );
        }
        beat.AddWhammyBarPoint(whammyDestination);
      }
    },
    ParseNotes: function(node) {
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'Note') {
            this.ParseNote(c1);
          }
        }
      }
    },
    ParseNote: function(node) {
      var note = new alphaTab.model.Note();
      var noteId = node.GetAttribute('id');
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          switch (_g) {
            case 'Accent':
              var accentFlags = alphaTab.platform.Platform.ParseInt(
                c1.get_InnerText()
              );
              if ((accentFlags & 1) != 0) {
                note.IsStaccato = true;
              }
              if ((accentFlags & 4) != 0) {
                note.Accentuated = 2;
              }
              if ((accentFlags & 8) != 0) {
                note.Accentuated = 1;
              }
              break;
            case 'AntiAccent':
              if (c1.get_InnerText().toLowerCase() == 'normal') {
                note.IsGhost = true;
              }
              break;
            case 'LeftFingering':
              note.IsFingering = true;
              var _g1 = c1.get_InnerText();
              switch (_g1) {
                case 'A':
                  note.LeftHandFinger = 3;
                  break;
                case 'C':
                  note.LeftHandFinger = 4;
                  break;
                case 'I':
                  note.LeftHandFinger = 1;
                  break;
                case 'M':
                  note.LeftHandFinger = 2;
                  break;
                case 'P':
                  note.LeftHandFinger = 0;
                  break;
                default:
              }
              break;
            case 'LetRing':
              note.IsLetRing = true;
              break;
            case 'Properties':
              this.ParseNoteProperties(c1, note, noteId);
              break;
            case 'RightFingering':
              note.IsFingering = true;
              var _g2 = c1.get_InnerText();
              switch (_g2) {
                case 'A':
                  note.RightHandFinger = 3;
                  break;
                case 'C':
                  note.RightHandFinger = 4;
                  break;
                case 'I':
                  note.RightHandFinger = 1;
                  break;
                case 'M':
                  note.RightHandFinger = 2;
                  break;
                case 'P':
                  note.RightHandFinger = 0;
                  break;
                default:
              }
              break;
            case 'Tie':
              if (c1.GetAttribute('destination').toLowerCase() == 'true') {
                note.IsTieDestination = true;
              }
              break;
            case 'Trill':
              note.TrillValue = alphaTab.platform.Platform.ParseInt(
                c1.get_InnerText()
              );
              note.TrillSpeed = 16;
              break;
            case 'Vibrato':
              var _g3 = c1.get_InnerText();
              switch (_g3) {
                case 'Slight':
                  note.Vibrato = 1;
                  break;
                case 'Wide':
                  note.Vibrato = 2;
                  break;
                default:
              }
              break;
            default:
          }
        }
      }
      this._noteById[noteId] = note;
    },
    ParseNoteProperties: function(node, note, noteId) {
      var isBended = false;
      var bendOrigin = null;
      var bendMiddleValue = null;
      var bendMiddleOffset1 = null;
      var bendMiddleOffset2 = null;
      var bendDestination = null;
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'Property') {
            var name = c1.GetAttribute('name');
            switch (name) {
              case 'BendDestinationOffset':
                if (bendDestination == null) {
                  bendDestination = new alphaTab.model.BendPoint(0, 0);
                }
                var s = c1.FindChildElement('Float').get_InnerText();
                bendDestination.Offset = this.ToBendOffset(parseFloat(s));
                break;
              case 'BendDestinationValue':
                if (bendDestination == null) {
                  bendDestination = new alphaTab.model.BendPoint(60, 0);
                }
                var s1 = c1.FindChildElement('Float').get_InnerText();
                var this1 = parseFloat(s1);
                bendDestination.Value = this.ToBendValue(this1);
                break;
              case 'BendMiddleOffset1':
                var s2 = c1.FindChildElement('Float').get_InnerText();
                bendMiddleOffset1 = this.ToBendOffset(parseFloat(s2));
                break;
              case 'BendMiddleOffset2':
                var s3 = c1.FindChildElement('Float').get_InnerText();
                bendMiddleOffset2 = this.ToBendOffset(parseFloat(s3));
                break;
              case 'BendMiddleValue':
                var s4 = c1.FindChildElement('Float').get_InnerText();
                var this2 = parseFloat(s4);
                bendMiddleValue = this.ToBendValue(this2);
                break;
              case 'BendOriginOffset':
                if (bendOrigin == null) {
                  bendOrigin = new alphaTab.model.BendPoint(0, 0);
                }
                var s5 = c1.FindChildElement('Float').get_InnerText();
                bendOrigin.Offset = this.ToBendOffset(parseFloat(s5));
                break;
              case 'BendOriginValue':
                if (bendOrigin == null) {
                  bendOrigin = new alphaTab.model.BendPoint(0, 0);
                }
                var s6 = c1.FindChildElement('Float').get_InnerText();
                var this3 = parseFloat(s6);
                bendOrigin.Value = this.ToBendValue(this3);
                break;
              case 'Bended':
                isBended = true;
                break;
              case 'Element':
                note.Element = alphaTab.platform.Platform.ParseInt(
                  c1.FindChildElement('Element').get_InnerText()
                );
                break;
              case 'Fret':
                note.Fret = alphaTab.platform.Platform.ParseInt(
                  c1.FindChildElement('Fret').get_InnerText()
                );
                break;
              case 'HarmonicFret':
                var hfret = c1.FindChildElement('HFret');
                if (hfret != null) {
                  var s7 = hfret.get_InnerText();
                  note.HarmonicValue = parseFloat(s7);
                }
                break;
              case 'HarmonicType':
                var htype = c1.FindChildElement('HType');
                if (htype != null) {
                  var _g1 = htype.get_InnerText();
                  switch (_g1) {
                    case 'Artificial':
                      note.HarmonicType = 2;
                      break;
                    case 'Feedback':
                      note.HarmonicType = 6;
                      break;
                    case 'Natural':
                      note.HarmonicType = 1;
                      break;
                    case 'NoHarmonic':
                      note.HarmonicType = 0;
                      break;
                    case 'Pinch':
                      note.HarmonicType = 3;
                      break;
                    case 'Semi':
                      note.HarmonicType = 5;
                      break;
                    case 'Tap':
                      note.HarmonicType = 4;
                      break;
                    default:
                  }
                }
                break;
              case 'HopoDestination':
                break;
              case 'HopoOrigin':
                if (c1.FindChildElement('Enable') != null) {
                  note.IsHammerPullOrigin = true;
                }
                break;
              case 'Muted':
                if (c1.FindChildElement('Enable') != null) {
                  note.IsDead = true;
                }
                break;
              case 'Octave':
                note.Octave = alphaTab.platform.Platform.ParseInt(
                  c1.FindChildElement('Number').get_InnerText()
                );
                break;
              case 'PalmMuted':
                if (c1.FindChildElement('Enable') != null) {
                  note.IsPalmMute = true;
                }
                break;
              case 'Slide':
                var slideFlags = alphaTab.platform.Platform.ParseInt(
                  c1.FindChildElement('Flags').get_InnerText()
                );
                if ((slideFlags & 1) != 0) {
                  note.SlideType = 1;
                }
                if ((slideFlags & 2) != 0) {
                  note.SlideType = 2;
                }
                if ((slideFlags & 4) != 0) {
                  note.SlideType = 6;
                }
                if ((slideFlags & 8) != 0) {
                  note.SlideType = 5;
                }
                if ((slideFlags & 16) != 0) {
                  note.SlideType = 3;
                }
                if ((slideFlags & 32) != 0) {
                  note.SlideType = 4;
                }
                if ((slideFlags & 64) != 0) {
                  note.SlideType = 7;
                }
                if ((slideFlags & 128) != 0) {
                  note.SlideType = 8;
                }
                break;
              case 'String':
                note.String =
                  alphaTab.platform.Platform.ParseInt(
                    c1.FindChildElement('String').get_InnerText()
                  ) + 1;
                break;
              case 'Tapped':
                this._tappedNotes[noteId] = true;
                break;
              case 'Tone':
                note.Tone = alphaTab.platform.Platform.ParseInt(
                  c1.FindChildElement('Step').get_InnerText()
                );
                break;
              case 'Variation':
                note.Variation = alphaTab.platform.Platform.ParseInt(
                  c1.FindChildElement('Variation').get_InnerText()
                );
                break;
              default:
            }
          }
        }
      }
      if (isBended) {
        if (bendOrigin == null) {
          bendOrigin = new alphaTab.model.BendPoint(0, 0);
        }
        if (bendDestination == null) {
          bendDestination = new alphaTab.model.BendPoint(60, 0);
        }
        note.AddBendPoint(bendOrigin);
        if (bendMiddleOffset1 != null && bendMiddleValue != null) {
          note.AddBendPoint(
            new alphaTab.model.BendPoint(bendMiddleOffset1, bendMiddleValue)
          );
        }
        if (bendMiddleOffset2 != null && bendMiddleValue != null) {
          note.AddBendPoint(
            new alphaTab.model.BendPoint(bendMiddleOffset2, bendMiddleValue)
          );
        }
        if (
          bendMiddleOffset1 == null &&
          bendMiddleOffset2 == null &&
          bendMiddleValue != null
        ) {
          note.AddBendPoint(
            new alphaTab.model.BendPoint((60 / 2) | 0, bendMiddleValue)
          );
        }
        note.AddBendPoint(bendDestination);
      }
    },
    ToBendValue: function(gpxValue) {
      return system.Convert.ToInt32_Double(gpxValue * 0.04);
    },
    ToBendOffset: function(gpxOffset) {
      var converted = gpxOffset * 0.6;
      return system.Convert.ToInt32_Single(converted);
    },
    ParseRhythms: function(node) {
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          if (_g == 'Rhythm') {
            this.ParseRhythm(c1);
          }
        }
      }
    },
    ParseRhythm: function(node) {
      var rhythm = new alphaTab.importer.GpifRhythm();
      var rhythmId = node.GetAttribute('id');
      var c = $iterator(node.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1.NodeType == 1) {
          var _g = c1.LocalName;
          switch (_g) {
            case 'AugmentationDot':
              rhythm.Dots = alphaTab.platform.Platform.ParseInt(
                c1.GetAttribute('count')
              );
              break;
            case 'NoteValue':
              var _g1 = c1.get_InnerText();
              switch (_g1) {
                case '128th':
                  rhythm.Value = 128;
                  break;
                case '16th':
                  rhythm.Value = 16;
                  break;
                case '256th':
                  rhythm.Value = 256;
                  break;
                case '32nd':
                  rhythm.Value = 32;
                  break;
                case '64th':
                  rhythm.Value = 64;
                  break;
                case 'DoubleWhole':
                  rhythm.Value = -2;
                  break;
                case 'Eighth':
                  rhythm.Value = 8;
                  break;
                case 'Half':
                  rhythm.Value = 2;
                  break;
                case 'Long':
                  rhythm.Value = -4;
                  break;
                case 'Quarter':
                  rhythm.Value = 4;
                  break;
                case 'Whole':
                  rhythm.Value = 1;
                  break;
                default:
              }
              break;
            case 'PrimaryTuplet':
              rhythm.TupletNumerator = alphaTab.platform.Platform.ParseInt(
                c1.GetAttribute('num')
              );
              rhythm.TupletDenominator = alphaTab.platform.Platform.ParseInt(
                c1.GetAttribute('den')
              );
              break;
            default:
          }
        }
      }
      this._rhythmById[rhythmId] = rhythm;
    },
    BuildModel: function() {
      var i = 0;
      var j = this._masterBars.length;
      while (i < j) {
        var masterBar = this._masterBars[i];
        this.Score.AddMasterBar(masterBar);
        ++i;
      }
      var trackId = HxOverrides.iter(this._tracksMapping);
      while (trackId.hasNext()) {
        var trackId1 = trackId.next();
        if (trackId1 == null || trackId1.length == 0) {
          continue;
        }
        var track = this._tracksById[trackId1];
        this.Score.AddTrack(track);
      }
      var barIds = $iterator(this._barsOfMasterBar)();
      while (barIds.hasNext()) {
        var barIds1 = barIds.next();
        var staffIndex = 0;
        var barIndex = 0;
        var trackIndex = 0;
        while (
          barIndex < barIds1.length &&
          trackIndex < this.Score.Tracks.length
        ) {
          var barId = barIds1[barIndex];
          if (barId != '-1') {
            var bar = this._barsById[barId];
            var track1 = this.Score.Tracks[trackIndex];
            var staff = track1.Staves[staffIndex];
            staff.AddBar(bar);
            if (this._voicesOfBar.hasOwnProperty(barId)) {
              var voiceId = HxOverrides.iter(this._voicesOfBar[barId]);
              while (voiceId.hasNext()) {
                var voiceId1 = voiceId.next();
                if (voiceId1 != '-1') {
                  var voice = this._voiceById[voiceId1];
                  bar.AddVoice(voice);
                  if (this._beatsOfVoice.hasOwnProperty(voiceId1)) {
                    var beatId = HxOverrides.iter(this._beatsOfVoice[voiceId1]);
                    while (beatId.hasNext()) {
                      var beatId1 = beatId.next();
                      if (beatId1 != '-1') {
                        var beat = this._beatById[beatId1].Clone();
                        voice.AddBeat(beat);
                        var rhythmId = this._rhythmOfBeat[beatId1];
                        var rhythm = this._rhythmById[rhythmId];
                        beat.Duration = rhythm.Value;
                        beat.Dots = rhythm.Dots;
                        beat.TupletNumerator = rhythm.TupletNumerator;
                        beat.TupletDenominator = rhythm.TupletDenominator;
                        if (this._notesOfBeat.hasOwnProperty(beatId1)) {
                          var noteId = HxOverrides.iter(
                            this._notesOfBeat[beatId1]
                          );
                          while (noteId.hasNext()) {
                            var noteId1 = noteId.next();
                            if (noteId1 != '-1') {
                              beat.AddNote(this._noteById[noteId1].Clone());
                              if (this._tappedNotes.hasOwnProperty(noteId1)) {
                                beat.Tap = true;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  var voice1 = new alphaTab.model.Voice();
                  bar.AddVoice(voice1);
                  var beat1 = new alphaTab.model.Beat();
                  beat1.IsEmpty = true;
                  beat1.Duration = 4;
                  voice1.AddBeat(beat1);
                }
              }
            }
            if (staffIndex == track1.Staves.length - 1) {
              ++trackIndex;
              staffIndex = 0;
            } else {
              ++staffIndex;
            }
          } else {
            ++trackIndex;
          }
          ++barIndex;
        }
      }
      var this1 = this._masterTrackAutomations;
      var barIndex1 = $iterator(Object.keys(this1))();
      while (barIndex1.hasNext()) {
        var barIndex2 = barIndex1.next();
        var automations = this._masterTrackAutomations[barIndex2];
        var masterBar1 = this.Score.MasterBars[
          alphaTab.platform.Platform.ParseInt(barIndex2)
        ];
        var i1 = 0;
        var j1 = automations.length;
        while (i1 < j1) {
          var automation = automations[i1];
          if (automation.Type == 0) {
            if (barIndex2 == '0') {
              var tmp = system.Convert.ToInt32_Single(automation.Value);
              this.Score.Tempo = tmp;
              if (automation.Text != null) {
                this.Score.TempoLabel = automation.Text;
              }
            }
            masterBar1.TempoAutomation = automation;
          }
          ++i1;
        }
      }
    },
    __class__: alphaTab.importer.GpifParser
  };
  alphaTab.importer.GpifRhythm = function() {
    this.Dots = 0;
    this.TupletDenominator = 0;
    this.TupletNumerator = 0;
    this.Value = -4;
    this.TupletDenominator = -1;
    this.TupletNumerator = -1;
    this.Value = 4;
  };
  alphaTab.importer.GpifRhythm.__name__ = [
    'alphaTab',
    'importer',
    'GpifRhythm'
  ];
  alphaTab.importer.GpifRhythm.prototype = {
    __class__: alphaTab.importer.GpifRhythm
  };
  alphaTab.importer.GpxFile = function() {
    this.FileName = null;
    this.FileSize = 0;
    this.Data = null;
  };
  alphaTab.importer.GpxFile.__name__ = ['alphaTab', 'importer', 'GpxFile'];
  alphaTab.importer.GpxFile.prototype = {
    __class__: alphaTab.importer.GpxFile
  };
  alphaTab.importer.GpxFileSystem = function() {
    this.FileFilter = null;
    this.Files = null;
    var this1 = [];
    this.Files = this1;
    this.FileFilter = function(s) {
      return true;
    };
  };
  alphaTab.importer.GpxFileSystem.__name__ = [
    'alphaTab',
    'importer',
    'GpxFileSystem'
  ];
  alphaTab.importer.GpxFileSystem.prototype = {
    Load: function(s) {
      var src = new alphaTab.io.BitReader(s);
      this.ReadBlock(src);
    },
    ReadHeader: function(src) {
      return this.GetString(src.ReadBytes(4), 0, 4);
    },
    Decompress: function(src, skipHeader) {
      if (skipHeader == null) {
        skipHeader = false;
      }
      var uncompressed = alphaTab.io.ByteBuffer.Empty();
      var buffer;
      var expectedLength = this.GetInteger(src.ReadBytes(4), 0);
      try {
        while (uncompressed.get_Length() < expectedLength) {
          var flag = src.ReadBits(1);
          if (flag == 1) {
            var wordSize = src.ReadBits(4);
            var offset = src.ReadBitsReversed(wordSize);
            var size = src.ReadBitsReversed(wordSize);
            var sourcePosition = uncompressed.get_Length() - offset;
            var toRead = Math.min(offset, size);
            buffer = uncompressed.GetBuffer();
            uncompressed.Write(buffer, sourcePosition, toRead);
          } else {
            var size1 = src.ReadBitsReversed(2);
            var i = 0;
            while (i < size1) {
              uncompressed.WriteByte(system.Convert.ToUInt8(src.ReadByte()));
              ++i;
            }
          }
        }
      } catch (__e) {
        if (__e instanceof js._Boot.HaxeError) __e = __e.val;
        if (js.Boot.__instanceof(__e, alphaTab.io.EndOfReaderException)) {
        } else throw __e;
      }
      buffer = uncompressed.GetBuffer();
      var resultOffset = skipHeader ? 4 : 0;
      var resultSize = uncompressed.get_Length() - resultOffset;
      var this1 = new Uint8Array(resultSize);
      var result = this1;
      result.set(buffer.subarray(resultOffset, resultOffset + resultSize), 0);
      return result;
    },
    ReadBlock: function(data) {
      var header = this.ReadHeader(data);
      if (header == 'BCFZ') {
        this.ReadUncompressedBlock(this.Decompress(data, true));
      } else if (header == 'BCFS') {
        this.ReadUncompressedBlock(data.ReadAll());
      } else {
        throw new js._Boot.HaxeError(
          new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException(
            'Unsupported format'
          )
        );
      }
    },
    ReadUncompressedBlock: function(data) {
      var sectorSize = 4096;
      var offset = sectorSize;
      while (offset + 3 < data.length) {
        var entryType = this.GetInteger(data, offset);
        if (entryType == 2) {
          var file = new alphaTab.importer.GpxFile();
          file.FileName = this.GetString(data, offset + 4, 127);
          file.FileSize = this.GetInteger(data, offset + 140);
          var storeFile =
            this.FileFilter == null || this.FileFilter(file.FileName);
          if (storeFile) {
            this.Files.push(file);
          }
          var dataPointerOffset = offset + 148;
          var sector = 0;
          var sectorCount = 0;
          var fileData = storeFile
            ? alphaTab.io.ByteBuffer.WithCapactiy(file.FileSize)
            : null;
          while (true) {
            sector = this.GetInteger(
              data,
              dataPointerOffset + 4 * sectorCount++
            );
            if (!(sector != 0)) {
              break;
            }
            offset = sector * sectorSize;
            if (storeFile) {
              fileData.Write(data, offset, sectorSize);
            }
          }
          if (storeFile) {
            var this1 = new Uint8Array(
              Math.min(file.FileSize, fileData.get_Length())
            );
            file.Data = this1;
            var raw = fileData.ToArray();
            var dst = file.Data;
            var count = file.Data.length;
            dst.set(raw.subarray(0, 0 + count), 0);
          }
        }
        offset = offset + sectorSize;
      }
    },
    GetString: function(data, offset, length) {
      var this1 = '';
      var buf = this1;
      var i = 0;
      while (i < length) {
        var code = data[offset + i] & 255;
        if (code == 0) {
          break;
        }
        buf += String.fromCharCode(code);
        ++i;
      }
      return buf;
    },
    GetInteger: function(data, offset) {
      var this1 = data[offset];
      return (
        (data[offset + 3] << 24) |
        (data[offset + 2] << 16) |
        (data[offset + 1] << 8) |
        this1
      );
    },
    __class__: alphaTab.importer.GpxFileSystem
  };
  alphaTab.importer.GpxImporter = function() {
    alphaTab.importer.ScoreImporter.call(this);
  };
  alphaTab.importer.GpxImporter.__name__ = [
    'alphaTab',
    'importer',
    'GpxImporter'
  ];
  alphaTab.importer.GpxImporter.__super__ = alphaTab.importer.ScoreImporter;
  alphaTab.importer.GpxImporter.prototype = $extend(
    alphaTab.importer.ScoreImporter.prototype,
    {
      get_Name: function() {
        return 'Guitar Pro 6';
      },
      ReadScore: function() {
        alphaTab.util.Logger.Info(
          this.get_Name(),
          'Loading GPX filesystem',
          null
        );
        var fileSystem = new alphaTab.importer.GpxFileSystem();
        fileSystem.FileFilter = function(s) {
          if (
            !(
              StringTools.endsWith(s, 'score.gpif') ||
              StringTools.endsWith(s, 'BinaryStylesheet')
            )
          ) {
            return StringTools.endsWith(s, 'PartConfiguration');
          } else {
            return true;
          }
        };
        fileSystem.Load(this.Data);
        alphaTab.util.Logger.Info(
          this.get_Name(),
          'GPX filesystem loaded',
          null
        );
        var xml = null;
        var binaryStylesheet = null;
        var partConfiguration = null;
        var entry = $iterator(fileSystem.Files)();
        while (entry.hasNext()) {
          var entry1 = entry.next();
          var _g = entry1.FileName;
          switch (_g) {
            case 'BinaryStylesheet':
              binaryStylesheet = entry1.Data;
              break;
            case 'PartConfiguration':
              partConfiguration = entry1.Data;
              break;
            case 'score.gpif':
              xml = alphaTab.platform.Platform.ToString(
                entry1.Data,
                this.GetSetting('encoding', 'utf-8')
              );
              break;
            default:
          }
        }
        fileSystem.Files = null;
        fileSystem = null;
        alphaTab.util.Logger.Info(
          this.get_Name(),
          'Start Parsing score.gpif',
          null
        );
        var gpifParser = new alphaTab.importer.GpifParser();
        gpifParser.ParseXml(xml, this.Settings);
        alphaTab.util.Logger.Info(this.get_Name(), 'score.gpif parsed', null);
        var score = gpifParser.Score;
        if (binaryStylesheet != null) {
          alphaTab.util.Logger.Info(
            this.get_Name(),
            'Start Parsing BinaryStylesheet',
            null
          );
          var stylesheetParser = new alphaTab.importer.BinaryStylesheetParser();
          stylesheetParser.Parse(binaryStylesheet);
          if (stylesheetParser.Stylesheet != null) {
            stylesheetParser.Stylesheet.Apply(score);
          }
          alphaTab.util.Logger.Info(
            this.get_Name(),
            'BinaryStylesheet parsed',
            null
          );
        }
        if (partConfiguration != null) {
          alphaTab.util.Logger.Info(
            this.get_Name(),
            'Start Parsing Part Configuration',
            null
          );
          var partConfigurationParser = new alphaTab.importer.PartConfigurationParser();
          partConfigurationParser.Parse(partConfiguration);
          if (partConfigurationParser.Configuration != null) {
            partConfigurationParser.Configuration.Apply(score);
          }
          alphaTab.util.Logger.Info(
            this.get_Name(),
            'Part Configuration parsed',
            null
          );
        }
        return score;
      },
      __class__: alphaTab.importer.GpxImporter
    }
  );
  alphaTab.importer.MixTableChange = function() {
    this.Volume = 0;
    this.Balance = 0;
    this.Instrument = 0;
    this.TempoName = null;
    this.Tempo = 0;
    this.Duration = 0;
    this.Volume = -1;
    this.Balance = -1;
    this.Instrument = -1;
    this.TempoName = null;
    this.Tempo = -1;
    this.Duration = 0;
  };
  alphaTab.importer.MixTableChange.__name__ = [
    'alphaTab',
    'importer',
    'MixTableChange'
  ];
  alphaTab.importer.MixTableChange.prototype = {
    __class__: alphaTab.importer.MixTableChange
  };
  alphaTab.importer.MusicXmlImporter = function() {
    var this1 = {};
    this._voiceOfStaff = this1;
    alphaTab.importer.ScoreImporter.call(this);
  };
  alphaTab.importer.MusicXmlImporter.__name__ = [
    'alphaTab',
    'importer',
    'MusicXmlImporter'
  ];
  alphaTab.importer.MusicXmlImporter.__super__ =
    alphaTab.importer.ScoreImporter;
  alphaTab.importer.MusicXmlImporter.prototype = $extend(
    alphaTab.importer.ScoreImporter.prototype,
    {
      get_Name: function() {
        return 'MusicXML';
      },
      ReadScore: function() {
        var this1 = {};
        this._trackById = this1;
        var this2 = {};
        this._partGroups = this2;
        var this3 = [];
        this._tieStarts = this3;
        var this4 = {};
        this._tieStartIds = this4;
        var this5 = {};
        this._slurStarts = this5;
        var xml = alphaTab.platform.Platform.ToString(
          this.Data.ReadAll(),
          this.GetSetting('encoding', 'utf-8')
        );
        var dom;
        try {
          dom = new alphaTab.xml.XmlDocument(xml);
        } catch (__e) {
          if (__e instanceof js._Boot.HaxeError) __e = __e.val;
          if (js.Boot.__instanceof(__e, system.Exception)) {
            throw new js._Boot.HaxeError(
              new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException(
                'Unsupported format'
              )
            );
          } else throw __e;
        }
        this._score = new alphaTab.model.Score();
        this._score.Tempo = 120;
        this.ParseDom(dom);
        if (this.GetSetting('musicXMLMergePartGroups', false)) {
          this.MergePartGroups();
        }
        this._score.Finish(this.Settings);
        this._score.RebuildRepeatGroups();
        return this._score;
      },
      MergePartGroups: function() {
        var anyMerged = false;
        var this1 = this._partGroups;
        var groupId = $iterator(Object.keys(this1))();
        while (groupId.hasNext()) {
          var groupId1 = groupId.next();
          var tracks = this._partGroups[groupId1];
          if (tracks.length > 1) {
            this.MergeGroup(tracks);
            anyMerged = true;
          }
        }
        if (anyMerged) {
          var i = 0;
          while (i < this._score.Tracks.length) {
            this._score.Tracks[i].Index = i;
            ++i;
          }
        }
      },
      MergeGroup: function(partGroup) {
        var primaryTrack = partGroup[0];
        var i = 1;
        while (i < partGroup.length) {
          var secondaryTrack = partGroup[i];
          var staff = $iterator(secondaryTrack.Staves)();
          while (staff.hasNext()) {
            var staff1 = staff.next();
            primaryTrack.AddStaff(staff1);
          }
          var trackIndex = this._score.Tracks.indexOf(secondaryTrack);
          if (trackIndex != -1) {
            this._score.Tracks.splice(trackIndex, 1);
          }
          ++i;
        }
      },
      ParseDom: function(dom) {
        var root = dom.DocumentElement;
        if (root == null) {
          throw new js._Boot.HaxeError(
            new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException(
              'Unsupported format'
            )
          );
        }
        var _g = root.LocalName;
        switch (_g) {
          case 'score-partwise':
            this.ParsePartwise(root);
            break;
          case 'score-timewise':
            break;
          default:
            throw new js._Boot.HaxeError(
              new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException(
                'Unsupported format'
              )
            );
        }
      },
      ParsePartwise: function(element) {
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'identification':
                this.ParseIdentification(c1);
                break;
              case 'movement-title':
                this._score.Title = c1.get_InnerText();
                break;
              case 'part':
                this.ParsePart(c1);
                break;
              case 'part-list':
                this.ParsePartList(c1);
                break;
              case 'work':
                this.ParseWork(c1);
                break;
              default:
            }
          }
        }
      },
      ParseWork: function(element) {
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            if (_g == 'work-title') {
              this._score.Title = c1.get_InnerText();
            }
          }
        }
      },
      ParsePart: function(element) {
        var id = element.GetAttribute('id');
        if (!this._trackById.hasOwnProperty(id)) {
          var this1 = this._trackById;
          if (Object.keys(this1).length == 1) {
            var this2 = this._trackById;
            var key = $iterator(Object.keys(this2))();
            while (key.hasNext()) {
              var key1 = key.next();
              var t = this._trackById[key1];
              if (t.Staves.length == 0 || t.Staves[0].Bars.length == 0) {
                id = key1;
              }
            }
            if (!this._trackById.hasOwnProperty(id)) {
              return;
            }
          } else {
            return;
          }
        }
        var track = this._trackById[id];
        var isFirstMeasure = true;
        this._maxVoices = 0;
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            if (_g == 'measure') {
              if (this.ParseMeasure(c1, track, isFirstMeasure)) {
                isFirstMeasure = false;
              }
            }
          }
        }
        var staff = $iterator(track.Staves)();
        while (staff.hasNext()) {
          var staff1 = staff.next();
          var bar = $iterator(staff1.Bars)();
          while (bar.hasNext()) {
            var bar1 = bar.next();
            this.EnsureVoices(bar1);
          }
        }
      },
      ParseMeasure: function(element, track, isFirstMeasure) {
        if (
          element.GetAttribute('implicit') == 'yes' &&
          element.GetElementsByTagName('note', false).length == 0
        ) {
          return false;
        }
        var barIndex = 0;
        var barWidth = alphaTab.platform.Platform.ParseInt(
          element.GetAttribute('width')
        );
        if (barWidth == -2147483648) {
          barWidth = 0;
        }
        if (isFirstMeasure) {
          this._divisionsPerQuarterNote = 0;
          this._trackFirstMeasureNumber = alphaTab.platform.Platform.ParseInt(
            element.GetAttribute('number')
          );
          if (this._trackFirstMeasureNumber == -2147483648) {
            this._trackFirstMeasureNumber = 0;
          }
          barIndex = 0;
        } else {
          barIndex = alphaTab.platform.Platform.ParseInt(
            element.GetAttribute('number')
          );
          if (barIndex == -2147483648) {
            return false;
          }
          barIndex = barIndex - this._trackFirstMeasureNumber;
        }
        if (isFirstMeasure) {
          var attributes = element.GetElementsByTagName('attributes', false);
          if (attributes.length > 0) {
            var stavesElements = attributes[0].GetElementsByTagName(
              'staves',
              false
            );
            if (stavesElements.length > 0) {
              var staves = alphaTab.platform.Platform.ParseInt(
                stavesElements[0].get_InnerText()
              );
              track.EnsureStaveCount(staves);
            }
          }
        }
        var size = track.Staves.length;
        var this1 = new Array(size);
        var bars = this1;
        var masterBar = null;
        var b = track.Staves[0].Bars.length;
        while (b <= barIndex) {
          var s = 0;
          while (s < track.Staves.length) {
            var bar = (bars[s] = new alphaTab.model.Bar());
            if (track.Staves[s].Bars.length > 0) {
              var previousBar =
                track.Staves[s].Bars[track.Staves[s].Bars.length - 1];
              bar.Clef = previousBar.Clef;
            }
            masterBar = this.GetOrCreateMasterBar(barIndex);
            track.Staves[s].AddBar(bar);
            this.EnsureVoices(bar);
            ++s;
          }
          ++b;
        }
        var attributesParsed = false;
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'attributes':
                if (!attributesParsed) {
                  this.ParseAttributes(c1, bars, masterBar, track);
                  attributesParsed = true;
                }
                break;
              case 'barline':
                this.ParseBarline(c1, masterBar);
                break;
              case 'direction':
                this.ParseDirection(c1, masterBar);
                break;
              case 'forward':
                this.ParseForward(c1, bars);
                break;
              case 'harmony':
                this.ParseHarmony(c1, track);
                break;
              case 'note':
                this.ParseNoteBeat(c1, bars);
                break;
              case 'sound':
                break;
              default:
            }
          }
        }
        return true;
      },
      EnsureVoices: function(bar) {
        while (bar.Voices.length < this._maxVoices) {
          var emptyVoice = new alphaTab.model.Voice();
          bar.AddVoice(emptyVoice);
          var _tmp = new alphaTab.model.Beat();
          _tmp.IsEmpty = true;
          var emptyBeat = _tmp;
          emptyBeat.ChordId = this._currentChord;
          emptyVoice.AddBeat(emptyBeat);
        }
      },
      GetOrCreateBeat: function(element, bars, chord) {
        var voiceIndex = 0;
        var voiceNodes = element.GetElementsByTagName('voice', false);
        if (voiceNodes.length > 0) {
          voiceIndex =
            alphaTab.platform.Platform.ParseInt(voiceNodes[0].get_InnerText()) -
            1;
        }
        var previousBeatWasPulled = this._previousBeatWasPulled;
        this._previousBeatWasPulled = false;
        var staffElement = element.GetElementsByTagName('staff', false);
        var staff = 1;
        if (staffElement.length > 0) {
          staff = alphaTab.platform.Platform.ParseInt(
            staffElement[0].get_InnerText()
          );
          if (
            (this._isBeamContinue || previousBeatWasPulled) &&
            this._previousBeat.Voice.Bar.Staff.Index != staff - 1
          ) {
            staff = this._previousBeat.Voice.Bar.Staff.Index + 1;
            this._previousBeatWasPulled = true;
          }
          var staffId =
            Std.string(bars[0].Staff.Track.Index) + '-' + Std.string(staff);
          if (!this._voiceOfStaff.hasOwnProperty(staffId)) {
            this._voiceOfStaff[staffId] = voiceIndex;
          }
        }
        --staff;
        var bar;
        if (staff < 0) {
          bar = bars[0];
        } else if (staff >= bars.length) {
          bar = bars[bars.length - 1];
        } else {
          bar = bars[staff];
        }
        var beat;
        var voice = this.GetOrCreateVoice(bar, voiceIndex);
        if (
          (chord && voice.Beats.length > 0) ||
          (voice.Beats.length == 1 && voice.IsEmpty)
        ) {
          beat = voice.Beats[voice.Beats.length - 1];
        } else {
          beat = new alphaTab.model.Beat();
          beat.IsEmpty = false;
          voice.AddBeat(beat);
        }
        this._isBeamContinue = false;
        this._previousBeat = beat;
        return beat;
      },
      ParseForward: function(element, bars) {
        var beat = this.GetOrCreateBeat(element, bars, false);
        var durationInDivisions = alphaTab.platform.Platform.ParseInt(
          element.FindChildElement('duration').get_InnerText()
        );
        var duration =
          (durationInDivisions * 4) /
          js.Boot.__cast(this._divisionsPerQuarterNote, Float);
        var durations = new Int32Array([64, 32, 16, 8, 4, 2, 1]);
        var d = new system.Int32ArrayIterator(durations);
        while (d.hasNext()) {
          var d1 = d.next();
          if (duration >= d1) {
            beat.Duration = js.Boot.__cast(d1, Int);
            duration = duration - d1;
            break;
          }
        }
        var tmp = duration > 0;
        beat.IsEmpty = false;
      },
      ParseStaffDetails: function(element, track) {
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'staff-lines':
                var staff = $iterator(track.Staves)();
                while (staff.hasNext()) {
                  var staff1 = staff.next();
                  var this1 = new Int32Array(
                    alphaTab.platform.Platform.ParseInt(c1.get_InnerText())
                  );
                  staff1.Tuning = this1;
                }
                break;
              case 'staff-tuning':
                this.ParseStaffTuning(c1, track);
                break;
              default:
            }
          }
        }
        var staff2 = $iterator(track.Staves)();
        while (staff2.hasNext()) {
          var staff3 = staff2.next();
          if (this.IsEmptyTuning(staff3.Tuning)) {
            var this2 = new Int32Array(0);
            staff3.Tuning = this2;
          }
        }
      },
      ParseStaffTuning: function(element, track) {
        var line = alphaTab.platform.Platform.ParseInt(
          element.GetAttribute('line')
        );
        var tuningStep = 'C';
        var tuningOctave = '';
        var tuningAlter = 0;
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'tuning-alter':
                tuningAlter = alphaTab.platform.Platform.ParseInt(
                  c1.get_InnerText()
                );
                break;
              case 'tuning-octave':
                tuningOctave = c1.get_InnerText();
                break;
              case 'tuning-step':
                tuningStep = c1.get_InnerText();
                break;
              default:
            }
          }
        }
        var tuning =
          alphaTab.model.TuningParser.GetTuningForText(
            tuningStep + tuningOctave
          ) + tuningAlter;
        var staff = $iterator(track.Staves)();
        while (staff.hasNext()) {
          var staff1 = staff.next();
          staff1.Tuning[staff1.Tuning.length - line] = tuning;
        }
      },
      ParseHarmony: function(element, track) {
        var rootStep = null;
        var rootAlter = '';
        var kind = null;
        var kindText = null;
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'kind':
                kindText = c1.GetAttribute('text');
                kind = c1.get_InnerText();
                break;
              case 'root':
                var rootChild = $iterator(c1.ChildNodes)();
                while (rootChild.hasNext()) {
                  var rootChild1 = rootChild.next();
                  if (rootChild1.NodeType == 1) {
                    var _g1 = rootChild1.LocalName;
                    switch (_g1) {
                      case 'root-alter':
                        var _g2 = alphaTab.platform.Platform.ParseInt(
                          c1.get_InnerText()
                        );
                        switch (_g2) {
                          case -2:
                            rootAlter = ' bb';
                            break;
                          case -1:
                            rootAlter = ' b';
                            break;
                          case 0:
                            rootAlter = '';
                            break;
                          case 1:
                            rootAlter = ' #';
                            break;
                          case 2:
                            rootAlter = ' ##';
                            break;
                          default:
                        }
                        break;
                      case 'root-step':
                        rootStep = rootChild1.get_InnerText();
                        break;
                      default:
                    }
                  }
                }
                break;
              default:
            }
          }
        }
        var chord = new alphaTab.model.Chord();
        chord.Name = rootStep + rootAlter;
        this._currentChord = alphaTab.platform.Platform.NewGuid();
        var staff = $iterator(track.Staves)();
        while (staff.hasNext()) {
          var staff1 = staff.next();
          staff1.AddChord(this._currentChord, chord);
        }
      },
      ParseBarline: function(element, masterBar) {
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'ending':
                this.ParseEnding(c1, masterBar);
                break;
              case 'repeat':
                this.ParseRepeat(c1, masterBar);
                break;
              default:
            }
          }
        }
      },
      ParseEnding: function(element, masterBar) {
        var number = alphaTab.platform.Platform.ParseInt(
          element.GetAttribute('number')
        );
        if (number > 0) {
          --number;
          masterBar.AlternateEndings = system.Convert.ToUInt8(
            masterBar.AlternateEndings | system.Convert.ToUInt8(1 << number)
          );
        }
      },
      ParseRepeat: function(element, masterBar) {
        var direction = element.GetAttribute('direction');
        var times = alphaTab.platform.Platform.ParseInt(
          element.GetAttribute('times')
        );
        if (times < 0) {
          times = 2;
        }
        if (direction == 'backward') {
          masterBar.RepeatCount = times;
        } else if (direction == 'forward') {
          masterBar.IsRepeatStart = true;
        }
      },
      ParseNoteBeat: function(element, bars) {
        var chord = element.GetElementsByTagName('chord', false).length > 0;
        var beat = this.GetOrCreateBeat(element, bars, chord);
        if (beat.ChordId == null && this._currentChord != null) {
          beat.ChordId = this._currentChord;
          this._currentChord = null;
        }
        if (this._currentDirection != null) {
          beat.Text = this._currentDirection;
          this._currentDirection = null;
        }
        var note = new alphaTab.model.Note();
        beat.Voice.IsEmpty = false;
        beat.IsEmpty = false;
        beat.AddNote(note);
        beat.Dots = 0;
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'accidental':
                this.ParseAccidental(c1, note);
                break;
              case 'beam':
                var beamMode = c1.get_InnerText();
                if (beamMode == 'continue') {
                  this._isBeamContinue = true;
                }
                break;
              case 'cue':
                break;
              case 'dot':
                beat.Dots++;
                break;
              case 'duration':
                if (beat.get_IsRest()) {
                  var duration = alphaTab.platform.Platform.ParseInt(
                    c1.get_InnerText()
                  );
                  switch (duration) {
                    case 1:
                      beat.Duration = 1;
                      break;
                    case 2:
                      beat.Duration = 2;
                      break;
                    case 4:
                      beat.Duration = 4;
                      break;
                    case 8:
                      beat.Duration = 8;
                      break;
                    case 16:
                      beat.Duration = 16;
                      break;
                    case 32:
                      beat.Duration = 32;
                      break;
                    case 64:
                      beat.Duration = 64;
                      break;
                    default:
                      beat.Duration = 4;
                  }
                }
                break;
              case 'grace':
                beat.GraceType = 2;
                beat.Duration = 32;
                break;
              case 'instrument':
                break;
              case 'lyric':
                this.ParseLyric(c1, beat);
                break;
              case 'notations':
                this.ParseNotations(c1, beat, note);
                break;
              case 'notehead':
                if (c1.GetAttribute('parentheses') == 'yes') {
                  note.IsGhost = true;
                }
                break;
              case 'pitch':
                this.ParsePitch(c1, note);
                break;
              case 'rest':
                beat.IsEmpty = false;
                var this1 = [];
                beat.Notes = this1;
                break;
              case 'stem':
                break;
              case 'tie':
                this.ParseTied(c1, note);
                break;
              case 'time-modification':
                this.ParseTimeModification(c1, beat);
                break;
              case 'type':
                beat.Duration = this.GetDuration(c1.get_InnerText());
                if (beat.GraceType != 0 && beat.Duration < 16) {
                  beat.Duration = 8;
                }
                break;
              case 'unpitched':
                this.ParseUnpitched(c1, note);
                break;
              default:
            }
          }
        }
        if (note.get_IsStringed()) {
          var i = 0;
          while (i < beat.Notes.length) {
            if (beat.Notes[i].String == note.String && beat.Notes[i] != note) {
              beat.RemoveNote(note);
              break;
            }
            ++i;
          }
        }
      },
      GetDuration: function(text) {
        switch (text) {
          case '128th':
          case '256th':
          case '64th':
            return 64;
          case '16th':
            return 16;
          case '32nd':
            return 32;
          case 'breve':
          case 'long':
          case 'whole':
            return 1;
          case 'eighth':
            return 8;
          case 'half':
            return 2;
          case 'quarter':
            return 4;
          default:
        }
        return 4;
      },
      ParseLyric: function(element, beat) {
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            if (_g == 'text') {
              var s = beat.Text;
              if (!(s == null || s.length == 0)) {
                beat.Text = beat.Text + (' ' + c1.get_InnerText());
              } else {
                beat.Text = c1.get_InnerText();
              }
            }
          }
        }
      },
      ParseAccidental: function(element, note) {
        var _g = element.get_InnerText();
        switch (_g) {
          case 'double-sharp':
            break;
          case 'flat':
            note.AccidentalMode = 4;
            break;
          case 'flat-flat':
            break;
          case 'natural':
            note.AccidentalMode = 2;
            break;
          case 'natural-flat':
            break;
          case 'natural-sharp':
            break;
          case 'quarter-flat':
            break;
          case 'quarter-sharp':
            break;
          case 'sharp':
            note.AccidentalMode = 3;
            break;
          case 'sharp-sharp':
            break;
          case 'three-quarters-flat':
            break;
          case 'three-quarters-sharp':
            break;
          default:
        }
      },
      ParseTied: function(element, note) {
        if (element.GetAttribute('type') == 'start') {
          if (!this._tieStartIds.hasOwnProperty(note.Id)) {
            this._tieStartIds[note.Id] = true;
            this._tieStarts.push(note);
          }
        } else if (
          element.GetAttribute('type') == 'stop' &&
          this._tieStarts.length > 0 &&
          !note.IsTieDestination
        ) {
          note.IsTieDestination = true;
          note.TieOrigin = this._tieStarts[0];
          if (true) {
            this._tieStarts.splice(0, 1);
          }
          var this1 = this._tieStartIds;
          var key = note.Id;
          delete this1[key];
        }
      },
      ParseNotations: function(element, beat, note) {
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'articulations':
                this.ParseArticulations(c1, note);
                break;
              case 'dynamics':
                this.ParseDynamics(c1, beat);
                break;
              case 'glissando':
              case 'slide':
                if (c1.GetAttribute('type') == 'start') {
                  note.SlideType = 1;
                }
                break;
              case 'ornaments':
                this.ParseOrnaments(c1, note);
                break;
              case 'slur':
                var slurNumber = c1.GetAttribute('number');
                if (slurNumber == null || slurNumber.length == 0) {
                  slurNumber = '1';
                }
                var _g1 = c1.GetAttribute('type');
                switch (_g1) {
                  case 'start':
                    this._slurStarts[slurNumber] = note;
                    break;
                  case 'stop':
                    if (this._slurStarts.hasOwnProperty(slurNumber)) {
                      note.IsSlurDestination = true;
                      var slurStart = this._slurStarts[slurNumber];
                      slurStart.SlurDestination = note;
                      note.SlurOrigin = note;
                    }
                    break;
                  default:
                }
                break;
              case 'technical':
                this.ParseTechnical(c1, note);
                break;
              case 'tied':
                this.ParseTied(c1, note);
                break;
              default:
            }
          }
        }
      },
      ParseOrnaments: function(element, note) {
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            if (_g == 'tremolo') {
              var tremoloSpeed = alphaTab.platform.Platform.ParseInt(
                c1.get_InnerText()
              );
              switch (tremoloSpeed) {
                case 1:
                  note.Beat.TremoloSpeed = 8;
                  break;
                case 2:
                  note.Beat.TremoloSpeed = 16;
                  break;
                case 3:
                  note.Beat.TremoloSpeed = 32;
                  break;
                default:
              }
            }
          }
        }
      },
      ParseTechnical: function(element, note) {
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'down-bow':
                note.Beat.PickStroke = 2;
                break;
              case 'fret':
                note.Fret = alphaTab.platform.Platform.ParseInt(
                  c1.get_InnerText()
                );
                break;
              case 'string':
                note.String = alphaTab.platform.Platform.ParseInt(
                  c1.get_InnerText()
                );
                if (note.String != -2147483648) {
                  note.String =
                    note.Beat.Voice.Bar.Staff.Tuning.length - note.String + 1;
                }
                break;
              case 'up-bow':
                note.Beat.PickStroke = 1;
                break;
              default:
            }
          }
        }
        if (note.String == -2147483648 || note.Fret == -2147483648) {
          note.String = -1;
          note.Fret = -1;
        }
      },
      ParseArticulations: function(element, note) {
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          var _g = c1.LocalName;
          switch (_g) {
            case 'accent':
              note.Accentuated = 1;
              break;
            case 'detached-legato':
            case 'staccato':
              note.IsStaccato = true;
              break;
            case 'strong-accent':
              note.Accentuated = 2;
              break;
            default:
          }
        }
      },
      ParseDynamics: function(element, beat) {
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'f':
                beat.Dynamic = 5;
                break;
              case 'ff':
                beat.Dynamic = 6;
                break;
              case 'fff':
                beat.Dynamic = 7;
                break;
              case 'mf':
                beat.Dynamic = 4;
                break;
              case 'mp':
                beat.Dynamic = 3;
                break;
              case 'p':
                beat.Dynamic = 2;
                break;
              case 'pp':
                beat.Dynamic = 1;
                break;
              case 'ppp':
                beat.Dynamic = 0;
                break;
              default:
            }
          }
        }
      },
      ParseTimeModification: function(element, beat) {
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'actual-notes':
                beat.TupletNumerator = alphaTab.platform.Platform.ParseInt(
                  c1.get_InnerText()
                );
                break;
              case 'normal-notes':
                beat.TupletDenominator = alphaTab.platform.Platform.ParseInt(
                  c1.get_InnerText()
                );
                break;
              default:
            }
          }
        }
      },
      ParseUnpitched: function(element, note) {
        var step = null;
        var semitones = 0;
        var octave = 0;
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'display-alter':
                semitones = alphaTab.platform.Platform.ParseInt(
                  c1.get_InnerText()
                );
                break;
              case 'display-octave':
                octave = alphaTab.platform.Platform.ParseInt(
                  c1.get_InnerText()
                );
                break;
              case 'display-step':
                step = c1.get_InnerText();
                break;
              default:
            }
          }
        }
        var value =
          octave * 12 +
          alphaTab.model.TuningParser.GetToneForText(step) +
          semitones;
        note.Octave = (value / 12) | 0;
        note.Tone = value - note.Octave * 12;
      },
      ParsePitch: function(element, note) {
        var step = null;
        var semitones = 0;
        var octave = 0;
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'alter':
                var s = c1.get_InnerText();
                semitones = parseFloat(s);
                var this1 = semitones;
                if (isNaN(this1)) {
                  semitones = 0;
                }
                break;
              case 'octave':
                octave =
                  alphaTab.platform.Platform.ParseInt(c1.get_InnerText()) + 1;
                break;
              case 'step':
                step = c1.get_InnerText();
                break;
              default:
            }
          }
        }
        var value =
          octave * 12 +
          alphaTab.model.TuningParser.GetToneForText(step) +
          system.Convert.ToInt32_Single(semitones);
        note.Octave = (value / 12) | 0;
        note.Tone = value - note.Octave * 12;
      },
      GetOrCreateVoice: function(bar, index) {
        if (index < bar.Voices.length) {
          return bar.Voices[index];
        }
        var i = bar.Voices.length;
        while (i <= index) {
          bar.AddVoice(new alphaTab.model.Voice());
          ++i;
        }
        this._maxVoices = Math.max(this._maxVoices, bar.Voices.length);
        return bar.Voices[index];
      },
      ParseDirection: function(element, masterBar) {
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'direction-type':
                var directionType = c1.FirstElement;
                var _g1 = directionType.LocalName;
                switch (_g1) {
                  case 'metronome':
                    this.ParseMetronome(c1.FirstElement, masterBar);
                    break;
                  case 'words':
                    this._currentDirection = directionType.get_InnerText();
                    break;
                  default:
                }
                break;
              case 'sound':
                var tempo = c1.GetAttribute('tempo');
                if (!(tempo == null || tempo.length == 0)) {
                  var tempoAutomation = new alphaTab.model.Automation();
                  tempoAutomation.IsLinear = true;
                  tempoAutomation.Type = 0;
                  var this1 = alphaTab.platform.Platform.ParseInt(tempo);
                  tempoAutomation.Value = this1;
                  masterBar.TempoAutomation = tempoAutomation;
                }
                break;
              default:
            }
          }
        }
      },
      ParseMetronome: function(element, masterBar) {
        var unit = 4;
        var perMinute = 120;
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'beat-unit':
                unit = this.GetDuration(c1.get_InnerText());
                break;
              case 'per-minute':
                perMinute = alphaTab.platform.Platform.ParseInt(
                  c1.get_InnerText()
                );
                break;
              default:
            }
          }
        }
        var tempoAutomation = (masterBar.TempoAutomation = new alphaTab.model.Automation());
        tempoAutomation.Type = 0;
        var this1 = perMinute * ((unit / 4) | 0);
        tempoAutomation.Value = this1;
      },
      ParseAttributes: function(element, bars, masterBar, track) {
        var number;
        var hasTime = false;
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'clef':
                number = alphaTab.platform.Platform.ParseInt(
                  c1.GetAttribute('number')
                );
                if (number == -2147483648) {
                  number = 1;
                }
                this.ParseClef(c1, bars[number - 1]);
                break;
              case 'divisions':
                this._divisionsPerQuarterNote = alphaTab.platform.Platform.ParseInt(
                  c1.get_InnerText()
                );
                break;
              case 'key':
                this.ParseKey(c1, masterBar);
                break;
              case 'staff-details':
                this.ParseStaffDetails(c1, track);
                break;
              case 'time':
                this.ParseTime(c1, masterBar);
                hasTime = true;
                break;
              case 'transpose':
                this.ParseTranspose(c1, track);
                break;
              default:
            }
          }
        }
        if (!hasTime) {
          masterBar.TimeSignatureCommon = true;
        }
      },
      ParseTranspose: function(element, track) {
        var semitones = 0;
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'chromatic':
                semitones =
                  semitones +
                  alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
                break;
              case 'octave-change':
                semitones =
                  semitones +
                  alphaTab.platform.Platform.ParseInt(c1.get_InnerText()) * 12;
                break;
              default:
            }
          }
        }
        var staff = $iterator(track.Staves)();
        while (staff.hasNext()) {
          var staff1 = staff.next();
          staff1.TranspositionPitch = semitones;
        }
      },
      ParseClef: function(element, bar) {
        var sign = null;
        var line = 0;
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'clef-octave-change':
                var _g1 = alphaTab.platform.Platform.ParseInt(
                  c1.get_InnerText()
                );
                switch (_g1) {
                  case -2:
                    bar.ClefOttava = 4;
                    break;
                  case -1:
                    bar.ClefOttava = 3;
                    break;
                  case 1:
                    bar.ClefOttava = 1;
                    break;
                  case 2:
                    bar.ClefOttava = 4;
                    break;
                  default:
                }
                break;
              case 'line':
                line = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
                break;
              case 'sign':
                sign = c1.get_InnerText().toLowerCase();
                break;
              default:
            }
          }
        }
        switch (sign) {
          case 'c':
            if (line == 3) {
              bar.Clef = 1;
            } else {
              bar.Clef = 2;
            }
            break;
          case 'f':
            bar.Clef = 3;
            break;
          case 'g':
            bar.Clef = 4;
            break;
          case 'percussion':
            bar.Clef = 0;
            bar.Staff.IsPercussion = true;
            break;
          case 'tab':
            bar.Clef = 4;
            bar.Staff.ShowTablature = true;
            break;
          default:
            bar.Clef = 4;
        }
      },
      ParseTime: function(element, masterBar) {
        if (element.GetAttribute('symbol') == 'common') {
          masterBar.TimeSignatureCommon = true;
        }
        var beatsParsed = false;
        var beatTypeParsed = false;
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var v = c1.get_InnerText();
            var _g = c1.LocalName;
            switch (_g) {
              case 'beat-type':
                if (!beatTypeParsed) {
                  if (!(v.indexOf('+') != -1)) {
                    masterBar.TimeSignatureDenominator = alphaTab.platform.Platform.ParseInt(
                      v
                    );
                  } else {
                    masterBar.TimeSignatureDenominator = 4;
                  }
                  beatTypeParsed = true;
                }
                break;
              case 'beats':
                if (!beatsParsed) {
                  if (!(v.indexOf('+') != -1)) {
                    masterBar.TimeSignatureNumerator = alphaTab.platform.Platform.ParseInt(
                      v
                    );
                  } else {
                    masterBar.TimeSignatureNumerator = 4;
                  }
                  beatsParsed = true;
                }
                break;
              default:
            }
          }
        }
      },
      ParseKey: function(element, masterBar) {
        var fifths = -2147483648;
        var keyStep = -2147483648;
        var keyAlter = -2147483648;
        var mode = null;
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'fifths':
                fifths = alphaTab.platform.Platform.ParseInt(
                  c1.get_InnerText()
                );
                break;
              case 'key-alter':
                keyAlter = alphaTab.platform.Platform.ParseInt(
                  c1.get_InnerText()
                );
                break;
              case 'key-step':
                keyStep = alphaTab.platform.Platform.ParseInt(
                  c1.get_InnerText()
                );
                break;
              case 'mode':
                mode = c1.get_InnerText();
                break;
              default:
            }
          }
        }
        if (-7 <= fifths && fifths <= 7) {
          masterBar.KeySignature = js.Boot.__cast(fifths, Int);
        } else {
          masterBar.KeySignature = 0;
        }
        if (mode == 'minor') {
          masterBar.KeySignatureType = 1;
        } else {
          masterBar.KeySignatureType = 0;
        }
      },
      GetOrCreateMasterBar: function(index) {
        if (index < this._score.MasterBars.length) {
          return this._score.MasterBars[index];
        }
        var i = this._score.MasterBars.length;
        while (i <= index) {
          var mb = new alphaTab.model.MasterBar();
          if (this._score.MasterBars.length > 0) {
            var prev = this._score.MasterBars[
              this._score.MasterBars.length - 1
            ];
            mb.TimeSignatureDenominator = prev.TimeSignatureDenominator;
            mb.TimeSignatureNumerator = prev.TimeSignatureNumerator;
            mb.KeySignature = prev.KeySignature;
            mb.KeySignatureType = prev.KeySignatureType;
          }
          this._score.AddMasterBar(mb);
          ++i;
        }
        return this._score.MasterBars[index];
      },
      ParseIdentification: function(element) {
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'creator':
                if (c1.GetAttribute('type') == 'composer') {
                  this._score.Music = c1.get_InnerText();
                }
                break;
              case 'rights':
                var s = this._score.Copyright;
                if (!(s == null || s.length == 0)) {
                  this._score.Copyright = this._score.Copyright + '\n';
                }
                var tmp = this._score.Copyright + c1.get_InnerText();
                this._score.Copyright = tmp;
                break;
              default:
            }
          }
        }
      },
      ParsePartList: function(element) {
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'part-group':
                this.ParsePartGroup(c1);
                break;
              case 'score-part':
                this.ParseScorePart(c1);
                break;
              default:
            }
          }
        }
      },
      ParsePartGroup: function(element) {
        var type = element.GetAttribute('type');
        switch (type) {
          case 'start':
            this._currentPartGroup = element.GetAttribute('number');
            var this1 = this._partGroups;
            var index = this._currentPartGroup;
            var this2 = [];
            this1[index] = this2;
            break;
          case 'stop':
            this._currentPartGroup = null;
            break;
          default:
        }
      },
      ParseScorePart: function(element) {
        var id = element.GetAttribute('id');
        var track = new alphaTab.model.Track(1);
        var staff = track.Staves[0];
        staff.ShowStandardNotation = true;
        this._trackById[id] = track;
        this._score.AddTrack(track);
        if (this._currentPartGroup != null) {
          this._partGroups[this._currentPartGroup].push(track);
        }
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'midi-instrument':
                this.ParseMidiInstrument(c1, track);
                break;
              case 'part-abbreviation':
                track.ShortName = c1.get_InnerText();
                break;
              case 'part-name':
                track.Name = c1.get_InnerText();
                break;
              default:
            }
          }
        }
        if (this.IsEmptyTuning(track.Staves[0].Tuning)) {
          var tmp = track.Staves[0];
          var this1 = new Int32Array(0);
          tmp.Tuning = this1;
        }
      },
      IsEmptyTuning: function(tuning) {
        if (tuning == null) {
          return true;
        }
        var i = 0;
        while (i < tuning.length) {
          if (tuning[i] != 0) {
            return false;
          }
          ++i;
        }
        return true;
      },
      ParseMidiInstrument: function(element, track) {
        var c = $iterator(element.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          if (c1.NodeType == 1) {
            var _g = c1.LocalName;
            switch (_g) {
              case 'midi-channel':
                var tmp = c1.get_InnerText();
                track.PlaybackInfo.PrimaryChannel = alphaTab.platform.Platform.ParseInt(
                  tmp
                );
                break;
              case 'midi-program':
                var tmp1 = c1.get_InnerText();
                track.PlaybackInfo.Program = alphaTab.platform.Platform.ParseInt(
                  tmp1
                );
                break;
              case 'midi-volume':
                var tmp2 = c1.get_InnerText();
                track.PlaybackInfo.Volume = alphaTab.platform.Platform.ParseInt(
                  tmp2
                );
                break;
              default:
            }
          }
        }
      },
      __class__: alphaTab.importer.MusicXmlImporter
    }
  );
  alphaTab.importer.NoCompatibleReaderFoundException = $hx_exports['alphaTab'][
    'importer'
  ]['NoCompatibleReaderFoundException'] = function() {
    alphaTab.AlphaTabException.call(this);
  };
  alphaTab.importer.NoCompatibleReaderFoundException.__name__ = [
    'alphaTab',
    'importer',
    'NoCompatibleReaderFoundException'
  ];
  alphaTab.importer.NoCompatibleReaderFoundException.__super__ =
    alphaTab.AlphaTabException;
  alphaTab.importer.NoCompatibleReaderFoundException.prototype = $extend(
    alphaTab.AlphaTabException.prototype,
    {
      NoCompatibleReaderFoundException: function() {
        this.AlphaTabException('No compatible reader found');
        return this;
      },
      __class__: alphaTab.importer.NoCompatibleReaderFoundException
    }
  );
  alphaTab.importer.PartConfiguration = function() {
    this.Parts = null;
    this.ZoomLevel = 0;
    this.Layout = 0;
    var this1 = [];
    this.Parts = this1;
  };
  alphaTab.importer.PartConfiguration.__name__ = [
    'alphaTab',
    'importer',
    'PartConfiguration'
  ];
  alphaTab.importer.PartConfiguration.prototype = {
    Apply: function(score) {
      var staffIndex = 0;
      var trackIndex = 0;
      var part = $iterator(this.Parts)();
      while (part.hasNext()) {
        var part1 = part.next();
        var trackConfig = $iterator(part1.Tracks)();
        while (trackConfig.hasNext()) {
          var trackConfig1 = trackConfig.next();
          if (trackIndex < score.Tracks.length) {
            var track = score.Tracks[trackIndex];
            if (staffIndex < track.Staves.length) {
              var staff = track.Staves[staffIndex];
              staff.ShowTablature = trackConfig1.ShowTablature;
              staff.ShowStandardNotation = trackConfig1.ShowStandardNotation;
            }
          }
          ++trackIndex;
          if (trackIndex >= score.Tracks.length) {
            ++staffIndex;
            trackIndex = 0;
          }
        }
      }
    },
    __class__: alphaTab.importer.PartConfiguration
  };
  alphaTab.importer.PartConfigurationParser = function() {
    this.Configuration = null;
  };
  alphaTab.importer.PartConfigurationParser.__name__ = [
    'alphaTab',
    'importer',
    'PartConfigurationParser'
  ];
  alphaTab.importer.PartConfigurationParser.prototype = {
    Parse: function(partConfigurationData) {
      this.Configuration = new alphaTab.importer.PartConfiguration();
      this.ParsePartConfiguration(partConfigurationData);
    },
    ParsePartConfiguration: function(partConfigurationData) {
      var readable = alphaTab.io.ByteBuffer.FromBuffer(partConfigurationData);
      var entryCount = alphaTab.io.IOHelper.ReadInt32BE(readable);
      var i = 0;
      while (i < entryCount) {
        var part = new alphaTab.importer.PartConfiguration_Part();
        this.Configuration.Parts.push(part);
        part.IsMultiRest = alphaTab.importer.GpBinaryHelpers.GpReadBool(
          readable
        );
        var groupCount = alphaTab.io.IOHelper.ReadInt32BE(readable);
        var j = 0;
        while (j < groupCount) {
          var flags = readable.ReadByte();
          if (flags == 0) {
            flags = 1;
          }
          var this1 = part.Tracks;
          var _tmp = new alphaTab.importer.PartConfiguration_TrackConfiguration();
          _tmp.ShowStandardNotation = (flags & 1) != 0;
          _tmp.ShowTablature = (flags & 2) != 0;
          _tmp.ShowSlash = (flags & 4) != 0;
          this1.push(_tmp);
          ++j;
        }
        ++i;
      }
    },
    __class__: alphaTab.importer.PartConfigurationParser
  };
  alphaTab.importer.PartConfiguration_Part = $hx_exports['alphaTab'][
    'importer'
  ]['PartConfiguration_Part'] = function() {
    this.IsMultiRest = false;
    this.Tracks = null;
    var this1 = [];
    this.Tracks = this1;
  };
  alphaTab.importer.PartConfiguration_Part.__name__ = [
    'alphaTab',
    'importer',
    'PartConfiguration_Part'
  ];
  alphaTab.importer.PartConfiguration_Part.prototype = {
    __class__: alphaTab.importer.PartConfiguration_Part
  };
  alphaTab.importer.PartConfiguration_TrackConfiguration = $hx_exports[
    'alphaTab'
  ]['importer']['PartConfiguration_TrackConfiguration'] = function() {
    this.IsVisible = false;
    this.ShowSlash = false;
    this.ShowStandardNotation = false;
    this.ShowTablature = false;
  };
  alphaTab.importer.PartConfiguration_TrackConfiguration.__name__ = [
    'alphaTab',
    'importer',
    'PartConfiguration_TrackConfiguration'
  ];
  alphaTab.importer.PartConfiguration_TrackConfiguration.prototype = {
    __class__: alphaTab.importer.PartConfiguration_TrackConfiguration
  };
  alphaTab.importer.ScoreLoader = $hx_exports['alphaTab']['importer'][
    'ScoreLoader'
  ] = function() {};
  alphaTab.importer.ScoreLoader.__name__ = [
    'alphaTab',
    'importer',
    'ScoreLoader'
  ];
  alphaTab.importer.ScoreLoader.LoadScoreAsync = function(
    path,
    success,
    error,
    settings
  ) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', path, true, null, null);
    xhr.responseType = 'arraybuffer';
    xhr.onreadystatechange = function() {
      if (xhr.readyState == 4) {
        var response = xhr.response;
        if (xhr.status == 200 || (xhr.status == 0 && !!response)) {
          try {
            var buffer = xhr.response;
            var reader = new Uint8Array(buffer);
            var score = alphaTab.importer.ScoreLoader.LoadScoreFromBytes(
              reader,
              settings
            );
            success(score);
          } catch (exception) {
            if (exception instanceof js._Boot.HaxeError)
              exception = exception.val;
            if (js.Boot.__instanceof(exception, system.Exception)) {
              error(exception);
            } else throw exception;
          }
        } else if (xhr.status == 0) {
          var tmp = new alphaTab.importer.FileLoadException().FileLoadException(
            'You are offline!!\n Please Check Your Network.',
            xhr
          );
          error(tmp);
        } else if (xhr.status == 404) {
          var tmp1 = new alphaTab.importer.FileLoadException().FileLoadException(
            'Requested URL not found.',
            xhr
          );
          error(tmp1);
        } else if (xhr.status == 500) {
          var tmp2 = new alphaTab.importer.FileLoadException().FileLoadException(
            'Internel Server Error.',
            xhr
          );
          error(tmp2);
        } else if (xhr.statusText == 'parsererror') {
          var tmp3 = new alphaTab.importer.FileLoadException().FileLoadException(
            'Error.\nParsing JSON Request failed.',
            xhr
          );
          error(tmp3);
        } else if (xhr.statusText == 'timeout') {
          var tmp4 = new alphaTab.importer.FileLoadException().FileLoadException(
            'Request Time out.',
            xhr
          );
          error(tmp4);
        } else {
          var tmp5 = new alphaTab.importer.FileLoadException().FileLoadException(
            'Unknow Error: ' + xhr.responseText,
            xhr
          );
          error(tmp5);
        }
      }
    };
    if (xhr.responseType != 'arraybuffer') {
      var vbArr = VbAjaxLoader('GET', path);
      var fileContents = vbArr.toArray();
      var this1 = '';
      var data = this1;
      var i = 0;
      while (i < fileContents.length - 1) {
        data += Std.string(fileContents[i]);
        ++i;
      }
      var reader1 = alphaTab.importer.ScoreLoader.GetBytesFromString(data);
      var score1 = alphaTab.importer.ScoreLoader.LoadScoreFromBytes(
        reader1,
        settings
      );
      success(score1);
    }
    xhr.send();
  };
  alphaTab.importer.ScoreLoader.GetBytesFromString = function(s) {
    var this1 = new Uint8Array(s.length);
    var b = this1;
    var i = 0;
    while (i < s.length) {
      var this2 = system.Convert.ToUInt16(HxOverrides.cca(s, i));
      b[i] = system.Convert.ToUInt8(this2);
      ++i;
    }
    return b;
  };
  alphaTab.importer.ScoreLoader.LoadScoreFromBytes = function(data, settings) {
    var importers = alphaTab.importer.ScoreImporter.BuildImporters();
    alphaTab.util.Logger.Info(
      'ScoreLoader',
      'Loading score from ' +
        data.length +
        ' bytes using ' +
        importers.length +
        ' importers',
      null
    );
    var score = null;
    var bb = alphaTab.io.ByteBuffer.FromBuffer(data);
    var importer = HxOverrides.iter(importers);
    while (importer.hasNext()) {
      var importer1 = importer.next();
      bb.Reset();
      try {
        alphaTab.util.Logger.Info(
          'ScoreLoader',
          'Importing using importer ' + importer1.get_Name(),
          null
        );
        importer1.Init(bb, settings);
        score = importer1.ReadScore();
        alphaTab.util.Logger.Info(
          'ScoreLoader',
          'Score imported using ' + importer1.get_Name(),
          null
        );
        break;
      } catch ($e0) {
        if ($e0 instanceof js._Boot.HaxeError) $e0 = $e0.val;
        if (
          js.Boot.__instanceof(
            $e0,
            alphaTab.importer.UnsupportedFormatException
          )
        ) {
          var __e = $e0;
          alphaTab.util.Logger.Info(
            'ScoreLoader',
            importer1.get_Name() + ' does not support the file',
            null
          );
        } else if (js.Boot.__instanceof($e0, system.Exception)) {
          var e = $e0;
          alphaTab.util.Logger.Info(
            'ScoreLoader',
            'Score import failed due to unexpected error: ' + Std.string(e),
            null
          );
          throw new js._Boot.HaxeError(e);
        } else throw $e0;
      }
    }
    if (score != null) {
      return score;
    }
    alphaTab.util.Logger.Error(
      'ScoreLoader',
      'No compatible importer found for file',
      null
    );
    throw new js._Boot.HaxeError(
      new alphaTab.importer.NoCompatibleReaderFoundException().NoCompatibleReaderFoundException()
    );
  };
  alphaTab.importer.ScoreLoader.prototype = {
    __class__: alphaTab.importer.ScoreLoader
  };
  alphaTab.importer.UnsupportedFormatException = $hx_exports['alphaTab'][
    'importer'
  ]['UnsupportedFormatException'] = function() {
    alphaTab.AlphaTabException.call(this);
  };
  alphaTab.importer.UnsupportedFormatException.__name__ = [
    'alphaTab',
    'importer',
    'UnsupportedFormatException'
  ];
  alphaTab.importer.UnsupportedFormatException.__super__ =
    alphaTab.AlphaTabException;
  alphaTab.importer.UnsupportedFormatException.prototype = $extend(
    alphaTab.AlphaTabException.prototype,
    {
      UnsupportedFormatException: function(message) {
        if (message == null) {
          message = 'Unsupported format';
        }
        this.AlphaTabException(message);
        return this;
      },
      __class__: alphaTab.importer.UnsupportedFormatException
    }
  );
  alphaTab.io = {};
  alphaTab.io.BitReader = function(source) {
    this._currentByte = 0;
    this._position = 0;
    this._source = null;
    this._source = source;
    this._position = 8;
  };
  alphaTab.io.BitReader.__name__ = ['alphaTab', 'io', 'BitReader'];
  alphaTab.io.BitReader.prototype = {
    ReadByte: function() {
      return this.ReadBits(8);
    },
    ReadBytes: function(count) {
      var this1 = new Uint8Array(count);
      var bytes = this1;
      var i = 0;
      while (i < count) {
        bytes[i] = system.Convert.ToUInt8(this.ReadByte());
        ++i;
      }
      return bytes;
    },
    ReadBits: function(count) {
      var bits = 0;
      var i = count - 1;
      while (i >= 0) {
        bits = bits | (this.ReadBit() << i);
        --i;
      }
      return bits;
    },
    ReadBitsReversed: function(count) {
      var bits = 0;
      var i = 0;
      while (i < count) {
        bits = bits | (this.ReadBit() << i);
        ++i;
      }
      return bits;
    },
    ReadBit: function() {
      if (this._position >= 8) {
        this._currentByte = this._source.ReadByte();
        if (this._currentByte == -1) {
          throw new js._Boot.HaxeError(
            new alphaTab.io.EndOfReaderException().EndOfReaderException()
          );
        }
        this._position = 0;
      }
      var value = (this._currentByte >> (8 - this._position - 1)) & 1;
      this._position++;
      return value;
    },
    ReadAll: function() {
      var all = alphaTab.io.ByteBuffer.Empty();
      try {
        while (true) all.WriteByte(system.Convert.ToUInt8(this.ReadByte()));
      } catch (__e) {
        if (__e instanceof js._Boot.HaxeError) __e = __e.val;
        if (js.Boot.__instanceof(__e, alphaTab.io.EndOfReaderException)) {
        } else throw __e;
      }
      return all.ToArray();
    },
    __class__: alphaTab.io.BitReader
  };
  alphaTab.io.IReadable = $hx_exports['alphaTab']['io'][
    'IReadable'
  ] = function() {};
  alphaTab.io.IReadable.__name__ = ['alphaTab', 'io', 'IReadable'];
  alphaTab.io.IReadable.prototype = {
    __class__: alphaTab.io.IReadable
  };
  alphaTab.io.IWriteable = $hx_exports['alphaTab']['io'][
    'IWriteable'
  ] = function() {};
  alphaTab.io.IWriteable.__name__ = ['alphaTab', 'io', 'IWriteable'];
  alphaTab.io.IWriteable.prototype = {
    __class__: alphaTab.io.IWriteable
  };
  alphaTab.io.ByteBuffer = function() {
    this._buffer = null;
    this._capacity = 0;
    this.set_Length(0);
    this.set_Position(0);
  };
  alphaTab.io.ByteBuffer.__name__ = ['alphaTab', 'io', 'ByteBuffer'];
  alphaTab.io.ByteBuffer.__interfaces__ = [
    alphaTab.io.IReadable,
    alphaTab.io.IWriteable
  ];
  alphaTab.io.ByteBuffer.Empty = function() {
    return alphaTab.io.ByteBuffer.WithCapactiy(0);
  };
  alphaTab.io.ByteBuffer.WithCapactiy = function(capacity) {
    var buffer = new alphaTab.io.ByteBuffer();
    var this1 = new Uint8Array(capacity);
    buffer._buffer = this1;
    buffer._capacity = capacity;
    return buffer;
  };
  alphaTab.io.ByteBuffer.FromBuffer = function(data) {
    var buffer = new alphaTab.io.ByteBuffer();
    buffer._buffer = data;
    buffer._capacity = buffer.set_Length(data.length);
    return buffer;
  };
  alphaTab.io.ByteBuffer.prototype = {
    get_Length: function() {
      return this.__Length;
    },
    set_Length: function(value) {
      return (this.__Length = value);
    },
    get_Position: function() {
      return this.__Position;
    },
    set_Position: function(value) {
      return (this.__Position = value);
    },
    GetBuffer: function() {
      return this._buffer;
    },
    Reset: function() {
      this.set_Position(0);
    },
    Skip: function(offset) {
      this.set_Position(this.get_Position() + offset);
    },
    SetCapacity: function(value) {
      if (value != this._capacity) {
        if (value > 0) {
          var this1 = new Uint8Array(value);
          var newBuffer = this1;
          if (this.get_Length() > 0) {
            var src = this._buffer;
            var count = this.get_Length();
            newBuffer.set(src.subarray(0, 0 + count), 0);
          }
          this._buffer = newBuffer;
        } else {
          this._buffer = null;
        }
        this._capacity = value;
      }
    },
    ReadByte: function() {
      var n = this.get_Length() - this.get_Position();
      if (n <= 0) {
        return -1;
      }
      var this1 = this._buffer;
      var _g = this;
      var _g1 = _g.get_Position();
      _g.set_Position(_g1 + 1);
      var this2 = this1[_g1];
      return this2;
    },
    Read: function(buffer, offset, count) {
      var n = this.get_Length() - this.get_Position();
      if (n > count) {
        n = count;
      }
      if (n <= 0) {
        return 0;
      }
      if (n <= 8) {
        var byteCount = n;
        while (true) {
          --byteCount;
          if (!(byteCount >= 0)) {
            break;
          }
          buffer[offset + byteCount] = this._buffer[
            this.get_Position() + byteCount
          ];
        }
      } else {
        var src = this._buffer;
        var srcOffset = this.get_Position();
        buffer.set(src.subarray(srcOffset, srcOffset + n), offset);
      }
      this.set_Position(this.get_Position() + n);
      return n;
    },
    WriteByte: function(value) {
      var this1 = new Uint8Array(1);
      var buffer = this1;
      buffer[0] = value;
      this.Write(buffer, 0, 1);
    },
    Write: function(buffer, offset, count) {
      var i = this.get_Position() + count;
      if (i > this.get_Length()) {
        if (i > this._capacity) {
          this.EnsureCapacity(i);
        }
        this.set_Length(i);
      }
      if (count <= 8 && buffer != this._buffer) {
        var byteCount = count;
        while (true) {
          --byteCount;
          if (!(byteCount >= 0)) {
            break;
          }
          this._buffer[this.get_Position() + byteCount] =
            buffer[offset + byteCount];
        }
      } else {
        var dst = this._buffer;
        var dstOffset = this.get_Position();
        var count1 = Math.min(count, buffer.length - offset);
        dst.set(buffer.subarray(offset, offset + count1), dstOffset);
      }
      this.set_Position(i);
    },
    EnsureCapacity: function(value) {
      if (value > this._capacity) {
        var newCapacity = value;
        if (newCapacity < 256) {
          newCapacity = 256;
        }
        if (newCapacity < this._capacity * 2) {
          newCapacity = this._capacity * 2;
        }
        this.SetCapacity(newCapacity);
      }
    },
    ReadAll: function() {
      return this.ToArray();
    },
    ToArray: function() {
      var this1 = new Uint8Array(this.get_Length());
      var copy = this1;
      var src = this._buffer;
      var count = this.get_Length();
      copy.set(src.subarray(0, 0 + count), 0);
      return copy;
    },
    __class__: alphaTab.io.ByteBuffer
  };
  alphaTab.io.EndOfReaderException = function() {
    alphaTab.AlphaTabException.call(this);
  };
  alphaTab.io.EndOfReaderException.__name__ = [
    'alphaTab',
    'io',
    'EndOfReaderException'
  ];
  alphaTab.io.EndOfReaderException.__super__ = alphaTab.AlphaTabException;
  alphaTab.io.EndOfReaderException.prototype = $extend(
    alphaTab.AlphaTabException.prototype,
    {
      EndOfReaderException: function() {
        this.AlphaTabException('');
        return this;
      },
      __class__: alphaTab.io.EndOfReaderException
    }
  );
  alphaTab.io.IOHelper = function() {};
  alphaTab.io.IOHelper.__name__ = ['alphaTab', 'io', 'IOHelper'];
  alphaTab.io.IOHelper.ReadInt32BE = function(input) {
    var ch1 = input.ReadByte();
    var ch2 = input.ReadByte();
    var ch3 = input.ReadByte();
    var ch4 = input.ReadByte();
    return (ch1 << 24) | (ch2 << 16) | (ch3 << 8) | ch4;
  };
  alphaTab.io.IOHelper.ReadInt32LE = function(input) {
    var ch1 = input.ReadByte();
    var ch2 = input.ReadByte();
    var ch3 = input.ReadByte();
    var ch4 = input.ReadByte();
    return (ch4 << 24) | (ch3 << 16) | (ch2 << 8) | ch1;
  };
  alphaTab.io.IOHelper.ReadUInt32LE = function(input) {
    var ch1 = input.ReadByte();
    var ch2 = input.ReadByte();
    var ch3 = input.ReadByte();
    var ch4 = input.ReadByte();
    return alphaTab.platform.Platform.ToUInt32(
      (ch4 << 24) | (ch3 << 16) | (ch2 << 8) | ch1
    );
  };
  alphaTab.io.IOHelper.ReadUInt16LE = function(input) {
    var ch1 = input.ReadByte();
    var ch2 = input.ReadByte();
    return alphaTab.platform.Platform.ToUInt16((ch2 << 8) | ch1);
  };
  alphaTab.io.IOHelper.ReadInt16LE = function(input) {
    var ch1 = input.ReadByte();
    var ch2 = input.ReadByte();
    return alphaTab.platform.Platform.ToInt16((ch2 << 8) | ch1);
  };
  alphaTab.io.IOHelper.ReadUInt32BE = function(input) {
    var ch1 = input.ReadByte();
    var ch2 = input.ReadByte();
    var ch3 = input.ReadByte();
    var ch4 = input.ReadByte();
    return alphaTab.platform.Platform.ToUInt32(
      (ch1 << 24) | (ch2 << 16) | (ch3 << 8) | ch4
    );
  };
  alphaTab.io.IOHelper.ReadUInt16BE = function(input) {
    var ch1 = input.ReadByte();
    var ch2 = input.ReadByte();
    return alphaTab.platform.Platform.ToUInt16((ch1 << 8) | ch2);
  };
  alphaTab.io.IOHelper.ReadInt16BE = function(input) {
    var ch1 = input.ReadByte();
    var ch2 = input.ReadByte();
    return alphaTab.platform.Platform.ToInt16((ch1 << 8) | ch2);
  };
  alphaTab.io.IOHelper.ReadByteArray = function(input, length) {
    var this1 = new Uint8Array(length);
    var v = this1;
    input.Read(v, 0, length);
    return v;
  };
  alphaTab.io.IOHelper.Read8BitChars = function(input, length) {
    var this1 = new Uint8Array(length);
    var b = this1;
    input.Read(b, 0, b.length);
    return alphaTab.platform.Platform.ToString(b, 'utf-8');
  };
  alphaTab.io.IOHelper.Read8BitString = function(input) {
    var this1 = '';
    var s = this1;
    var c = input.ReadByte();
    while (c != 0) {
      s += String.fromCharCode(c);
      c = input.ReadByte();
    }
    return s;
  };
  alphaTab.io.IOHelper.Read8BitStringLength = function(input, length) {
    var this1 = '';
    var s = this1;
    var z = -1;
    var i = 0;
    while (i < length) {
      var c = input.ReadByte();
      if (c == 0 && z == -1) {
        z = i;
      }
      s += String.fromCharCode(c);
      ++i;
    }
    var t = s;
    if (z >= 0) {
      return HxOverrides.substr(t, 0, z);
    }
    return t;
  };
  alphaTab.io.IOHelper.ReadSInt8 = function(input) {
    var v = input.ReadByte();
    return ((v & 255) >> 7) * -256 + (v & 255);
  };
  alphaTab.io.IOHelper.ReadInt24 = function(input, index) {
    var i = input[index] | (input[index + 1] << 8) | (input[index + 2] << 16);
    if ((i & 8388608) == 8388608) {
      i = i | -16777216;
    }
    return i;
  };
  alphaTab.io.IOHelper.ReadInt16 = function(input, index) {
    return alphaTab.platform.Platform.ToInt16(
      input[index] | (input[index + 1] << 8)
    );
  };
  haxe.io = {};
  haxe.io.Input = function() {};
  haxe.io.Input.__name__ = ['haxe', 'io', 'Input'];
  haxe.io.Input.prototype = {
    readByte: function() {
      throw new js._Boot.HaxeError('Not implemented');
    },
    readBytes: function(s, pos, len) {
      var k = len;
      var b = s.b;
      if (pos < 0 || len < 0 || pos + len > s.length) {
        throw new js._Boot.HaxeError(haxe.io.Error.OutsideBounds);
      }
      try {
        while (k > 0) {
          b[pos] = this.readByte();
          ++pos;
          --k;
        }
      } catch (eof) {
        if (eof instanceof js._Boot.HaxeError) eof = eof.val;
        if (js.Boot.__instanceof(eof, haxe.io.Eof)) {
        } else throw eof;
      }
      return len - k;
    },
    readFullBytes: function(s, pos, len) {
      while (len > 0) {
        var k = this.readBytes(s, pos, len);
        if (k == 0) {
          throw new js._Boot.HaxeError(haxe.io.Error.Blocked);
        }
        pos += k;
        len -= k;
      }
    },
    read: function(nbytes) {
      var s = new haxe.io.Bytes(new ArrayBuffer(nbytes));
      var p = 0;
      while (nbytes > 0) {
        var k = this.readBytes(s, p, nbytes);
        if (k == 0) {
          throw new js._Boot.HaxeError(haxe.io.Error.Blocked);
        }
        p += k;
        nbytes -= k;
      }
      return s;
    },
    readInt16: function() {
      var ch1 = this.readByte();
      var ch2 = this.readByte();
      var n = this.bigEndian ? ch2 | (ch1 << 8) : ch1 | (ch2 << 8);
      if ((n & 32768) != 0) {
        return n - 65536;
      }
      return n;
    },
    readUInt16: function() {
      var ch1 = this.readByte();
      var ch2 = this.readByte();
      if (this.bigEndian) {
        return ch2 | (ch1 << 8);
      } else {
        return ch1 | (ch2 << 8);
      }
    },
    readInt32: function() {
      var ch1 = this.readByte();
      var ch2 = this.readByte();
      var ch3 = this.readByte();
      var ch4 = this.readByte();
      if (this.bigEndian) {
        return ch4 | (ch3 << 8) | (ch2 << 16) | (ch1 << 24);
      } else {
        return ch1 | (ch2 << 8) | (ch3 << 16) | (ch4 << 24);
      }
    },
    readString: function(len) {
      var b = new haxe.io.Bytes(new ArrayBuffer(len));
      this.readFullBytes(b, 0, len);
      return b.toString();
    },
    __class__: haxe.io.Input
  };
  alphaTab.io.ReadableInput = function(readable) {
    this._readable = null;
    this._readable = readable;
  };
  alphaTab.io.ReadableInput.__name__ = ['alphaTab', 'io', 'ReadableInput'];
  alphaTab.io.ReadableInput.__super__ = haxe.io.Input;
  alphaTab.io.ReadableInput.prototype = $extend(haxe.io.Input.prototype, {
    readByte: function() {
      return this._readable.ReadByte();
    },
    readBytes: function(s, pos, len) {
      var data = new Uint8Array(s.b.bufferValue);
      return this._readable.Read(data, pos, len);
    },
    __class__: alphaTab.io.ReadableInput
  });
  alphaTab.io.ZipEntry = function() {
    this.FullName = null;
    this.FileName = null;
    this.Data = null;
  };
  alphaTab.io.ZipEntry.__name__ = ['alphaTab', 'io', 'ZipEntry'];
  alphaTab.io.ZipEntry.prototype = {
    __class__: alphaTab.io.ZipEntry
  };
  alphaTab.io.ZipFile = function() {
    this.FileFilter = null;
    this.Entries = null;
    var this1 = [];
    this.Entries = this1;
    this.FileFilter = function(s) {
      return true;
    };
  };
  alphaTab.io.ZipFile.__name__ = ['alphaTab', 'io', 'ZipFile'];
  alphaTab.io.ZipFile.prototype = {
    Load: function(s) {
      try {
        var haxeInput = new alphaTab.io.ReadableInput(s);
        var reader = new haxe.zip.Reader(haxeInput);
        var entries = reader.read();
        var _g_head = entries.h;
        while (_g_head != null) {
          var val = _g_head.item;
          _g_head = _g_head.next;
          var entry = val;
          var fullName = entry.fileName;
          if (this.FileFilter == null || this.FileFilter(fullName)) {
            var i = fullName.lastIndexOf('/');
            var name =
              i >= 0 ? HxOverrides.substr(fullName, i + 1, null) : fullName;
            var data = entry.data.b.bufferValue;
            var this1 = this.Entries;
            var _tmp = new alphaTab.io.ZipEntry();
            _tmp.FullName = fullName;
            _tmp.FileName = name;
            _tmp.Data = new Uint8Array(data);
            this1.push(_tmp);
          }
        }
      } catch (__e) {
        throw new js._Boot.HaxeError(
          new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException(
            'Not a valid zip file'
          )
        );
      }
    },
    __class__: alphaTab.io.ZipFile
  };
  alphaTab.model = {};
  alphaTab.model._AccentuationType = {};
  alphaTab.model._AccentuationType.AccentuationType_Impl_ = $hx_exports[
    'alphaTab'
  ]['model']['_AccentuationType']['AccentuationType_Impl_'] = {};
  alphaTab.model._AccentuationType.AccentuationType_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_AccentuationType',
    'AccentuationType_Impl_'
  ];
  alphaTab.model._AccentuationType.AccentuationType_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._AccentuationType.AccentuationType_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._AccentuationType.AccentuationType_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._AccentuationType.AccentuationType_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._AccentuationType.AccentuationType_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._AccentuationType.AccentuationType_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._AccentuationType.AccentuationType_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._AccentuationType.AccentuationType_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._AccentuationType.AccentuationType_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._AccentuationType.AccentuationType_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._AccentuationType.AccentuationType_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._AccentuationType.AccentuationType_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._AccentuationType.AccentuationType_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'None';
      case 1:
        return 'Normal';
      case 2:
        return 'Heavy';
    }
    return '';
  };
  alphaTab.model._AccidentalType = {};
  alphaTab.model._AccidentalType.AccidentalType_Impl_ = $hx_exports['alphaTab'][
    'model'
  ]['_AccidentalType']['AccidentalType_Impl_'] = {};
  alphaTab.model._AccidentalType.AccidentalType_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_AccidentalType',
    'AccidentalType_Impl_'
  ];
  alphaTab.model._AccidentalType.AccidentalType_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._AccidentalType.AccidentalType_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._AccidentalType.AccidentalType_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._AccidentalType.AccidentalType_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._AccidentalType.AccidentalType_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._AccidentalType.AccidentalType_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._AccidentalType.AccidentalType_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._AccidentalType.AccidentalType_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._AccidentalType.AccidentalType_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._AccidentalType.AccidentalType_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._AccidentalType.AccidentalType_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._AccidentalType.AccidentalType_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._AccidentalType.AccidentalType_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'None';
      case 1:
        return 'Natural';
      case 2:
        return 'Sharp';
      case 3:
        return 'Flat';
      case 4:
        return 'NaturalQuarterNoteUp';
      case 5:
        return 'SharpQuarterNoteUp';
      case 6:
        return 'FlatQuarterNoteUp';
    }
    return '';
  };
  alphaTab.model.Automation = $hx_exports['alphaTab']['model'][
    'Automation'
  ] = function() {
    this.IsLinear = false;
    this.Type = 0;
    this.Value = 0.0;
    this.RatioPosition = 0.0;
    this.Text = null;
  };
  alphaTab.model.Automation.__name__ = ['alphaTab', 'model', 'Automation'];
  alphaTab.model.Automation.BuildTempoAutomation = function(
    isLinear,
    ratioPosition,
    value,
    reference
  ) {
    if (reference < 1 || reference > 5) {
      reference = 2;
    }
    var references = new Float32Array([1, 0.5, 1.0, 1.5, 2.0, 3.0]);
    var automation = new alphaTab.model.Automation();
    automation.Type = 0;
    automation.IsLinear = isLinear;
    automation.RatioPosition = ratioPosition;
    automation.Value = value * references[reference];
    return automation;
  };
  alphaTab.model.Automation.CopyTo = function(src, dst) {
    dst.IsLinear = src.IsLinear;
    dst.RatioPosition = src.RatioPosition;
    dst.Text = src.Text;
    dst.Type = src.Type;
    dst.Value = src.Value;
  };
  alphaTab.model.Automation.prototype = {
    Clone: function() {
      var a = new alphaTab.model.Automation();
      alphaTab.model.Automation.CopyTo(this, a);
      return a;
    },
    __class__: alphaTab.model.Automation
  };
  alphaTab.model._AutomationType = {};
  alphaTab.model._AutomationType.AutomationType_Impl_ = $hx_exports['alphaTab'][
    'model'
  ]['_AutomationType']['AutomationType_Impl_'] = {};
  alphaTab.model._AutomationType.AutomationType_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_AutomationType',
    'AutomationType_Impl_'
  ];
  alphaTab.model._AutomationType.AutomationType_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._AutomationType.AutomationType_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._AutomationType.AutomationType_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._AutomationType.AutomationType_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._AutomationType.AutomationType_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._AutomationType.AutomationType_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._AutomationType.AutomationType_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._AutomationType.AutomationType_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._AutomationType.AutomationType_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._AutomationType.AutomationType_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._AutomationType.AutomationType_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._AutomationType.AutomationType_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._AutomationType.AutomationType_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'Tempo';
      case 1:
        return 'Volume';
      case 2:
        return 'Instrument';
      case 3:
        return 'Balance';
    }
    return '';
  };
  alphaTab.model.Bar = $hx_exports['alphaTab']['model']['Bar'] = function() {
    this.Id = 0;
    this.Index = 0;
    this.NextBar = null;
    this.PreviousBar = null;
    this.Clef = 0;
    this.ClefOttava = 0;
    this.Staff = null;
    this.Voices = null;
    this.SimileMark = 0;
    this.Id = alphaTab.model.Bar.GlobalBarId++;
    var this1 = [];
    this.Voices = this1;
    this.Clef = 4;
    this.ClefOttava = 2;
    this.SimileMark = 0;
  };
  alphaTab.model.Bar.__name__ = ['alphaTab', 'model', 'Bar'];
  alphaTab.model.Bar.CopyTo = function(src, dst) {
    dst.Id = src.Id;
    dst.Index = src.Index;
    dst.Clef = src.Clef;
    dst.ClefOttava = src.ClefOttava;
    dst.SimileMark = src.SimileMark;
  };
  alphaTab.model.Bar.prototype = {
    get_MasterBar: function() {
      return this.Staff.Track.Score.MasterBars[this.Index];
    },
    get_IsEmpty: function() {
      var i = 0;
      var j = this.Voices.length;
      while (i < j) {
        if (!this.Voices[i].IsEmpty) {
          return false;
        }
        ++i;
      }
      return true;
    },
    AddVoice: function(voice) {
      voice.Bar = this;
      voice.Index = this.Voices.length;
      this.Voices.push(voice);
    },
    Finish: function(settings) {
      var i = 0;
      var j = this.Voices.length;
      while (i < j) {
        var voice = this.Voices[i];
        voice.Finish(settings);
        ++i;
      }
    },
    CalculateDuration: function() {
      var duration = 0;
      var voice = $iterator(this.Voices)();
      while (voice.hasNext()) {
        var voice1 = voice.next();
        var voiceDuration = voice1.CalculateDuration();
        if (voiceDuration > duration) {
          duration = voiceDuration;
        }
      }
      return duration;
    },
    __class__: alphaTab.model.Bar
  };
  alphaTab.model.Beat = $hx_exports['alphaTab']['model']['Beat'] = function() {
    this.Id = 0;
    this.Index = 0;
    this.PreviousBeat = null;
    this.NextBeat = null;
    this.Voice = null;
    this.Notes = null;
    this.NoteStringLookup = null;
    this.NoteValueLookup = null;
    this.IsEmpty = false;
    this.WhammyStyle = 0;
    this.Ottava = 0;
    this.Fermata = null;
    this.IsLegatoOrigin = false;
    this.MinNote = null;
    this.MaxNote = null;
    this.MaxStringNote = null;
    this.MinStringNote = null;
    this.Duration = -4;
    this.IsLetRing = false;
    this.IsPalmMute = false;
    this.Automations = null;
    this.Dots = 0;
    this.FadeIn = false;
    this.Lyrics = null;
    this.HasRasgueado = false;
    this.Pop = false;
    this.Slap = false;
    this.Tap = false;
    this.Text = null;
    this.BrushType = 0;
    this.BrushDuration = 0;
    this.TupletDenominator = 0;
    this.TupletNumerator = 0;
    this.TupletGroup = null;
    this.IsContinuedWhammy = false;
    this.WhammyBarType = 0;
    this.WhammyBarPoints = null;
    this.MaxWhammyPoint = null;
    this.MinWhammyPoint = null;
    this.Vibrato = 0;
    this.ChordId = null;
    this.GraceType = 0;
    this.PickStroke = 0;
    this.TremoloSpeed = null;
    this.Crescendo = 0;
    this.DisplayStart = 0;
    this.PlaybackStart = 0;
    this.DisplayDuration = 0;
    this.PlaybackDuration = 0;
    this.Dynamic = 0;
    this.InvertBeamDirection = false;
    this.IsEffectSlurOrigin = false;
    this.EffectSlurOrigin = null;
    this.EffectSlurDestination = null;
    this.Id = alphaTab.model.Beat.GlobalBeatId++;
    this.WhammyBarType = 0;
    var this1 = [];
    this.WhammyBarPoints = this1;
    var this2 = [];
    this.Notes = this2;
    this.BrushType = 0;
    this.Vibrato = 0;
    this.GraceType = 0;
    this.PickStroke = 0;
    this.Duration = 4;
    this.TremoloSpeed = null;
    var this3 = [];
    this.Automations = this3;
    this.Dots = 0;
    this.DisplayStart = 0;
    this.DisplayDuration = 0;
    this.PlaybackStart = 0;
    this.PlaybackDuration = 0;
    this.TupletDenominator = -1;
    this.TupletNumerator = -1;
    this.Dynamic = 5;
    this.Crescendo = 0;
    this.InvertBeamDirection = false;
    this.Ottava = 2;
    var this4 = {};
    this.NoteStringLookup = this4;
    var this5 = {};
    this.NoteValueLookup = this5;
    this.WhammyStyle = 0;
  };
  alphaTab.model.Beat.__name__ = ['alphaTab', 'model', 'Beat'];
  alphaTab.model.Beat.CopyTo = function(src, dst) {
    dst.Id = src.Id;
    dst.Index = src.Index;
    dst.IsEmpty = src.IsEmpty;
    dst.Duration = src.Duration;
    dst.Dots = src.Dots;
    dst.FadeIn = src.FadeIn;
    if (src.Lyrics != null) {
      var size = src.Lyrics.length;
      var this1 = new Array(size);
      dst.Lyrics = this1;
      var i = 0;
      while (i < src.Lyrics.length) {
        dst.Lyrics[i] = src.Lyrics[i];
        ++i;
      }
    }
    dst.Pop = src.Pop;
    dst.HasRasgueado = src.HasRasgueado;
    dst.Slap = src.Slap;
    dst.Tap = src.Tap;
    dst.Text = src.Text;
    dst.BrushType = src.BrushType;
    dst.BrushDuration = src.BrushDuration;
    dst.TupletDenominator = src.TupletDenominator;
    dst.TupletNumerator = src.TupletNumerator;
    dst.Vibrato = src.Vibrato;
    dst.ChordId = src.ChordId;
    dst.GraceType = src.GraceType;
    dst.PickStroke = src.PickStroke;
    dst.TremoloSpeed = src.TremoloSpeed;
    dst.Crescendo = src.Crescendo;
    dst.DisplayStart = src.DisplayStart;
    dst.DisplayDuration = src.DisplayDuration;
    dst.PlaybackStart = src.PlaybackStart;
    dst.PlaybackDuration = src.PlaybackDuration;
    dst.Dynamic = src.Dynamic;
    dst.IsLegatoOrigin = src.IsLegatoOrigin;
    dst.InvertBeamDirection = src.InvertBeamDirection;
    dst.WhammyBarType = src.WhammyBarType;
    dst.IsContinuedWhammy = src.IsContinuedWhammy;
    dst.Ottava = src.Ottava;
    dst.WhammyStyle = src.WhammyStyle;
  };
  alphaTab.model.Beat.prototype = {
    get_IsLastOfVoice: function() {
      return this.Index == this.Voice.Beats.length - 1;
    },
    get_IsLegatoDestination: function() {
      if (this.PreviousBeat != null) {
        return this.PreviousBeat.IsLegatoOrigin;
      } else {
        return false;
      }
    },
    get_IsRest: function() {
      if (!this.IsEmpty) {
        return this.Notes.length == 0;
      } else {
        return true;
      }
    },
    get_HasTuplet: function() {
      if (!(this.TupletDenominator == -1 && this.TupletNumerator == -1)) {
        return !(this.TupletDenominator == 1 && this.TupletNumerator == 1);
      } else {
        return false;
      }
    },
    get_HasWhammyBar: function() {
      return this.WhammyBarType != 0;
    },
    get_HasChord: function() {
      return this.ChordId != null;
    },
    get_Chord: function() {
      return this.Voice.Bar.Staff.Chords[this.ChordId];
    },
    get_IsTremolo: function() {
      return this.TremoloSpeed != null;
    },
    get_AbsoluteDisplayStart: function() {
      return this.Voice.Bar.get_MasterBar().Start + this.DisplayStart;
    },
    get_AbsolutePlaybackStart: function() {
      return this.Voice.Bar.get_MasterBar().Start + this.PlaybackStart;
    },
    get_IsEffectSlurDestination: function() {
      return this.EffectSlurOrigin != null;
    },
    Clone: function() {
      var beat = new alphaTab.model.Beat();
      var id = beat.Id;
      var i = 0;
      var j = this.WhammyBarPoints.length;
      while (i < j) {
        beat.AddWhammyBarPoint(this.WhammyBarPoints[i].Clone());
        ++i;
      }
      var i1 = 0;
      var j1 = this.Notes.length;
      while (i1 < j1) {
        beat.AddNoteInternal(
          this.Notes[i1].Clone(),
          this.Notes[i1].get_RealValue()
        );
        ++i1;
      }
      alphaTab.model.Beat.CopyTo(this, beat);
      var i2 = 0;
      var j2 = this.Automations.length;
      while (i2 < j2) {
        beat.Automations.push(this.Automations[i2].Clone());
        ++i2;
      }
      beat.Id = id;
      return beat;
    },
    AddWhammyBarPoint: function(point) {
      this.WhammyBarPoints.push(point);
      if (
        this.MaxWhammyPoint == null ||
        point.Value > this.MaxWhammyPoint.Value
      ) {
        this.MaxWhammyPoint = point;
      }
      if (
        this.MinWhammyPoint == null ||
        point.Value < this.MinWhammyPoint.Value
      ) {
        this.MinWhammyPoint = point;
      }
      if (this.WhammyBarType == 0) {
        this.WhammyBarType = 1;
      }
    },
    RemoveWhammyBarPoint: function(index) {
      if (index < 0 || index >= this.WhammyBarPoints.length) {
        return;
      }
      if (index != -1) {
        this.WhammyBarPoints.splice(index, 1);
      }
      var point = this.WhammyBarPoints[index];
      if (point == this.MaxWhammyPoint) {
        this.MaxWhammyPoint = null;
        var currentPoint = $iterator(this.WhammyBarPoints)();
        while (currentPoint.hasNext()) {
          var currentPoint1 = currentPoint.next();
          if (
            this.MaxWhammyPoint == null ||
            currentPoint1.Value > this.MaxWhammyPoint.Value
          ) {
            this.MaxWhammyPoint = currentPoint1;
          }
        }
      }
      if (point == this.MinWhammyPoint) {
        this.MinWhammyPoint = null;
        var currentPoint2 = $iterator(this.WhammyBarPoints)();
        while (currentPoint2.hasNext()) {
          var currentPoint3 = currentPoint2.next();
          if (
            this.MinWhammyPoint == null ||
            currentPoint3.Value < this.MinWhammyPoint.Value
          ) {
            this.MinWhammyPoint = currentPoint3;
          }
        }
      }
    },
    AddNote: function(note) {
      this.AddNoteInternal(note, -1);
    },
    AddNoteInternal: function(note, realValue) {
      if (realValue == null) {
        realValue = -1;
      }
      note.Beat = this;
      note.Index = this.Notes.length;
      this.Notes.push(note);
      if (note.get_IsStringed()) {
        this.NoteStringLookup[note.String] = note;
      }
      if (realValue == -1) {
        realValue = note.get_RealValue();
      }
      this.NoteValueLookup[realValue] = note;
    },
    RemoveNote: function(note) {
      var index = this.Notes.indexOf(note);
      if (index >= 0) {
        if (index != -1) {
          this.Notes.splice(index, 1);
        }
      }
    },
    GetAutomation: function(type) {
      var i = 0;
      var j = this.Automations.length;
      while (i < j) {
        var automation = this.Automations[i];
        if (automation.Type == type) {
          return automation;
        }
        ++i;
      }
      return null;
    },
    GetNoteOnString: function(string) {
      if (this.NoteStringLookup.hasOwnProperty(string)) {
        return this.NoteStringLookup[string];
      }
      return null;
    },
    CalculateDuration: function() {
      var ticks = alphaTab.audio.MidiUtils.ToTicks(this.Duration);
      if (this.Dots == 2) {
        ticks = alphaTab.audio.MidiUtils.ApplyDot(ticks, true);
      } else if (this.Dots == 1) {
        ticks = alphaTab.audio.MidiUtils.ApplyDot(ticks, false);
      }
      if (this.TupletDenominator > 0 && this.TupletNumerator >= 0) {
        ticks = alphaTab.audio.MidiUtils.ApplyTuplet(
          ticks,
          this.TupletNumerator,
          this.TupletDenominator
        );
      }
      return ticks;
    },
    UpdateDurations: function() {
      var ticks = this.CalculateDuration();
      this.PlaybackDuration = ticks;
      this.DisplayDuration = ticks;
      var _g = this.GraceType;
      switch (_g) {
        case 1:
        case 2:
          var _g1 = this.Duration;
          switch (_g1) {
            case 16:
              this.PlaybackDuration = alphaTab.audio.MidiUtils.ToTicks(64);
              break;
            case 32:
              this.PlaybackDuration = alphaTab.audio.MidiUtils.ToTicks(128);
              break;
            default:
              this.PlaybackDuration = alphaTab.audio.MidiUtils.ToTicks(32);
          }
          break;
        case 3:
          this.PlaybackDuration = (this.PlaybackDuration / 2) | 0;
          break;
        default:
          var previous = this.PreviousBeat;
          if (previous != null && previous.GraceType == 3) {
            this.PlaybackDuration = previous.PlaybackDuration;
          } else {
            while (previous != null && previous.GraceType == 1) {
              this.PlaybackDuration =
                this.PlaybackDuration - previous.PlaybackDuration;
              previous = previous.PreviousBeat;
            }
          }
      }
    },
    FinishTuplet: function() {
      var previousBeat = this.PreviousBeat;
      var currentTupletGroup =
        previousBeat != null ? previousBeat.TupletGroup : null;
      if (
        this.get_HasTuplet() ||
        (this.GraceType != 0 && currentTupletGroup != null)
      ) {
        if (
          previousBeat == null ||
          currentTupletGroup == null ||
          !currentTupletGroup.Check(this)
        ) {
          currentTupletGroup = new alphaTab.model.TupletGroup(this.Voice);
          currentTupletGroup.Check(this);
        }
        this.TupletGroup = currentTupletGroup;
      }
    },
    Finish: function(settings) {
      var displayMode = settings == null ? 0 : settings.DisplayMode;
      var isGradual = this.Text == 'grad' || this.Text == 'grad.';
      if (isGradual && displayMode == 1) {
        this.Text = '';
      }
      var needCopyBeatForBend = false;
      this.MinNote = null;
      this.MaxNote = null;
      this.MinStringNote = null;
      this.MaxStringNote = null;
      var visibleNotes = 0;
      var isEffectSlurBeat = false;
      var i = 0;
      var j = this.Notes.length;
      while (i < j) {
        var note = this.Notes[i];
        note.Finish(settings);
        if (note.IsLetRing) {
          this.IsLetRing = true;
        }
        if (note.IsPalmMute) {
          this.IsPalmMute = true;
        }
        if (displayMode == 1 && note.get_HasBend() && this.GraceType != 3) {
          if (!note.get_IsTieOrigin()) {
            var _g = note.BendType;
            switch (_g) {
              case 2:
              case 7:
              case 8:
                needCopyBeatForBend = true;
                break;
              default:
            }
          }
          if (isGradual || note.BendStyle == 1) {
            isGradual = true;
            note.BendStyle = 1;
            needCopyBeatForBend = false;
          } else {
            note.BendStyle = 2;
          }
        }
        if (note.IsVisible) {
          ++visibleNotes;
          if (
            this.MinNote == null ||
            note.get_RealValue() < this.MinNote.get_RealValue()
          ) {
            this.MinNote = note;
          }
          if (
            this.MaxNote == null ||
            note.get_RealValue() > this.MaxNote.get_RealValue()
          ) {
            this.MaxNote = note;
          }
          if (
            this.MinStringNote == null ||
            note.String < this.MinStringNote.String
          ) {
            this.MinStringNote = note;
          }
          if (
            this.MaxStringNote == null ||
            note.String > this.MaxStringNote.String
          ) {
            this.MaxStringNote = note;
          }
          if (note.HasEffectSlur) {
            isEffectSlurBeat = true;
          }
        }
        ++i;
      }
      if (isEffectSlurBeat) {
        if (this.EffectSlurOrigin != null) {
          this.EffectSlurOrigin.EffectSlurDestination = this.NextBeat;
          this.EffectSlurOrigin.EffectSlurDestination.EffectSlurOrigin = this.EffectSlurOrigin;
          this.EffectSlurOrigin = null;
        } else {
          this.IsEffectSlurOrigin = true;
          this.EffectSlurDestination = this.NextBeat;
          this.EffectSlurDestination.EffectSlurOrigin = this;
        }
      }
      if (this.Notes.length > 0 && visibleNotes == 0) {
        this.IsEmpty = true;
      }
      if (!this.get_IsRest() && (!this.IsLetRing || !this.IsPalmMute)) {
        var currentBeat = this.PreviousBeat;
        while (currentBeat != null && currentBeat.get_IsRest()) {
          if (!this.IsLetRing) {
            currentBeat.IsLetRing = false;
          }
          if (!this.IsPalmMute) {
            currentBeat.IsPalmMute = false;
          }
          currentBeat = currentBeat.PreviousBeat;
        }
      } else if (
        this.get_IsRest() &&
        this.PreviousBeat != null &&
        settings != null &&
        settings.DisplayMode == 0
      ) {
        if (this.PreviousBeat.IsLetRing) {
          this.IsLetRing = true;
        }
        if (this.PreviousBeat.IsPalmMute) {
          this.IsPalmMute = true;
        }
      }
      if (this.WhammyBarPoints.length > 0 && this.WhammyBarType == 1) {
        if (displayMode == 1) {
          this.WhammyStyle = isGradual ? 1 : 2;
        }
        var isContinuedWhammy = (this.IsContinuedWhammy =
          this.PreviousBeat != null && this.PreviousBeat.get_HasWhammyBar());
        if (this.WhammyBarPoints.length == 4) {
          var origin = this.WhammyBarPoints[0];
          var middle1 = this.WhammyBarPoints[1];
          var middle2 = this.WhammyBarPoints[2];
          var destination = this.WhammyBarPoints[3];
          if (middle1.Value == middle2.Value) {
            if (
              (origin.Value < middle1.Value &&
                middle1.Value < destination.Value) ||
              (origin.Value > middle1.Value &&
                middle1.Value > destination.Value)
            ) {
              if (origin.Value != 0 && !isContinuedWhammy) {
                this.WhammyBarType = 6;
              } else {
                this.WhammyBarType = 2;
              }
              if (true) {
                this.WhammyBarPoints.splice(2, 1);
              }
              if (true) {
                this.WhammyBarPoints.splice(1, 1);
              }
            } else if (
              (origin.Value > middle1.Value &&
                middle1.Value < destination.Value) ||
              (origin.Value < middle1.Value &&
                middle1.Value > destination.Value)
            ) {
              this.WhammyBarType = 3;
              if (middle1.Offset == middle2.Offset || displayMode == 1) {
                if (true) {
                  this.WhammyBarPoints.splice(2, 1);
                }
              }
            } else if (
              origin.Value == middle1.Value &&
              middle1.Value == destination.Value
            ) {
              if (origin.Value != 0 && !isContinuedWhammy) {
                this.WhammyBarType = 5;
              } else {
                this.WhammyBarType = 4;
              }
              if (true) {
                this.WhammyBarPoints.splice(2, 1);
              }
              if (true) {
                this.WhammyBarPoints.splice(1, 1);
              }
            } else {
              alphaTab.util.Logger.Warning(
                'Model',
                'Unsupported whammy type detected, fallback to custom',
                null
              );
            }
          } else {
            alphaTab.util.Logger.Warning(
              'Model',
              'Unsupported whammy type detected, fallback to custom',
              null
            );
          }
        }
      }
      this.UpdateDurations();
      if (needCopyBeatForBend) {
        var cloneBeat = this.Clone();
        cloneBeat.Id = alphaTab.model.Beat.GlobalBeatId++;
        var i1 = 0;
        var j1 = cloneBeat.Notes.length;
        while (i1 < j1) {
          var cloneNote = cloneBeat.Notes[i1];
          cloneNote.BendType = 0;
          cloneNote.MaxBendPoint = null;
          var this1 = [];
          cloneNote.BendPoints = this1;
          cloneNote.BendStyle = 0;
          cloneNote.Id = alphaTab.model.Note.GlobalNoteId++;
          var note1 = this.Notes[i1];
          if (note1.get_HasBend() && note1.get_IsTieOrigin()) {
            var tieDestination = alphaTab.model.Note.NextNoteOnSameLine(note1);
            if (tieDestination != null && tieDestination.get_HasBend()) {
              cloneNote.BendType = 5;
              var lastPoint = note1.BendPoints[note1.BendPoints.length - 1];
              cloneNote.AddBendPoint(
                new alphaTab.model.BendPoint(0, lastPoint.Value)
              );
              cloneNote.AddBendPoint(
                new alphaTab.model.BendPoint(60, lastPoint.Value)
              );
            }
          }
          cloneNote.IsTieDestination = true;
          ++i1;
        }
        this.GraceType = 3;
        this.UpdateDurations();
        this.Voice.InsertBeat(this, cloneBeat);
      }
      this.Fermata = this.Voice.Bar.get_MasterBar().GetFermata(this);
    },
    IsBefore: function(beat) {
      if (!(this.Voice.Bar.Index < beat.Voice.Bar.Index)) {
        if (beat.Voice.Bar.Index == this.Voice.Bar.Index) {
          return this.Index < beat.Index;
        } else {
          return false;
        }
      } else {
        return true;
      }
    },
    IsAfter: function(beat) {
      if (!(this.Voice.Bar.Index > beat.Voice.Bar.Index)) {
        if (beat.Voice.Bar.Index == this.Voice.Bar.Index) {
          return this.Index > beat.Index;
        } else {
          return false;
        }
      } else {
        return true;
      }
    },
    HasNoteOnString: function(noteString) {
      return this.NoteStringLookup.hasOwnProperty(noteString);
    },
    GetNoteWithRealValue: function(noteRealValue) {
      if (this.NoteValueLookup.hasOwnProperty(noteRealValue)) {
        return this.NoteValueLookup[noteRealValue];
      }
      return null;
    },
    __class__: alphaTab.model.Beat
  };
  alphaTab.model.BendPoint = $hx_exports['alphaTab']['model'][
    'BendPoint'
  ] = function(offset, value) {
    if (value == null) {
      value = 0;
    }
    if (offset == null) {
      offset = 0;
    }
    this.Offset = 0;
    this.Value = 0;
    this.Offset = offset;
    this.Value = value;
  };
  alphaTab.model.BendPoint.__name__ = ['alphaTab', 'model', 'BendPoint'];
  alphaTab.model.BendPoint.CopyTo = function(src, dst) {
    dst.Offset = src.Offset;
    dst.Value = src.Value;
  };
  alphaTab.model.BendPoint.prototype = {
    Clone: function() {
      var point = new alphaTab.model.BendPoint(0, 0);
      alphaTab.model.BendPoint.CopyTo(this, point);
      return point;
    },
    __class__: alphaTab.model.BendPoint
  };
  alphaTab.model._BendStyle = {};
  alphaTab.model._BendStyle.BendStyle_Impl_ = $hx_exports['alphaTab']['model'][
    '_BendStyle'
  ]['BendStyle_Impl_'] = {};
  alphaTab.model._BendStyle.BendStyle_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_BendStyle',
    'BendStyle_Impl_'
  ];
  alphaTab.model._BendStyle.BendStyle_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._BendStyle.BendStyle_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._BendStyle.BendStyle_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._BendStyle.BendStyle_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._BendStyle.BendStyle_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._BendStyle.BendStyle_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._BendStyle.BendStyle_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._BendStyle.BendStyle_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._BendStyle.BendStyle_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._BendStyle.BendStyle_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._BendStyle.BendStyle_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._BendStyle.BendStyle_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._BendStyle.BendStyle_Impl_.toString = function(this1) {
    switch (this1) {
      case 0:
        return 'Default';
      case 1:
        return 'Gradual';
      case 2:
        return 'Fast';
    }
    return '';
  };
  alphaTab.model._BendType = {};
  alphaTab.model._BendType.BendType_Impl_ = $hx_exports['alphaTab']['model'][
    '_BendType'
  ]['BendType_Impl_'] = {};
  alphaTab.model._BendType.BendType_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_BendType',
    'BendType_Impl_'
  ];
  alphaTab.model._BendType.BendType_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._BendType.BendType_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._BendType.BendType_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._BendType.BendType_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._BendType.BendType_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._BendType.BendType_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._BendType.BendType_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._BendType.BendType_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._BendType.BendType_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._BendType.BendType_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._BendType.BendType_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._BendType.BendType_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._BendType.BendType_Impl_.toString = function(this1) {
    switch (this1) {
      case 0:
        return 'None';
      case 1:
        return 'Custom';
      case 2:
        return 'Bend';
      case 3:
        return 'Release';
      case 4:
        return 'BendRelease';
      case 5:
        return 'Hold';
      case 6:
        return 'Prebend';
      case 7:
        return 'PrebendBend';
      case 8:
        return 'PrebendRelease';
    }
    return '';
  };
  alphaTab.model._BrushType = {};
  alphaTab.model._BrushType.BrushType_Impl_ = $hx_exports['alphaTab']['model'][
    '_BrushType'
  ]['BrushType_Impl_'] = {};
  alphaTab.model._BrushType.BrushType_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_BrushType',
    'BrushType_Impl_'
  ];
  alphaTab.model._BrushType.BrushType_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._BrushType.BrushType_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._BrushType.BrushType_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._BrushType.BrushType_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._BrushType.BrushType_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._BrushType.BrushType_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._BrushType.BrushType_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._BrushType.BrushType_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._BrushType.BrushType_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._BrushType.BrushType_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._BrushType.BrushType_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._BrushType.BrushType_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._BrushType.BrushType_Impl_.toString = function(this1) {
    switch (this1) {
      case 0:
        return 'None';
      case 1:
        return 'BrushUp';
      case 2:
        return 'BrushDown';
      case 3:
        return 'ArpeggioUp';
      case 4:
        return 'ArpeggioDown';
    }
    return '';
  };
  alphaTab.model.Chord = $hx_exports['alphaTab']['model'][
    'Chord'
  ] = function() {
    this.Name = null;
    this.FirstFret = 0;
    this.Strings = null;
    this.BarreFrets = null;
    this.Staff = null;
    this.ShowName = false;
    this.ShowDiagram = false;
    this.ShowFingering = false;
    var this1 = [];
    this.Strings = this1;
    var this2 = [];
    this.BarreFrets = this2;
    this.ShowDiagram = true;
    this.ShowName = true;
    this.ShowFingering = true;
    this.FirstFret = 1;
  };
  alphaTab.model.Chord.__name__ = ['alphaTab', 'model', 'Chord'];
  alphaTab.model.Chord.CopyTo = function(src, dst) {
    dst.FirstFret = src.FirstFret;
    dst.Name = src.Name;
    dst.Strings = src.Strings.slice(0);
    dst.BarreFrets = src.BarreFrets.slice(0);
    dst.ShowName = src.ShowName;
    dst.ShowDiagram = src.ShowDiagram;
    dst.ShowFingering = src.ShowFingering;
  };
  alphaTab.model.Chord.prototype = {
    __class__: alphaTab.model.Chord
  };
  alphaTab.model._Clef = {};
  alphaTab.model._Clef.Clef_Impl_ = $hx_exports['alphaTab']['model']['_Clef'][
    'Clef_Impl_'
  ] = {};
  alphaTab.model._Clef.Clef_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_Clef',
    'Clef_Impl_'
  ];
  alphaTab.model._Clef.Clef_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._Clef.Clef_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._Clef.Clef_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._Clef.Clef_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._Clef.Clef_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._Clef.Clef_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._Clef.Clef_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._Clef.Clef_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._Clef.Clef_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._Clef.Clef_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._Clef.Clef_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._Clef.Clef_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._Clef.Clef_Impl_.toString = function(this1) {
    switch (this1) {
      case 0:
        return 'Neutral';
      case 1:
        return 'C3';
      case 2:
        return 'C4';
      case 3:
        return 'F4';
      case 4:
        return 'G2';
    }
    return '';
  };
  alphaTab.model._CrescendoType = {};
  alphaTab.model._CrescendoType.CrescendoType_Impl_ = $hx_exports['alphaTab'][
    'model'
  ]['_CrescendoType']['CrescendoType_Impl_'] = {};
  alphaTab.model._CrescendoType.CrescendoType_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_CrescendoType',
    'CrescendoType_Impl_'
  ];
  alphaTab.model._CrescendoType.CrescendoType_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._CrescendoType.CrescendoType_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._CrescendoType.CrescendoType_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._CrescendoType.CrescendoType_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._CrescendoType.CrescendoType_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._CrescendoType.CrescendoType_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._CrescendoType.CrescendoType_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._CrescendoType.CrescendoType_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._CrescendoType.CrescendoType_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._CrescendoType.CrescendoType_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._CrescendoType.CrescendoType_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._CrescendoType.CrescendoType_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._CrescendoType.CrescendoType_Impl_.toString = function(this1) {
    switch (this1) {
      case 0:
        return 'None';
      case 1:
        return 'Crescendo';
      case 2:
        return 'Decrescendo';
    }
    return '';
  };
  alphaTab.model._Duration = {};
  alphaTab.model._Duration.Duration_Impl_ = $hx_exports['alphaTab']['model'][
    '_Duration'
  ]['Duration_Impl_'] = {};
  alphaTab.model._Duration.Duration_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_Duration',
    'Duration_Impl_'
  ];
  alphaTab.model._Duration.Duration_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._Duration.Duration_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._Duration.Duration_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._Duration.Duration_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._Duration.Duration_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._Duration.Duration_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._Duration.Duration_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._Duration.Duration_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._Duration.Duration_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._Duration.Duration_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._Duration.Duration_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._Duration.Duration_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._Duration.Duration_Impl_.toString = function(this1) {
    switch (this1) {
      case -4:
        return 'QuadrupleWhole';
      case -2:
        return 'DoubleWhole';
      case 1:
        return 'Whole';
      case 2:
        return 'Half';
      case 4:
        return 'Quarter';
      case 8:
        return 'Eighth';
      case 16:
        return 'Sixteenth';
      case 32:
        return 'ThirtySecond';
      case 64:
        return 'SixtyFourth';
      case 128:
        return 'OneHundredTwentyEighth';
      case 256:
        return 'TwoHundredFiftySixth';
    }
    return '';
  };
  alphaTab.model._DynamicValue = {};
  alphaTab.model._DynamicValue.DynamicValue_Impl_ = $hx_exports['alphaTab'][
    'model'
  ]['_DynamicValue']['DynamicValue_Impl_'] = {};
  alphaTab.model._DynamicValue.DynamicValue_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_DynamicValue',
    'DynamicValue_Impl_'
  ];
  alphaTab.model._DynamicValue.DynamicValue_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._DynamicValue.DynamicValue_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._DynamicValue.DynamicValue_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._DynamicValue.DynamicValue_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._DynamicValue.DynamicValue_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._DynamicValue.DynamicValue_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._DynamicValue.DynamicValue_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._DynamicValue.DynamicValue_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._DynamicValue.DynamicValue_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._DynamicValue.DynamicValue_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._DynamicValue.DynamicValue_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._DynamicValue.DynamicValue_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._DynamicValue.DynamicValue_Impl_.toString = function(this1) {
    switch (this1) {
      case 0:
        return 'PPP';
      case 1:
        return 'PP';
      case 2:
        return 'P';
      case 3:
        return 'MP';
      case 4:
        return 'MF';
      case 5:
        return 'F';
      case 6:
        return 'FF';
      case 7:
        return 'FFF';
    }
    return '';
  };
  alphaTab.model.Fermata = $hx_exports['alphaTab']['model'][
    'Fermata'
  ] = function() {
    this.Type = 0;
    this.Length = 0.0;
  };
  alphaTab.model.Fermata.__name__ = ['alphaTab', 'model', 'Fermata'];
  alphaTab.model.Fermata.CopyTo = function(src, dst) {
    dst.Type = src.Type;
    dst.Length = src.Length;
  };
  alphaTab.model.Fermata.prototype = {
    __class__: alphaTab.model.Fermata
  };
  alphaTab.model._FermataType = {};
  alphaTab.model._FermataType.FermataType_Impl_ = $hx_exports['alphaTab'][
    'model'
  ]['_FermataType']['FermataType_Impl_'] = {};
  alphaTab.model._FermataType.FermataType_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_FermataType',
    'FermataType_Impl_'
  ];
  alphaTab.model._FermataType.FermataType_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._FermataType.FermataType_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._FermataType.FermataType_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._FermataType.FermataType_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._FermataType.FermataType_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._FermataType.FermataType_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._FermataType.FermataType_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._FermataType.FermataType_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._FermataType.FermataType_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._FermataType.FermataType_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._FermataType.FermataType_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._FermataType.FermataType_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._FermataType.FermataType_Impl_.toString = function(this1) {
    switch (this1) {
      case 0:
        return 'Short';
      case 1:
        return 'Medium';
      case 2:
        return 'Long';
    }
    return '';
  };
  alphaTab.model._Fingers = {};
  alphaTab.model._Fingers.Fingers_Impl_ = $hx_exports['alphaTab']['model'][
    '_Fingers'
  ]['Fingers_Impl_'] = {};
  alphaTab.model._Fingers.Fingers_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_Fingers',
    'Fingers_Impl_'
  ];
  alphaTab.model._Fingers.Fingers_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._Fingers.Fingers_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._Fingers.Fingers_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._Fingers.Fingers_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._Fingers.Fingers_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._Fingers.Fingers_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._Fingers.Fingers_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._Fingers.Fingers_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._Fingers.Fingers_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._Fingers.Fingers_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._Fingers.Fingers_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._Fingers.Fingers_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._Fingers.Fingers_Impl_.toString = function(this1) {
    switch (this1) {
      case -2:
        return 'Unknown';
      case -1:
        return 'NoOrDead';
      case 0:
        return 'Thumb';
      case 1:
        return 'IndexFinger';
      case 2:
        return 'MiddleFinger';
      case 3:
        return 'AnnularFinger';
      case 4:
        return 'LittleFinger';
    }
    return '';
  };
  alphaTab.model._GraceType = {};
  alphaTab.model._GraceType.GraceType_Impl_ = $hx_exports['alphaTab']['model'][
    '_GraceType'
  ]['GraceType_Impl_'] = {};
  alphaTab.model._GraceType.GraceType_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_GraceType',
    'GraceType_Impl_'
  ];
  alphaTab.model._GraceType.GraceType_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._GraceType.GraceType_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._GraceType.GraceType_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._GraceType.GraceType_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._GraceType.GraceType_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._GraceType.GraceType_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._GraceType.GraceType_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._GraceType.GraceType_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._GraceType.GraceType_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._GraceType.GraceType_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._GraceType.GraceType_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._GraceType.GraceType_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._GraceType.GraceType_Impl_.toString = function(this1) {
    switch (this1) {
      case 0:
        return 'None';
      case 1:
        return 'OnBeat';
      case 2:
        return 'BeforeBeat';
      case 3:
        return 'BendGrace';
    }
    return '';
  };
  alphaTab.model._HarmonicType = {};
  alphaTab.model._HarmonicType.HarmonicType_Impl_ = $hx_exports['alphaTab'][
    'model'
  ]['_HarmonicType']['HarmonicType_Impl_'] = {};
  alphaTab.model._HarmonicType.HarmonicType_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_HarmonicType',
    'HarmonicType_Impl_'
  ];
  alphaTab.model._HarmonicType.HarmonicType_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._HarmonicType.HarmonicType_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._HarmonicType.HarmonicType_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._HarmonicType.HarmonicType_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._HarmonicType.HarmonicType_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._HarmonicType.HarmonicType_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._HarmonicType.HarmonicType_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._HarmonicType.HarmonicType_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._HarmonicType.HarmonicType_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._HarmonicType.HarmonicType_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._HarmonicType.HarmonicType_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._HarmonicType.HarmonicType_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._HarmonicType.HarmonicType_Impl_.toString = function(this1) {
    switch (this1) {
      case 0:
        return 'None';
      case 1:
        return 'Natural';
      case 2:
        return 'Artificial';
      case 3:
        return 'Pinch';
      case 4:
        return 'Tap';
      case 5:
        return 'Semi';
      case 6:
        return 'Feedback';
    }
    return '';
  };
  alphaTab.model.JsonConverter = function() {};
  alphaTab.model.JsonConverter.__name__ = [
    'alphaTab',
    'model',
    'JsonConverter'
  ];
  alphaTab.model.JsonConverter.ScoreToJson = function(score) {
    var obj = alphaTab.model.JsonConverter.ScoreToJsObject(score);
    return JSON.stringify(obj, function(k, v) {
      if (ArrayBuffer.isView(v)) {
        return Array.apply([], v);
      }
      return v;
    });
  };
  alphaTab.model.JsonConverter.JsonToScore = function(json, settings) {
    return alphaTab.model.JsonConverter.JsObjectToScore(
      alphaTab.model.JsonConverter.JsObjectToScore(JSON.parse(json), settings),
      null
    );
  };
  alphaTab.model.JsonConverter.ScoreToJsObject = function(score) {
    var score2 = {};
    alphaTab.model.Score.CopyTo(score, score2);
    var this1 = [];
    score2.MasterBars = this1;
    var this2 = [];
    score2.Tracks = this2;
    score2.Stylesheet = {};
    alphaTab.model.RenderStylesheet.CopyTo(score.Stylesheet, score2.Stylesheet);
    var i = 0;
    while (i < score.MasterBars.length) {
      var masterBar = score.MasterBars[i];
      var masterBar2 = {};
      alphaTab.model.MasterBar.CopyTo(masterBar, masterBar2);
      if (masterBar.TempoAutomation != null) {
        masterBar2.TempoAutomation = {};
        alphaTab.model.Automation.CopyTo(
          masterBar.TempoAutomation,
          masterBar2.TempoAutomation
        );
      }
      if (masterBar.Section != null) {
        masterBar2.Section = {};
        alphaTab.model.Section.CopyTo(masterBar.Section, masterBar2.Section);
      }
      masterBar2.Fermata = {};
      var this3 = masterBar.Fermata;
      var offset = $iterator(Object.keys(this3))();
      while (offset.hasNext()) {
        var offset1 = offset.next();
        var fermata = masterBar.Fermata[offset1];
        var fermata2 = (masterBar2.Fermata[offset1] = {});
        alphaTab.model.Fermata.CopyTo(fermata, fermata2);
      }
      score2.MasterBars.push(masterBar2);
      ++i;
    }
    var t = 0;
    while (t < score.Tracks.length) {
      var track = score.Tracks[t];
      var track2 = {};
      track2.Color = {};
      alphaTab.model.Track.CopyTo(track, track2);
      track2.PlaybackInfo = {};
      alphaTab.model.PlaybackInformation.CopyTo(
        track.PlaybackInfo,
        track2.PlaybackInfo
      );
      var this4 = [];
      track2.Staves = this4;
      var s = 0;
      while (s < track.Staves.length) {
        var staff = track.Staves[s];
        var staff2 = {};
        alphaTab.model.Staff.CopyTo(staff, staff2);
        var this5 = {};
        staff2.Chords = this5;
        var this6 = staff.Chords;
        var key = $iterator(Object.keys(this6))();
        while (key.hasNext()) {
          var key1 = key.next();
          var chord = staff.Chords[key1];
          var chord2 = {};
          alphaTab.model.Chord.CopyTo(chord, chord2);
          staff2.Chords[key1] = chord2;
        }
        var this7 = [];
        staff2.Bars = this7;
        var b = 0;
        while (b < staff.Bars.length) {
          var bar = staff.Bars[b];
          var bar2 = {};
          alphaTab.model.Bar.CopyTo(bar, bar2);
          var this8 = [];
          bar2.Voices = this8;
          var v = 0;
          while (v < bar.Voices.length) {
            var voice = bar.Voices[v];
            var voice2 = {};
            alphaTab.model.Voice.CopyTo(voice, voice2);
            var this9 = [];
            voice2.Beats = this9;
            var bb = 0;
            while (bb < voice.Beats.length) {
              var beat = voice.Beats[bb];
              var dynamicBeat2 = {};
              var beat2 = dynamicBeat2;
              alphaTab.model.Beat.CopyTo(beat, beat2);
              var this10 = [];
              beat2.Automations = this10;
              var a = 0;
              while (a < beat.Automations.length) {
                var automation = {};
                alphaTab.model.Automation.CopyTo(
                  beat.Automations[a],
                  automation
                );
                beat2.Automations.push(automation);
                ++a;
              }
              var this11 = [];
              beat2.WhammyBarPoints = this11;
              var i1 = 0;
              while (i1 < beat.WhammyBarPoints.length) {
                var point = {};
                alphaTab.model.BendPoint.CopyTo(
                  beat.WhammyBarPoints[i1],
                  point
                );
                beat2.WhammyBarPoints.push(point);
                ++i1;
              }
              var this12 = [];
              beat2.Notes = this12;
              var n = 0;
              while (n < beat.Notes.length) {
                var note = beat.Notes[n];
                var dynamicNote2 = {};
                var note2 = dynamicNote2;
                alphaTab.model.Note.CopyTo(note, note2);
                if (note.IsTieDestination) {
                  dynamicNote2.TieOriginId = note.TieOrigin.Id;
                }
                if (note.get_IsTieOrigin()) {
                  dynamicNote2.TieDestinationId = note.TieDestination.Id;
                }
                if (note.IsSlurDestination) {
                  dynamicNote2.SlurOriginId = note.SlurOrigin.Id;
                }
                if (note.get_IsSlurOrigin()) {
                  dynamicNote2.SlurDestinationId = note.SlurDestination.Id;
                }
                if (note.get_IsHammerPullDestination()) {
                  dynamicNote2.HammerPullOriginId = note.HammerPullOrigin.Id;
                }
                if (note.IsHammerPullOrigin) {
                  dynamicNote2.HammerPullDestinationId =
                    note.HammerPullDestination.Id;
                }
                var this13 = [];
                note2.BendPoints = this13;
                var i2 = 0;
                while (i2 < note.BendPoints.length) {
                  var point1 = {};
                  alphaTab.model.BendPoint.CopyTo(note.BendPoints[i2], point1);
                  note2.BendPoints.push(point1);
                  ++i2;
                }
                beat2.Notes.push(note2);
                ++n;
              }
              voice2.Beats.push(beat2);
              ++bb;
            }
            bar2.Voices.push(voice2);
            ++v;
          }
          staff2.Bars.push(bar2);
          ++b;
        }
        track2.Staves.push(staff2);
        ++s;
      }
      score2.Tracks.push(track2);
      ++t;
    }
    return score2;
  };
  alphaTab.model.JsonConverter.JsObjectToScore = function(jsObject, settings) {
    var score = jsObject;
    var score2 = new alphaTab.model.Score();
    alphaTab.model.Score.CopyTo(score, score2);
    alphaTab.model.RenderStylesheet.CopyTo(score.Stylesheet, score2.Stylesheet);
    var this1 = {};
    var allNotes = this1;
    var this2 = [];
    var notesToLink = this2;
    var i = 0;
    while (i < score.MasterBars.length) {
      var masterBar = score.MasterBars[i];
      var masterBar2 = new alphaTab.model.MasterBar();
      alphaTab.model.MasterBar.CopyTo(masterBar, masterBar2);
      if (masterBar.TempoAutomation != null) {
        masterBar2.TempoAutomation = new alphaTab.model.Automation();
        alphaTab.model.Automation.CopyTo(
          masterBar.TempoAutomation,
          masterBar2.TempoAutomation
        );
      }
      if (masterBar.Section != null) {
        masterBar2.Section = new alphaTab.model.Section();
        alphaTab.model.Section.CopyTo(masterBar.Section, masterBar2.Section);
      }
      var this3 = masterBar.Fermata;
      var offset = $iterator(Object.keys(this3))();
      while (offset.hasNext()) {
        var offset1 = offset.next();
        var fermata = masterBar.Fermata[offset1];
        var fermata2 = new alphaTab.model.Fermata();
        alphaTab.model.Fermata.CopyTo(fermata, fermata2);
        masterBar2.AddFermata(offset1, fermata2);
      }
      score2.AddMasterBar(masterBar2);
      ++i;
    }
    var t = 0;
    while (t < score.Tracks.length) {
      var track = score.Tracks[t];
      var track2 = new alphaTab.model.Track(track.Staves.length);
      alphaTab.model.Track.CopyTo(track, track2);
      score2.AddTrack(track2);
      alphaTab.model.PlaybackInformation.CopyTo(
        track.PlaybackInfo,
        track2.PlaybackInfo
      );
      var s = 0;
      while (s < track.Staves.length) {
        var staff = track.Staves[s];
        var staff2 = track2.Staves[s];
        alphaTab.model.Staff.CopyTo(staff, staff2);
        var this4 = staff.Chords;
        var key = $iterator(Object.keys(this4))();
        while (key.hasNext()) {
          var key1 = key.next();
          var chord = staff.Chords[key1];
          var chord2 = new alphaTab.model.Chord();
          alphaTab.model.Chord.CopyTo(chord, chord2);
          staff2.AddChord(key1, chord2);
        }
        var b = 0;
        while (b < staff.Bars.length) {
          var bar = staff.Bars[b];
          var bar2 = new alphaTab.model.Bar();
          alphaTab.model.Bar.CopyTo(bar, bar2);
          staff2.AddBar(bar2);
          var v = 0;
          while (v < bar.Voices.length) {
            var voice = bar.Voices[v];
            var voice2 = new alphaTab.model.Voice();
            alphaTab.model.Voice.CopyTo(voice, voice2);
            bar2.AddVoice(voice2);
            var bb = 0;
            while (bb < voice.Beats.length) {
              var beat = voice.Beats[bb];
              var beat2 = new alphaTab.model.Beat();
              alphaTab.model.Beat.CopyTo(beat, beat2);
              voice2.AddBeat(beat2);
              var a = 0;
              while (a < beat.Automations.length) {
                var automation = new alphaTab.model.Automation();
                alphaTab.model.Automation.CopyTo(
                  beat.Automations[a],
                  automation
                );
                beat2.Automations.push(automation);
                ++a;
              }
              var i1 = 0;
              while (i1 < beat.WhammyBarPoints.length) {
                var point = new alphaTab.model.BendPoint(0, 0);
                alphaTab.model.BendPoint.CopyTo(
                  beat.WhammyBarPoints[i1],
                  point
                );
                beat2.AddWhammyBarPoint(point);
                ++i1;
              }
              var n = 0;
              while (n < beat.Notes.length) {
                var note = beat.Notes[n];
                var note2 = new alphaTab.model.Note();
                alphaTab.model.Note.CopyTo(note, note2);
                beat2.AddNote(note2);
                allNotes[note2.Id] = note2;
                if ('TieOriginId' in note) {
                  note2['TieOriginId'] = note['TieOriginId'];
                  notesToLink.push(note2);
                }
                if ('TieDestinationId' in note) {
                  note2['TieDestinationId'] = note['TieDestinationId'];
                  notesToLink.push(note2);
                }
                if ('SlurOriginId' in note) {
                  note2['SlurOriginId'] = note['SlurOriginId'];
                  notesToLink.push(note2);
                }
                if ('SlurDestinationId' in note) {
                  note2['SlurDestinationId'] = note['SlurDestinationId'];
                  notesToLink.push(note2);
                }
                if ('HammerPullDestinationId' in note) {
                  note2['HammerPullDestinationId'] =
                    note['HammerPullDestinationId'];
                  notesToLink.push(note2);
                }
                if ('HammerPullDestinationId' in note) {
                  note2['HammerPullDestinationId'] =
                    note['HammerPullDestinationId'];
                  notesToLink.push(note2);
                }
                var i2 = 0;
                while (i2 < note.BendPoints.length) {
                  var point1 = new alphaTab.model.BendPoint(0, 0);
                  alphaTab.model.BendPoint.CopyTo(note.BendPoints[i2], point1);
                  note2.AddBendPoint(point1);
                  ++i2;
                }
                ++n;
              }
              ++bb;
            }
            ++v;
          }
          ++b;
        }
        ++s;
      }
      ++t;
    }
    var note1 = $iterator(notesToLink)();
    while (note1.hasNext()) {
      var note3 = note1.next();
      if ('TieOriginId' in note3) {
        var originId = note3['TieOriginId'];
        note3.TieOrigin = allNotes[originId];
      }
      if ('TieDestinationId' in note3) {
        var destinationId = note3['TieDestinationId'];
        note3.TieDestination = allNotes[destinationId];
      }
      if ('SlurOriginId' in note3) {
        var originId1 = note3['SlurOriginId'];
        note3.SlurOrigin = allNotes[originId1];
      }
      if ('SlurDestinationId' in note3) {
        var destinationId1 = note3['SlurDestinationId'];
        note3.SlurDestination = allNotes[destinationId1];
      }
      if ('HammerPullOriginId' in note3) {
        var originId2 = note3['HammerPullOriginId'];
        note3.HammerPullOrigin = allNotes[originId2];
      }
      if ('HammerPullDestinationId' in note3) {
        var destinationId2 = note3['HammerPullDestinationId'];
        note3.HammerPullDestination = allNotes[destinationId2];
      }
    }
    score2.Finish(settings);
    return score2;
  };
  alphaTab.model.JsonConverter.JsObjectToMidiFile = function(midi) {
    var midi2 = new alphaTab.audio.synth.midi.MidiFile();
    midi2.Division = midi.Division;
    var midiEvents = midi.Events;
    var midiEvent = $iterator(midiEvents)();
    while (midiEvent.hasNext()) {
      var midiEvent1 = midiEvent.next();
      var tick = midiEvent1.Tick;
      var message = midiEvent1.Message;
      var midiEvent2;
      var _g = midiEvent1.Type;
      switch (_g) {
        case 'alphaTab.audio.synth.midi.event.MetaDataEvent':
          midiEvent2 = new alphaTab.audio.synth.midi.event.MetaDataEvent(
            tick,
            0,
            0,
            midiEvent1.Data
          );
          midiEvent2.Message = message;
          break;
        case 'alphaTab.audio.synth.midi.event.MetaNumberEvent':
          midiEvent2 = new alphaTab.audio.synth.midi.event.MetaNumberEvent(
            tick,
            0,
            0,
            midiEvent1.Value
          );
          midiEvent2.Message = message;
          break;
        case 'alphaTab.audio.synth.midi.event.SystemExclusiveEvent':
          midiEvent2 = new alphaTab.audio.synth.midi.event.SystemExclusiveEvent(
            tick,
            0,
            0,
            midiEvent1.Data
          );
          midiEvent2.Message = message;
          break;
        default:
          midiEvent2 = new alphaTab.audio.synth.midi.event.MidiEvent(
            tick,
            0,
            0,
            0
          );
          midiEvent2.Message = message;
      }
      midi2.Events.push(midiEvent2);
    }
    return midi2;
  };
  alphaTab.model.JsonConverter.MidiFileToJsObject = function(midi) {
    var midi2 = {};
    midi2.Division = midi.Division;
    var this1 = [];
    var midiEvents = this1;
    midi2.Events = midiEvents;
    var midiEvent = $iterator(midi.Events)();
    while (midiEvent.hasNext()) {
      var midiEvent1 = midiEvent.next();
      var midiEvent2 = {};
      midiEvents.push(midiEvent2);
      midiEvent2.Type = Type.getClassName(
        midiEvent1 == null ? null : js.Boot.getClass(midiEvent1)
      );
      midiEvent2.Tick = midiEvent1.Tick;
      midiEvent2.Message = midiEvent1.Message;
      var _g = midiEvent2.Type;
      switch (_g) {
        case 'alphaTab.audio.synth.midi.event.MetaDataEvent':
          var metadata = js.Boot.__cast(
            midiEvent1,
            alphaTab.audio.synth.midi.event.MetaDataEvent
          );
          midiEvent2.Data = metadata.Data;
          break;
        case 'alphaTab.audio.synth.midi.event.MetaNumberEvent':
          var metanumber = js.Boot.__cast(
            midiEvent1,
            alphaTab.audio.synth.midi.event.MetaNumberEvent
          );
          midiEvent2.Value = metanumber.Value;
          break;
        case 'alphaTab.audio.synth.midi.event.SystemExclusiveEvent':
          var sysex = js.Boot.__cast(
            midiEvent1,
            alphaTab.audio.synth.midi.event.SystemExclusiveEvent
          );
          midiEvent2.Data = sysex.Data;
          break;
        default:
      }
    }
    return midi2;
  };
  alphaTab.model.JsonConverter.prototype = {
    __class__: alphaTab.model.JsonConverter
  };
  alphaTab.model._KeySignature = {};
  alphaTab.model._KeySignature.KeySignature_Impl_ = $hx_exports['alphaTab'][
    'model'
  ]['_KeySignature']['KeySignature_Impl_'] = {};
  alphaTab.model._KeySignature.KeySignature_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_KeySignature',
    'KeySignature_Impl_'
  ];
  alphaTab.model._KeySignature.KeySignature_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._KeySignature.KeySignature_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._KeySignature.KeySignature_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._KeySignature.KeySignature_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._KeySignature.KeySignature_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._KeySignature.KeySignature_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._KeySignature.KeySignature_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._KeySignature.KeySignature_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._KeySignature.KeySignature_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._KeySignature.KeySignature_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._KeySignature.KeySignature_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._KeySignature.KeySignature_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._KeySignature.KeySignature_Impl_.toString = function(this1) {
    switch (this1) {
      case -7:
        return 'Cb';
      case -6:
        return 'Gb';
      case -5:
        return 'Db';
      case -4:
        return 'Ab';
      case -3:
        return 'Eb';
      case -2:
        return 'Bb';
      case -1:
        return 'F';
      case 0:
        return 'C';
      case 1:
        return 'G';
      case 2:
        return 'D';
      case 3:
        return 'A';
      case 4:
        return 'E';
      case 5:
        return 'B';
      case 6:
        return 'FSharp';
      case 7:
        return 'CSharp';
    }
    return '';
  };
  alphaTab.model._KeySignatureType = {};
  alphaTab.model._KeySignatureType.KeySignatureType_Impl_ = $hx_exports[
    'alphaTab'
  ]['model']['_KeySignatureType']['KeySignatureType_Impl_'] = {};
  alphaTab.model._KeySignatureType.KeySignatureType_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_KeySignatureType',
    'KeySignatureType_Impl_'
  ];
  alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._KeySignatureType.KeySignatureType_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'Major';
      case 1:
        return 'Minor';
    }
    return '';
  };
  alphaTab.model.Lyrics = $hx_exports['alphaTab']['model'][
    'Lyrics'
  ] = function() {
    this.StartBar = 0;
    this.Text = null;
    this.Chunks = null;
  };
  alphaTab.model.Lyrics.__name__ = ['alphaTab', 'model', 'Lyrics'];
  alphaTab.model.Lyrics.prototype = {
    Finish: function() {
      var this1 = [];
      var chunks = this1;
      this.Parse(this.Text, 0, chunks);
      this.Chunks = chunks;
    },
    Parse: function(str, p, chunks) {
      if (str == null || str.length == 0) {
        return;
      }
      var state = 1;
      var next = 1;
      var skipSpace = false;
      var start = 0;
      while (p < str.length) {
        var this1 = system.Convert.ToUInt16(HxOverrides.cca(str, p));
        var this2 = this1;
        var c = this2;
        switch (state) {
          case 0:
            switch (c) {
              case 9:
              case 10:
              case 13:
                break;
              case 32:
                if (!skipSpace) {
                  state = next;
                  continue;
                }
                break;
              default:
                skipSpace = false;
                state = next;
                continue;
            }
            break;
          case 1:
            if (c == 91) {
              state = 3;
            } else {
              start = p;
              state = 2;
              continue;
            }
            break;
          case 2:
            switch (c) {
              case 10:
              case 13:
              case 32:
                var txt = HxOverrides.substr(str, start, p - start);
                chunks.push(this.PrepareChunk(txt));
                state = 0;
                next = 1;
                break;
              case 45:
                state = 4;
                break;
              default:
            }
            break;
          case 3:
            if (c == 93) {
              state = 1;
            }
            break;
          case 4:
            if (c != 45) {
              var txt1 = HxOverrides.substr(str, start, p - start);
              chunks.push(this.PrepareChunk(txt1));
              skipSpace = true;
              state = 0;
              next = 1;
              continue;
            }
            break;
          default:
        }
        ++p;
      }
      if (state == 2) {
        if (p != start) {
          chunks.push(HxOverrides.substr(str, start, p - start));
        }
      }
    },
    PrepareChunk: function(txt) {
      return StringTools.replace(txt, '+', ' ');
    },
    __class__: alphaTab.model.Lyrics
  };
  alphaTab.model._Lyrics_LyricsState = {};
  alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_ = {};
  alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_Lyrics_LyricsState',
    'Lyrics_LyricsState_Impl_'
  ];
  alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'IgnoreSpaces';
      case 1:
        return 'Begin';
      case 2:
        return 'Text';
      case 3:
        return 'Comment';
      case 4:
        return 'Dash';
    }
    return '';
  };
  alphaTab.model.MasterBar = $hx_exports['alphaTab']['model'][
    'MasterBar'
  ] = function() {
    this.AlternateEndings = 0;
    this.NextMasterBar = null;
    this.PreviousMasterBar = null;
    this.Index = 0;
    this.KeySignature = 0;
    this.KeySignatureType = 0;
    this.IsDoubleBar = false;
    this.IsRepeatStart = false;
    this.RepeatCount = 0;
    this.RepeatGroup = null;
    this.TimeSignatureNumerator = 0;
    this.TimeSignatureDenominator = 0;
    this.TimeSignatureCommon = false;
    this.TripletFeel = 0;
    this.Section = null;
    this.TempoAutomation = null;
    this.Score = null;
    this.Fermata = null;
    this.Start = 0;
    this.IsAnacrusis = false;
    this.TimeSignatureDenominator = 4;
    this.TimeSignatureNumerator = 4;
    this.TripletFeel = 0;
    this.KeySignatureType = 0;
    this.TimeSignatureCommon = false;
    var this1 = {};
    this.Fermata = this1;
  };
  alphaTab.model.MasterBar.__name__ = ['alphaTab', 'model', 'MasterBar'];
  alphaTab.model.MasterBar.CopyTo = function(src, dst) {
    dst.IsAnacrusis = src.IsAnacrusis;
    dst.AlternateEndings = src.AlternateEndings;
    dst.Index = src.Index;
    dst.KeySignature = src.KeySignature;
    dst.KeySignatureType = src.KeySignatureType;
    dst.IsDoubleBar = src.IsDoubleBar;
    dst.IsRepeatStart = src.IsRepeatStart;
    dst.RepeatCount = src.RepeatCount;
    dst.TimeSignatureNumerator = src.TimeSignatureNumerator;
    dst.TimeSignatureDenominator = src.TimeSignatureDenominator;
    dst.TimeSignatureCommon = src.TimeSignatureCommon;
    dst.TripletFeel = src.TripletFeel;
    dst.Start = src.Start;
  };
  alphaTab.model.MasterBar.prototype = {
    get_IsRepeatEnd: function() {
      return this.RepeatCount > 0;
    },
    get_IsSectionStart: function() {
      return this.Section != null;
    },
    CalculateDuration: function() {
      if (this.IsAnacrusis) {
        var duration = 0;
        var track = $iterator(this.Score.Tracks)();
        while (track.hasNext()) {
          var track1 = track.next();
          var staff = $iterator(track1.Staves)();
          while (staff.hasNext()) {
            var staff1 = staff.next();
            var barDuration = staff1.Bars[0].CalculateDuration();
            if (barDuration > duration) {
              duration = barDuration;
            }
          }
        }
        return duration;
      }
      return (
        this.TimeSignatureNumerator *
        alphaTab.audio.MidiUtils.ValueToTicks(this.TimeSignatureDenominator)
      );
    },
    AddFermata: function(offset, fermata) {
      this.Fermata[offset] = fermata;
    },
    GetFermata: function(beat) {
      if (this.Fermata.hasOwnProperty(beat.PlaybackStart)) {
        return this.Fermata[beat.PlaybackStart];
      }
      return null;
    },
    __class__: alphaTab.model.MasterBar
  };
  alphaTab.model.ModelUtils = function() {};
  alphaTab.model.ModelUtils.__name__ = ['alphaTab', 'model', 'ModelUtils'];
  alphaTab.model.ModelUtils.GetIndex = function(duration) {
    var index = 0;
    var value = duration;
    if (value < 0) {
      return index;
    }
    var this1 = duration;
    return system.Convert.ToInt32_Single(Math.log2(this1));
  };
  alphaTab.model.ModelUtils.KeySignatureIsFlat = function(ks) {
    return ks < 0;
  };
  alphaTab.model.ModelUtils.KeySignatureIsNatural = function(ks) {
    return ks == 0;
  };
  alphaTab.model.ModelUtils.KeySignatureIsSharp = function(ks) {
    return ks > 0;
  };
  alphaTab.model.ModelUtils.ApplyPitchOffsets = function(settings, score) {
    var i = 0;
    while (i < score.Tracks.length) {
      if (i < settings.DisplayTranspositionPitches.length) {
        var staff = $iterator(score.Tracks[i].Staves)();
        while (staff.hasNext()) {
          var staff1 = staff.next();
          staff1.DisplayTranspositionPitch = -settings
            .DisplayTranspositionPitches[i];
        }
      }
      if (i < settings.TranspositionPitches.length) {
        var staff2 = $iterator(score.Tracks[i].Staves)();
        while (staff2.hasNext()) {
          var staff3 = staff2.next();
          staff3.TranspositionPitch = -settings.TranspositionPitches[i];
        }
      }
      ++i;
    }
  };
  alphaTab.model.ModelUtils.FingerToString = function(
    settings,
    beat,
    finger,
    leftHand
  ) {
    if (
      settings.ForcePianoFingering ||
      alphaTab.audio.GeneralMidi.IsPiano(
        beat.Voice.Bar.Staff.Track.PlaybackInfo.Program
      )
    ) {
      switch (finger) {
        case -2:
        case -1:
          return null;
        case 0:
          return '1';
        case 1:
          return '2';
        case 2:
          return '3';
        case 3:
          return '4';
        case 4:
          return '5';
        default:
          return null;
      }
    } else if (leftHand) {
      switch (finger) {
        case -2:
        case -1:
          return '0';
        case 0:
          return 'T';
        case 1:
          return '1';
        case 2:
          return '2';
        case 3:
          return '3';
        case 4:
          return '4';
        default:
          return null;
      }
    } else {
      switch (finger) {
        case -2:
        case -1:
          return null;
        case 0:
          return 'p';
        case 1:
          return 'i';
        case 2:
          return 'm';
        case 3:
          return 'a';
        case 4:
          return 'c';
        default:
          return null;
      }
    }
  };
  alphaTab.model.Note = $hx_exports['alphaTab']['model']['Note'] = function() {
    this.Id = 0;
    this.Index = 0;
    this.Accentuated = 0;
    this.BendType = 0;
    this.BendStyle = 0;
    this.BendOrigin = null;
    this.IsContinuedBend = false;
    this.BendPoints = null;
    this.MaxBendPoint = null;
    this.Fret = 0;
    this.String = 0;
    this.Octave = 0;
    this.Tone = 0;
    this.Element = 0;
    this.Variation = 0;
    this.IsVisible = false;
    this.IsHammerPullOrigin = false;
    this.HammerPullOrigin = null;
    this.HammerPullDestination = null;
    this.IsSlurDestination = false;
    this.SlurOrigin = null;
    this.SlurDestination = null;
    this.HarmonicType = 0;
    this.HarmonicValue = 0.0;
    this.IsGhost = false;
    this.IsLetRing = false;
    this.LetRingDestination = null;
    this.IsPalmMute = false;
    this.PalmMuteDestination = null;
    this.IsDead = false;
    this.IsStaccato = false;
    this.SlideType = 0;
    this.SlideTarget = null;
    this.Vibrato = 0;
    this.TieOrigin = null;
    this.TieDestination = null;
    this.IsTieDestination = false;
    this.LeftHandFinger = 0;
    this.RightHandFinger = 0;
    this.IsFingering = false;
    this.TrillValue = 0;
    this.TrillSpeed = -4;
    this.DurationPercent = 0.0;
    this.AccidentalMode = 0;
    this.Beat = null;
    this.Dynamic = 0;
    this.IsEffectSlurOrigin = false;
    this.HasEffectSlur = false;
    this.EffectSlurOrigin = null;
    this.EffectSlurDestination = null;
    this.Id = alphaTab.model.Note.GlobalNoteId++;
    this.BendType = 0;
    this.BendStyle = 0;
    var this1 = [];
    this.BendPoints = this1;
    this.Dynamic = 5;
    this.Accentuated = 0;
    this.Fret = -2147483648;
    this.HarmonicType = 0;
    this.SlideType = 0;
    this.Vibrato = 0;
    this.LeftHandFinger = -2;
    this.RightHandFinger = -2;
    this.TrillValue = -1;
    this.TrillSpeed = 32;
    this.DurationPercent = 1;
    this.Octave = -1;
    this.Tone = -1;
    this.Fret = -1;
    this.String = -1;
    this.Element = -1;
    this.Variation = -1;
    this.IsVisible = true;
  };
  alphaTab.model.Note.__name__ = ['alphaTab', 'model', 'Note'];
  alphaTab.model.Note.GetStringTuning = function(staff, noteString) {
    if (staff.Tuning.length > 0) {
      return staff.Tuning[staff.Tuning.length - (noteString - 1) - 1];
    }
    return 0;
  };
  alphaTab.model.Note.CopyTo = function(src, dst) {
    dst.Id = src.Id;
    dst.Accentuated = src.Accentuated;
    dst.Fret = src.Fret;
    dst.String = src.String;
    dst.HarmonicValue = src.HarmonicValue;
    dst.HarmonicType = src.HarmonicType;
    dst.IsGhost = src.IsGhost;
    dst.IsLetRing = src.IsLetRing;
    dst.IsPalmMute = src.IsPalmMute;
    dst.IsDead = src.IsDead;
    dst.IsStaccato = src.IsStaccato;
    dst.SlideType = src.SlideType;
    dst.Vibrato = src.Vibrato;
    dst.IsTieDestination = src.IsTieDestination;
    dst.IsSlurDestination = src.IsSlurDestination;
    dst.IsHammerPullOrigin = src.IsHammerPullOrigin;
    dst.LeftHandFinger = src.LeftHandFinger;
    dst.RightHandFinger = src.RightHandFinger;
    dst.IsFingering = src.IsFingering;
    dst.TrillValue = src.TrillValue;
    dst.TrillSpeed = src.TrillSpeed;
    dst.DurationPercent = src.DurationPercent;
    dst.AccidentalMode = src.AccidentalMode;
    dst.Dynamic = src.Dynamic;
    dst.Octave = src.Octave;
    dst.Tone = src.Tone;
    dst.Element = src.Element;
    dst.Variation = src.Variation;
    dst.BendType = src.BendType;
    dst.BendStyle = src.BendStyle;
    dst.IsContinuedBend = src.IsContinuedBend;
    dst.IsVisible = src.IsVisible;
  };
  alphaTab.model.Note.NextNoteOnSameLine = function(note) {
    var nextBeat = note.Beat.NextBeat;
    while (
      nextBeat != null &&
      nextBeat.Voice.Bar.Index <= note.Beat.Voice.Bar.Index + 3
    ) {
      var noteOnString = nextBeat.GetNoteOnString(note.String);
      if (noteOnString != null) {
        return noteOnString;
      } else {
        nextBeat = nextBeat.NextBeat;
      }
    }
    return null;
  };
  alphaTab.model.Note.FindTieOrigin = function(note) {
    var previousBeat = note.Beat.PreviousBeat;
    while (
      previousBeat != null &&
      previousBeat.Voice.Bar.Index >= note.Beat.Voice.Bar.Index - 3
    ) {
      if (note.get_IsStringed()) {
        var noteOnString = previousBeat.GetNoteOnString(note.String);
        if (noteOnString != null) {
          return noteOnString;
        }
      } else if (note.Octave == -1 && note.Tone == -1) {
        if (note.Index < previousBeat.Notes.length) {
          return previousBeat.Notes[note.Index];
        }
      } else {
        var noteWithValue = previousBeat.GetNoteWithRealValue(
          note.get_RealValue()
        );
        if (noteWithValue != null) {
          return noteWithValue;
        }
      }
      previousBeat = previousBeat.PreviousBeat;
    }
    return null;
  };
  alphaTab.model.Note.prototype = {
    get_HasBend: function() {
      return this.BendType != 0;
    },
    get_IsStringed: function() {
      return this.String >= 0;
    },
    get_IsPiano: function() {
      if (!this.get_IsStringed()) {
        if (this.Octave >= 0) {
          return this.Tone >= 0;
        } else {
          return false;
        }
      } else {
        return false;
      }
    },
    get_IsPercussion: function() {
      if (!this.get_IsStringed()) {
        if (this.Element >= 0) {
          return this.Variation >= 0;
        } else {
          return false;
        }
      } else {
        return false;
      }
    },
    get_IsHammerPullDestination: function() {
      return this.HammerPullOrigin != null;
    },
    get_IsSlurOrigin: function() {
      return this.SlurDestination != null;
    },
    get_IsHarmonic: function() {
      return this.HarmonicType != 0;
    },
    get_IsTieOrigin: function() {
      return this.TieDestination != null;
    },
    get_TrillFret: function() {
      return this.TrillValue - this.get_StringTuning();
    },
    get_IsTrill: function() {
      return this.TrillValue >= 0;
    },
    get_IsEffectSlurDestination: function() {
      return this.EffectSlurOrigin != null;
    },
    get_StringTuning: function() {
      return (
        this.Beat.Voice.Bar.Staff.Capo +
        alphaTab.model.Note.GetStringTuning(
          this.Beat.Voice.Bar.Staff,
          this.String
        )
      );
    },
    get_RealValue: function() {
      if (this.get_IsPercussion()) {
        return alphaTab.rendering.utils.PercussionMapper.MidiFromElementVariation(
          this
        );
      }
      if (this.get_IsStringed()) {
        if (this.HarmonicType == 1) {
          return (
            this.get_HarmonicPitch() +
            this.get_StringTuning() -
            this.Beat.Voice.Bar.Staff.TranspositionPitch
          );
        } else {
          return (
            this.Fret +
            this.get_StringTuning() -
            this.Beat.Voice.Bar.Staff.TranspositionPitch +
            this.get_HarmonicPitch()
          );
        }
      }
      if (this.get_IsPiano()) {
        return (
          this.Octave * 12 +
          this.Tone -
          this.Beat.Voice.Bar.Staff.TranspositionPitch
        );
      }
      return 0;
    },
    get_HarmonicPitch: function() {
      if (this.HarmonicType == 0 || !this.get_IsStringed()) {
        return 0;
      }
      var value = this.HarmonicValue;
      if (alphaTab.platform.Platform.IsAlmostEqualTo(value, 2.4)) {
        return 36;
      } else if (alphaTab.platform.Platform.IsAlmostEqualTo(value, 2.7)) {
        return 34;
      } else if (value < 3) {
        return 0;
      } else if (value <= 3.5) {
        return 31;
      } else if (value <= 4) {
        return 28;
      } else if (value <= 5) {
        return 24;
      } else if (value <= 6) {
        return 34;
      } else if (value <= 7) {
        return 19;
      } else if (value <= 8.5) {
        return 36;
      } else if (value <= 9) {
        return 28;
      } else if (value <= 10) {
        return 34;
      } else if (value <= 11) {
        return 0;
      } else if (value <= 12) {
        return 12;
      } else if (value < 14) {
        return 0;
      } else if (value <= 15) {
        return 34;
      } else if (value <= 16) {
        return 28;
      } else if (value <= 17) {
        return 36;
      } else if (value <= 18) {
        return 0;
      } else if (value <= 19) {
        return 19;
      } else if (value <= 21) {
        return 0;
      } else if (value <= 22) {
        return 36;
      } else if (value <= 24) {
        return 24;
      }
      return 0;
    },
    get_DisplayValue: function() {
      var noteValue = this.get_DisplayValueWithoutBend();
      if (this.get_HasBend()) {
        noteValue = noteValue + ((this.BendPoints[0].Value / 2) | 0);
      } else if (this.BendOrigin != null) {
        noteValue =
          noteValue +
          ((this.BendOrigin.BendPoints[this.BendOrigin.BendPoints.length - 1]
            .Value /
            2) |
            0);
      } else if (this.IsTieDestination && this.TieOrigin.BendOrigin != null) {
        noteValue =
          noteValue +
          ((this.TieOrigin.BendOrigin.BendPoints[
            this.TieOrigin.BendOrigin.BendPoints.length - 1
          ].Value /
            2) |
            0);
      } else if (this.Beat.get_HasWhammyBar()) {
        noteValue = noteValue + ((this.Beat.WhammyBarPoints[0].Value / 2) | 0);
      } else if (this.Beat.IsContinuedWhammy) {
        noteValue =
          noteValue +
          ((this.Beat.PreviousBeat.WhammyBarPoints[
            this.Beat.PreviousBeat.WhammyBarPoints.length - 1
          ].Value /
            2) |
            0);
      }
      return noteValue;
    },
    get_DisplayValueWithoutBend: function() {
      var noteValue = this.get_RealValue();
      if (this.HarmonicType != 1 && this.HarmonicType != 0) {
        noteValue = noteValue - this.get_HarmonicPitch();
      }
      var _g = this.Beat.Ottava;
      switch (_g) {
        case 0:
          noteValue = noteValue - 24;
          break;
        case 1:
          noteValue = noteValue - 12;
          break;
        case 2:
          break;
        case 3:
          noteValue = noteValue + 12;
          break;
        case 4:
          noteValue = noteValue + 24;
          break;
        default:
      }
      var _g1 = this.Beat.Voice.Bar.ClefOttava;
      switch (_g1) {
        case 0:
          noteValue = noteValue - 24;
          break;
        case 1:
          noteValue = noteValue - 12;
          break;
        case 2:
          break;
        case 3:
          noteValue = noteValue + 12;
          break;
        case 4:
          noteValue = noteValue + 24;
          break;
        default:
      }
      return noteValue - this.Beat.Voice.Bar.Staff.DisplayTranspositionPitch;
    },
    get_HasQuarterToneOffset: function() {
      if (this.get_HasBend()) {
        return this.BendPoints[0].Value % 2 != 0;
      }
      if (this.BendOrigin != null) {
        return (
          this.BendOrigin.BendPoints[this.BendOrigin.BendPoints.length - 1]
            .Value %
            2 !=
          0
        );
      }
      if (this.Beat.get_HasWhammyBar()) {
        return this.Beat.WhammyBarPoints[0].Value % 2 != 0;
      }
      if (this.Beat.IsContinuedWhammy) {
        return (
          this.Beat.PreviousBeat.WhammyBarPoints[
            this.Beat.PreviousBeat.WhammyBarPoints.length - 1
          ].Value %
            2 !=
          0
        );
      }
      return false;
    },
    Clone: function() {
      var n = new alphaTab.model.Note();
      var id = n.Id;
      alphaTab.model.Note.CopyTo(this, n);
      var i = 0;
      var j = this.BendPoints.length;
      while (i < j) {
        n.AddBendPoint(this.BendPoints[i].Clone());
        ++i;
      }
      n.Id = id;
      return n;
    },
    AddBendPoint: function(point) {
      this.BendPoints.push(point);
      if (this.MaxBendPoint == null || point.Value > this.MaxBendPoint.Value) {
        this.MaxBendPoint = point;
      }
      if (this.BendType == 0) {
        this.BendType = 1;
      }
    },
    Finish: function(settings) {
      var _gthis = this;
      var nextNoteOnLine = new alphaTab.util.Lazy(function() {
        return alphaTab.model.Note.NextNoteOnSameLine(_gthis);
      });
      var isSongBook = settings != null && settings.DisplayMode == 1;
      if (this.IsTieDestination) {
        if (this.TieOrigin != null) {
          this.TieOrigin.TieDestination = this;
        } else {
          var tieOrigin = alphaTab.model.Note.FindTieOrigin(this);
          if (tieOrigin == null) {
            this.IsTieDestination = false;
          } else {
            this.TieOrigin = tieOrigin;
            this.TieOrigin.TieDestination = this;
            this.Fret = this.TieOrigin.Fret;
            this.Octave = this.TieOrigin.Octave;
            this.Tone = this.TieOrigin.Tone;
            if (this.TieOrigin.get_HasBend()) {
              this.BendOrigin = this.TieOrigin;
            }
          }
        }
        if (isSongBook && this.TieOrigin.IsLetRing) {
          this.IsLetRing = true;
        }
      }
      if (this.IsLetRing) {
        if (
          nextNoteOnLine.get_Value() == null ||
          !nextNoteOnLine.get_Value().IsLetRing
        ) {
          this.LetRingDestination = this;
        } else {
          this.LetRingDestination = nextNoteOnLine.get_Value();
        }
        if (
          isSongBook &&
          this.IsTieDestination &&
          !this.TieOrigin.get_HasBend()
        ) {
          this.IsVisible = false;
        }
      }
      if (this.IsPalmMute) {
        if (
          nextNoteOnLine.get_Value() == null ||
          !nextNoteOnLine.get_Value().IsPalmMute
        ) {
          this.PalmMuteDestination = this;
        } else {
          this.PalmMuteDestination = nextNoteOnLine.get_Value();
        }
      }
      if (this.IsHammerPullOrigin) {
        if (nextNoteOnLine.get_Value() == null) {
          this.IsHammerPullOrigin = false;
        } else {
          this.HammerPullDestination = nextNoteOnLine.get_Value();
          this.HammerPullDestination.HammerPullOrigin = this;
        }
      }
      var _g = this.SlideType;
      switch (_g) {
        case 1:
        case 2:
          this.SlideTarget = nextNoteOnLine.get_Value();
          if (this.SlideTarget == null) {
            this.SlideType = 0;
          }
          break;
        default:
      }
      var effectSlurDestination = null;
      if (this.IsHammerPullOrigin) {
        effectSlurDestination = this.HammerPullDestination;
      } else if (this.SlideType == 2 && this.SlideTarget != null) {
        effectSlurDestination = this.SlideTarget;
      }
      if (effectSlurDestination != null) {
        this.HasEffectSlur = true;
        if (this.EffectSlurOrigin != null) {
          this.EffectSlurOrigin.EffectSlurDestination = effectSlurDestination;
          this.EffectSlurOrigin.EffectSlurDestination.EffectSlurOrigin = this.EffectSlurOrigin;
          this.EffectSlurOrigin = null;
        } else {
          this.IsEffectSlurOrigin = true;
          this.EffectSlurDestination = effectSlurDestination;
          this.EffectSlurDestination.EffectSlurOrigin = this;
        }
      }
      if (this.BendPoints.length > 0 && this.BendType == 1) {
        var isContinuedBend = (this.IsContinuedBend =
          this.TieOrigin != null && this.TieOrigin.get_HasBend());
        if (this.BendPoints.length == 4) {
          var origin = this.BendPoints[0];
          var middle1 = this.BendPoints[1];
          var middle2 = this.BendPoints[2];
          var destination = this.BendPoints[3];
          if (middle1.Value == middle2.Value) {
            if (destination.Value > origin.Value) {
              if (middle1.Value > destination.Value) {
                this.BendType = 4;
              } else if (!isContinuedBend && origin.Value > 0) {
                this.BendType = 7;
                if (true) {
                  this.BendPoints.splice(2, 1);
                }
                if (true) {
                  this.BendPoints.splice(1, 1);
                }
              } else {
                this.BendType = 2;
                if (true) {
                  this.BendPoints.splice(2, 1);
                }
                if (true) {
                  this.BendPoints.splice(1, 1);
                }
              }
            } else if (destination.Value < origin.Value) {
              if (isContinuedBend) {
                this.BendType = 3;
                if (true) {
                  this.BendPoints.splice(2, 1);
                }
                if (true) {
                  this.BendPoints.splice(1, 1);
                }
              } else {
                this.BendType = 8;
                if (true) {
                  this.BendPoints.splice(2, 1);
                }
                if (true) {
                  this.BendPoints.splice(1, 1);
                }
              }
            } else if (middle1.Value > origin.Value) {
              this.BendType = 4;
            } else if (origin.Value > 0 && !isContinuedBend) {
              this.BendType = 6;
              if (true) {
                this.BendPoints.splice(2, 1);
              }
              if (true) {
                this.BendPoints.splice(1, 1);
              }
            } else {
              this.BendType = 5;
              if (true) {
                this.BendPoints.splice(2, 1);
              }
              if (true) {
                this.BendPoints.splice(1, 1);
              }
            }
          } else {
            alphaTab.util.Logger.Warning(
              'Model',
              'Unsupported bend type detected, fallback to custom',
              null
            );
          }
        } else if (this.BendPoints.length == 2) {
          var origin1 = this.BendPoints[0];
          var destination1 = this.BendPoints[1];
          if (destination1.Value > origin1.Value) {
            if (!isContinuedBend && origin1.Value > 0) {
              this.BendType = 7;
            } else {
              this.BendType = 2;
            }
          } else if (destination1.Value < origin1.Value) {
            if (isContinuedBend) {
              this.BendType = 3;
            } else {
              this.BendType = 8;
            }
          } else {
            this.BendType = 5;
          }
        }
      } else if (this.BendPoints.length == 0) {
        this.BendType = 0;
      }
    },
    __class__: alphaTab.model.Note
  };
  alphaTab.model._NoteAccidentalMode = {};
  alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_ = $hx_exports[
    'alphaTab'
  ]['model']['_NoteAccidentalMode']['NoteAccidentalMode_Impl_'] = {};
  alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_NoteAccidentalMode',
    'NoteAccidentalMode_Impl_'
  ];
  alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'Default';
      case 1:
        return 'SwapAccidentals';
      case 2:
        return 'ForceNatural';
      case 3:
        return 'ForceSharp';
      case 4:
        return 'ForceFlat';
    }
    return '';
  };
  alphaTab.model._Ottavia = {};
  alphaTab.model._Ottavia.Ottavia_Impl_ = $hx_exports['alphaTab']['model'][
    '_Ottavia'
  ]['Ottavia_Impl_'] = {};
  alphaTab.model._Ottavia.Ottavia_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_Ottavia',
    'Ottavia_Impl_'
  ];
  alphaTab.model._Ottavia.Ottavia_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._Ottavia.Ottavia_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._Ottavia.Ottavia_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._Ottavia.Ottavia_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._Ottavia.Ottavia_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._Ottavia.Ottavia_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._Ottavia.Ottavia_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._Ottavia.Ottavia_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._Ottavia.Ottavia_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._Ottavia.Ottavia_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._Ottavia.Ottavia_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._Ottavia.Ottavia_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._Ottavia.Ottavia_Impl_.toString = function(this1) {
    switch (this1) {
      case 0:
        return '_15ma';
      case 1:
        return '_8va';
      case 2:
        return 'Regular';
      case 3:
        return '_8vb';
      case 4:
        return '_15mb';
    }
    return '';
  };
  alphaTab.model._PickStroke = {};
  alphaTab.model._PickStroke.PickStroke_Impl_ = $hx_exports['alphaTab'][
    'model'
  ]['_PickStroke']['PickStroke_Impl_'] = {};
  alphaTab.model._PickStroke.PickStroke_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_PickStroke',
    'PickStroke_Impl_'
  ];
  alphaTab.model._PickStroke.PickStroke_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._PickStroke.PickStroke_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._PickStroke.PickStroke_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._PickStroke.PickStroke_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._PickStroke.PickStroke_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._PickStroke.PickStroke_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._PickStroke.PickStroke_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._PickStroke.PickStroke_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._PickStroke.PickStroke_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._PickStroke.PickStroke_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._PickStroke.PickStroke_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._PickStroke.PickStroke_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._PickStroke.PickStroke_Impl_.toString = function(this1) {
    switch (this1) {
      case 0:
        return 'None';
      case 1:
        return 'Up';
      case 2:
        return 'Down';
    }
    return '';
  };
  alphaTab.model.PlaybackInformation = $hx_exports['alphaTab']['model'][
    'PlaybackInformation'
  ] = function() {
    this.Volume = 0;
    this.Balance = 0;
    this.Port = 0;
    this.Program = 0;
    this.PrimaryChannel = 0;
    this.SecondaryChannel = 0;
    this.IsMute = false;
    this.IsSolo = false;
    this.Volume = 15;
    this.Balance = 8;
    this.Port = 1;
  };
  alphaTab.model.PlaybackInformation.__name__ = [
    'alphaTab',
    'model',
    'PlaybackInformation'
  ];
  alphaTab.model.PlaybackInformation.CopyTo = function(src, dst) {
    dst.Volume = src.Volume;
    dst.Balance = src.Balance;
    dst.Port = src.Port;
    dst.Program = src.Program;
    dst.PrimaryChannel = src.PrimaryChannel;
    dst.SecondaryChannel = src.SecondaryChannel;
    dst.IsMute = src.IsMute;
    dst.IsSolo = src.IsSolo;
  };
  alphaTab.model.PlaybackInformation.prototype = {
    __class__: alphaTab.model.PlaybackInformation
  };
  alphaTab.model.RenderStylesheet = $hx_exports['alphaTab']['model'][
    'RenderStylesheet'
  ] = function() {
    this.HideDynamics = false;
    this.HideDynamics = false;
  };
  alphaTab.model.RenderStylesheet.__name__ = [
    'alphaTab',
    'model',
    'RenderStylesheet'
  ];
  alphaTab.model.RenderStylesheet.CopyTo = function(src, dst) {
    dst.HideDynamics = src.HideDynamics;
  };
  alphaTab.model.RenderStylesheet.prototype = {
    __class__: alphaTab.model.RenderStylesheet
  };
  alphaTab.model.RepeatGroup = $hx_exports['alphaTab']['model'][
    'RepeatGroup'
  ] = function() {
    this.MasterBars = null;
    this.Openings = null;
    this.Closings = null;
    this.IsOpened = false;
    this.IsClosed = false;
    var this1 = [];
    this.MasterBars = this1;
    var this2 = [];
    this.Openings = this2;
    var this3 = [];
    this.Closings = this3;
    this.IsClosed = false;
  };
  alphaTab.model.RepeatGroup.__name__ = ['alphaTab', 'model', 'RepeatGroup'];
  alphaTab.model.RepeatGroup.prototype = {
    AddMasterBar: function(masterBar) {
      if (this.Openings.length == 0) {
        this.Openings.push(masterBar);
      }
      this.MasterBars.push(masterBar);
      masterBar.RepeatGroup = this;
      if (masterBar.get_IsRepeatEnd()) {
        this.Closings.push(masterBar);
        this.IsClosed = true;
        if (!this.IsOpened) {
          this.MasterBars[0].IsRepeatStart = true;
          this.IsOpened = true;
        }
      } else if (this.IsClosed) {
        this.IsClosed = false;
        this.Openings.push(masterBar);
      }
    },
    __class__: alphaTab.model.RepeatGroup
  };
  alphaTab.model.Score = $hx_exports['alphaTab']['model'][
    'Score'
  ] = function() {
    this._currentRepeatGroup = null;
    this.Album = null;
    this.Artist = null;
    this.Copyright = null;
    this.Instructions = null;
    this.Music = null;
    this.Notices = null;
    this.SubTitle = null;
    this.Title = null;
    this.Words = null;
    this.Tab = null;
    this.Tempo = 0;
    this.TempoLabel = null;
    this.MasterBars = null;
    this.Tracks = null;
    this.Stylesheet = null;
    var this1 = [];
    this.MasterBars = this1;
    var this2 = [];
    this.Tracks = this2;
    this._currentRepeatGroup = new alphaTab.model.RepeatGroup();
    this.Album = this.Artist = this.Copyright = this.Instructions = this.Music = this.Notices = this.SubTitle = this.Title = this.Words = this.Tab = this.TempoLabel =
      '';
    this.Tempo = 120;
    this.Stylesheet = new alphaTab.model.RenderStylesheet();
  };
  alphaTab.model.Score.__name__ = ['alphaTab', 'model', 'Score'];
  alphaTab.model.Score.CopyTo = function(src, dst) {
    dst.Album = src.Album;
    dst.Artist = src.Artist;
    dst.Copyright = src.Copyright;
    dst.Instructions = src.Instructions;
    dst.Music = src.Music;
    dst.Notices = src.Notices;
    dst.SubTitle = src.SubTitle;
    dst.Title = src.Title;
    dst.Words = src.Words;
    dst.Tab = src.Tab;
    dst.Tempo = src.Tempo;
    dst.TempoLabel = src.TempoLabel;
  };
  alphaTab.model.Score.prototype = {
    RebuildRepeatGroups: function() {
      var currentGroup = new alphaTab.model.RepeatGroup();
      var bar = $iterator(this.MasterBars)();
      while (bar.hasNext()) {
        var bar1 = bar.next();
        if (
          bar1.IsRepeatStart ||
          (this._currentRepeatGroup.IsClosed && bar1.AlternateEndings <= 0)
        ) {
          currentGroup = new alphaTab.model.RepeatGroup();
        }
        currentGroup.AddMasterBar(bar1);
      }
    },
    AddMasterBar: function(bar) {
      bar.Score = this;
      bar.Index = this.MasterBars.length;
      if (this.MasterBars.length != 0) {
        bar.PreviousMasterBar = this.MasterBars[this.MasterBars.length - 1];
        bar.PreviousMasterBar.NextMasterBar = bar;
        bar.Start =
          bar.PreviousMasterBar.Start +
          bar.PreviousMasterBar.CalculateDuration();
      }
      if (
        bar.IsRepeatStart ||
        (this._currentRepeatGroup.IsClosed && bar.AlternateEndings <= 0)
      ) {
        this._currentRepeatGroup = new alphaTab.model.RepeatGroup();
      }
      this._currentRepeatGroup.AddMasterBar(bar);
      this.MasterBars.push(bar);
    },
    AddTrack: function(track) {
      track.Score = this;
      track.Index = this.Tracks.length;
      this.Tracks.push(track);
    },
    Finish: function(settings) {
      var i = 0;
      var j = this.Tracks.length;
      while (i < j) {
        this.Tracks[i].Finish(settings);
        ++i;
      }
    },
    __class__: alphaTab.model.Score
  };
  alphaTab.model.Section = $hx_exports['alphaTab']['model'][
    'Section'
  ] = function() {
    this.Marker = null;
    this.Text = null;
    this.Text = this.Marker = '';
  };
  alphaTab.model.Section.__name__ = ['alphaTab', 'model', 'Section'];
  alphaTab.model.Section.CopyTo = function(src, dst) {
    dst.Marker = src.Marker;
    dst.Text = src.Text;
  };
  alphaTab.model.Section.prototype = {
    __class__: alphaTab.model.Section
  };
  alphaTab.model._SimileMark = {};
  alphaTab.model._SimileMark.SimileMark_Impl_ = $hx_exports['alphaTab'][
    'model'
  ]['_SimileMark']['SimileMark_Impl_'] = {};
  alphaTab.model._SimileMark.SimileMark_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_SimileMark',
    'SimileMark_Impl_'
  ];
  alphaTab.model._SimileMark.SimileMark_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._SimileMark.SimileMark_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._SimileMark.SimileMark_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._SimileMark.SimileMark_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._SimileMark.SimileMark_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._SimileMark.SimileMark_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._SimileMark.SimileMark_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._SimileMark.SimileMark_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._SimileMark.SimileMark_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._SimileMark.SimileMark_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._SimileMark.SimileMark_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._SimileMark.SimileMark_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._SimileMark.SimileMark_Impl_.toString = function(this1) {
    switch (this1) {
      case 0:
        return 'None';
      case 1:
        return 'Simple';
      case 2:
        return 'FirstOfDouble';
      case 3:
        return 'SecondOfDouble';
    }
    return '';
  };
  alphaTab.model._SlideType = {};
  alphaTab.model._SlideType.SlideType_Impl_ = $hx_exports['alphaTab']['model'][
    '_SlideType'
  ]['SlideType_Impl_'] = {};
  alphaTab.model._SlideType.SlideType_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_SlideType',
    'SlideType_Impl_'
  ];
  alphaTab.model._SlideType.SlideType_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._SlideType.SlideType_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._SlideType.SlideType_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._SlideType.SlideType_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._SlideType.SlideType_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._SlideType.SlideType_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._SlideType.SlideType_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._SlideType.SlideType_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._SlideType.SlideType_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._SlideType.SlideType_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._SlideType.SlideType_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._SlideType.SlideType_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._SlideType.SlideType_Impl_.toString = function(this1) {
    switch (this1) {
      case 0:
        return 'None';
      case 1:
        return 'Shift';
      case 2:
        return 'Legato';
      case 3:
        return 'IntoFromBelow';
      case 4:
        return 'IntoFromAbove';
      case 5:
        return 'OutUp';
      case 6:
        return 'OutDown';
      case 7:
        return 'PickSlideDown';
      case 8:
        return 'PickSlideUp';
    }
    return '';
  };
  alphaTab.model.Staff = $hx_exports['alphaTab']['model'][
    'Staff'
  ] = function() {
    this.Index = 0;
    this.Track = null;
    this.Bars = null;
    this.Chords = null;
    this.Capo = 0;
    this.TranspositionPitch = 0;
    this.DisplayTranspositionPitch = 0;
    this.Tuning = null;
    this.TuningName = null;
    this.ShowTablature = false;
    this.ShowStandardNotation = false;
    this.IsPercussion = false;
    var this1 = [];
    this.Bars = this1;
    var this2 = new Int32Array(0);
    this.Tuning = this2;
    var this3 = {};
    this.Chords = this3;
    this.ShowStandardNotation = true;
    this.ShowTablature = true;
  };
  alphaTab.model.Staff.__name__ = ['alphaTab', 'model', 'Staff'];
  alphaTab.model.Staff.CopyTo = function(src, dst) {
    dst.Capo = src.Capo;
    dst.Index = src.Index;
    var array = src.Tuning;
    dst.Tuning = new Int32Array(array);
    dst.TranspositionPitch = src.TranspositionPitch;
    dst.DisplayTranspositionPitch = src.DisplayTranspositionPitch;
    dst.ShowStandardNotation = src.ShowStandardNotation;
    dst.ShowTablature = src.ShowTablature;
    dst.IsPercussion = src.IsPercussion;
  };
  alphaTab.model.Staff.prototype = {
    get_IsStringed: function() {
      return this.Tuning.length > 0;
    },
    Finish: function(settings) {
      var i = 0;
      var j = this.Bars.length;
      while (i < j) {
        this.Bars[i].Finish(settings);
        ++i;
      }
    },
    AddChord: function(chordId, chord) {
      chord.Staff = this;
      this.Chords[chordId] = chord;
    },
    AddBar: function(bar) {
      var bars = this.Bars;
      bar.Staff = this;
      bar.Index = bars.length;
      if (bars.length > 0) {
        bar.PreviousBar = bars[bars.length - 1];
        bar.PreviousBar.NextBar = bar;
      }
      bars.push(bar);
    },
    __class__: alphaTab.model.Staff
  };
  alphaTab.model.Track = $hx_exports['alphaTab']['model']['Track'] = function(
    staveCount
  ) {
    this.Index = 0;
    this.Score = null;
    this.Staves = null;
    this.PlaybackInfo = null;
    this.Color = null;
    this.Name = null;
    this.ShortName = null;
    var this1 = [];
    this.Staves = this1;
    this.EnsureStaveCount(staveCount);
    this.PlaybackInfo = new alphaTab.model.PlaybackInformation();
    this.Name = '';
    this.ShortName = '';
    this.Color = new alphaTab.platform.model.Color(200, 0, 0, 255);
  };
  alphaTab.model.Track.__name__ = ['alphaTab', 'model', 'Track'];
  alphaTab.model.Track.CopyTo = function(src, dst) {
    dst.Name = src.Name;
    dst.ShortName = src.ShortName;
    dst.Index = src.Index;
    dst.Color.Raw = src.Color.Raw;
    dst.Color.RGBA = src.Color.RGBA;
  };
  alphaTab.model.Track.prototype = {
    EnsureStaveCount: function(staveCount) {
      while (this.Staves.length < staveCount)
        this.AddStaff(new alphaTab.model.Staff());
    },
    AddStaff: function(staff) {
      staff.Index = this.Staves.length;
      staff.Track = this;
      this.Staves.push(staff);
    },
    Finish: function(settings) {
      var s = this.ShortName;
      if (s == null || s.length == 0) {
        this.ShortName = this.Name;
        if (this.ShortName.length > 10) {
          this.ShortName = HxOverrides.substr(this.ShortName, 0, 10);
        }
      }
      var i = 0;
      var j = this.Staves.length;
      while (i < j) {
        this.Staves[i].Finish(settings);
        ++i;
      }
    },
    ApplyLyrics: function(lyrics) {
      var lyric = $iterator(lyrics)();
      while (lyric.hasNext()) {
        var lyric1 = lyric.next();
        lyric1.Finish();
      }
      var staff = this.Staves[0];
      var li = 0;
      while (li < lyrics.length) {
        var lyric2 = lyrics[li];
        if (lyric2.StartBar >= 0) {
          var beat = staff.Bars[lyric2.StartBar].Voices[0].Beats[0];
          var ci = 0;
          while (ci < lyric2.Chunks.length && beat != null) {
            while (beat != null && (beat.IsEmpty || beat.get_IsRest()))
              beat = beat.NextBeat;
            if (beat != null) {
              if (beat.Lyrics == null) {
                var size = lyrics.length;
                var this1 = new Array(size);
                beat.Lyrics = this1;
              }
              beat.Lyrics[li] = lyric2.Chunks[ci];
              beat = beat.NextBeat;
            }
            ++ci;
          }
        }
        ++li;
      }
    },
    __class__: alphaTab.model.Track
  };
  alphaTab.model._TripletFeel = {};
  alphaTab.model._TripletFeel.TripletFeel_Impl_ = $hx_exports['alphaTab'][
    'model'
  ]['_TripletFeel']['TripletFeel_Impl_'] = {};
  alphaTab.model._TripletFeel.TripletFeel_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_TripletFeel',
    'TripletFeel_Impl_'
  ];
  alphaTab.model._TripletFeel.TripletFeel_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._TripletFeel.TripletFeel_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._TripletFeel.TripletFeel_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._TripletFeel.TripletFeel_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._TripletFeel.TripletFeel_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._TripletFeel.TripletFeel_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._TripletFeel.TripletFeel_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._TripletFeel.TripletFeel_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._TripletFeel.TripletFeel_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._TripletFeel.TripletFeel_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._TripletFeel.TripletFeel_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._TripletFeel.TripletFeel_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._TripletFeel.TripletFeel_Impl_.toString = function(this1) {
    switch (this1) {
      case 0:
        return 'NoTripletFeel';
      case 1:
        return 'Triplet16th';
      case 2:
        return 'Triplet8th';
      case 3:
        return 'Dotted16th';
      case 4:
        return 'Dotted8th';
      case 5:
        return 'Scottish16th';
      case 6:
        return 'Scottish8th';
    }
    return '';
  };
  alphaTab.model.Tuning = $hx_exports['alphaTab']['model']['Tuning'] = function(
    name,
    tuning,
    isStandard
  ) {
    this.IsStandard = false;
    this.Name = null;
    this.Tunings = null;
    this.IsStandard = isStandard;
    this.Name = name;
    this.Tunings = tuning;
  };
  alphaTab.model.Tuning.__name__ = ['alphaTab', 'model', 'Tuning'];
  alphaTab.model.Tuning.GetTextForTuning = function(tuning, includeOctave) {
    var octave = (tuning / 12) | 0;
    var note = tuning % 12;
    var notes = [
      'C',
      'Db',
      'D',
      'Eb',
      'E',
      'F',
      'Gb',
      'G',
      'Ab',
      'A',
      'Bb',
      'B'
    ];
    var result = notes[note];
    if (includeOctave) {
      result = result + Std.string(octave - 1);
    }
    return result;
  };
  alphaTab.model.Tuning.GetDefaultTuningFor = function(stringCount) {
    if (alphaTab.model.Tuning._defaultTunings.hasOwnProperty(stringCount)) {
      return alphaTab.model.Tuning._defaultTunings[stringCount];
    }
    return null;
  };
  alphaTab.model.Tuning.GetPresetsFor = function(stringCount) {
    switch (stringCount) {
      case 4:
        return alphaTab.model.Tuning._fourStrings;
      case 5:
        return alphaTab.model.Tuning._fiveStrings;
      case 6:
        return alphaTab.model.Tuning._sixStrings;
      case 7:
        return alphaTab.model.Tuning._sevenStrings;
      default:
    }
    var this1 = [];
    return this1;
  };
  alphaTab.model.Tuning.Initialize = function() {
    var this1 = [];
    alphaTab.model.Tuning._sevenStrings = this1;
    var this2 = [];
    alphaTab.model.Tuning._sixStrings = this2;
    var this3 = [];
    alphaTab.model.Tuning._fiveStrings = this3;
    var this4 = [];
    alphaTab.model.Tuning._fourStrings = this4;
    var this5 = {};
    alphaTab.model.Tuning._defaultTunings = this5;
    alphaTab.model.Tuning._defaultTunings[7] = new alphaTab.model.Tuning(
      'Guitar 7 strings',
      new Int32Array([64, 59, 55, 50, 45, 40, 35]),
      true
    );
    alphaTab.model.Tuning._sevenStrings.push(
      alphaTab.model.Tuning._defaultTunings[7]
    );
    alphaTab.model.Tuning._defaultTunings[6] = new alphaTab.model.Tuning(
      'Guitar Standard Tuning',
      new Int32Array([64, 59, 55, 50, 45, 40]),
      true
    );
    alphaTab.model.Tuning._sixStrings.push(
      alphaTab.model.Tuning._defaultTunings[6]
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Tune down ï¿½ step',
        new Int32Array([63, 58, 54, 49, 44, 39]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Tune down 1 step',
        new Int32Array([62, 57, 53, 48, 43, 38]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Tune down 2 step',
        new Int32Array([60, 55, 51, 46, 41, 36]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Dropped D Tuning',
        new Int32Array([64, 59, 55, 50, 45, 38]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Dropped D Tuning variant',
        new Int32Array([64, 57, 55, 50, 45, 38]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Double Dropped D Tuning',
        new Int32Array([62, 59, 55, 50, 45, 38]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Dropped E Tuning',
        new Int32Array([66, 61, 57, 52, 47, 40]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Dropped C Tuning',
        new Int32Array([62, 57, 53, 48, 43, 36]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Open C Tuning',
        new Int32Array([64, 60, 55, 48, 43, 36]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Open Cm Tuning',
        new Int32Array([63, 60, 55, 48, 43, 36]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Open C6 Tuning',
        new Int32Array([64, 57, 55, 48, 43, 36]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Open Cmaj7 Tuning',
        new Int32Array([64, 59, 55, 52, 43, 36]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Open D Tuning',
        new Int32Array([62, 57, 54, 50, 45, 38]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Open Dm Tuning',
        new Int32Array([62, 57, 53, 50, 45, 38]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Open D5 Tuning',
        new Int32Array([62, 57, 50, 50, 45, 38]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Open D6 Tuning',
        new Int32Array([62, 59, 54, 50, 45, 38]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Open Dsus4 Tuning',
        new Int32Array([62, 57, 55, 50, 45, 38]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Open E Tuning',
        new Int32Array([64, 59, 56, 52, 47, 40]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Open Em Tuning',
        new Int32Array([64, 59, 55, 52, 47, 40]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Open Esus11 Tuning',
        new Int32Array([64, 59, 55, 52, 45, 40]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Open F Tuning',
        new Int32Array([65, 60, 53, 48, 45, 41]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Open G Tuning',
        new Int32Array([62, 59, 55, 50, 43, 38]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Open Gm Tuning',
        new Int32Array([62, 58, 55, 50, 43, 38]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Open G6 Tuning',
        new Int32Array([64, 59, 55, 50, 43, 38]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Open Gsus4 Tuning',
        new Int32Array([62, 60, 55, 50, 43, 38]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Open A Tuning',
        new Int32Array([64, 61, 57, 52, 45, 40]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Open Am Tuning',
        new Int32Array([64, 60, 57, 52, 45, 40]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Guitar Nashville Tuning',
        new Int32Array([64, 59, 67, 62, 57, 52]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Bass 6 Strings Tuning',
        new Int32Array([48, 43, 38, 33, 28, 23]),
        false
      )
    );
    alphaTab.model.Tuning._sixStrings.push(
      new alphaTab.model.Tuning(
        'Lute or Vihuela Tuning',
        new Int32Array([64, 59, 54, 50, 45, 40]),
        false
      )
    );
    alphaTab.model.Tuning._defaultTunings[5] = new alphaTab.model.Tuning(
      'Bass 5 Strings Tuning',
      new Int32Array([43, 38, 33, 28, 23]),
      true
    );
    alphaTab.model.Tuning._fiveStrings.push(
      alphaTab.model.Tuning._defaultTunings[5]
    );
    alphaTab.model.Tuning._fiveStrings.push(
      new alphaTab.model.Tuning(
        'Banjo Dropped C Tuning',
        new Int32Array([62, 59, 55, 48, 67]),
        false
      )
    );
    alphaTab.model.Tuning._fiveStrings.push(
      new alphaTab.model.Tuning(
        'Banjo Open D Tuning',
        new Int32Array([62, 57, 54, 50, 69]),
        false
      )
    );
    alphaTab.model.Tuning._fiveStrings.push(
      new alphaTab.model.Tuning(
        'Banjo Open G Tuning',
        new Int32Array([62, 59, 55, 50, 67]),
        false
      )
    );
    alphaTab.model.Tuning._fiveStrings.push(
      new alphaTab.model.Tuning(
        'Banjo G Minor Tuning',
        new Int32Array([62, 58, 55, 50, 67]),
        false
      )
    );
    alphaTab.model.Tuning._fiveStrings.push(
      new alphaTab.model.Tuning(
        'Banjo G Modal Tuning',
        new Int32Array([62, 57, 55, 50, 67]),
        false
      )
    );
    alphaTab.model.Tuning._defaultTunings[4] = new alphaTab.model.Tuning(
      'Bass Standard Tuning',
      new Int32Array([43, 38, 33, 28]),
      true
    );
    alphaTab.model.Tuning._fourStrings.push(
      alphaTab.model.Tuning._defaultTunings[4]
    );
    alphaTab.model.Tuning._fourStrings.push(
      new alphaTab.model.Tuning(
        'Bass Tune down ï¿½ step',
        new Int32Array([42, 37, 32, 27]),
        false
      )
    );
    alphaTab.model.Tuning._fourStrings.push(
      new alphaTab.model.Tuning(
        'Bass Tune down 1 step',
        new Int32Array([41, 36, 31, 26]),
        false
      )
    );
    alphaTab.model.Tuning._fourStrings.push(
      new alphaTab.model.Tuning(
        'Bass Tune down 2 step',
        new Int32Array([39, 34, 29, 24]),
        false
      )
    );
    alphaTab.model.Tuning._fourStrings.push(
      new alphaTab.model.Tuning(
        'Bass Dropped D Tuning',
        new Int32Array([43, 38, 33, 26]),
        false
      )
    );
    alphaTab.model.Tuning._fourStrings.push(
      new alphaTab.model.Tuning(
        'Ukulele C Tuning',
        new Int32Array([45, 40, 36, 43]),
        false
      )
    );
    alphaTab.model.Tuning._fourStrings.push(
      new alphaTab.model.Tuning(
        'Ukulele G Tuning',
        new Int32Array([52, 47, 43, 38]),
        false
      )
    );
    alphaTab.model.Tuning._fourStrings.push(
      new alphaTab.model.Tuning(
        'Mandolin Standard Tuning',
        new Int32Array([64, 57, 50, 43]),
        false
      )
    );
    alphaTab.model.Tuning._fourStrings.push(
      new alphaTab.model.Tuning(
        'Mandolin or Violin Tuning',
        new Int32Array([76, 69, 62, 55]),
        false
      )
    );
    alphaTab.model.Tuning._fourStrings.push(
      new alphaTab.model.Tuning(
        'Viola Tuning',
        new Int32Array([69, 62, 55, 48]),
        false
      )
    );
    alphaTab.model.Tuning._fourStrings.push(
      new alphaTab.model.Tuning(
        'Cello Tuning',
        new Int32Array([57, 50, 43, 36]),
        false
      )
    );
  };
  alphaTab.model.Tuning.FindTuning = function(strings) {
    var tunings = alphaTab.model.Tuning.GetPresetsFor(strings.length);
    var t = 0;
    var tc = tunings.length;
    while (t < tc) {
      var tuning = tunings[t];
      var equals = true;
      var i = 0;
      var j = strings.length;
      while (i < j) {
        if (strings[i] != tuning.Tunings[i]) {
          equals = false;
          break;
        }
        ++i;
      }
      if (equals) {
        return tuning;
      }
      ++t;
    }
    return null;
  };
  alphaTab.model.Tuning.prototype = {
    __class__: alphaTab.model.Tuning
  };
  alphaTab.model.TuningParseResult = function() {
    this.Note = null;
    this.NoteValue = 0;
    this.Octave = 0;
  };
  alphaTab.model.TuningParseResult.__name__ = [
    'alphaTab',
    'model',
    'TuningParseResult'
  ];
  alphaTab.model.TuningParseResult.prototype = {
    get_RealValue: function() {
      return this.Octave * 12 + this.NoteValue;
    },
    __class__: alphaTab.model.TuningParseResult
  };
  alphaTab.model.TuningParser = function() {};
  alphaTab.model.TuningParser.__name__ = ['alphaTab', 'model', 'TuningParser'];
  alphaTab.model.TuningParser.IsTuning = function(name) {
    return alphaTab.model.TuningParser.Parse(name) != null;
  };
  alphaTab.model.TuningParser.Parse = function(name) {
    var note = '';
    var octave = '';
    var i = 0;
    while (i < name.length) {
      var this1 = system.Convert.ToUInt16(HxOverrides.cca(name, i));
      var c = this1;
      if (alphaTab.platform.Platform.IsCharNumber(c, false)) {
        if (note == null || note.length == 0) {
          return null;
        }
        octave = octave + String.fromCharCode(c);
      } else if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122) || c == 35) {
        note = note + String.fromCharCode(c);
      } else {
        return null;
      }
      ++i;
    }
    if (
      octave == null ||
      octave.length == 0 ||
      (note == null || note.length == 0)
    ) {
      return null;
    }
    var result = new alphaTab.model.TuningParseResult();
    result.Octave = alphaTab.platform.Platform.ParseInt(octave) + 1;
    result.Note = note.toLowerCase();
    result.NoteValue = alphaTab.model.TuningParser.GetToneForText(result.Note);
    return result;
  };
  alphaTab.model.TuningParser.GetTuningForText = function(str) {
    var result = alphaTab.model.TuningParser.Parse(str);
    if (result == null) {
      return -1;
    }
    return result.get_RealValue();
  };
  alphaTab.model.TuningParser.GetToneForText = function(note) {
    var b;
    var _g = note.toLowerCase();
    switch (_g) {
      case 'a':
        b = 9;
        break;
      case 'a#':
      case 'bb':
        b = 10;
        break;
      case 'ab':
      case 'g#':
        b = 8;
        break;
      case 'b':
        b = 11;
        break;
      case 'c':
        b = 0;
        break;
      case 'c#':
      case 'db':
        b = 1;
        break;
      case 'd':
        b = 2;
        break;
      case 'e':
        b = 4;
        break;
      case 'd#':
      case 'eb':
        b = 3;
        break;
      case 'f':
        b = 5;
        break;
      case 'g':
        b = 7;
        break;
      case 'f#':
      case 'gb':
        b = 6;
        break;
      default:
        return 0;
    }
    return b;
  };
  alphaTab.model.TupletGroup = $hx_exports['alphaTab']['model'][
    'TupletGroup'
  ] = function(voice) {
    this.Beats = null;
    this.Voice = null;
    this.TupletStart = 0;
    this.TupletEnd = 0;
    this.IsFull = false;
    this.Voice = voice;
    var this1 = [];
    this.Beats = this1;
  };
  alphaTab.model.TupletGroup.__name__ = ['alphaTab', 'model', 'TupletGroup'];
  alphaTab.model.TupletGroup.prototype = {
    Check: function(beat) {
      if (this.Beats.length == 0) {
        this.TupletStart = beat.get_AbsolutePlaybackStart();
        var beatDuration = beat.PlaybackDuration;
        if (beat.GraceType == 0) {
          beatDuration = alphaTab.audio.MidiUtils.RemoveTuplet(
            beatDuration,
            beat.TupletNumerator,
            beat.TupletDenominator
          );
        }
        this.TupletEnd =
          this.TupletStart + beatDuration * beat.TupletDenominator;
      } else if (beat.GraceType != 0) {
        return true;
      } else if (
        beat.Voice != this.Voice ||
        this.IsFull ||
        beat.TupletNumerator != this.Beats[0].TupletNumerator ||
        beat.TupletDenominator != this.Beats[0].TupletDenominator ||
        beat.get_AbsolutePlaybackStart() > this.TupletEnd
      ) {
        return false;
      }
      this.Beats.push(beat);
      var beatEnd = beat.get_AbsolutePlaybackStart() + beat.PlaybackDuration;
      if (this.TupletEnd < beatEnd + alphaTab.model.TupletGroup.FullThreshold) {
        this.IsFull = true;
      }
      return true;
    },
    __class__: alphaTab.model.TupletGroup
  };
  alphaTab.model._VibratoType = {};
  alphaTab.model._VibratoType.VibratoType_Impl_ = $hx_exports['alphaTab'][
    'model'
  ]['_VibratoType']['VibratoType_Impl_'] = {};
  alphaTab.model._VibratoType.VibratoType_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_VibratoType',
    'VibratoType_Impl_'
  ];
  alphaTab.model._VibratoType.VibratoType_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._VibratoType.VibratoType_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._VibratoType.VibratoType_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._VibratoType.VibratoType_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._VibratoType.VibratoType_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._VibratoType.VibratoType_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._VibratoType.VibratoType_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._VibratoType.VibratoType_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._VibratoType.VibratoType_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._VibratoType.VibratoType_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._VibratoType.VibratoType_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._VibratoType.VibratoType_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._VibratoType.VibratoType_Impl_.toString = function(this1) {
    switch (this1) {
      case 0:
        return 'None';
      case 1:
        return 'Slight';
      case 2:
        return 'Wide';
    }
    return '';
  };
  alphaTab.model.Voice = $hx_exports['alphaTab']['model'][
    'Voice'
  ] = function() {
    this._beatLookup = null;
    this.Index = 0;
    this.Bar = null;
    this.Beats = null;
    this.IsEmpty = false;
    var this1 = [];
    this.Beats = this1;
    this.IsEmpty = true;
  };
  alphaTab.model.Voice.__name__ = ['alphaTab', 'model', 'Voice'];
  alphaTab.model.Voice.CopyTo = function(src, dst) {
    dst.Index = src.Index;
    dst.IsEmpty = src.IsEmpty;
  };
  alphaTab.model.Voice.prototype = {
    InsertBeat: function(after, newBeat) {
      newBeat.NextBeat = after.NextBeat;
      if (newBeat.NextBeat != null) {
        newBeat.NextBeat.PreviousBeat = newBeat;
      }
      newBeat.PreviousBeat = after;
      newBeat.Voice = this;
      after.NextBeat = newBeat;
      this.Beats.splice(after.Index + 1, 0, newBeat);
    },
    AddBeat: function(beat) {
      beat.Voice = this;
      beat.Index = this.Beats.length;
      this.Beats.push(beat);
      if (!beat.IsEmpty) {
        this.IsEmpty = false;
      }
    },
    Chain: function(beat) {
      if (this.Bar == null) {
        return;
      }
      if (beat.Index < this.Beats.length - 1) {
        beat.NextBeat = this.Beats[beat.Index + 1];
        beat.NextBeat.PreviousBeat = beat;
      } else if (beat.get_IsLastOfVoice() && beat.Voice.Bar.NextBar != null) {
        var nextVoice = this.Bar.NextBar.Voices[this.Index];
        if (nextVoice.Beats.length > 0) {
          beat.NextBeat = nextVoice.Beats[0];
          beat.NextBeat.PreviousBeat = beat;
        } else {
          beat.NextBeat.PreviousBeat = beat;
        }
      }
    },
    AddGraceBeat: function(beat) {
      if (this.Beats.length == 0) {
        this.AddBeat(beat);
        return;
      }
      var lastBeat = this.Beats[this.Beats.length - 1];
      var index = this.Beats.length - 1;
      if (index != -1) {
        this.Beats.splice(index, 1);
      }
      this.AddBeat(beat);
      this.AddBeat(lastBeat);
      this.IsEmpty = false;
    },
    GetBeatAtDisplayStart: function(displayStart) {
      if (this._beatLookup.hasOwnProperty(displayStart)) {
        return this._beatLookup[displayStart];
      }
      return null;
    },
    Finish: function(settings) {
      var this1 = {};
      this._beatLookup = this1;
      var index = 0;
      while (index < this.Beats.length) {
        var beat = this.Beats[index];
        beat.Index = index;
        this.Chain(beat);
        ++index;
      }
      var currentDisplayTick = 0;
      var currentPlaybackTick = 0;
      var i = 0;
      while (i < this.Beats.length) {
        var beat1 = this.Beats[i];
        beat1.Index = i;
        beat1.Finish(settings);
        if (beat1.GraceType == 0 || beat1.GraceType == 3) {
          beat1.DisplayStart = currentDisplayTick;
          beat1.PlaybackStart = currentPlaybackTick;
          currentDisplayTick = currentDisplayTick + beat1.DisplayDuration;
          currentPlaybackTick = currentPlaybackTick + beat1.PlaybackDuration;
        } else {
          if (beat1.PreviousBeat == null || beat1.PreviousBeat.GraceType == 0) {
            var nonGrace = beat1;
            var numberOfGraceBeats = 0;
            while (nonGrace != null && nonGrace.GraceType != 0) {
              nonGrace = nonGrace.NextBeat;
              ++numberOfGraceBeats;
            }
            var graceDuration = 8;
            var stolenDuration = 0;
            if (numberOfGraceBeats == 1) {
              graceDuration = 8;
            } else if (numberOfGraceBeats == 2) {
              graceDuration = 16;
            } else {
              graceDuration = 32;
            }
            if (nonGrace != null) {
              nonGrace.UpdateDurations();
            }
            var perGraceDuration =
              nonGrace == null
                ? alphaTab.audio.MidiUtils.ToTicks(32)
                : (((nonGrace.DisplayDuration / 4) | 0) / numberOfGraceBeats) |
                  0;
            var graceBeat = this.Beats[i];
            var j = 0;
            while (j < numberOfGraceBeats && graceBeat != null) {
              graceBeat.Duration = graceDuration;
              graceBeat.UpdateDurations();
              graceBeat.DisplayStart =
                currentDisplayTick -
                (numberOfGraceBeats - j + 1) * perGraceDuration;
              graceBeat.DisplayDuration = perGraceDuration;
              stolenDuration = stolenDuration + graceBeat.PlaybackDuration;
              graceBeat = graceBeat.NextBeat;
              ++j;
            }
            if (beat1.GraceType == 2) {
              if (beat1.PreviousBeat != null) {
                beat1.PreviousBeat.PlaybackDuration =
                  beat1.PreviousBeat.PlaybackDuration - stolenDuration;
              }
              currentPlaybackTick = currentPlaybackTick - stolenDuration;
            } else if (nonGrace != null && beat1.GraceType == 1) {
              nonGrace.PlaybackDuration =
                nonGrace.PlaybackDuration - stolenDuration;
            }
          }
          beat1.PlaybackStart = currentPlaybackTick;
          currentPlaybackTick = beat1.PlaybackStart + beat1.PlaybackDuration;
        }
        beat1.FinishTuplet();
        this._beatLookup[beat1.DisplayStart] = beat1;
        ++i;
      }
    },
    CalculateDuration: function() {
      if (this.IsEmpty || this.Beats.length == 0) {
        return 0;
      }
      var lastBeat = this.Beats[this.Beats.length - 1];
      return lastBeat.PlaybackStart + lastBeat.PlaybackDuration;
    },
    __class__: alphaTab.model.Voice
  };
  alphaTab.model._WhammyType = {};
  alphaTab.model._WhammyType.WhammyType_Impl_ = $hx_exports['alphaTab'][
    'model'
  ]['_WhammyType']['WhammyType_Impl_'] = {};
  alphaTab.model._WhammyType.WhammyType_Impl_.__name__ = [
    'alphaTab',
    'model',
    '_WhammyType',
    'WhammyType_Impl_'
  ];
  alphaTab.model._WhammyType.WhammyType_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.model._WhammyType.WhammyType_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._WhammyType.WhammyType_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.model._WhammyType.WhammyType_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.model._WhammyType.WhammyType_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.model._WhammyType.WhammyType_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.model._WhammyType.WhammyType_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._WhammyType.WhammyType_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._WhammyType.WhammyType_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._WhammyType.WhammyType_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.model._WhammyType.WhammyType_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._WhammyType.WhammyType_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.model._WhammyType.WhammyType_Impl_.toString = function(this1) {
    switch (this1) {
      case 0:
        return 'None';
      case 1:
        return 'Custom';
      case 2:
        return 'Dive';
      case 3:
        return 'Dip';
      case 4:
        return 'Hold';
      case 5:
        return 'Predive';
      case 6:
        return 'PrediveDive';
    }
    return '';
  };
  alphaTab.platform.javaScript.AlphaSynthFlashOutput = function(
    alphaSynthRoot
  ) {
    this._alphaSynthRoot = null;
    this._id = null;
    this._swfId = null;
    this._swfContainer = null;
    this._alphaSynthRoot = alphaSynthRoot;
    var lastSlash = this._alphaSynthRoot.lastIndexOf('/');
    if (lastSlash != -1) {
      this._alphaSynthRoot = HxOverrides.substr(
        this._alphaSynthRoot,
        0,
        lastSlash + 1
      );
    }
  };
  alphaTab.platform.javaScript.AlphaSynthFlashOutput.__name__ = [
    'alphaTab',
    'platform',
    'javaScript',
    'AlphaSynthFlashOutput'
  ];
  alphaTab.platform.javaScript.AlphaSynthFlashOutput.__interfaces__ = [
    alphaTab.audio.synth.ISynthOutput
  ];
  alphaTab.platform.javaScript.AlphaSynthFlashOutput.OnReady = function(id) {
    if (
      alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup.hasOwnProperty(
        id
      )
    ) {
      system._EventAction.EventAction_Impl_.Invoke(
        alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup[id].Ready
      );
    }
  };
  alphaTab.platform.javaScript.AlphaSynthFlashOutput.OnSampleRequest = function(
    id
  ) {
    if (
      alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup.hasOwnProperty(
        id
      )
    ) {
      system._EventAction.EventAction_Impl_.Invoke(
        alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup[id]
          .SampleRequest
      );
    }
  };
  alphaTab.platform.javaScript.AlphaSynthFlashOutput.OnFinished = function(id) {
    if (
      alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup.hasOwnProperty(
        id
      ) &&
      alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup[id].Finished !=
        null
    ) {
      system._EventAction.EventAction_Impl_.Invoke(
        alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup[id].Finished
      );
    }
  };
  alphaTab.platform.javaScript.AlphaSynthFlashOutput.OnSamplesPlayed = function(
    id,
    samples
  ) {
    if (
      alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup.hasOwnProperty(
        id
      )
    ) {
      system._EventAction1.EventAction1_Impl_.Invoke(
        alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup[id]
          .SamplesPlayed,
        samples
      );
    }
  };
  alphaTab.platform.javaScript.AlphaSynthFlashOutput.prototype = {
    get_SampleRate: function() {
      return 44100;
    },
    Open: function() {
      this._id =
        'alphaSynthFlashPlayer' +
        Std.string(alphaTab.platform.javaScript.AlphaSynthFlashOutput.NextId);
      this._swfId = this._id + 'swf';
      alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup[
        this._id
      ] = this;
      alphaTab.platform.javaScript.AlphaSynthFlashOutput.NextId++;
      var document = window.document;
      this._swfContainer = document.createElement('div');
      this._swfContainer.className = 'alphaSynthFlashPlayer';
      this._swfContainer.setAttribute('id', this._id);
      document.body.appendChild(this._swfContainer);
      var swf = $global.swfobject;
      if (swf) {
        var embedSwf = swf.embedSWF;
        embedSwf(
          this._alphaSynthRoot + 'AlphaSynth.FlashOutput.swf',
          this._id,
          '1px',
          '1px',
          '9.0.0',
          null,
          { id: this._id, sampleRate: 44100 },
          { allowScriptAccess: 'always' },
          { id: this._swfId }
        );
      } else {
        alphaTab.util.Logger.Error(
          'Player',
          'swfobject not found, player will not work',
          null
        );
      }
    },
    get_FlashOutput: function() {
      var element = this._swfId;
      var element1 = window.document.getElementById(element);
      return element1;
    },
    Play: function() {
      var element = this._swfId;
      var element1 = window.document.getElementById(element);
      element1.AlphaSynthPlay();
    },
    Pause: function() {
      var element = this._swfId;
      var element1 = window.document.getElementById(element);
      element1.AlphaSynthPause();
    },
    SequencerFinished: function() {
      var element = this._swfId;
      var element1 = window.document.getElementById(element);
      element1.AlphaSynthSequencerFinished();
    },
    AddSamples: function(samples) {
      var uint8 = new Uint8Array(
        alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array(
          samples
        ).buffer
      );
      var b64 = window.btoa(String.fromCharCode.apply(null, uint8));
      var element = this._swfId;
      var element1 = window.document.getElementById(element);
      element1.AlphaSynthAddSamples(b64);
    },
    ResetSamples: function() {
      var element = this._swfId;
      var element1 = window.document.getElementById(element);
      element1.AlphaSynthResetSamples();
    },
    add_Ready: function(value) {
      this.Ready = system._EventAction.EventAction_Impl_.add(this.Ready, value);
    },
    remove_Ready: function(value) {
      this.Ready = system._EventAction.EventAction_Impl_.sub(this.Ready, value);
    },
    add_SampleRequest: function(value) {
      this.SampleRequest = system._EventAction.EventAction_Impl_.add(
        this.SampleRequest,
        value
      );
    },
    remove_SampleRequest: function(value) {
      this.SampleRequest = system._EventAction.EventAction_Impl_.sub(
        this.SampleRequest,
        value
      );
    },
    add_Finished: function(value) {
      this.Finished = system._EventAction.EventAction_Impl_.add(
        this.Finished,
        value
      );
    },
    remove_Finished: function(value) {
      this.Finished = system._EventAction.EventAction_Impl_.sub(
        this.Finished,
        value
      );
    },
    add_SamplesPlayed: function(value) {
      this.SamplesPlayed = system._EventAction1.EventAction1_Impl_.add(
        this.SamplesPlayed,
        value
      );
    },
    remove_SamplesPlayed: function(value) {
      this.SamplesPlayed = system._EventAction1.EventAction1_Impl_.sub(
        this.SamplesPlayed,
        value
      );
    },
    Activate: function() {},
    __class__: alphaTab.platform.javaScript.AlphaSynthFlashOutput
  };
  alphaTab.platform.javaScript.AlphaSynthWebAudioOutput = function() {
    this._context = null;
    this._buffer = null;
    this._source = null;
    this._audioNode = null;
    this._circularBuffer = null;
    this._finished = false;
  };
  alphaTab.platform.javaScript.AlphaSynthWebAudioOutput.__name__ = [
    'alphaTab',
    'platform',
    'javaScript',
    'AlphaSynthWebAudioOutput'
  ];
  alphaTab.platform.javaScript.AlphaSynthWebAudioOutput.__interfaces__ = [
    alphaTab.audio.synth.ISynthOutput
  ];
  alphaTab.platform.javaScript.AlphaSynthWebAudioOutput.prototype = {
    get_SampleRate: function() {
      return this._context.sampleRate;
    },
    Open: function() {
      this._finished = false;
      this.PatchIosSampleRate();
      this._circularBuffer = new alphaTab.audio.synth.ds.CircularSampleBuffer(
        4096 * 10
      );
      this._context = new AudioContext();
      var ctx = this._context;
      if (ctx.state == 'suspended') {
        var resume = null;
        resume = function(e) {
          ctx.resume();
          window.setTimeout(function() {
            if (ctx.state == 'running') {
              window.document.body.removeEventListener(
                'touchend',
                resume,
                false
              );
              window.document.body.removeEventListener('click', resume, false);
            }
          }, 0);
        };
        window.document.body.addEventListener('touchend', resume, false);
        window.document.body.addEventListener('click', resume, false);
      }
      system._EventAction.EventAction_Impl_.Invoke(this.Ready);
    },
    Activate: function() {
      if (this._context != null) {
        var ctx = this._context;
        ctx.resume();
      }
    },
    PatchIosSampleRate: function() {
      var ua = window.navigator.userAgent;
      if (ua.indexOf('iPhone') != -1 || ua.indexOf('iPad') != -1) {
        var context = new AudioContext();
        var buffer = context.createBuffer(1, 1, 44100);
        var dummy = context.createBufferSource();
        dummy.buffer = buffer;
        dummy.connect(context.destination);
        dummy.start(0);
        dummy.disconnect(0);
        context.close();
      }
    },
    Play: function() {
      var ctx = this._context;
      if (ctx.state == 'suspended' || ctx.state == 'interrupted') {
        ctx.resume();
      }
      this._buffer = this._context.createBuffer(
        2,
        4096,
        this._context.sampleRate
      );
      this._audioNode = this._context.createScriptProcessor(4096, 0, 2);
      this._audioNode.onaudioprocess = $bind(this, this.GenerateSound);
      this._circularBuffer.Clear();
      this.RequestBuffers();
      this._finished = false;
      this._source = this._context.createBufferSource();
      this._source.buffer = this._buffer;
      this._source.loop = true;
      this._source.connect(this._audioNode, 0, 0);
      this._source.start(0);
      this._audioNode.connect(this._context.destination, 0, 0);
    },
    Pause: function() {
      if (this._source != null) {
        this._source.stop(0);
        this._source.disconnect(0);
      }
      this._source = null;
      if (this._audioNode != null) {
        this._audioNode.disconnect(0);
      }
      this._audioNode = null;
    },
    SequencerFinished: function() {
      this._finished = true;
    },
    AddSamples: function(f) {
      this._circularBuffer.Write(f, 0, f.length);
    },
    ResetSamples: function() {
      this._circularBuffer.Clear();
    },
    RequestBuffers: function() {
      var count = ((10 / 2) | 0) * 4096;
      if (this._circularBuffer.Count < count && this.SampleRequest != null) {
        var i = 0;
        while (i < ((10 / 2) | 0)) {
          system._EventAction.EventAction_Impl_.Invoke(this.SampleRequest);
          ++i;
        }
      }
    },
    GenerateSound: function(e) {
      var left = e.outputBuffer.getChannelData(0);
      var right = e.outputBuffer.getChannelData(1);
      var samples = left.length + right.length;
      if (this._circularBuffer.Count < samples) {
        if (this._finished) {
          system._EventAction.EventAction_Impl_.Invoke(this.Finished);
        }
      } else {
        var this1 = new Float32Array(samples);
        var buffer = this1;
        this._circularBuffer.Read(buffer, 0, buffer.length);
        var s = 0;
        var i = 0;
        while (i < left.length) {
          left[i] = buffer[s++];
          right[i] = buffer[s++];
          ++i;
        }
        system._EventAction1.EventAction1_Impl_.Invoke(
          this.SamplesPlayed,
          left.length
        );
      }
      if (!this._finished) {
        this.RequestBuffers();
      }
    },
    add_Ready: function(value) {
      this.Ready = system._EventAction.EventAction_Impl_.add(this.Ready, value);
    },
    remove_Ready: function(value) {
      this.Ready = system._EventAction.EventAction_Impl_.sub(this.Ready, value);
    },
    add_SamplesPlayed: function(value) {
      this.SamplesPlayed = system._EventAction1.EventAction1_Impl_.add(
        this.SamplesPlayed,
        value
      );
    },
    remove_SamplesPlayed: function(value) {
      this.SamplesPlayed = system._EventAction1.EventAction1_Impl_.sub(
        this.SamplesPlayed,
        value
      );
    },
    add_SampleRequest: function(value) {
      this.SampleRequest = system._EventAction.EventAction_Impl_.add(
        this.SampleRequest,
        value
      );
    },
    remove_SampleRequest: function(value) {
      this.SampleRequest = system._EventAction.EventAction_Impl_.sub(
        this.SampleRequest,
        value
      );
    },
    add_Finished: function(value) {
      this.Finished = system._EventAction.EventAction_Impl_.add(
        this.Finished,
        value
      );
    },
    remove_Finished: function(value) {
      this.Finished = system._EventAction.EventAction_Impl_.sub(
        this.Finished,
        value
      );
    },
    __class__: alphaTab.platform.javaScript.AlphaSynthWebAudioOutput
  };
  alphaTab.platform.javaScript.AlphaSynthWebWorkerApi = function(
    player,
    alphaSynthScriptFile,
    logLevel
  ) {
    this._synth = null;
    this._output = null;
    this._events = null;
    this._workerIsReadyForPlayback = false;
    this._workerIsReady = false;
    this._outputIsReady = false;
    this._state = 0;
    this._masterVolume = 0.0;
    this._metronomeVolume = 0.0;
    this._playbackSpeed = 0.0;
    this._tickPosition = 0;
    this._timePosition = 0.0;
    this._isLooping = false;
    this._playbackRange = null;
    this._output = player;
    this._output.add_Ready($bind(this, this.OnOutputReady));
    this._output.add_SamplesPlayed($bind(this, this.OnOutputSamplesPlayed));
    this._output.add_SampleRequest($bind(this, this.OnOutputSampleRequest));
    this._output.add_Finished($bind(this, this.OnOutputFinished));
    var this1 = {};
    this._events = this1;
    this._output.Open();
    try {
      this._synth = new Worker(alphaSynthScriptFile);
    } catch (__e) {
      try {
        var script = "importScripts('" + alphaSynthScriptFile + "')";
        var blob = new Blob([script]);
        this._synth = new Worker(URL.createObjectURL(blob));
      } catch (e) {
        if (e instanceof js._Boot.HaxeError) e = e.val;
        if (js.Boot.__instanceof(e, system.Exception)) {
          alphaTab.util.Logger.Error(
            'AlphaSynth',
            'Failed to create WebWorker: ' + Std.string(e),
            null
          );
        } else throw e;
      }
    }
    this._synth.addEventListener(
      'message',
      $bind(this, this.HandleWorkerMessage),
      false
    );
    this._synth.postMessage({
      cmd: 'alphaSynth.' + 'initialize',
      sampleRate: this._output.get_SampleRate(),
      logLevel: logLevel
    });
    this.set_MasterVolume(1);
    this.set_PlaybackSpeed(1);
    this.set_MetronomeVolume(0);
  };
  alphaTab.platform.javaScript.AlphaSynthWebWorkerApi.__name__ = [
    'alphaTab',
    'platform',
    'javaScript',
    'AlphaSynthWebWorkerApi'
  ];
  alphaTab.platform.javaScript.AlphaSynthWebWorkerApi.__interfaces__ = [
    alphaTab.audio.synth.IAlphaSynth
  ];
  alphaTab.platform.javaScript.AlphaSynthWebWorkerApi.prototype = {
    get_IsReady: function() {
      if (this._workerIsReady) {
        return this._outputIsReady;
      } else {
        return false;
      }
    },
    get_IsReadyForPlayback: function() {
      return this._workerIsReadyForPlayback;
    },
    get_State: function() {
      return this._state;
    },
    get_LogLevel: function() {
      return alphaTab.util.Logger.LogLevel;
    },
    set_LogLevel: function(value) {
      alphaTab.util.Logger.LogLevel = value;
      this._synth.postMessage({
        cmd: 'alphaSynth.' + 'setLogLevel',
        value: value
      });
      return this.get_LogLevel();
    },
    get_MasterVolume: function() {
      return this._masterVolume;
    },
    set_MasterVolume: function(value) {
      value = alphaTab.audio.synth.util.SynthHelper.ClampF(value, 0, 10);
      this._masterVolume = value;
      this._synth.postMessage({
        cmd: 'alphaSynth.' + 'setMasterVolume',
        value: value
      });
      return this.get_MasterVolume();
    },
    get_MetronomeVolume: function() {
      return this._metronomeVolume;
    },
    set_MetronomeVolume: function(value) {
      value = alphaTab.audio.synth.util.SynthHelper.ClampF(value, 0, 10);
      this._metronomeVolume = value;
      this._synth.postMessage({
        cmd: 'alphaSynth.' + 'setMetronomeVolume',
        value: value
      });
      return this.get_MetronomeVolume();
    },
    get_PlaybackSpeed: function() {
      return this._playbackSpeed;
    },
    set_PlaybackSpeed: function(value) {
      value = alphaTab.audio.synth.util.SynthHelper.ClampD(value, 0.125, 8);
      this._playbackSpeed = value;
      this._synth.postMessage({
        cmd: 'alphaSynth.' + 'setPlaybackSpeed',
        value: value
      });
      return this.get_PlaybackSpeed();
    },
    get_TickPosition: function() {
      return this._tickPosition;
    },
    set_TickPosition: function(value) {
      if (value < 0) {
        value = 0;
      }
      this._tickPosition = value;
      this._synth.postMessage({
        cmd: 'alphaSynth.' + 'setTickPosition',
        value: value
      });
      return this.get_TickPosition();
    },
    get_TimePosition: function() {
      return this._timePosition;
    },
    set_TimePosition: function(value) {
      if (value < 0) {
        value = 0;
      }
      this._timePosition = value;
      this._synth.postMessage({
        cmd: 'alphaSynth.' + 'setTimePosition',
        value: value
      });
      return this.get_TimePosition();
    },
    get_IsLooping: function() {
      return this._isLooping;
    },
    set_IsLooping: function(value) {
      this._isLooping = value;
      this._synth.postMessage({
        cmd: 'alphaSynth.' + 'setIsLooping',
        value: value
      });
      return this.get_IsLooping();
    },
    get_PlaybackRange: function() {
      return this._playbackRange;
    },
    set_PlaybackRange: function(value) {
      if (value != null) {
        if (value.StartTick < 0) {
          value.StartTick = 0;
        }
        if (value.EndTick < 0) {
          value.EndTick = 0;
        }
      }
      this._playbackRange = value;
      this._synth.postMessage({
        cmd: 'alphaSynth.' + 'setPlaybackRange',
        value: value
      });
      return this.get_PlaybackRange();
    },
    Destroy: function() {
      this._synth.terminate();
    },
    Play: function() {
      this._output.Activate();
      this._synth.postMessage({ cmd: 'alphaSynth.' + 'play' });
    },
    Pause: function() {
      this._synth.postMessage({ cmd: 'alphaSynth.' + 'pause' });
    },
    PlayPause: function() {
      this._synth.postMessage({ cmd: 'alphaSynth.' + 'playPause' });
    },
    Stop: function() {
      this._synth.postMessage({ cmd: 'alphaSynth.' + 'stop' });
    },
    LoadSoundFont: function(data) {
      this._synth.postMessage({
        cmd: 'alphaSynth.' + 'loadSoundFontBytes',
        data: data
      });
    },
    LoadSoundFontFromUrl: function(data) {
      var _gthis = this;
      var url = data;
      alphaTab.util.Logger.Info(
        'AlphaSynth',
        'Start loading Soundfont from url ' + url,
        null
      );
      var request = new XMLHttpRequest();
      request.open('GET', url, true, null, null);
      request.responseType = 'arraybuffer';
      request.onload = function(e) {
        var buffer = new Uint8Array(request.response);
        _gthis._synth.postMessage({
          cmd: 'alphaSynth.' + 'loadSoundFontBytes',
          data: buffer
        });
      };
      request.onerror = function(e1) {
        alphaTab.util.Logger.Error(
          'AlphaSynth',
          'Loading failed: ' + e1['message'],
          null
        );
        _gthis.OnSoundFontLoadFailed(e1);
      };
      request.onprogress = function(e2) {
        alphaTab.util.Logger.Debug(
          'AlphaSynth',
          'Soundfont downloading: ' +
            e2['loaded'] +
            '/' +
            e2['total'] +
            ' bytes',
          null
        );
        _gthis.OnSoundFontLoad(
          new alphaTab.audio.synth.ProgressEventArgs(e2['loaded'], e2['total'])
        );
      };
      request.send();
    },
    LoadMidiFile: function(midi) {
      this._synth.postMessage({
        cmd: 'alphaSynth.' + 'loadMidi',
        midi: alphaTab.model.JsonConverter.MidiFileToJsObject(midi)
      });
    },
    SetChannelMute: function(channel, mute) {
      this._synth.postMessage({
        cmd: 'alphaSynth.' + 'setChannelMute',
        channel: channel,
        mute: mute
      });
    },
    ResetChannelStates: function() {
      this._synth.postMessage({ cmd: 'alphaSynth.' + 'resetChannelStates' });
    },
    SetChannelSolo: function(channel, solo) {
      this._synth.postMessage({
        cmd: 'alphaSynth.' + 'setChannelSolo',
        channel: channel,
        solo: solo
      });
    },
    SetChannelVolume: function(channel, volume) {
      var this1 = 0;
      var this2 = 10;
      volume = alphaTab.audio.synth.util.SynthHelper.ClampD(
        volume,
        this1,
        this2
      );
      this._synth.postMessage({
        cmd: 'alphaSynth.' + 'setChannelVolume',
        channel: channel,
        volume: volume
      });
    },
    SetChannelProgram: function(channel, program) {
      program = alphaTab.audio.synth.util.SynthHelper.ClampB(program, 0, 127);
      this._synth.postMessage({
        cmd: 'alphaSynth.' + 'setChannelProgram',
        channel: channel,
        program: program
      });
    },
    HandleWorkerMessage: function(e) {
      var data = e.data;
      var cmd = data.cmd;
      switch (cmd) {
        case 'alphaSynth.finished':
          this.OnFinished(
            new alphaTab.audio.synth.PlaybackFinishedEventArgs(data.isLooping)
          );
          break;
        case 'alphaSynth.log':
          alphaTab.util.Logger.Log(
            data.level,
            'AlphaSynth',
            data.message,
            null
          );
          break;
        case 'alphaSynth.midiLoadFailed':
          this.CheckReadyForPlayback();
          this.OnMidiLoadFailed(data.error);
          break;
        case 'alphaSynth.midiLoaded':
          this.CheckReadyForPlayback();
          this.OnMidiLoaded();
          break;
        case 'alphaSynth.output.addSamples':
          this._output.AddSamples(data.samples);
          break;
        case 'alphaSynth.output.pause':
          this._output.Pause();
          break;
        case 'alphaSynth.output.play':
          this._output.Play();
          break;
        case 'alphaSynth.output.resetSamples':
          this._output.ResetSamples();
          break;
        case 'alphaSynth.output.sequencerFinished':
          this._output.SequencerFinished();
          break;
        case 'alphaSynth.playerStateChanged':
          this._state = data.state;
          this.OnStateChanged(
            new alphaTab.audio.synth.PlayerStateChangedEventArgs(data.state)
          );
          break;
        case 'alphaSynth.positionChanged':
          this._timePosition = data.currentTime;
          this._tickPosition = data.currentTick;
          this.OnPositionChanged(
            new alphaTab.audio.synth.PositionChangedEventArgs(
              data.currentTime,
              data.endTime,
              data.currentTick,
              data.endTick
            )
          );
          break;
        case 'alphaSynth.ready':
          this._workerIsReady = true;
          this.CheckReady();
          break;
        case 'alphaSynth.readyForPlayback':
          this._workerIsReadyForPlayback = true;
          this.CheckReadyForPlayback();
          break;
        case 'alphaSynth.soundFontLoadFailed':
          this.OnSoundFontLoadFailed(data.error);
          break;
        case 'alphaSynth.soundFontLoaded':
          this.OnSoundFontLoaded();
          break;
        default:
      }
    },
    CheckReady: function() {
      if (this.get_IsReady()) {
        this.OnReady();
      }
    },
    CheckReadyForPlayback: function() {
      if (this.get_IsReadyForPlayback()) {
        this.OnReadyForPlayback();
      }
    },
    add_Ready: function(value) {
      this.Ready = system._EventAction.EventAction_Impl_.add(this.Ready, value);
    },
    remove_Ready: function(value) {
      this.Ready = system._EventAction.EventAction_Impl_.sub(this.Ready, value);
    },
    OnReady: function() {
      var _e = this.Ready;
      var handler = function() {
        system._EventAction.EventAction_Impl_.Invoke(_e);
      };
      if (handler != null) {
        handler();
      }
      this.TriggerEvent('ready', null);
    },
    add_ReadyForPlayback: function(value) {
      this.ReadyForPlayback = system._EventAction.EventAction_Impl_.add(
        this.ReadyForPlayback,
        value
      );
    },
    remove_ReadyForPlayback: function(value) {
      this.ReadyForPlayback = system._EventAction.EventAction_Impl_.sub(
        this.ReadyForPlayback,
        value
      );
    },
    OnReadyForPlayback: function() {
      var _e = this.ReadyForPlayback;
      var handler = function() {
        system._EventAction.EventAction_Impl_.Invoke(_e);
      };
      if (handler != null) {
        handler();
      }
      this.TriggerEvent('ready', null);
    },
    add_Finished: function(value) {
      this.Finished = system._EventAction1.EventAction1_Impl_.add(
        this.Finished,
        value
      );
    },
    remove_Finished: function(value) {
      this.Finished = system._EventAction1.EventAction1_Impl_.sub(
        this.Finished,
        value
      );
    },
    OnFinished: function(e) {
      var _e = this.Finished;
      var handler = function(p) {
        system._EventAction1.EventAction1_Impl_.Invoke(_e, p);
      };
      if (handler != null) {
        handler(e);
      }
      this.TriggerEvent('finished', [e]);
    },
    add_SoundFontLoaded: function(value) {
      this.SoundFontLoaded = system._EventAction.EventAction_Impl_.add(
        this.SoundFontLoaded,
        value
      );
    },
    remove_SoundFontLoaded: function(value) {
      this.SoundFontLoaded = system._EventAction.EventAction_Impl_.sub(
        this.SoundFontLoaded,
        value
      );
    },
    OnSoundFontLoaded: function() {
      var _e = this.SoundFontLoaded;
      var handler = function() {
        system._EventAction.EventAction_Impl_.Invoke(_e);
      };
      if (handler != null) {
        handler();
      }
      this.TriggerEvent('soundFontLoaded', null);
    },
    add_SoundFontLoad: function(value) {
      this.SoundFontLoad = system._EventAction1.EventAction1_Impl_.add(
        this.SoundFontLoad,
        value
      );
    },
    remove_SoundFontLoad: function(value) {
      this.SoundFontLoad = system._EventAction1.EventAction1_Impl_.sub(
        this.SoundFontLoad,
        value
      );
    },
    OnSoundFontLoad: function(e) {
      var _e = this.SoundFontLoad;
      var handler = function(p) {
        system._EventAction1.EventAction1_Impl_.Invoke(_e, p);
      };
      if (handler != null) {
        handler(e);
      }
      this.TriggerEvent('soundFontLoad', [
        {
          Loaded: e['loaded'],
          loaded: e['loaded'],
          Total: e['total'],
          total: e['total']
        }
      ]);
    },
    add_SoundFontLoadFailed: function(value) {
      this.SoundFontLoadFailed = system._EventAction1.EventAction1_Impl_.add(
        this.SoundFontLoadFailed,
        value
      );
    },
    remove_SoundFontLoadFailed: function(value) {
      this.SoundFontLoadFailed = system._EventAction1.EventAction1_Impl_.sub(
        this.SoundFontLoadFailed,
        value
      );
    },
    OnSoundFontLoadFailed: function(e) {
      var _e = this.SoundFontLoadFailed;
      var handler = function(p) {
        system._EventAction1.EventAction1_Impl_.Invoke(_e, p);
      };
      if (handler != null) {
        handler(e);
      }
      this.TriggerEvent('soundFontLoadFailed', [e]);
    },
    add_MidiLoaded: function(value) {
      this.MidiLoaded = system._EventAction.EventAction_Impl_.add(
        this.MidiLoaded,
        value
      );
    },
    remove_MidiLoaded: function(value) {
      this.MidiLoaded = system._EventAction.EventAction_Impl_.sub(
        this.MidiLoaded,
        value
      );
    },
    OnMidiLoaded: function() {
      var _e = this.MidiLoaded;
      var handler = function() {
        system._EventAction.EventAction_Impl_.Invoke(_e);
      };
      if (handler != null) {
        handler();
      }
      this.TriggerEvent('midiFileLoaded', null);
    },
    add_MidiLoadFailed: function(value) {
      this.MidiLoadFailed = system._EventAction1.EventAction1_Impl_.add(
        this.MidiLoadFailed,
        value
      );
    },
    remove_MidiLoadFailed: function(value) {
      this.MidiLoadFailed = system._EventAction1.EventAction1_Impl_.sub(
        this.MidiLoadFailed,
        value
      );
    },
    OnMidiLoadFailed: function(e) {
      var _e = this.MidiLoadFailed;
      var handler = function(p) {
        system._EventAction1.EventAction1_Impl_.Invoke(_e, p);
      };
      if (handler != null) {
        handler(e);
      }
      this.TriggerEvent('midiFileLoadFailed', [e]);
    },
    add_StateChanged: function(value) {
      this.StateChanged = system._EventAction1.EventAction1_Impl_.add(
        this.StateChanged,
        value
      );
    },
    remove_StateChanged: function(value) {
      this.StateChanged = system._EventAction1.EventAction1_Impl_.sub(
        this.StateChanged,
        value
      );
    },
    OnStateChanged: function(e) {
      var _e = this.StateChanged;
      var handler = function(p) {
        system._EventAction1.EventAction1_Impl_.Invoke(_e, p);
      };
      if (handler != null) {
        handler(e);
      }
      this.TriggerEvent('playerStateChanged', [e]);
    },
    add_PositionChanged: function(value) {
      this.PositionChanged = system._EventAction1.EventAction1_Impl_.add(
        this.PositionChanged,
        value
      );
    },
    remove_PositionChanged: function(value) {
      this.PositionChanged = system._EventAction1.EventAction1_Impl_.sub(
        this.PositionChanged,
        value
      );
    },
    OnPositionChanged: function(e) {
      var _e = this.PositionChanged;
      var handler = function(p) {
        system._EventAction1.EventAction1_Impl_.Invoke(_e, p);
      };
      if (handler != null) {
        handler(e);
      }
      this.TriggerEvent('positionChanged', [e]);
    },
    TriggerEvent: function(name, args) {
      var events = this._events[name];
      if (events != null) {
        var i = 0;
        while (i < events.length) {
          var action = events[i];
          action.apply(null, args);
          ++i;
        }
      }
    },
    OnOutputSampleRequest: function() {
      this._synth.postMessage({
        cmd: 'alphaSynth.' + 'output.' + 'sampleRequest'
      });
    },
    OnOutputFinished: function() {
      this._synth.postMessage({ cmd: 'alphaSynth.' + 'output.' + 'finished' });
    },
    OnOutputSamplesPlayed: function(samples) {
      this._synth.postMessage({
        cmd: 'alphaSynth.' + 'output.' + 'samplesPlayed',
        samples: samples
      });
    },
    OnOutputReady: function() {
      this._outputIsReady = true;
      this.CheckReady();
    },
    __class__: alphaTab.platform.javaScript.AlphaSynthWebWorkerApi
  };
  alphaTab.platform.javaScript.AlphaTabApi = $hx_exports['alphaTab'][
    'platform'
  ]['javaScript']['AlphaTabApi'] = function(element, options) {
    alphaTab.AlphaTabApi.call(
      this,
      new alphaTab.ui.BrowserUiFacade(element),
      options
    );
  };
  alphaTab.platform.javaScript.AlphaTabApi.__name__ = [
    'alphaTab',
    'platform',
    'javaScript',
    'AlphaTabApi'
  ];
  alphaTab.platform.javaScript.AlphaTabApi.__super__ = alphaTab.AlphaTabApi;
  alphaTab.platform.javaScript.AlphaTabApi.prototype = $extend(
    alphaTab.AlphaTabApi.prototype,
    {
      TexWithTrackData: function(tex, trackData) {
        this.Tex(
          tex,
          js.Boot.__cast(
            this.UiFacade,
            alphaTab.ui.BrowserUiFacade
          ).ParseTracks(trackData)
        );
      },
      Print: function(width) {
        var preview = window.open('', '', 'width=0,height=0');
        var a4 = preview.document.createElement('div');
        if (!(width == null || width.length == 0)) {
          a4.style.width = width;
        } else if (this.Settings.Layout.Mode == 'horizontal') {
          a4.style.width = '297mm';
        } else {
          a4.style.width = '210mm';
        }
        preview.document.write(
          '<!DOCTYPE html><html></head><body></body></html>'
        );
        preview.document.body.appendChild(a4);
        var dualScreenLeft;
        var o = window['ScreenLeft'];
        if (typeof o != 'undefined') {
          dualScreenLeft = window['ScreenLeft'];
        } else {
          dualScreenLeft = window.screen.left;
        }
        var dualScreenTop;
        var o1 = window['ScreenTop'];
        if (typeof o1 != 'undefined') {
          dualScreenTop = window['ScreenTop'];
        } else {
          dualScreenTop = window.screen.top;
        }
        var screenWidth;
        var o2 = window.innerWidth;
        if (typeof o2 != 'undefined') {
          screenWidth = window.innerWidth;
        } else {
          var o3 = window.document.documentElement.clientWidth;
          if (typeof o3 != 'undefined') {
            screenWidth = window.document.documentElement.clientWidth;
          } else {
            screenWidth = window.screen.width;
          }
        }
        var screenHeight;
        var o4 = window.innerHeight;
        if (typeof o4 != 'undefined') {
          screenHeight = window.innerHeight;
        } else {
          var o5 = window.document.documentElement.clientHeight;
          if (typeof o5 != 'undefined') {
            screenHeight = window.document.documentElement.clientHeight;
          } else {
            screenHeight = window.screen.height;
          }
        }
        var w = a4.offsetWidth + 50;
        var h = window.innerHeight;
        var left = ((screenWidth / 2) | 0) - ((w / 2) | 0) + dualScreenLeft;
        var top = ((screenHeight / 2) | 0) - ((h / 2) | 0) + dualScreenTop;
        preview.resizeTo(w, h);
        preview.moveTo(left, top);
        preview.focus();
        var settings = alphaTab.Settings.get_Defaults();
        settings.ScriptFile = this.Settings.ScriptFile;
        settings.FontDirectory = this.Settings.FontDirectory;
        settings.Scale = 0.8;
        settings.StretchForce = 0.8;
        settings.DisableLazyLoading = true;
        settings.UseWorkers = false;
        var alphaTab1 = new alphaTab.platform.javaScript.AlphaTabApi(
          a4,
          settings
        );
        alphaTab1.Renderer.add_PostRenderFinished(function() {
          alphaTab1.CanvasElement.set_Height(-1);
          preview.print();
        });
        alphaTab1.RenderTracks(this.Score, this.TrackIndexes, true);
      },
      Load: function(data) {
        var _gthis = this;
        try {
          if (data instanceof ArrayBuffer) {
            this.ScoreLoaded(
              alphaTab.importer.ScoreLoader.LoadScoreFromBytes(
                new Uint8Array(data),
                this.Settings
              ),
              true
            );
          } else if (data instanceof Uint8Array) {
            this.ScoreLoaded(
              alphaTab.importer.ScoreLoader.LoadScoreFromBytes(
                data,
                this.Settings
              ),
              true
            );
          } else if (typeof data == 'string') {
            alphaTab.importer.ScoreLoader.LoadScoreAsync(
              data,
              function(s) {
                _gthis.ScoreLoaded(s, true);
              },
              function(e) {
                _gthis.OnError('import', e);
              },
              this.Settings
            );
          }
        } catch (e1) {
          if (e1 instanceof js._Boot.HaxeError) e1 = e1.val;
          if (js.Boot.__instanceof(e1, system.Exception)) {
            this.OnError('import', e1);
          } else throw e1;
        }
      },
      UpdateLayout: function(json) {
        this.Settings.Layout = alphaTab.Settings.LayoutFromJson(json);
        this.Renderer.UpdateSettings(this.Settings);
        this.Renderer.Invalidate();
      },
      SetTracks: function(tracks, render) {
        js.Boot.__cast(this.UiFacade, alphaTab.ui.BrowserUiFacade).SetTracks(
          tracks,
          render
        );
      },
      LoadSoundFont: function(value) {
        if (this.Player == null) {
          return;
        }
        if (typeof value == 'string') {
          js.Boot.__cast(
            this.Player,
            alphaTab.platform.javaScript.AlphaSynthWebWorkerApi
          ).LoadSoundFontFromUrl(value);
        } else {
          this.Player.LoadSoundFont(value);
        }
      },
      DownloadMidi: function() {
        var midiFile = new alphaTab.audio.synth.midi.MidiFile();
        var handler = new alphaTab.audio.generator.AlphaSynthMidiFileHandler(
          midiFile
        );
        var generator = new alphaTab.audio.generator.MidiFileGenerator(
          this.Score,
          this.Settings,
          handler
        );
        generator.Generate();
        var binary = midiFile.ToBinary();
        var uint8Array = binary;
        var fileName;
        var s = this.Score.Title;
        if (s == null || s.length == 0) {
          fileName = 'File.mid';
        } else {
          fileName = this.Score.Title + '.mid';
        }
        var dlLink = js.Boot.__cast(
          window.document.createElement('a'),
          HTMLAnchorElement
        );
        dlLink.download = fileName;
        var blob = new Blob([uint8Array], { type: 'audio/midi' });
        var url = URL.createObjectURL(blob);
        dlLink.href = url;
        dlLink.style.display = 'none';
        window.document.body.appendChild(dlLink);
        dlLink.click();
        window.document.body.removeChild(dlLink);
      },
      SetTrackVolume: function(tracks, volume) {
        var trackList = this.TrackIndexesToTracks(
          js.Boot.__cast(
            this.UiFacade,
            alphaTab.ui.BrowserUiFacade
          ).ParseTracks(tracks)
        );
        this.ChangeTrackVolume(trackList, volume);
      },
      SetTrackSolo: function(tracks, solo) {
        var trackList = this.TrackIndexesToTracks(
          js.Boot.__cast(
            this.UiFacade,
            alphaTab.ui.BrowserUiFacade
          ).ParseTracks(tracks)
        );
        this.ChangeTrackSolo(trackList, solo);
      },
      SetTrackMute: function(tracks, mute) {
        var trackList = this.TrackIndexesToTracks(
          js.Boot.__cast(
            this.UiFacade,
            alphaTab.ui.BrowserUiFacade
          ).ParseTracks(tracks)
        );
        this.ChangeTrackMute(trackList, mute);
      },
      __class__: alphaTab.platform.javaScript.AlphaTabApi
    }
  );
  alphaTab.rendering.IScoreRenderer = $hx_exports['alphaTab']['rendering'][
    'IScoreRenderer'
  ] = function() {};
  alphaTab.rendering.IScoreRenderer.__name__ = [
    'alphaTab',
    'rendering',
    'IScoreRenderer'
  ];
  alphaTab.rendering.IScoreRenderer.prototype = {
    __class__: alphaTab.rendering.IScoreRenderer
  };
  alphaTab.platform.javaScript.AlphaTabWorkerScoreRenderer = function(
    api,
    settings
  ) {
    this._api = null;
    this._worker = null;
    this.set_BoundsLookup(null);
    this._api = api;
    try {
      this._worker = new Worker(settings.ScriptFile);
    } catch (__e) {
      try {
        var script = "importScripts('" + settings.ScriptFile + "')";
        var blob = new Blob([script]);
        this._worker = new Worker(URL.createObjectURL(blob));
      } catch (e) {
        if (e instanceof js._Boot.HaxeError) e = e.val;
        if (js.Boot.__instanceof(e, system.Exception)) {
          alphaTab.util.Logger.Error(
            'Rendering',
            'Failed to create WebWorker: ' + Std.string(e),
            null
          );
        } else throw e;
      }
    }
    this._worker.postMessage({
      cmd: 'alphaTab.initialize',
      settings: settings.ToJson()
    });
    this._worker.addEventListener(
      'message',
      $bind(this, this.HandleWorkerMessage)
    );
  };
  alphaTab.platform.javaScript.AlphaTabWorkerScoreRenderer.__name__ = [
    'alphaTab',
    'platform',
    'javaScript',
    'AlphaTabWorkerScoreRenderer'
  ];
  alphaTab.platform.javaScript.AlphaTabWorkerScoreRenderer.__interfaces__ = [
    alphaTab.rendering.IScoreRenderer
  ];
  alphaTab.platform.javaScript.AlphaTabWorkerScoreRenderer.prototype = {
    get_BoundsLookup: function() {
      return this.__BoundsLookup;
    },
    set_BoundsLookup: function(value) {
      return (this.__BoundsLookup = value);
    },
    Destroy: function() {
      this._worker.terminate();
    },
    UpdateSettings: function(settings) {
      this._worker.postMessage({
        cmd: 'alphaTab.updateSettings',
        settings: settings.ToJson()
      });
    },
    Invalidate: function() {
      this._worker.postMessage({ cmd: 'alphaTab.invalidate' });
    },
    Resize: function(width) {
      this._worker.postMessage({ cmd: 'alphaTab.resize', width: width });
    },
    HandleWorkerMessage: function(e) {
      var data = js.Boot.__cast(e, MessageEvent).data;
      var cmd = data.cmd;
      switch (cmd) {
        case 'alphaTab.error':
          this.OnError(data.type, data.detail);
          break;
        case 'alphaTab.partialRenderFinished':
          this.OnPartialRenderFinished(data.result);
          break;
        case 'alphaTab.postRenderFinished':
          this.set_BoundsLookup(
            alphaTab.rendering.utils.BoundsLookup.FromJson(
              data.boundsLookup,
              this._api.Score
            )
          );
          this.OnPostRenderFinished();
          break;
        case 'alphaTab.preRender':
          this.OnPreRender();
          break;
        case 'alphaTab.renderFinished':
          this.OnRenderFinished(data.result);
          break;
        default:
      }
    },
    Render: function(score, trackIndexes) {
      var jsObject = alphaTab.model.JsonConverter.ScoreToJsObject(score);
      this._worker.postMessage({
        cmd: 'alphaTab.render',
        score: jsObject,
        trackIndexes: trackIndexes
      });
    },
    add_PreRender: function(value) {
      this.PreRender = system._EventAction.EventAction_Impl_.add(
        this.PreRender,
        value
      );
    },
    remove_PreRender: function(value) {
      this.PreRender = system._EventAction.EventAction_Impl_.sub(
        this.PreRender,
        value
      );
    },
    OnPreRender: function() {
      var _e = this.PreRender;
      var handler = function() {
        system._EventAction.EventAction_Impl_.Invoke(_e);
      };
      if (handler != null) {
        handler();
      }
    },
    add_PartialRenderFinished: function(value) {
      this.PartialRenderFinished = system._EventAction1.EventAction1_Impl_.add(
        this.PartialRenderFinished,
        value
      );
    },
    remove_PartialRenderFinished: function(value) {
      this.PartialRenderFinished = system._EventAction1.EventAction1_Impl_.sub(
        this.PartialRenderFinished,
        value
      );
    },
    OnPartialRenderFinished: function(obj) {
      var _e = this.PartialRenderFinished;
      var handler = function(p) {
        system._EventAction1.EventAction1_Impl_.Invoke(_e, p);
      };
      if (handler != null) {
        handler(obj);
      }
    },
    add_RenderFinished: function(value) {
      this.RenderFinished = system._EventAction1.EventAction1_Impl_.add(
        this.RenderFinished,
        value
      );
    },
    remove_RenderFinished: function(value) {
      this.RenderFinished = system._EventAction1.EventAction1_Impl_.sub(
        this.RenderFinished,
        value
      );
    },
    OnRenderFinished: function(obj) {
      var _e = this.RenderFinished;
      var handler = function(p) {
        system._EventAction1.EventAction1_Impl_.Invoke(_e, p);
      };
      if (handler != null) {
        handler(obj);
      }
    },
    add_Error: function(value) {
      this.Error = system._EventAction2.EventAction2_Impl_.add(
        this.Error,
        value
      );
    },
    remove_Error: function(value) {
      this.Error = system._EventAction2.EventAction2_Impl_.sub(
        this.Error,
        value
      );
    },
    OnError: function(type, details) {
      var _e = this.Error;
      var handler = function(p1, p2) {
        system._EventAction2.EventAction2_Impl_.Invoke(_e, p1, p2);
      };
      if (handler != null) {
        handler(type, details);
      }
    },
    add_PostRenderFinished: function(value) {
      this.PostRenderFinished = system._EventAction.EventAction_Impl_.add(
        this.PostRenderFinished,
        value
      );
    },
    remove_PostRenderFinished: function(value) {
      this.PostRenderFinished = system._EventAction.EventAction_Impl_.sub(
        this.PostRenderFinished,
        value
      );
    },
    OnPostRenderFinished: function() {
      var _e = this.PostRenderFinished;
      var handler = function() {
        system._EventAction.EventAction_Impl_.Invoke(_e);
      };
      if (handler != null) {
        handler();
      }
    },
    __class__: alphaTab.platform.javaScript.AlphaTabWorkerScoreRenderer
  };
  alphaTab.platform.javaScript.IFlashSynthOutput = function() {};
  alphaTab.platform.javaScript.IFlashSynthOutput.__name__ = [
    'alphaTab',
    'platform',
    'javaScript',
    'IFlashSynthOutput'
  ];
  alphaTab.platform.javaScript.IFlashSynthOutput.prototype = {
    __class__: alphaTab.platform.javaScript.IFlashSynthOutput
  };
  alphaTab.platform.model._FontStyle = {};
  alphaTab.platform.model._FontStyle.FontStyle_Impl_ = $hx_exports['alphaTab'][
    'platform'
  ]['model']['_FontStyle']['FontStyle_Impl_'] = {};
  alphaTab.platform.model._FontStyle.FontStyle_Impl_.__name__ = [
    'alphaTab',
    'platform',
    'model',
    '_FontStyle',
    'FontStyle_Impl_'
  ];
  alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.platform.model._FontStyle.FontStyle_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'Plain';
      case 1:
        return 'Bold';
      case 2:
        return 'Italic';
    }
    return '';
  };
  alphaTab.platform.model._TextAlign = {};
  alphaTab.platform.model._TextAlign.TextAlign_Impl_ = $hx_exports['alphaTab'][
    'platform'
  ]['model']['_TextAlign']['TextAlign_Impl_'] = {};
  alphaTab.platform.model._TextAlign.TextAlign_Impl_.__name__ = [
    'alphaTab',
    'platform',
    'model',
    '_TextAlign',
    'TextAlign_Impl_'
  ];
  alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.platform.model._TextAlign.TextAlign_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'Left';
      case 1:
        return 'Center';
      case 2:
        return 'Right';
    }
    return '';
  };
  alphaTab.platform.model._TextBaseline = {};
  alphaTab.platform.model._TextBaseline.TextBaseline_Impl_ = $hx_exports[
    'alphaTab'
  ]['platform']['model']['_TextBaseline']['TextBaseline_Impl_'] = {};
  alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.__name__ = [
    'alphaTab',
    'platform',
    'model',
    '_TextBaseline',
    'TextBaseline_Impl_'
  ];
  alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'Top';
      case 1:
        return 'Middle';
      case 2:
        return 'Bottom';
    }
    return '';
  };
  alphaTab.platform.svg.FontSizes = function() {};
  alphaTab.platform.svg.FontSizes.__name__ = [
    'alphaTab',
    'platform',
    'svg',
    'FontSizes'
  ];
  alphaTab.platform.svg.FontSizes.GenerateFontLookup = function(family) {
    if (alphaTab.platform.svg.FontSizes.FontSizeLookupTables == null) {
      var this1 = {};
      alphaTab.platform.svg.FontSizes.FontSizeLookupTables = this1;
    }
    if (
      alphaTab.platform.svg.FontSizes.FontSizeLookupTables.hasOwnProperty(
        family
      )
    ) {
      return alphaTab.platform.svg.FontSizes.FontSizeLookupTables[family];
    }
    var canvas = js.Boot.__cast(
      window.document.createElement('canvas'),
      HTMLCanvasElement
    );
    var measureContext = canvas.getContext('2d');
    measureContext.font = '11px ' + family;
    var this2 = [];
    var sizes = this2;
    var i = 32;
    while (i < 255) {
      var s = String.fromCharCode(i);
      sizes.push(measureContext.measureText(s).width);
      ++i;
    }
    var data = new Uint8Array(sizes);
    alphaTab.platform.svg.FontSizes.FontSizeLookupTables[family] = data;
    return data;
  };
  alphaTab.platform.svg.FontSizes.Init = function() {
    alphaTab.platform.svg.FontSizes.Georgia = new Uint8Array([
      3,
      4,
      5,
      7,
      7,
      9,
      8,
      2,
      4,
      4,
      5,
      7,
      3,
      4,
      3,
      5,
      7,
      5,
      6,
      6,
      6,
      6,
      6,
      6,
      7,
      6,
      3,
      3,
      7,
      7,
      7,
      5,
      10,
      7,
      7,
      7,
      8,
      7,
      7,
      8,
      9,
      4,
      6,
      8,
      7,
      10,
      8,
      8,
      7,
      8,
      8,
      6,
      7,
      8,
      7,
      11,
      8,
      7,
      7,
      4,
      5,
      4,
      7,
      7,
      6,
      6,
      6,
      5,
      6,
      5,
      4,
      6,
      6,
      3,
      3,
      6,
      3,
      10,
      6,
      6,
      6,
      6,
      5,
      5,
      4,
      6,
      5,
      8,
      6,
      5,
      5,
      5,
      4,
      5,
      7,
      6,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      3,
      4,
      6,
      7,
      6,
      7,
      4,
      6,
      6,
      10,
      6,
      6,
      7,
      0,
      10,
      7,
      5,
      7,
      6,
      6,
      6,
      6,
      6,
      3,
      6,
      6,
      6,
      6,
      12,
      12,
      12,
      5,
      7,
      7,
      7,
      7,
      7,
      7,
      11,
      7,
      7,
      7,
      7,
      7,
      4,
      4,
      4,
      4,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      7,
      8,
      8,
      8,
      8,
      8,
      7,
      7,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      8,
      5,
      5,
      5,
      5,
      5,
      3,
      3,
      3,
      3,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      7,
      6,
      6,
      6,
      6,
      6,
      5,
      6
    ]);
    alphaTab.platform.svg.FontSizes.Arial = new Uint8Array([
      3,
      3,
      4,
      6,
      6,
      10,
      7,
      2,
      4,
      4,
      4,
      6,
      3,
      4,
      3,
      3,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      3,
      3,
      6,
      6,
      6,
      6,
      11,
      7,
      7,
      8,
      8,
      7,
      7,
      9,
      8,
      3,
      6,
      7,
      6,
      9,
      8,
      9,
      7,
      9,
      8,
      7,
      7,
      8,
      7,
      10,
      7,
      7,
      7,
      3,
      3,
      3,
      5,
      6,
      4,
      6,
      6,
      6,
      6,
      6,
      3,
      6,
      6,
      2,
      2,
      6,
      2,
      9,
      6,
      6,
      6,
      6,
      4,
      6,
      3,
      6,
      6,
      8,
      6,
      6,
      6,
      4,
      3,
      4,
      6,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      3,
      4,
      6,
      6,
      6,
      6,
      3,
      6,
      4,
      8,
      4,
      6,
      6,
      0,
      8,
      6,
      4,
      6,
      4,
      4,
      4,
      6,
      6,
      4,
      4,
      4,
      4,
      6,
      9,
      9,
      9,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      11,
      8,
      7,
      7,
      7,
      7,
      3,
      3,
      3,
      3,
      8,
      8,
      9,
      9,
      9,
      9,
      9,
      6,
      9,
      8,
      8,
      8,
      8,
      7,
      7,
      7,
      6,
      6,
      6,
      6,
      6,
      6,
      10,
      6,
      6,
      6,
      6,
      6,
      3,
      3,
      3,
      3,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      7,
      6,
      6,
      6,
      6,
      6,
      6
    ]);
    var this1 = {};
    alphaTab.platform.svg.FontSizes.FontSizeLookupTables = this1;
    alphaTab.platform.svg.FontSizes.FontSizeLookupTables['Arial'] =
      alphaTab.platform.svg.FontSizes.Arial;
    alphaTab.platform.svg.FontSizes.FontSizeLookupTables["'Arial'"] =
      alphaTab.platform.svg.FontSizes.Arial;
    alphaTab.platform.svg.FontSizes.FontSizeLookupTables['"Arial"'] =
      alphaTab.platform.svg.FontSizes.Arial;
    alphaTab.platform.svg.FontSizes.FontSizeLookupTables['Georgia'] =
      alphaTab.platform.svg.FontSizes.Georgia;
    alphaTab.platform.svg.FontSizes.FontSizeLookupTables["'Georgia'"] =
      alphaTab.platform.svg.FontSizes.Georgia;
    alphaTab.platform.svg.FontSizes.FontSizeLookupTables['"Georgia"'] =
      alphaTab.platform.svg.FontSizes.Georgia;
  };
  alphaTab.platform.svg.FontSizes.MeasureString = function(
    s,
    family,
    size,
    style
  ) {
    if (alphaTab.platform.svg.FontSizes.FontSizeLookupTables == null) {
      alphaTab.platform.svg.FontSizes.Init();
    }
    var data;
    var dataSize = 11;
    if (
      alphaTab.platform.svg.FontSizes.FontSizeLookupTables.hasOwnProperty(
        family
      )
    ) {
      data = alphaTab.platform.svg.FontSizes.FontSizeLookupTables[family];
    } else {
      data = new Uint8Array([8]);
    }
    var factor = 1;
    if ((style & 2) != 0) {
      factor = factor * 1.2;
    }
    if ((style & 1) != 0) {
      factor = factor * 1.2;
    }
    var stringSize = 0;
    var i = 0;
    while (i < s.length) {
      var a = data.length - 1;
      var this1 = system.Convert.ToUInt16(HxOverrides.cca(s, i));
      var code = Math.min(a, this1 - 32);
      if (code >= 0) {
        stringSize = stringSize + (data[code] * size) / dataSize;
      }
      ++i;
    }
    return stringSize * factor;
  };
  alphaTab.platform.svg.FontSizes.prototype = {
    __class__: alphaTab.platform.svg.FontSizes
  };
  alphaTab.rendering.BarRendererBase = function(renderer, bar) {
    this._preBeatGlyphs = null;
    this._voiceContainers = null;
    this._postBeatGlyphs = null;
    this.Staff = null;
    this.X = 0.0;
    this.Y = 0.0;
    this.Width = 0.0;
    this.Height = 0.0;
    this.Index = 0;
    this.TopOverflow = 0.0;
    this.BottomOverflow = 0.0;
    this.Helpers = null;
    this.Bar = null;
    this.IsLinkedToPrevious = false;
    this.CanWrap = false;
    this.ScoreRenderer = null;
    this._wasFirstOfLine = false;
    this.LayoutingInfo = null;
    this._appliedLayoutingInfo = 0;
    this.IsFinalized = false;
    this.TopPadding = 0.0;
    this.BottomPadding = 0.0;
    this.Bar = bar;
    this.ScoreRenderer = renderer;
    this.Helpers = new alphaTab.rendering.utils.BarHelpers(bar);
    this.CanWrap = true;
  };
  alphaTab.rendering.BarRendererBase.__name__ = [
    'alphaTab',
    'rendering',
    'BarRendererBase'
  ];
  alphaTab.rendering.BarRendererBase.prototype = {
    get_NextRenderer: function() {
      if (this.Bar.NextBar == null) {
        return null;
      }
      return this.ScoreRenderer.Layout.GetRendererForBar(
        this.Staff.get_StaveId(),
        this.Bar.NextBar
      );
    },
    get_PreviousRenderer: function() {
      if (this.Bar.PreviousBar == null) {
        return null;
      }
      return this.ScoreRenderer.Layout.GetRendererForBar(
        this.Staff.get_StaveId(),
        this.Bar.PreviousBar
      );
    },
    RegisterOverflowTop: function(topOverflow) {
      if (topOverflow > this.TopOverflow) {
        this.TopOverflow = topOverflow;
      }
    },
    RegisterOverflowBottom: function(bottomOverflow) {
      if (bottomOverflow > this.BottomOverflow) {
        this.BottomOverflow = bottomOverflow;
      }
    },
    ScaleToWidth: function(width) {
      var containerWidth =
        width - this._preBeatGlyphs.Width - this._postBeatGlyphs.Width;
      var this1 = this._voiceContainers;
      var voice = $iterator(Object.keys(this1))();
      while (voice.hasNext()) {
        var voice1 = voice.next();
        var c = this._voiceContainers[voice1];
        c.ScaleToWidth(containerWidth);
      }
      this._postBeatGlyphs.X =
        this._preBeatGlyphs.X + this._preBeatGlyphs.Width + containerWidth;
      this.Width = width;
    },
    get_Resources: function() {
      return this.get_Settings().RenderingResources;
    },
    get_Settings: function() {
      return this.ScoreRenderer.Settings;
    },
    get_Scale: function() {
      return this.get_Settings().Scale;
    },
    get_IsFirstOfLine: function() {
      return this.Index == 0;
    },
    get_IsLast: function() {
      return this.Bar.Index == this.ScoreRenderer.Layout.LastBarIndex;
    },
    RegisterLayoutingInfo: function() {
      var info = this.LayoutingInfo;
      var preSize = this._preBeatGlyphs.Width;
      if (info.PreBeatSize < preSize) {
        info.PreBeatSize = preSize;
      }
      var this1 = this._voiceContainers;
      var voice = $iterator(Object.keys(this1))();
      while (voice.hasNext()) {
        var voice1 = voice.next();
        var c = this._voiceContainers[voice1];
        c.RegisterLayoutingInfo(info);
      }
      var postSize = this._postBeatGlyphs.Width;
      if (info.PostBeatSize < postSize) {
        info.PostBeatSize = postSize;
      }
    },
    ApplyLayoutingInfo: function() {
      if (this._appliedLayoutingInfo >= this.LayoutingInfo.Version) {
        return false;
      }
      this._appliedLayoutingInfo = this.LayoutingInfo.Version;
      this._preBeatGlyphs.Width = this.LayoutingInfo.PreBeatSize;
      var voiceEnd = this._preBeatGlyphs.X + this._preBeatGlyphs.Width;
      var this1 = this._voiceContainers;
      var voice = $iterator(Object.keys(this1))();
      while (voice.hasNext()) {
        var voice1 = voice.next();
        var c = this._voiceContainers[voice1];
        c.X = this._preBeatGlyphs.X + this._preBeatGlyphs.Width;
        c.ApplyLayoutingInfo(this.LayoutingInfo);
        var newEnd = c.X + c.Width;
        if (voiceEnd < newEnd) {
          voiceEnd = newEnd;
        }
      }
      var this2 = voiceEnd;
      this._postBeatGlyphs.X = js.Boot.__cast(Math.floor(this2), Float);
      this._postBeatGlyphs.Width = this.LayoutingInfo.PostBeatSize;
      var this3 = this._postBeatGlyphs.X + this._postBeatGlyphs.Width;
      this.Width = js.Boot.__cast(Math.ceil(this3), Float);
      return true;
    },
    FinalizeRenderer: function() {
      this.IsFinalized = true;
    },
    DoLayout: function() {
      this._preBeatGlyphs = new alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup();
      this._preBeatGlyphs.Renderer = this;
      var this1 = {};
      this._voiceContainers = this1;
      this._postBeatGlyphs = new alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup();
      this._postBeatGlyphs.Renderer = this;
      var i = 0;
      while (i < this.Bar.Voices.length) {
        var voice = this.Bar.Voices[i];
        if (this.HasVoiceContainer(voice)) {
          var c = new alphaTab.rendering.glyphs.VoiceContainerGlyph(
            0,
            0,
            voice
          );
          c.Renderer = this;
          this._voiceContainers[this.Bar.Voices[i].Index] = c;
        }
        ++i;
      }
      if (this.Bar.SimileMark == 3) {
        this.CanWrap = false;
      }
      this.CreatePreBeatGlyphs();
      this.CreateBeatGlyphs();
      this.CreatePostBeatGlyphs();
      this.UpdateSizes();
    },
    HasVoiceContainer: function(voice) {
      if (!!voice.IsEmpty) {
        return voice.Index == 0;
      } else {
        return true;
      }
    },
    UpdateSizes: function() {
      this.Staff.RegisterStaffTop(this.TopPadding);
      this.Staff.RegisterStaffBottom(this.Height - this.BottomPadding);
      var voiceContainers = this._voiceContainers;
      var beatGlyphsStart = this.get_BeatGlyphsStart();
      var postBeatStart = beatGlyphsStart;
      var voice = $iterator(Object.keys(voiceContainers))();
      while (voice.hasNext()) {
        var voice1 = voice.next();
        var c = voiceContainers[voice1];
        c.X = beatGlyphsStart;
        c.DoLayout();
        var x = c.X + c.Width;
        if (postBeatStart < x) {
          postBeatStart = x;
        }
      }
      var this1 = postBeatStart;
      this._postBeatGlyphs.X = js.Boot.__cast(Math.floor(this1), Float);
      var this2 = this._postBeatGlyphs.X + this._postBeatGlyphs.Width;
      this.Width = js.Boot.__cast(Math.ceil(this2), Float);
    },
    AddPreBeatGlyph: function(g) {
      this._preBeatGlyphs.AddGlyph(g);
    },
    AddBeatGlyph: function(g) {
      g.Renderer = this;
      g.PreNotes.Renderer = this;
      g.OnNotes.Renderer = this;
      g.OnNotes.BeamingHelper = this.Helpers.BeamHelperLookup[
        g.Beat.Voice.Index
      ][g.Beat.Index];
      this.GetOrCreateVoiceContainer(g.Beat.Voice).AddGlyph(g);
    },
    GetOrCreateVoiceContainer: function(voice) {
      return this._voiceContainers[voice.Index];
    },
    GetBeatContainer: function(beat) {
      return this.GetOrCreateVoiceContainer(beat.Voice).BeatGlyphs[beat.Index];
    },
    GetPreNotesGlyphForBeat: function(beat) {
      return this.GetBeatContainer(beat).PreNotes;
    },
    GetOnNotesGlyphForBeat: function(beat) {
      return this.GetBeatContainer(beat).OnNotes;
    },
    Paint: function(cx, cy, canvas) {
      this.PaintBackground(cx, cy, canvas);
      canvas.set_Color(this.get_Resources().MainGlyphColor);
      this._preBeatGlyphs.Paint(cx + this.X, cy + this.Y, canvas);
      var this1 = this._voiceContainers;
      var voice = $iterator(Object.keys(this1))();
      while (voice.hasNext()) {
        var voice1 = voice.next();
        var c = this._voiceContainers[voice1];
        canvas.set_Color(
          c.Voice.Index == 0
            ? this.get_Resources().MainGlyphColor
            : this.get_Resources().SecondaryGlyphColor
        );
        c.Paint(cx + this.X, cy + this.Y, canvas);
      }
      canvas.set_Color(this.get_Resources().MainGlyphColor);
      this._postBeatGlyphs.Paint(cx + this.X, cy + this.Y, canvas);
    },
    PaintBackground: function(cx, cy, canvas) {},
    BuildBoundingsLookup: function(masterBarBounds, cx, cy) {
      var _gthis = this;
      var barBounds = new alphaTab.rendering.utils.BarBounds();
      barBounds.Bar = this.Bar;
      var _tmp = new alphaTab.rendering.utils.Bounds();
      _tmp.X = cx + _gthis.X;
      _tmp.Y = cy + _gthis.Y + _gthis.TopPadding;
      _tmp.W = _gthis.Width;
      _tmp.H = _gthis.Height - _gthis.TopPadding - _gthis.BottomPadding;
      barBounds.VisualBounds = _tmp;
      var _tmp1 = new alphaTab.rendering.utils.Bounds();
      _tmp1.X = cx + _gthis.X;
      _tmp1.Y = cy + _gthis.Y;
      _tmp1.W = _gthis.Width;
      _tmp1.H = _gthis.Height;
      barBounds.RealBounds = _tmp1;
      masterBarBounds.AddBar(barBounds);
      var this1 = this._voiceContainers;
      var voice = $iterator(Object.keys(this1))();
      while (voice.hasNext()) {
        var voice1 = voice.next();
        var c = this._voiceContainers[voice1];
        var isEmptyBar = this.Bar.get_IsEmpty() && voice1 == 0;
        if (!c.Voice.IsEmpty || isEmptyBar) {
          var i = 0;
          var j = c.BeatGlyphs.length;
          while (i < j) {
            var bc = c.BeatGlyphs[i];
            var beatBoundings = new alphaTab.rendering.utils.BeatBounds();
            beatBoundings.Beat = bc.Beat;
            var _tmp2 = new alphaTab.rendering.utils.Bounds();
            _tmp2.X = cx + _gthis.X + c.X + bc.X + bc.OnNotes.X;
            _tmp2.Y = barBounds.VisualBounds.Y;
            _tmp2.W = bc.OnNotes.Width;
            _tmp2.H = barBounds.VisualBounds.H;
            beatBoundings.VisualBounds = _tmp2;
            var _tmp3 = new alphaTab.rendering.utils.Bounds();
            _tmp3.X = cx + _gthis.X + c.X + bc.X;
            _tmp3.Y = barBounds.RealBounds.Y;
            _tmp3.W = bc.Width;
            _tmp3.H = barBounds.RealBounds.H;
            beatBoundings.RealBounds = _tmp3;
            if (isEmptyBar) {
              beatBoundings.VisualBounds.X = cx + this.X;
              beatBoundings.RealBounds.X = beatBoundings.VisualBounds.X;
            }
            barBounds.AddBeat(beatBoundings);
            ++i;
          }
        }
      }
    },
    AddPostBeatGlyph: function(g) {
      this._postBeatGlyphs.AddGlyph(g);
    },
    CreatePreBeatGlyphs: function() {
      this._wasFirstOfLine = this.get_IsFirstOfLine();
    },
    CreateBeatGlyphs: function() {},
    CreatePostBeatGlyphs: function() {},
    get_BeatGlyphsStart: function() {
      return this._preBeatGlyphs.X + this._preBeatGlyphs.Width;
    },
    get_PostBeatGlyphsStart: function() {
      return this._postBeatGlyphs.X;
    },
    GetNoteX: function(note, onEnd) {
      if (onEnd == null) {
        onEnd = true;
      }
      return 0;
    },
    GetBeatX: function(beat, requestedPosition) {
      if (requestedPosition == null) {
        requestedPosition = 0;
      }
      var container = this.GetBeatContainer(beat);
      if (container != null) {
        switch (requestedPosition) {
          case 0:
            return container.VoiceContainer.X + container.X;
          case 1:
            return (
              container.VoiceContainer.X + container.X + container.OnNotes.X
            );
          case 2:
            return (
              container.VoiceContainer.X + container.X + container.get_OnTimeX()
            );
          case 3:
            return (
              container.VoiceContainer.X +
              container.X +
              container.OnNotes.X +
              container.OnNotes.Width
            );
          case 4:
            return container.VoiceContainer.X + container.X + container.Width;
          default:
        }
      }
      return 0;
    },
    GetNoteY: function(note, aboveNote) {
      if (aboveNote == null) {
        aboveNote = false;
      }
      return 0;
    },
    ReLayout: function() {
      if (
        (this._wasFirstOfLine && !this.get_IsFirstOfLine()) ||
        (!this._wasFirstOfLine && this.get_IsFirstOfLine())
      ) {
        this._preBeatGlyphs = new alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup();
        this._preBeatGlyphs.Renderer = this;
        this.CreatePreBeatGlyphs();
      }
      this.UpdateSizes();
      this.RegisterLayoutingInfo();
    },
    PaintSimileMark: function(cx, cy, canvas) {
      var _g = this.Bar.SimileMark;
      switch (_g) {
        case 1:
          canvas.FillMusicFontSymbol(
            cx + this.X + (this.Width - 20 * this.get_Scale()) / 2,
            cy + this.Y + this.Height / 2,
            1,
            58624,
            false
          );
          break;
        case 3:
          canvas.FillMusicFontSymbol(
            cx + this.X - (28 * this.get_Scale()) / 2,
            cy + this.Y + this.Height / 2,
            1,
            58625,
            false
          );
          break;
        default:
      }
    },
    __class__: alphaTab.rendering.BarRendererBase
  };
  alphaTab.rendering._BeatXPosition = {};
  alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_ = {};
  alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.__name__ = [
    'alphaTab',
    'rendering',
    '_BeatXPosition',
    'BeatXPosition_Impl_'
  ];
  alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'PreNotes';
      case 1:
        return 'OnNotes';
      case 2:
        return 'MiddleNotes';
      case 3:
        return 'PostNotes';
      case 4:
        return 'EndBeat';
    }
    return '';
  };
  alphaTab.rendering.glyphs = {};
  alphaTab.rendering.glyphs.Glyph = function(x, y) {
    this.X = 0.0;
    this.Y = 0.0;
    this.Width = 0.0;
    this.Renderer = null;
    this.X = x;
    this.Y = y;
  };
  alphaTab.rendering.glyphs.Glyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'Glyph'
  ];
  alphaTab.rendering.glyphs.Glyph.prototype = {
    get_Scale: function() {
      return this.Renderer.get_Scale();
    },
    DoLayout: function() {},
    Paint: function(cx, cy, canvas) {},
    __class__: alphaTab.rendering.glyphs.Glyph
  };
  alphaTab.rendering.EffectBand = function(voice, info) {
    alphaTab.rendering.glyphs.Glyph.call(this, 0, 0);
    this._uniqueEffectGlyphs = null;
    this._effectGlyphs = null;
    this.IsEmpty = false;
    this.PreviousBand = null;
    this.IsLinkedToPrevious = false;
    this.FirstBeat = null;
    this.LastBeat = null;
    this.Height = 0.0;
    this.Voice = null;
    this.Info = null;
    this.Slot = null;
    this.Voice = voice;
    this.Info = info;
    var this1 = [];
    this._uniqueEffectGlyphs = this1;
    var this2 = [];
    this._effectGlyphs = this2;
    this.IsEmpty = true;
  };
  alphaTab.rendering.EffectBand.__name__ = [
    'alphaTab',
    'rendering',
    'EffectBand'
  ];
  alphaTab.rendering.EffectBand.__super__ = alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.EffectBand.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      DoLayout: function() {
        alphaTab.rendering.glyphs.Glyph.prototype.DoLayout.call(this);
        var i = 0;
        while (i < this.Renderer.Bar.Voices.length) {
          var this1 = this._effectGlyphs;
          var this2 = {};
          this1.push(this2);
          var this3 = this._uniqueEffectGlyphs;
          var this4 = [];
          this3.push(this4);
          ++i;
        }
      },
      CreateGlyph: function(beat) {
        if (beat.Voice != this.Voice) {
          return;
        }
        if (
          this.Info.ShouldCreateGlyph(this.Renderer.get_Settings(), beat) &&
          (!this.Info.get_HideOnMultiTrack() ||
            this.Renderer.Staff.TrackIndex == 0)
        ) {
          this.IsEmpty = false;
          if (this.FirstBeat == null || beat.IsBefore(this.FirstBeat)) {
            this.FirstBeat = beat;
          }
          if (this.LastBeat == null || beat.IsAfter(this.LastBeat)) {
            this.LastBeat = beat;
            var _g = this.Info.get_SizingMode();
            switch (_g) {
              case 2:
              case 5:
                if (this.LastBeat.NextBeat != null) {
                  this.LastBeat = this.LastBeat.NextBeat;
                }
                break;
              default:
            }
          }
          var glyph = this.CreateOrResizeGlyph(
            this.Info.get_SizingMode(),
            beat
          );
          if (glyph.Height > this.Height) {
            this.Height = glyph.Height;
          }
        }
      },
      CreateOrResizeGlyph: function(sizing, b) {
        var g;
        switch (sizing) {
          case 0:
          case 1:
          case 2:
            g = this.Info.CreateNewGlyph(this.Renderer, b);
            g.Renderer = this.Renderer;
            g.Beat = b;
            g.DoLayout();
            this._effectGlyphs[b.Voice.Index][b.Index] = g;
            this._uniqueEffectGlyphs[b.Voice.Index].push(g);
            return g;
          case 4:
          case 5:
            var singleSizing = sizing == 4 ? 1 : 2;
            if (b.Index > 0 || this.Renderer.Index > 0) {
              var prevBeat = b.PreviousBeat;
              if (
                this.Info.ShouldCreateGlyph(
                  this.Renderer.get_Settings(),
                  prevBeat
                )
              ) {
                var prevEffect = null;
                if (
                  b.Index > 0 &&
                  this._effectGlyphs[b.Voice.Index].hasOwnProperty(
                    prevBeat.Index
                  )
                ) {
                  prevEffect = this._effectGlyphs[b.Voice.Index][
                    prevBeat.Index
                  ];
                } else if (this.Renderer.Index > 0) {
                  var previousRenderer = js.Boot.__cast(
                    this.Renderer.get_PreviousRenderer(),
                    alphaTab.rendering.EffectBarRenderer
                  );
                  var previousBand = previousRenderer.GetBand(
                    this.Voice,
                    this.Info.get_EffectId()
                  );
                  var voiceGlyphs = previousBand._effectGlyphs[b.Voice.Index];
                  if (voiceGlyphs.hasOwnProperty(prevBeat.Index)) {
                    prevEffect = voiceGlyphs[prevBeat.Index];
                  }
                }
                var newGlyph = this.CreateOrResizeGlyph(singleSizing, b);
                if (prevEffect != null && this.Info.CanExpand(prevBeat, b)) {
                  prevEffect.NextGlyph = newGlyph;
                  newGlyph.PreviousGlyph = prevEffect;
                  this.IsLinkedToPrevious = true;
                }
                return newGlyph;
              }
              return this.CreateOrResizeGlyph(singleSizing, b);
            }
            return this.CreateOrResizeGlyph(singleSizing, b);
          case 6:
            g = this.Info.CreateNewGlyph(this.Renderer, b);
            g.Renderer = this.Renderer;
            g.Beat = b;
            g.DoLayout();
            this._effectGlyphs[b.Voice.Index][b.Index] = g;
            this._uniqueEffectGlyphs[b.Voice.Index].push(g);
            return g;
          default:
        }
        return null;
      },
      Paint: function(cx, cy, canvas) {
        alphaTab.rendering.glyphs.Glyph.prototype.Paint.call(
          this,
          cx,
          cy,
          canvas
        );
        var i = 0;
        var j = this._uniqueEffectGlyphs.length;
        while (i < j) {
          var v = this._uniqueEffectGlyphs[i];
          var k = 0;
          var l = v.length;
          while (k < l) {
            var g = v[k];
            g.Paint(cx + this.X, cy + this.Y, canvas);
            ++k;
          }
          ++i;
        }
      },
      AlignGlyphs: function() {
        var v = 0;
        while (v < this._effectGlyphs.length) {
          var this1 = this._effectGlyphs[v];
          var key = $iterator(Object.keys(this1))();
          while (key.hasNext()) {
            var key1 = key.next();
            this.AlignGlyph(
              this.Info.get_SizingMode(),
              this.Renderer.Bar.Voices[v].Beats[key1]
            );
          }
          ++v;
        }
      },
      AlignGlyph: function(sizing, beat) {
        var g = this._effectGlyphs[beat.Voice.Index][beat.Index];
        var pos;
        var container = this.Renderer.GetBeatContainer(beat);
        switch (sizing) {
          case 0:
            pos = container.PreNotes;
            g.X = this.Renderer.get_BeatGlyphsStart() + pos.X + container.X;
            g.Width = pos.Width;
            break;
          case 1:
          case 4:
            pos = container.OnNotes;
            g.X = this.Renderer.get_BeatGlyphsStart() + pos.X + container.X;
            g.Width = pos.Width;
            break;
          case 2:
          case 5:
            pos = container.OnNotes;
            g.X = this.Renderer.get_BeatGlyphsStart() + pos.X + container.X;
            if (container.Beat.get_IsLastOfVoice()) {
              g.Width = this.Renderer.Width - g.X;
            } else {
              g.Width =
                container.Width -
                container.PreNotes.Width -
                container.PreNotes.X;
            }
            break;
          case 6:
            g.Width = this.Renderer.Width;
            break;
          default:
        }
      },
      __class__: alphaTab.rendering.EffectBand
    }
  );
  alphaTab.rendering.EffectBandSizingInfo = function() {
    this._effectSlot = null;
    this.Slots = null;
    var this1 = [];
    this.Slots = this1;
    var this2 = {};
    this._effectSlot = this2;
  };
  alphaTab.rendering.EffectBandSizingInfo.__name__ = [
    'alphaTab',
    'rendering',
    'EffectBandSizingInfo'
  ];
  alphaTab.rendering.EffectBandSizingInfo.prototype = {
    GetOrCreateSlot: function(band) {
      var this1 = this._effectSlot;
      var key = band.Info.get_EffectId();
      if (this1.hasOwnProperty(key)) {
        var slot = this._effectSlot[band.Info.get_EffectId()];
        if (slot.CanBeUsed(band)) {
          return slot;
        }
      }
      var slot1 = $iterator(this.Slots)();
      while (slot1.hasNext()) {
        var slot2 = slot1.next();
        if (slot2.CanBeUsed(band)) {
          return slot2;
        }
      }
      var newSlot = new alphaTab.rendering.EffectBandSlot();
      this.Slots.push(newSlot);
      return newSlot;
    },
    Register: function(effectBand) {
      var freeSlot = this.GetOrCreateSlot(effectBand);
      freeSlot.Update(effectBand);
      this._effectSlot[effectBand.Info.get_EffectId()] = freeSlot;
    },
    __class__: alphaTab.rendering.EffectBandSizingInfo
  };
  alphaTab.rendering.EffectBandSlot = function() {
    this.Bands = null;
    this.Shared = null;
    var this1 = [];
    this.Bands = this1;
    this.Shared = new alphaTab.rendering.EffectBandSlotShared();
  };
  alphaTab.rendering.EffectBandSlot.__name__ = [
    'alphaTab',
    'rendering',
    'EffectBandSlot'
  ];
  alphaTab.rendering.EffectBandSlot.prototype = {
    Update: function(effectBand) {
      if (!effectBand.Info.get_CanShareBand()) {
        this.Shared.UniqueEffectId = effectBand.Info.get_EffectId();
      }
      effectBand.Slot = this;
      this.Bands.push(effectBand);
      if (effectBand.Height > this.Shared.Height) {
        this.Shared.Height = effectBand.Height;
      }
      if (
        this.Shared.FirstBeat == null ||
        effectBand.FirstBeat.IsBefore(this.Shared.FirstBeat)
      ) {
        this.Shared.FirstBeat = effectBand.FirstBeat;
      }
      if (
        this.Shared.LastBeat == null ||
        effectBand.LastBeat.IsAfter(this.Shared.LastBeat)
      ) {
        this.Shared.LastBeat = effectBand.LastBeat;
      }
    },
    CanBeUsed: function(band) {
      if (
        (this.Shared.UniqueEffectId == null && band.Info.get_CanShareBand()) ||
        band.Info.get_EffectId() == this.Shared.UniqueEffectId
      ) {
        if (
          !(
            this.Shared.FirstBeat == null ||
            this.Shared.LastBeat.IsBefore(band.FirstBeat)
          )
        ) {
          return this.Shared.LastBeat.IsBefore(this.Shared.FirstBeat);
        } else {
          return true;
        }
      } else {
        return false;
      }
    },
    __class__: alphaTab.rendering.EffectBandSlot
  };
  alphaTab.rendering.EffectBandSlotShared = function() {
    this.UniqueEffectId = null;
    this.Y = 0.0;
    this.Height = 0.0;
    this.FirstBeat = null;
    this.LastBeat = null;
    this.Y = 0;
    this.Height = 0;
  };
  alphaTab.rendering.EffectBandSlotShared.__name__ = [
    'alphaTab',
    'rendering',
    'EffectBandSlotShared'
  ];
  alphaTab.rendering.EffectBandSlotShared.prototype = {
    __class__: alphaTab.rendering.EffectBandSlotShared
  };
  alphaTab.rendering._EffectBarGlyphSizing = {};
  alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_ = {};
  alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.__name__ = [
    'alphaTab',
    'rendering',
    '_EffectBarGlyphSizing',
    'EffectBarGlyphSizing_Impl_'
  ];
  alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'SinglePreBeat';
      case 1:
        return 'SingleOnBeat';
      case 2:
        return 'SingleOnBeatToEnd';
      case 3:
        return 'GroupedBeforeBeat';
      case 4:
        return 'GroupedOnBeat';
      case 5:
        return 'GroupedOnBeatToEnd';
      case 6:
        return 'FullBar';
    }
    return '';
  };
  alphaTab.rendering.EffectBarRenderer = function(renderer, bar, infos) {
    alphaTab.rendering.BarRendererBase.call(this, renderer, bar);
    this._infos = null;
    this._bands = null;
    this._bandLookup = null;
    this.SizingInfo = null;
    this._infos = infos;
  };
  alphaTab.rendering.EffectBarRenderer.__name__ = [
    'alphaTab',
    'rendering',
    'EffectBarRenderer'
  ];
  alphaTab.rendering.EffectBarRenderer.__super__ =
    alphaTab.rendering.BarRendererBase;
  alphaTab.rendering.EffectBarRenderer.prototype = $extend(
    alphaTab.rendering.BarRendererBase.prototype,
    {
      UpdateSizes: function() {
        this.TopOverflow = 0;
        this.BottomOverflow = 0;
        this.TopPadding = 0;
        this.BottomPadding = 0;
        this.UpdateHeight();
        alphaTab.rendering.BarRendererBase.prototype.UpdateSizes.call(this);
      },
      FinalizeRenderer: function() {
        alphaTab.rendering.BarRendererBase.prototype.FinalizeRenderer.call(
          this
        );
        this.UpdateHeight();
      },
      UpdateHeight: function() {
        if (this.SizingInfo == null) {
          return;
        }
        var y = 0;
        var slot = $iterator(this.SizingInfo.Slots)();
        while (slot.hasNext()) {
          var slot1 = slot.next();
          slot1.Shared.Y = y;
          var band = $iterator(slot1.Bands)();
          while (band.hasNext()) {
            var band1 = band.next();
            band1.Y = y;
            band1.Height = slot1.Shared.Height;
          }
          y = y + slot1.Shared.Height;
        }
        this.Height = y;
      },
      ApplyLayoutingInfo: function() {
        if (
          !alphaTab.rendering.BarRendererBase.prototype.ApplyLayoutingInfo.call(
            this
          )
        ) {
          return false;
        }
        if (this.Index > 0) {
          var previousRenderer = js.Boot.__cast(
            this.get_PreviousRenderer(),
            alphaTab.rendering.EffectBarRenderer
          );
          this.SizingInfo = previousRenderer.SizingInfo;
        } else {
          this.SizingInfo = new alphaTab.rendering.EffectBandSizingInfo();
        }
        var effectBand = $iterator(this._bands)();
        while (effectBand.hasNext()) {
          var effectBand1 = effectBand.next();
          effectBand1.AlignGlyphs();
          if (!effectBand1.IsEmpty) {
            this.SizingInfo.Register(effectBand1);
          }
        }
        this.UpdateHeight();
        return true;
      },
      ScaleToWidth: function(width) {
        alphaTab.rendering.BarRendererBase.prototype.ScaleToWidth.call(
          this,
          width
        );
        var effectBand = $iterator(this._bands)();
        while (effectBand.hasNext()) {
          var effectBand1 = effectBand.next();
          effectBand1.AlignGlyphs();
        }
      },
      CreateBeatGlyphs: function() {
        var this1 = [];
        this._bands = this1;
        var this2 = {};
        this._bandLookup = this2;
        var voice = $iterator(this.Bar.Voices)();
        while (voice.hasNext()) {
          var voice1 = voice.next();
          if (this.HasVoiceContainer(voice1)) {
            var info = HxOverrides.iter(this._infos);
            while (info.hasNext()) {
              var info1 = info.next();
              var band = new alphaTab.rendering.EffectBand(voice1, info1);
              band.Renderer = this;
              band.DoLayout();
              this._bands.push(band);
              this._bandLookup[
                Std.string(voice1.Index) + '.' + info1.get_EffectId()
              ] = band;
            }
          }
        }
        var voice2 = $iterator(this.Bar.Voices)();
        while (voice2.hasNext()) {
          var voice3 = voice2.next();
          if (this.HasVoiceContainer(voice3)) {
            this.CreateVoiceGlyphs(voice3);
          }
        }
        var effectBand = $iterator(this._bands)();
        while (effectBand.hasNext()) {
          var effectBand1 = effectBand.next();
          if (effectBand1.IsLinkedToPrevious) {
            this.IsLinkedToPrevious = true;
          }
        }
      },
      CreateVoiceGlyphs: function(v) {
        var b = $iterator(v.Beats)();
        while (b.hasNext()) {
          var b1 = b.next();
          var container = new alphaTab.rendering.glyphs.BeatContainerGlyph(
            b1,
            this.GetOrCreateVoiceContainer(v)
          );
          container.PreNotes = new alphaTab.rendering.glyphs.BeatGlyphBase();
          container.OnNotes = new alphaTab.rendering.glyphs.BeatOnNoteGlyphBase();
          this.AddBeatGlyph(container);
          var effectBand = $iterator(this._bands)();
          while (effectBand.hasNext()) {
            var effectBand1 = effectBand.next();
            effectBand1.CreateGlyph(b1);
          }
        }
      },
      Paint: function(cx, cy, canvas) {
        this.PaintBackground(cx, cy, canvas);
        var effectBand = $iterator(this._bands)();
        while (effectBand.hasNext()) {
          var effectBand1 = effectBand.next();
          canvas.set_Color(
            effectBand1.Voice.Index == 0
              ? this.get_Resources().MainGlyphColor
              : this.get_Resources().SecondaryGlyphColor
          );
          if (!effectBand1.IsEmpty) {
            effectBand1.Paint(cx + this.X, cy + this.Y, canvas);
          }
        }
      },
      GetBand: function(voice, effectId) {
        var id = Std.string(voice.Index) + '.' + effectId;
        if (this._bandLookup.hasOwnProperty(id)) {
          return this._bandLookup[id];
        }
        return null;
      },
      __class__: alphaTab.rendering.EffectBarRenderer
    }
  );
  alphaTab.rendering.RenderFinishedEventArgs = $hx_exports['alphaTab'][
    'rendering'
  ]['RenderFinishedEventArgs'] = function() {
    this.Width = 0.0;
    this.Height = 0.0;
    this.TotalWidth = 0.0;
    this.TotalHeight = 0.0;
    this.FirstMasterBarIndex = 0;
    this.LastMasterBarIndex = 0;
    this.RenderResult = null;
  };
  alphaTab.rendering.RenderFinishedEventArgs.__name__ = [
    'alphaTab',
    'rendering',
    'RenderFinishedEventArgs'
  ];
  alphaTab.rendering.RenderFinishedEventArgs.prototype = {
    __class__: alphaTab.rendering.RenderFinishedEventArgs
  };
  alphaTab.rendering.RenderingResources = $hx_exports['alphaTab']['rendering'][
    'RenderingResources'
  ] = function() {
    this.CopyrightFont = null;
    this.TitleFont = null;
    this.SubTitleFont = null;
    this.WordsFont = null;
    this.EffectFont = null;
    this.FretboardNumberFont = null;
    this.TablatureFont = null;
    this.GraceFont = null;
    this.StaffLineColor = null;
    this.BarSeparatorColor = null;
    this.BarNumberFont = null;
    this.BarNumberColor = null;
    this.FingeringFont = null;
    this.MarkerFont = null;
    this.MainGlyphColor = null;
    this.SecondaryGlyphColor = null;
    this.ScoreInfoColor = null;
    var sansFont = 'Arial';
    var serifFont = 'Georgia';
    this.EffectFont = new alphaTab.platform.model.Font(serifFont, 12, 2);
    this.CopyrightFont = new alphaTab.platform.model.Font(sansFont, 12, 1);
    this.FretboardNumberFont = new alphaTab.platform.model.Font(
      sansFont,
      11,
      0
    );
    this.TitleFont = new alphaTab.platform.model.Font(serifFont, 32, 0);
    this.SubTitleFont = new alphaTab.platform.model.Font(serifFont, 20, 0);
    this.WordsFont = new alphaTab.platform.model.Font(serifFont, 15, 0);
    this.TablatureFont = new alphaTab.platform.model.Font(sansFont, 13, 0);
    this.GraceFont = new alphaTab.platform.model.Font(sansFont, 11, 0);
    this.StaffLineColor = new alphaTab.platform.model.Color(165, 165, 165, 255);
    this.BarSeparatorColor = new alphaTab.platform.model.Color(34, 34, 17, 255);
    this.BarNumberFont = new alphaTab.platform.model.Font(sansFont, 11, 0);
    this.BarNumberColor = new alphaTab.platform.model.Color(200, 0, 0, 255);
    this.FingeringFont = new alphaTab.platform.model.Font(serifFont, 14, 0);
    this.MarkerFont = new alphaTab.platform.model.Font(serifFont, 14, 1);
    this.ScoreInfoColor = new alphaTab.platform.model.Color(0, 0, 0, 255);
    this.MainGlyphColor = new alphaTab.platform.model.Color(0, 0, 0, 255);
    this.SecondaryGlyphColor = new alphaTab.platform.model.Color(0, 0, 0, 100);
  };
  alphaTab.rendering.RenderingResources.__name__ = [
    'alphaTab',
    'rendering',
    'RenderingResources'
  ];
  alphaTab.rendering.RenderingResources.prototype = {
    __class__: alphaTab.rendering.RenderingResources
  };
  alphaTab.rendering.utils = {};
  alphaTab.rendering.utils.IBeamYCalculator = function() {};
  alphaTab.rendering.utils.IBeamYCalculator.__name__ = [
    'alphaTab',
    'rendering',
    'utils',
    'IBeamYCalculator'
  ];
  alphaTab.rendering.utils.IBeamYCalculator.prototype = {
    __class__: alphaTab.rendering.utils.IBeamYCalculator
  };
  alphaTab.rendering.ScoreBarRenderer = function(renderer, bar) {
    alphaTab.rendering.BarRendererBase.call(this, renderer, bar);
    this.SimpleWhammyOverflow = 0.0;
    this.AccidentalHelper = null;
    this._startSpacing = false;
    this.AccidentalHelper = new alphaTab.rendering.utils.AccidentalHelper(bar);
  };
  alphaTab.rendering.ScoreBarRenderer.__name__ = [
    'alphaTab',
    'rendering',
    'ScoreBarRenderer'
  ];
  alphaTab.rendering.ScoreBarRenderer.__interfaces__ = [
    alphaTab.rendering.utils.IBeamYCalculator
  ];
  alphaTab.rendering.ScoreBarRenderer.PaintSingleBar = function(
    canvas,
    x1,
    y1,
    x2,
    y2,
    size
  ) {
    canvas.BeginPath();
    canvas.MoveTo(x1, y1);
    canvas.LineTo(x2, y2);
    canvas.LineTo(x2, y2 + size);
    canvas.LineTo(x1, y1 + size);
    canvas.ClosePath();
    canvas.Fill();
  };
  alphaTab.rendering.ScoreBarRenderer.__super__ =
    alphaTab.rendering.BarRendererBase;
  alphaTab.rendering.ScoreBarRenderer.prototype = $extend(
    alphaTab.rendering.BarRendererBase.prototype,
    {
      GetBeatDirection: function(beat) {
        var g = js.Boot.__cast(
          this.GetOnNotesGlyphForBeat(beat),
          alphaTab.rendering.glyphs.ScoreBeatGlyph
        );
        if (g != null) {
          return g.NoteHeads.get_Direction();
        }
        return 0;
      },
      GetNoteX: function(note, onEnd) {
        if (onEnd == null) {
          onEnd = true;
        }
        var g = js.Boot.__cast(
          this.GetOnNotesGlyphForBeat(note.Beat),
          alphaTab.rendering.glyphs.ScoreBeatGlyph
        );
        if (g != null) {
          var x = g.Container.VoiceContainer.X + g.Container.X + g.X;
          if (onEnd) {
            x = x + g.Width;
          }
          return x;
        }
        return 0;
      },
      GetNoteY: function(note, aboveNote) {
        if (aboveNote == null) {
          aboveNote = false;
        }
        var beat = js.Boot.__cast(
          this.GetOnNotesGlyphForBeat(note.Beat),
          alphaTab.rendering.glyphs.ScoreBeatGlyph
        );
        if (beat != null) {
          return beat.NoteHeads.GetNoteY(note, aboveNote);
        }
        return 0;
      },
      get_LineOffset: function() {
        return (8 + 1) * this.get_Scale();
      },
      UpdateSizes: function() {
        var res = this.get_Resources();
        var this1 = 0.2;
        var glyphOverflow =
          res.TablatureFont.Size / 2 + res.TablatureFont.Size * this1;
        this.TopPadding = glyphOverflow;
        this.BottomPadding = glyphOverflow;
        this.Height =
          this.get_LineOffset() * 4 + this.TopPadding + this.BottomPadding;
        alphaTab.rendering.BarRendererBase.prototype.UpdateSizes.call(this);
      },
      DoLayout: function() {
        alphaTab.rendering.BarRendererBase.prototype.DoLayout.call(this);
        if (
          !this.Bar.get_IsEmpty() &&
          this.AccidentalHelper.MaxNoteValueBeat != null
        ) {
          var top = this.GetScoreY(0, 0);
          var bottom = this.GetScoreY(8, 0);
          var whammyOffset = this.SimpleWhammyOverflow;
          this.RegisterOverflowTop(whammyOffset);
          var maxNoteY = this.GetYPositionForNoteValue(
            this.AccidentalHelper.MaxNoteValue
          );
          var maxNoteHelper = this.Helpers.GetBeamingHelperForBeat(
            this.AccidentalHelper.MaxNoteValueBeat
          );
          if (maxNoteHelper.Direction == 0) {
            maxNoteY = maxNoteY - this.GetStemSize(maxNoteHelper);
            maxNoteY =
              maxNoteY -
              maxNoteHelper.FingeringCount *
                this.get_Resources().GraceFont.Size;
            if (maxNoteHelper.HasTuplet) {
              maxNoteY = maxNoteY - this.get_Resources().EffectFont.Size * 2;
            }
          }
          if (maxNoteHelper.HasTuplet) {
            var this1 = 1.5;
            maxNoteY = maxNoteY - this.get_Resources().EffectFont.Size * this1;
          }
          if (maxNoteY < top) {
            this.RegisterOverflowTop(Math.abs(maxNoteY) + whammyOffset);
          }
          var minNoteY = this.GetYPositionForNoteValue(
            this.AccidentalHelper.MinNoteValue
          );
          var minNoteHelper = this.Helpers.GetBeamingHelperForBeat(
            this.AccidentalHelper.MinNoteValueBeat
          );
          if (minNoteHelper.Direction == 1) {
            minNoteY = minNoteY + this.GetStemSize(minNoteHelper);
            minNoteY =
              minNoteY +
              minNoteHelper.FingeringCount *
                this.get_Resources().GraceFont.Size;
          }
          if (minNoteY > bottom) {
            this.RegisterOverflowBottom(Math.abs(minNoteY) - bottom);
          }
        }
      },
      AddBeatGlyph: function(g) {
        alphaTab.rendering.BarRendererBase.prototype.AddBeatGlyph.call(this, g);
        var tmp =
          g.Beat.get_HasTuplet() && g.Beat.Id == g.Beat.TupletGroup.Beats[0].Id;
      },
      Paint: function(cx, cy, canvas) {
        alphaTab.rendering.BarRendererBase.prototype.Paint.call(
          this,
          cx,
          cy,
          canvas
        );
        this.PaintBeams(cx, cy, canvas);
        this.PaintTuplets(cx, cy, canvas);
      },
      PaintTuplets: function(cx, cy, canvas) {
        var voice = $iterator(this.Bar.Voices)();
        while (voice.hasNext()) {
          var voice1 = voice.next();
          if (this.HasVoiceContainer(voice1)) {
            var container = this.GetOrCreateVoiceContainer(voice1);
            var tupletGroup = $iterator(container.TupletGroups)();
            while (tupletGroup.hasNext()) {
              var tupletGroup1 = tupletGroup.next();
              this.PaintTupletHelper(
                cx + this.get_BeatGlyphsStart(),
                cy,
                canvas,
                tupletGroup1
              );
            }
          }
        }
      },
      PaintBeams: function(cx, cy, canvas) {
        var i = 0;
        var j = this.Helpers.BeamHelpers.length;
        while (i < j) {
          var v = this.Helpers.BeamHelpers[i];
          var k = 0;
          var l = v.length;
          while (k < l) {
            var h = v[k];
            this.PaintBeamHelper(
              cx + this.get_BeatGlyphsStart(),
              cy,
              canvas,
              h
            );
            ++k;
          }
          ++i;
        }
      },
      PaintBeamHelper: function(cx, cy, canvas, h) {
        canvas.set_Color(
          h.Voice.Index == 0
            ? this.get_Resources().MainGlyphColor
            : this.get_Resources().SecondaryGlyphColor
        );
        if (h.Beats.length == 1) {
          this.PaintFooter(cx, cy, canvas, h);
        } else {
          this.PaintBar(cx, cy, canvas, h);
        }
      },
      PaintTupletHelper: function(cx, cy, canvas, h) {
        var res = this.get_Resources();
        var oldAlign = canvas.get_TextAlign();
        canvas.set_Color(
          h.Voice.Index == 0
            ? this.get_Resources().MainGlyphColor
            : this.get_Resources().SecondaryGlyphColor
        );
        canvas.set_TextAlign(1);
        var s;
        var num = h.Beats[0].TupletNumerator;
        var den = h.Beats[0].TupletDenominator;
        if (num == 2 && den == 3) {
          s = '2';
        } else if (num == 3 && den == 2) {
          s = '3';
        } else if (num == 4 && den == 6) {
          s = '4';
        } else if (num == 5 && den == 4) {
          s = '5';
        } else if (num == 6 && den == 4) {
          s = '6';
        } else if (num == 7 && den == 4) {
          s = '7';
        } else if (num == 9 && den == 8) {
          s = '9';
        } else if (num == 10 && den == 8) {
          s = '10';
        } else if (num == 11 && den == 8) {
          s = '11';
        } else if (num == 12 && den == 8) {
          s = '12';
        } else if (num == 13 && den == 8) {
          s = '13';
        } else {
          s = Std.string(num) + ':' + Std.string(den);
        }
        if (h.Beats.length == 1 || !h.IsFull) {
          var i = 0;
          var j = h.Beats.length;
          while (i < j) {
            var beat = h.Beats[i];
            var beamingHelper = this.Helpers.BeamHelperLookup[h.Voice.Index][
              beat.Index
            ];
            if (beamingHelper == null) {
              ++i;
              continue;
            }
            var direction = beamingHelper.Direction;
            var tupletX = beamingHelper.GetBeatLineX(beat) + this.get_Scale();
            var tupletY =
              cy + this.Y + this.CalculateBeamY(beamingHelper, tupletX);
            var offset;
            if (direction == 0) {
              var this1 = 1.5;
              offset = res.EffectFont.Size * this1;
            } else {
              offset = -3 * this.get_Scale();
            }
            canvas.set_Font(res.EffectFont);
            canvas.FillText(s, cx + this.X + tupletX, tupletY - offset);
            ++i;
          }
        } else {
          var firstBeat = h.Beats[0];
          var lastBeat = h.Beats[h.Beats.length - 1];
          var firstBeamingHelper = this.Helpers.BeamHelperLookup[h.Voice.Index][
            firstBeat.Index
          ];
          var lastBeamingHelper = this.Helpers.BeamHelperLookup[h.Voice.Index][
            lastBeat.Index
          ];
          if (firstBeamingHelper != null && lastBeamingHelper != null) {
            var direction1 = firstBeamingHelper.Direction;
            var startX =
              firstBeamingHelper.GetBeatLineX(firstBeat) + this.get_Scale();
            var endX =
              lastBeamingHelper.GetBeatLineX(lastBeat) + this.get_Scale();
            canvas.set_Font(res.EffectFont);
            var sw = canvas.MeasureText(s);
            var sp = 3 * this.get_Scale();
            var middleX = (startX + endX) / 2;
            var offset1X = middleX - sw / 2 - sp;
            var offset2X = middleX + sw / 2 + sp;
            var startY = this.CalculateBeamYWithDirection(
              firstBeamingHelper,
              startX,
              firstBeamingHelper.Direction
            );
            var endY = this.CalculateBeamYWithDirection(
              lastBeamingHelper,
              endX,
              firstBeamingHelper.Direction
            );
            var k = (endY - startY) / (endX - startX);
            var d = startY - k * startX;
            var offset1Y = k * offset1X + d;
            var middleY = k * middleX + d;
            var offset2Y = k * offset2X + d;
            var offset1 = 10 * this.get_Scale();
            var size = 5 * this.get_Scale();
            if (direction1 == 1) {
              offset1 = offset1 * -1;
              size = size * -1;
            }
            canvas.BeginPath();
            var tmp = cx + this.X + startX;
            var this2 = system.Convert.ToInt32_Single(
              cy + this.Y + startY - offset1
            );
            canvas.MoveTo(tmp, this2);
            var tmp1 = cx + this.X + startX;
            var this3 = system.Convert.ToInt32_Single(
              cy + this.Y + startY - offset1 - size
            );
            canvas.LineTo(tmp1, this3);
            var tmp2 = cx + this.X + offset1X;
            var this4 = system.Convert.ToInt32_Single(
              cy + this.Y + offset1Y - offset1 - size
            );
            canvas.LineTo(tmp2, this4);
            canvas.Stroke();
            canvas.BeginPath();
            var tmp3 = cx + this.X + offset2X;
            var this5 = system.Convert.ToInt32_Single(
              cy + this.Y + offset2Y - offset1 - size
            );
            canvas.MoveTo(tmp3, this5);
            var tmp4 = cx + this.X + endX;
            var this6 = system.Convert.ToInt32_Single(
              cy + this.Y + endY - offset1 - size
            );
            canvas.LineTo(tmp4, this6);
            var tmp5 = cx + this.X + endX;
            var this7 = system.Convert.ToInt32_Single(
              cy + this.Y + endY - offset1
            );
            canvas.LineTo(tmp5, this7);
            canvas.Stroke();
            var this8 = 2;
            canvas.FillText(
              s,
              cx + this.X + middleX,
              cy +
                this.Y +
                middleY -
                offset1 -
                size -
                res.EffectFont.Size / this8
            );
          }
        }
        canvas.set_TextAlign(oldAlign);
      },
      GetStemSize: function(helper) {
        var size =
          helper.Beats.length == 1
            ? this.GetFooterStemSize(helper.ShortestDuration)
            : this.GetBarStemSize(helper.ShortestDuration);
        if (helper.IsGrace) {
          size = size * 0.75;
        }
        return size;
      },
      GetBarStemSize: function(duration) {
        var size;
        switch (duration) {
          case -4:
            size = 6;
            break;
          case 2:
            size = 6;
            break;
          case 4:
            size = 6;
            break;
          case 8:
            size = 6;
            break;
          case 16:
            size = 6;
            break;
          case 32:
            size = 7;
            break;
          case 64:
            size = 7;
            break;
          case 128:
            size = 9;
            break;
          case 256:
            size = 10;
            break;
          default:
            size = 0;
        }
        var this1 = size;
        return this.GetScoreY(this1, 0);
      },
      GetFooterStemSize: function(duration) {
        var size;
        switch (duration) {
          case -4:
            size = 6;
            break;
          case 2:
            size = 6;
            break;
          case 4:
            size = 6;
            break;
          case 8:
            size = 6;
            break;
          case 16:
            size = 6;
            break;
          case 32:
            size = 6;
            break;
          case 64:
            size = 6;
            break;
          case 128:
            size = 6;
            break;
          case 256:
            size = 6;
            break;
          default:
            size = 0;
        }
        var this1 = size;
        return this.GetScoreY(this1, 0);
      },
      GetYPositionForNoteValue: function(noteValue) {
        var this1 = this.AccidentalHelper.GetNoteLineForValue(noteValue, true);
        return this.GetScoreY(this1, 0);
      },
      CalculateBeamY: function(h, x) {
        var stemSize = this.GetStemSize(h);
        return h.CalculateBeamY(
          stemSize,
          this.get_Scale(),
          x,
          this.get_Scale(),
          this
        );
      },
      CalculateBeamYWithDirection: function(h, x, direction) {
        var stemSize = this.GetStemSize(h);
        return h.CalculateBeamYWithDirection(
          stemSize,
          this.get_Scale(),
          x,
          this.get_Scale(),
          this,
          direction
        );
      },
      PaintBar: function(cx, cy, canvas, h) {
        var i = 0;
        var j = h.Beats.length;
        while (i < j) {
          var beat = h.Beats[i];
          var isGrace = beat.GraceType != 0;
          var scaleMod = isGrace ? 0.75 : 1;
          var beatLineX = h.GetBeatLineX(beat) + this.get_Scale();
          var direction = h.Direction;
          var y1 = cy + this.Y;
          y1 =
            y1 +
            (direction == 0
              ? this.GetYPositionForNoteValue(h.GetBeatMinValue(beat))
              : this.GetYPositionForNoteValue(h.GetBeatMaxValue(beat)));
          var y2 = cy + this.Y;
          y2 = y2 + this.CalculateBeamY(h, beatLineX);
          canvas.set_LineWidth(1.3 * this.get_Scale());
          canvas.BeginPath();
          canvas.MoveTo(cx + this.X + beatLineX, y1);
          canvas.LineTo(cx + this.X + beatLineX, y2);
          canvas.Stroke();
          canvas.set_LineWidth(this.get_Scale());
          var fingeringY = y2;
          if (direction == 1) {
            var this1 = 2;
            fingeringY = fingeringY + canvas.get_Font().Size * this1;
          } else if (i != 0) {
            var this2 = 1.5;
            fingeringY = fingeringY - canvas.get_Font().Size * this2;
          }
          this.PaintFingering(
            canvas,
            beat,
            cx + this.X + beatLineX,
            direction,
            fingeringY
          );
          var brokenBarOffset = 6 * this.get_Scale() * scaleMod;
          var barSpacing = 7 * this.get_Scale() * scaleMod;
          var barSize = (8 / 2) * this.get_Scale() * scaleMod;
          var barCount = alphaTab.model.ModelUtils.GetIndex(beat.Duration) - 2;
          var barStart = cy + this.Y;
          if (direction == 1) {
            barSpacing = -barSpacing;
            barSize = -barSize;
          }
          var barIndex = 0;
          while (barIndex < barCount) {
            var barStartX;
            var barEndX;
            var barStartY;
            var barEndY;
            var barY = barStart + barIndex * barSpacing;
            if (i < h.Beats.length - 1) {
              if (
                alphaTab.rendering.utils.BeamingHelper.IsFullBarJoin(
                  beat,
                  h.Beats[i + 1],
                  barIndex
                )
              ) {
                barStartX = beatLineX;
                barEndX = h.GetBeatLineX(h.Beats[i + 1]) + this.get_Scale();
              } else if (
                i == 0 ||
                !alphaTab.rendering.utils.BeamingHelper.IsFullBarJoin(
                  h.Beats[i - 1],
                  beat,
                  barIndex
                )
              ) {
                barStartX = beatLineX;
                barEndX = barStartX + brokenBarOffset;
              } else {
                ++barIndex;
                continue;
              }
              barStartY = barY + this.CalculateBeamY(h, barStartX);
              barEndY = barY + this.CalculateBeamY(h, barEndX);
              alphaTab.rendering.ScoreBarRenderer.PaintSingleBar(
                canvas,
                cx + this.X + barStartX,
                barStartY,
                cx + this.X + barEndX,
                barEndY,
                barSize
              );
            } else if (
              i > 0 &&
              !alphaTab.rendering.utils.BeamingHelper.IsFullBarJoin(
                beat,
                h.Beats[i - 1],
                barIndex
              )
            ) {
              barStartX = beatLineX - brokenBarOffset;
              barEndX = beatLineX;
              barStartY = barY + this.CalculateBeamY(h, barStartX);
              barEndY = barY + this.CalculateBeamY(h, barEndX);
              alphaTab.rendering.ScoreBarRenderer.PaintSingleBar(
                canvas,
                cx + this.X + barStartX,
                barStartY,
                cx + this.X + barEndX,
                barEndY,
                barSize
              );
            }
            ++barIndex;
          }
          ++i;
        }
      },
      PaintFooter: function(cx, cy, canvas, h) {
        var beat = h.Beats[0];
        if (
          beat.GraceType == 3 ||
          (beat.GraceType != 0 && this.get_Settings().DisplayMode == 1)
        ) {
          return;
        }
        var isGrace = beat.GraceType != 0;
        var scaleMod = isGrace ? 0.75 : 1;
        var stemSize = this.GetFooterStemSize(h.ShortestDuration);
        var beatLineX = h.GetBeatLineX(beat) + this.get_Scale();
        var direction = h.Direction;
        var topY = this.GetYPositionForNoteValue(h.MaxNoteValue);
        var bottomY = this.GetYPositionForNoteValue(h.MinNoteValue);
        var beamY;
        var fingeringY;
        if (direction == 1) {
          bottomY = bottomY + stemSize * scaleMod;
          beamY = bottomY;
          fingeringY = cy + this.Y + bottomY;
        } else {
          topY = topY - stemSize * scaleMod;
          beamY = topY;
          fingeringY = cy + this.Y + topY;
        }
        this.PaintFingering(
          canvas,
          beat,
          cx + this.X + beatLineX,
          direction,
          fingeringY
        );
        if (beat.Duration == 1 || beat.Duration == -2 || beat.Duration == -4) {
          return;
        }
        canvas.set_LineWidth(1.3 * this.get_Scale());
        canvas.BeginPath();
        canvas.MoveTo(cx + this.X + beatLineX, cy + this.Y + topY);
        canvas.LineTo(cx + this.X + beatLineX, cy + this.Y + bottomY);
        canvas.Stroke();
        canvas.set_LineWidth(this.get_Scale());
        if (beat.GraceType == 2) {
          var graceSizeY = 15 * this.get_Scale();
          var graceSizeX = 12 * this.get_Scale();
          canvas.BeginPath();
          if (direction == 1) {
            canvas.MoveTo(
              cx + this.X + beatLineX - graceSizeX / 2,
              cy + this.Y + bottomY - graceSizeY
            );
            canvas.LineTo(
              cx + this.X + beatLineX + graceSizeX / 2,
              cy + this.Y + bottomY
            );
          } else {
            canvas.MoveTo(
              cx + this.X + beatLineX - graceSizeX / 2,
              cy + this.Y + topY + graceSizeY
            );
            canvas.LineTo(
              cx + this.X + beatLineX + graceSizeX / 2,
              cy + this.Y + topY
            );
          }
          canvas.Stroke();
        }
        if (beat.Duration > 4 || isGrace) {
          var this1 = 2;
          var glyph = new alphaTab.rendering.glyphs.BeamGlyph(
            beatLineX - this.get_Scale() / this1,
            beamY,
            beat.Duration,
            direction,
            isGrace
          );
          glyph.Renderer = this;
          glyph.DoLayout();
          glyph.Paint(cx + this.X, cy + this.Y, canvas);
        }
      },
      PaintFingering: function(canvas, beat, beatLineX, direction, topY) {
        var settings = this.get_Settings();
        if (settings.FingeringMode != 0) {
          return;
        }
        if (direction == 0) {
          beatLineX = beatLineX - 10 * this.get_Scale();
        } else {
          beatLineX = beatLineX + 3 * this.get_Scale();
        }
        var noteList = beat.Notes.slice(0);
        var comparison = function(a, b) {
          return a.get_RealValue() - b.get_RealValue();
        };
        noteList.sort(function(a1, b1) {
          return comparison(a1, b1);
        });
        var n = 0;
        while (n < noteList.length) {
          var note = noteList[n];
          var text = null;
          if (note.LeftHandFinger != -2) {
            text = alphaTab.model.ModelUtils.FingerToString(
              settings,
              beat,
              note.LeftHandFinger,
              true
            );
          } else if (note.RightHandFinger != -2) {
            text = alphaTab.model.ModelUtils.FingerToString(
              settings,
              beat,
              note.RightHandFinger,
              false
            );
          }
          if (text == null) {
            ++n;
            continue;
          }
          canvas.FillText(text, beatLineX, topY);
          topY = topY - system.Convert.ToInt32_Single(canvas.get_Font().Size);
          ++n;
        }
      },
      CreatePreBeatGlyphs: function() {
        alphaTab.rendering.BarRendererBase.prototype.CreatePreBeatGlyphs.call(
          this
        );
        if (this.Bar.get_MasterBar().IsRepeatStart) {
          this.AddPreBeatGlyph(
            new alphaTab.rendering.glyphs.RepeatOpenGlyph(0, 0, 1.5, 3)
          );
        }
        if (
          this.get_IsFirstOfLine() ||
          this.Bar.Clef != this.Bar.PreviousBar.Clef ||
          this.Bar.ClefOttava != this.Bar.PreviousBar.ClefOttava
        ) {
          var offset = 0;
          var correction = 0;
          var _g = this.Bar.Clef;
          switch (_g) {
            case 0:
              offset = 6;
              break;
            case 1:
              offset = 6;
              break;
            case 2:
              offset = 4;
              break;
            case 3:
              offset = 4;
              correction = -1;
              break;
            case 4:
              offset = 8;
              break;
            default:
          }
          this.CreateStartSpacing();
          var this1 = offset;
          var this2 = correction;
          this.AddPreBeatGlyph(
            new alphaTab.rendering.glyphs.ClefGlyph(
              0,
              this.GetScoreY(this1, this2),
              this.Bar.Clef,
              this.Bar.ClefOttava
            )
          );
        }
        if (
          (this.Index == 0 && this.Bar.get_MasterBar().KeySignature != 0) ||
          (this.Bar.PreviousBar != null &&
            this.Bar.get_MasterBar().KeySignature !=
              this.Bar.PreviousBar.get_MasterBar().KeySignature)
        ) {
          this.CreateStartSpacing();
          this.CreateKeySignatureGlyphs();
        }
        if (
          this.Bar.PreviousBar == null ||
          (this.Bar.PreviousBar != null &&
            this.Bar.get_MasterBar().TimeSignatureNumerator !=
              this.Bar.PreviousBar.get_MasterBar().TimeSignatureNumerator) ||
          (this.Bar.PreviousBar != null &&
            this.Bar.get_MasterBar().TimeSignatureDenominator !=
              this.Bar.PreviousBar.get_MasterBar().TimeSignatureDenominator)
        ) {
          this.CreateStartSpacing();
          this.CreateTimeSignatureGlyphs();
        }
        this.AddPreBeatGlyph(
          new alphaTab.rendering.glyphs.BarNumberGlyph(
            0,
            this.GetScoreY(-0.5, 0),
            this.Bar.Index + 1
          )
        );
        if (this.Bar.get_IsEmpty()) {
          this.AddPreBeatGlyph(
            new alphaTab.rendering.glyphs.SpacingGlyph(
              0,
              0,
              30 * this.get_Scale()
            )
          );
        }
      },
      CreateBeatGlyphs: function() {
        var v = 0;
        while (v < this.Bar.Voices.length) {
          var voice = this.Bar.Voices[v];
          if (this.HasVoiceContainer(voice)) {
            this.CreateVoiceGlyphs(voice);
          }
          ++v;
        }
      },
      CreatePostBeatGlyphs: function() {
        alphaTab.rendering.BarRendererBase.prototype.CreatePostBeatGlyphs.call(
          this
        );
        if (this.Bar.get_MasterBar().get_IsRepeatEnd()) {
          this.AddPostBeatGlyph(
            new alphaTab.rendering.glyphs.RepeatCloseGlyph(this.X, 0)
          );
          if (this.Bar.get_MasterBar().RepeatCount > 2) {
            this.AddPostBeatGlyph(
              new alphaTab.rendering.glyphs.RepeatCountGlyph(
                0,
                this.GetScoreY(-1, -3),
                this.Bar.get_MasterBar().RepeatCount
              )
            );
          }
        } else {
          this.AddPostBeatGlyph(
            new alphaTab.rendering.glyphs.BarSeperatorGlyph(0, 0)
          );
        }
      },
      CreateStartSpacing: function() {
        if (this._startSpacing) {
          return;
        }
        this.AddPreBeatGlyph(
          new alphaTab.rendering.glyphs.SpacingGlyph(0, 0, 2 * this.get_Scale())
        );
        this._startSpacing = true;
      },
      CreateKeySignatureGlyphs: function() {
        var offsetClef = 0;
        var currentKey = this.Bar.get_MasterBar().KeySignature;
        var previousKey =
          this.Bar.PreviousBar == null
            ? 0
            : this.Bar.PreviousBar.get_MasterBar().KeySignature;
        var _g = this.Bar.Clef;
        switch (_g) {
          case 0:
            offsetClef = 0;
            break;
          case 1:
            offsetClef = -1;
            break;
          case 2:
            offsetClef = 1;
            break;
          case 3:
            offsetClef = 2;
            break;
          case 4:
            offsetClef = 1;
            break;
          default:
        }
        var this1 = {};
        var newLines = this1;
        var this2 = [];
        var newGlyphs = this2;
        if (alphaTab.model.ModelUtils.KeySignatureIsSharp(currentKey)) {
          var i = 0;
          while (i < Math.abs(currentKey)) {
            var step =
              alphaTab.rendering.ScoreBarRenderer.SharpKsSteps[i] + offsetClef;
            var this3 = step;
            newGlyphs.push(
              new alphaTab.rendering.glyphs.AccidentalGlyph(
                0,
                this.GetScoreY(this3, 0),
                2,
                false
              )
            );
            newLines[step] = true;
            ++i;
          }
        } else {
          var i1 = 0;
          while (i1 < Math.abs(currentKey)) {
            var step1 =
              alphaTab.rendering.ScoreBarRenderer.FlatKsSteps[i1] + offsetClef;
            var this4 = step1;
            newGlyphs.push(
              new alphaTab.rendering.glyphs.AccidentalGlyph(
                0,
                this.GetScoreY(this4, 0),
                3,
                false
              )
            );
            newLines[step1] = true;
            ++i1;
          }
        }
        var naturalizeSymbols = Math.abs(previousKey);
        var previousKeyPositions = alphaTab.model.ModelUtils.KeySignatureIsSharp(
          previousKey
        )
          ? alphaTab.rendering.ScoreBarRenderer.SharpKsSteps
          : alphaTab.rendering.ScoreBarRenderer.FlatKsSteps;
        var i2 = 0;
        while (i2 < naturalizeSymbols) {
          var step2 = previousKeyPositions[i2] + offsetClef;
          if (!newLines.hasOwnProperty(step2)) {
            var this5 = previousKeyPositions[i2] + offsetClef;
            this.AddPreBeatGlyph(
              new alphaTab.rendering.glyphs.AccidentalGlyph(
                0,
                this.GetScoreY(this5, 0),
                1,
                false
              )
            );
          }
          ++i2;
        }
        var newGlyph = $iterator(newGlyphs)();
        while (newGlyph.hasNext()) {
          var newGlyph1 = newGlyph.next();
          this.AddPreBeatGlyph(newGlyph1);
        }
      },
      CreateTimeSignatureGlyphs: function() {
        this.AddPreBeatGlyph(
          new alphaTab.rendering.glyphs.SpacingGlyph(0, 0, 5 * this.get_Scale())
        );
        this.AddPreBeatGlyph(
          new alphaTab.rendering.glyphs.ScoreTimeSignatureGlyph(
            0,
            this.GetScoreY(2, 0),
            this.Bar.get_MasterBar().TimeSignatureNumerator,
            this.Bar.get_MasterBar().TimeSignatureDenominator,
            this.Bar.get_MasterBar().TimeSignatureCommon
          )
        );
      },
      CreateVoiceGlyphs: function(v) {
        var i = 0;
        var j = v.Beats.length;
        while (i < j) {
          var b = v.Beats[i];
          var container = new alphaTab.rendering.ScoreBeatContainerGlyph(
            b,
            this.GetOrCreateVoiceContainer(v)
          );
          container.PreNotes = new alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph();
          container.OnNotes = new alphaTab.rendering.glyphs.ScoreBeatGlyph();
          this.AddBeatGlyph(container);
          ++i;
        }
      },
      GetNoteLine: function(n) {
        return this.AccidentalHelper.GetNoteLine(n);
      },
      GetScoreY: function(steps, correction) {
        if (correction == null) {
          correction = 0;
        }
        return (
          (this.get_LineOffset() / 2) * steps + correction * this.get_Scale()
        );
      },
      PaintBackground: function(cx, cy, canvas) {
        alphaTab.rendering.BarRendererBase.prototype.PaintBackground.call(
          this,
          cx,
          cy,
          canvas
        );
        var res = this.get_Resources();
        canvas.set_Color(res.StaffLineColor);
        var lineY = cy + this.Y + this.TopPadding;
        var lineOffset = this.get_LineOffset();
        var i = 0;
        while (i < 5) {
          if (i > 0) {
            lineY = lineY + lineOffset;
          }
          var tmp = cx + this.X;
          var this1 = system.Convert.ToInt32_Single(lineY);
          canvas.FillRect(tmp, this1, this.Width, this.get_Scale());
          ++i;
        }
        canvas.set_Color(res.MainGlyphColor);
        this.PaintSimileMark(cx, cy, canvas);
      },
      __class__: alphaTab.rendering.ScoreBarRenderer
    }
  );
  alphaTab.rendering.glyphs.BeatContainerGlyph = function(
    beat,
    voiceContainer
  ) {
    alphaTab.rendering.glyphs.Glyph.call(this, 0, 0);
    this.VoiceContainer = null;
    this.Beat = null;
    this.PreNotes = null;
    this.OnNotes = null;
    this.Ties = null;
    this.MinWidth = 0.0;
    this.Beat = beat;
    var this1 = [];
    this.Ties = this1;
    this.VoiceContainer = voiceContainer;
  };
  alphaTab.rendering.glyphs.BeatContainerGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'BeatContainerGlyph'
  ];
  alphaTab.rendering.glyphs.BeatContainerGlyph.GetGroupId = function(beat) {
    return 'b' + beat.Id;
  };
  alphaTab.rendering.glyphs.BeatContainerGlyph.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.BeatContainerGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      get_OnTimeX: function() {
        return this.OnNotes.X + this.OnNotes.CenterX;
      },
      RegisterLayoutingInfo: function(layoutings) {
        var preBeatStretch = this.get_OnTimeX();
        var postBeatStretch = 0;
        var tie = $iterator(this.Ties)();
        while (tie.hasNext()) {
          var tie1 = tie.next();
          if (tie1.Width > postBeatStretch) {
            postBeatStretch = tie1.Width;
          }
        }
        postBeatStretch =
          postBeatStretch +
          (this.OnNotes.X + (this.OnNotes.Width - this.OnNotes.CenterX));
        layoutings.AddBeatSpring(this.Beat, preBeatStretch, postBeatStretch);
        layoutings.SetPreBeatSize(this.Beat, this.PreNotes.Width);
        layoutings.SetOnBeatSize(this.Beat, this.OnNotes.Width);
        layoutings.SetBeatCenterX(this.Beat, this.OnNotes.CenterX);
      },
      ApplyLayoutingInfo: function(info) {
        var offset = info.GetBeatCenterX(this.Beat) - this.OnNotes.CenterX;
        this.PreNotes.X = offset;
        this.PreNotes.Width = info.GetPreBeatSize(this.Beat);
        this.OnNotes.Width = info.GetOnBeatSize(this.Beat);
        this.OnNotes.X = this.PreNotes.X + this.PreNotes.Width;
        this.OnNotes.UpdateBeamingHelper();
      },
      DoLayout: function() {
        this.PreNotes.X = 0;
        this.PreNotes.Renderer = this.Renderer;
        this.PreNotes.Container = this;
        this.PreNotes.DoLayout();
        this.OnNotes.X = this.PreNotes.X + this.PreNotes.Width;
        this.OnNotes.Renderer = this.Renderer;
        this.OnNotes.Container = this;
        this.OnNotes.DoLayout();
        var i = this.Beat.Notes.length - 1;
        while (i >= 0) this.CreateTies(this.Beat.Notes[i--]);
        this.UpdateWidth();
      },
      UpdateWidth: function() {
        this.MinWidth = this.PreNotes.Width + this.OnNotes.Width;
        if (!this.Beat.get_IsRest()) {
          if (this.OnNotes.BeamingHelper.Beats.length == 1) {
            if (this.Beat.Duration >= 8) {
              this.MinWidth = this.MinWidth + 20 * this.get_Scale();
            }
          } else {
            var _g = this.Beat.Duration;
            switch (_g) {
              case 128:
              case 256:
                this.MinWidth = this.MinWidth + 10 * this.get_Scale();
                break;
              default:
            }
          }
        }
        var tieWidth = 0;
        var tie = $iterator(this.Ties)();
        while (tie.hasNext()) {
          var tie1 = tie.next();
          if (tie1.Width > tieWidth) {
            tieWidth = tie1.Width;
          }
        }
        this.MinWidth = this.MinWidth + tieWidth;
        this.Width = this.MinWidth;
      },
      ScaleToWidth: function(beatWidth) {
        var tie = $iterator(this.Ties)();
        while (tie.hasNext()) {
          var tie1 = tie.next();
          tie1.DoLayout();
        }
        this.OnNotes.UpdateBeamingHelper();
        this.Width = beatWidth;
      },
      CreateTies: function(n) {},
      Paint: function(cx, cy, canvas) {
        if (this.Beat.Voice.IsEmpty) {
          return;
        }
        var isEmptyGlyph =
          this.PreNotes.get_IsEmpty() &&
          this.OnNotes.get_IsEmpty() &&
          this.Ties.length == 0;
        if (isEmptyGlyph) {
          return;
        }
        canvas.BeginGroup(
          alphaTab.rendering.glyphs.BeatContainerGlyph.GetGroupId(this.Beat)
        );
        this.PreNotes.Paint(cx + this.X, cy + this.Y, canvas);
        this.OnNotes.Paint(cx + this.X, cy + this.Y, canvas);
        var staffX = cx - this.VoiceContainer.X - this.Renderer.X;
        var staffY = cy - this.VoiceContainer.Y - this.Renderer.Y;
        var i = 0;
        var j = this.Ties.length;
        while (i < j) {
          var t = this.Ties[i];
          t.Renderer = this.Renderer;
          t.Paint(staffX, staffY, canvas);
          ++i;
        }
        canvas.EndGroup();
      },
      __class__: alphaTab.rendering.glyphs.BeatContainerGlyph
    }
  );
  alphaTab.rendering.ScoreBeatContainerGlyph = function(beat, voiceContainer) {
    alphaTab.rendering.glyphs.BeatContainerGlyph.call(
      this,
      beat,
      voiceContainer
    );
    this._bend = null;
    this._effectSlur = null;
    this._effectEndSlur = null;
  };
  alphaTab.rendering.ScoreBeatContainerGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'ScoreBeatContainerGlyph'
  ];
  alphaTab.rendering.ScoreBeatContainerGlyph.__super__ =
    alphaTab.rendering.glyphs.BeatContainerGlyph;
  alphaTab.rendering.ScoreBeatContainerGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.BeatContainerGlyph.prototype,
    {
      DoLayout: function() {
        this._effectSlur = null;
        this._effectEndSlur = null;
        alphaTab.rendering.glyphs.BeatContainerGlyph.prototype.DoLayout.call(
          this
        );
        if (this.Beat.IsLegatoOrigin) {
          if (
            this.Beat.PreviousBeat == null ||
            !this.Beat.PreviousBeat.IsLegatoOrigin
          ) {
            var destination = this.Beat.NextBeat;
            while (
              destination.NextBeat != null &&
              destination.NextBeat.get_IsLegatoDestination()
            )
              destination = destination.NextBeat;
            this.Ties.push(
              new alphaTab.rendering.glyphs.ScoreLegatoGlyph(
                this.Beat,
                destination,
                false
              )
            );
          }
        } else if (this.Beat.get_IsLegatoDestination()) {
          if (!this.Beat.IsLegatoOrigin) {
            var origin = this.Beat.PreviousBeat;
            while (
              origin.PreviousBeat != null &&
              origin.PreviousBeat.IsLegatoOrigin
            )
              origin = origin.PreviousBeat;
            this.Ties.push(
              new alphaTab.rendering.glyphs.ScoreLegatoGlyph(
                origin,
                this.Beat,
                true
              )
            );
          }
        }
        if (this._bend != null) {
          this._bend.Renderer = this.Renderer;
          this._bend.DoLayout();
          this.UpdateWidth();
        }
      },
      CreateTies: function(n) {
        if (!n.IsVisible) {
          return;
        }
        if (
          n.get_IsTieOrigin() &&
          !n.get_HasBend() &&
          !n.Beat.get_HasWhammyBar() &&
          n.Beat.GraceType != 3 &&
          n.TieDestination != null &&
          n.TieDestination.IsVisible
        ) {
          var tie = new alphaTab.rendering.glyphs.ScoreTieGlyph(
            n,
            n.TieDestination,
            false
          );
          this.Ties.push(tie);
        }
        if (
          n.IsTieDestination &&
          !n.TieOrigin.get_HasBend() &&
          !n.Beat.get_HasWhammyBar()
        ) {
          var tie1 = new alphaTab.rendering.glyphs.ScoreTieGlyph(
            n.TieOrigin,
            n,
            true
          );
          this.Ties.push(tie1);
        }
        if (n.SlideType != 0) {
          var l = new alphaTab.rendering.glyphs.ScoreSlideLineGlyph(
            n.SlideType,
            n,
            this
          );
          this.Ties.push(l);
        }
        if (
          n.get_IsSlurOrigin() &&
          n.SlurDestination != null &&
          n.SlurDestination.IsVisible
        ) {
          var tie2 = new alphaTab.rendering.glyphs.ScoreSlurGlyph(
            n,
            n.SlurDestination,
            false
          );
          this.Ties.push(tie2);
        }
        if (n.IsSlurDestination) {
          var tie3 = new alphaTab.rendering.glyphs.ScoreSlurGlyph(
            n.SlurOrigin,
            n,
            true
          );
          this.Ties.push(tie3);
        }
        if (
          this._effectSlur == null &&
          n.Beat.IsEffectSlurOrigin &&
          n.Beat.EffectSlurDestination != null
        ) {
          var direction = this.OnNotes.BeamingHelper.Direction;
          var startNote = direction == 0 ? n.Beat.MinNote : n.Beat.MaxNote;
          var endNote =
            direction == 0
              ? n.Beat.EffectSlurDestination.MinNote
              : n.Beat.EffectSlurDestination.MaxNote;
          this._effectSlur = new alphaTab.rendering.glyphs.ScoreSlurGlyph(
            startNote,
            endNote,
            false
          );
          this.Ties.push(this._effectSlur);
        }
        if (
          this._effectEndSlur == null &&
          n.Beat.get_IsEffectSlurDestination() &&
          n.Beat.EffectSlurOrigin != null
        ) {
          var direction1 = this.OnNotes.BeamingHelper.Direction;
          var startNote1 =
            direction1 == 0
              ? n.Beat.EffectSlurOrigin.MinNote
              : n.Beat.EffectSlurOrigin.MaxNote;
          var endNote1 = direction1 == 0 ? n.Beat.MinNote : n.Beat.MaxNote;
          this._effectEndSlur = new alphaTab.rendering.glyphs.ScoreSlurGlyph(
            startNote1,
            endNote1,
            true
          );
          this.Ties.push(this._effectEndSlur);
        }
        if (n.get_HasBend()) {
          if (this._bend == null) {
            this._bend = new alphaTab.rendering.glyphs.ScoreBendGlyph(n.Beat);
            this._bend.Renderer = this.Renderer;
            this.Ties.push(this._bend);
          }
          this._bend.AddBends(n);
        }
      },
      __class__: alphaTab.rendering.ScoreBeatContainerGlyph
    }
  );
  alphaTab.rendering.ScoreRenderer = $hx_exports['alphaTab']['rendering'][
    'ScoreRenderer'
  ] = function(settings) {
    this._currentLayoutMode = null;
    this._currentRenderEngine = null;
    this._renderedTracks = null;
    this.Canvas = null;
    this.Score = null;
    this.Tracks = null;
    this.Layout = null;
    this.Settings = null;
    this.set_BoundsLookup(null);
    this.Settings = settings;
    this.RecreateCanvas();
    this.RecreateLayout();
  };
  alphaTab.rendering.ScoreRenderer.__name__ = [
    'alphaTab',
    'rendering',
    'ScoreRenderer'
  ];
  alphaTab.rendering.ScoreRenderer.__interfaces__ = [
    alphaTab.rendering.IScoreRenderer
  ];
  alphaTab.rendering.ScoreRenderer.prototype = {
    get_BoundsLookup: function() {
      return this.__BoundsLookup;
    },
    set_BoundsLookup: function(value) {
      return (this.__BoundsLookup = value);
    },
    Destroy: function() {
      this.Score = null;
      this.Canvas = null;
      this.Layout = null;
      this.Settings = null;
      this.set_BoundsLookup(null);
      this.Tracks = null;
    },
    RecreateCanvas: function() {
      if (this._currentRenderEngine != this.Settings.Engine) {
        this.Canvas = alphaTab.Environment.GetRenderEngineFactory(
          this.Settings
        ).CreateCanvas();
        this._currentRenderEngine = this.Settings.Engine;
        return true;
      }
      return false;
    },
    RecreateLayout: function() {
      if (this._currentLayoutMode != this.Settings.Layout.Mode) {
        this.Layout = alphaTab.Environment.GetLayoutEngineFactory(
          this.Settings
        ).CreateLayout(this);
        this._currentLayoutMode = this.Settings.Layout.Mode;
        return true;
      }
      return false;
    },
    Render: function(score, trackIndexes) {
      try {
        this.Score = score;
        var tracks;
        if (trackIndexes == null) {
          tracks = score.Tracks.slice(0);
        } else {
          var this1 = [];
          tracks = this1;
          var track = new system.Int32ArrayIterator(trackIndexes);
          while (track.hasNext()) {
            var track1 = track.next();
            if (track1 >= 0 && track1 < score.Tracks.length) {
              tracks.push(score.Tracks[track1]);
            }
          }
        }
        if (tracks.length == 0 && score.Tracks.length > 0) {
          tracks.push(score.Tracks[0]);
        }
        this.Tracks = tracks;
        this.Invalidate();
      } catch (e) {
        if (e instanceof js._Boot.HaxeError) e = e.val;
        if (js.Boot.__instanceof(e, system.Exception)) {
          this.OnError('render', e);
        } else throw e;
      }
    },
    RenderTracks: function(tracks) {
      if (tracks.length == 0) {
        this.Score = null;
      } else {
        this.Score = tracks[0].Score;
      }
      this.Tracks = tracks;
      this.Invalidate();
    },
    UpdateSettings: function(settings) {
      this.Settings = settings;
    },
    Invalidate: function() {
      if (this.Settings.Width == 0) {
        alphaTab.util.Logger.Warning(
          'Rendering',
          'AlphaTab skipped rendering because of width=0 (element invisible)',
          null
        );
        return;
      }
      this.set_BoundsLookup(new alphaTab.rendering.utils.BoundsLookup());
      if (this.Tracks == null || this.Tracks.length == 0) {
        return;
      }
      this.RecreateCanvas();
      this.Canvas.set_LineWidth(this.Settings.Scale);
      this.Canvas.set_Settings(this.Settings);
      alphaTab.util.Logger.Info(
        'Rendering',
        'Rendering ' + this.Tracks.length + ' tracks',
        null
      );
      var i = 0;
      while (i < this.Tracks.length) {
        var track = this.Tracks[i];
        alphaTab.util.Logger.Info(
          'Rendering',
          'Track ' + i + ': ' + track.Name,
          null
        );
        ++i;
      }
      this.OnPreRender();
      this.RecreateLayout();
      this.LayoutAndRender();
      this._renderedTracks = this.Tracks;
      alphaTab.util.Logger.Info('Rendering', 'Rendering finished', null);
    },
    Resize: function(width) {
      if (
        this.RecreateLayout() ||
        this.RecreateCanvas() ||
        this._renderedTracks != this.Tracks ||
        this.Tracks == null
      ) {
        alphaTab.util.Logger.Info(
          'Rendering',
          'Starting full rerendering due to layout or canvas change',
          null
        );
        this.Invalidate();
      } else if (this.Layout.get_SupportsResize()) {
        alphaTab.util.Logger.Info(
          'Rendering',
          'Starting optimized rerendering for resize',
          null
        );
        this.set_BoundsLookup(new alphaTab.rendering.utils.BoundsLookup());
        this.OnPreRender();
        this.Settings.Width = width;
        this.Canvas.set_Settings(this.Settings);
        this.Layout.Resize();
        this.Layout.RenderAnnotation();
        this.OnRenderFinished();
        this.OnPostRender();
      } else {
        alphaTab.util.Logger.Warning(
          'Rendering',
          'Current layout does not support dynamic resizing, nothing was done',
          null
        );
      }
      alphaTab.util.Logger.Debug('Rendering', 'Resize finished', null);
    },
    LayoutAndRender: function() {
      alphaTab.util.Logger.Info(
        'Rendering',
        'Rendering at scale ' +
          this.Settings.Scale +
          ' with layout ' +
          this.Layout.get_Name(),
        null
      );
      this.Layout.LayoutAndRender();
      this.Layout.RenderAnnotation();
      this.OnRenderFinished();
      this.OnPostRender();
    },
    add_PreRender: function(value) {
      this.PreRender = system._EventAction.EventAction_Impl_.add(
        this.PreRender,
        value
      );
    },
    remove_PreRender: function(value) {
      this.PreRender = system._EventAction.EventAction_Impl_.sub(
        this.PreRender,
        value
      );
    },
    OnPreRender: function() {
      var _e = this.PreRender;
      var handler = function() {
        system._EventAction.EventAction_Impl_.Invoke(_e);
      };
      if (handler != null) {
        handler();
      }
    },
    add_PartialRenderFinished: function(value) {
      this.PartialRenderFinished = system._EventAction1.EventAction1_Impl_.add(
        this.PartialRenderFinished,
        value
      );
    },
    remove_PartialRenderFinished: function(value) {
      this.PartialRenderFinished = system._EventAction1.EventAction1_Impl_.sub(
        this.PartialRenderFinished,
        value
      );
    },
    OnPartialRenderFinished: function(e) {
      var _e = this.PartialRenderFinished;
      var handler = function(p) {
        system._EventAction1.EventAction1_Impl_.Invoke(_e, p);
      };
      if (handler != null) {
        handler(e);
      }
    },
    add_RenderFinished: function(value) {
      this.RenderFinished = system._EventAction1.EventAction1_Impl_.add(
        this.RenderFinished,
        value
      );
    },
    remove_RenderFinished: function(value) {
      this.RenderFinished = system._EventAction1.EventAction1_Impl_.sub(
        this.RenderFinished,
        value
      );
    },
    OnRenderFinished: function() {
      var _gthis = this;
      var result = this.Canvas.OnRenderFinished();
      var _e = this.RenderFinished;
      var handler = function(p) {
        system._EventAction1.EventAction1_Impl_.Invoke(_e, p);
      };
      if (handler != null) {
        var _tmp = new alphaTab.rendering.RenderFinishedEventArgs();
        _tmp.RenderResult = result;
        _tmp.TotalHeight = _gthis.Layout.Height;
        _tmp.TotalWidth = _gthis.Layout.Width;
        handler(_tmp);
      }
    },
    add_Error: function(value) {
      this.Error = system._EventAction2.EventAction2_Impl_.add(
        this.Error,
        value
      );
    },
    remove_Error: function(value) {
      this.Error = system._EventAction2.EventAction2_Impl_.sub(
        this.Error,
        value
      );
    },
    OnError: function(type, details) {
      var _e = this.Error;
      var handler = function(p1, p2) {
        system._EventAction2.EventAction2_Impl_.Invoke(_e, p1, p2);
      };
      if (handler != null) {
        handler(type, details);
      }
    },
    add_PostRenderFinished: function(value) {
      this.PostRenderFinished = system._EventAction.EventAction_Impl_.add(
        this.PostRenderFinished,
        value
      );
    },
    remove_PostRenderFinished: function(value) {
      this.PostRenderFinished = system._EventAction.EventAction_Impl_.sub(
        this.PostRenderFinished,
        value
      );
    },
    OnPostRender: function() {
      var _e = this.PostRenderFinished;
      var handler = function() {
        system._EventAction.EventAction_Impl_.Invoke(_e);
      };
      if (handler != null) {
        handler();
      }
    },
    __class__: alphaTab.rendering.ScoreRenderer
  };
  alphaTab.rendering.TabBarRenderer = function(renderer, bar) {
    this._tupletSize = 0;
    alphaTab.rendering.BarRendererBase.call(this, renderer, bar);
    this.ShowTimeSignature = false;
    this.ShowRests = false;
    this.ShowTiedNotes = false;
    this.RenderRhythm = false;
    this.RhythmHeight = 0.0;
    this.RhythmBeams = false;
    this._startSpacing = false;
    this.RhythmHeight = 15 * renderer.Layout.get_Scale();
    this.RhythmBeams = false;
  };
  alphaTab.rendering.TabBarRenderer.__name__ = [
    'alphaTab',
    'rendering',
    'TabBarRenderer'
  ];
  alphaTab.rendering.TabBarRenderer.PaintSingleBar = function(
    canvas,
    x1,
    y1,
    x2,
    y2,
    size
  ) {
    canvas.BeginPath();
    canvas.MoveTo(x1, y1);
    canvas.LineTo(x2, y2);
    canvas.LineTo(x2, y2 - size);
    canvas.LineTo(x1, y1 - size);
    canvas.ClosePath();
    canvas.Fill();
  };
  alphaTab.rendering.TabBarRenderer.__super__ =
    alphaTab.rendering.BarRendererBase;
  alphaTab.rendering.TabBarRenderer.prototype = $extend(
    alphaTab.rendering.BarRendererBase.prototype,
    {
      get_LineOffset: function() {
        return (10 + 1) * this.get_Scale();
      },
      GetNoteX: function(note, onEnd) {
        if (onEnd == null) {
          onEnd = true;
        }
        var beat = js.Boot.__cast(
          this.GetOnNotesGlyphForBeat(note.Beat),
          alphaTab.rendering.glyphs.TabBeatGlyph
        );
        if (beat != null) {
          return (
            beat.Container.X +
            beat.Container.VoiceContainer.X +
            beat.X +
            beat.NoteNumbers.GetNoteX(note, onEnd)
          );
        }
        return 0;
      },
      GetNoteY: function(note, aboveNote) {
        if (aboveNote == null) {
          aboveNote = false;
        }
        var beat = js.Boot.__cast(
          this.GetOnNotesGlyphForBeat(note.Beat),
          alphaTab.rendering.glyphs.TabBeatGlyph
        );
        if (beat != null) {
          return beat.NoteNumbers.GetNoteY(note, aboveNote);
        }
        return 0;
      },
      UpdateSizes: function() {
        var res = this.get_Resources();
        var this1 = 0.2;
        var numberOverflow =
          res.TablatureFont.Size / 2 + res.TablatureFont.Size * this1;
        this.TopPadding = numberOverflow;
        this.BottomPadding = numberOverflow;
        this.Height =
          this.get_LineOffset() * (this.Bar.Staff.Tuning.length - 1) +
          numberOverflow * 2;
        if (this.RenderRhythm) {
          this.Height = this.Height + this.RhythmHeight;
          this.BottomPadding = this.BottomPadding + this.RhythmHeight;
        }
        alphaTab.rendering.BarRendererBase.prototype.UpdateSizes.call(this);
      },
      DoLayout: function() {
        alphaTab.rendering.BarRendererBase.prototype.DoLayout.call(this);
        if (this.RenderRhythm) {
          var hasTuplets = false;
          var voice = $iterator(this.Bar.Voices)();
          while (voice.hasNext()) {
            var voice1 = voice.next();
            if (this.HasVoiceContainer(voice1)) {
              var c = this.GetOrCreateVoiceContainer(voice1);
              if (c.TupletGroups.length > 0) {
                hasTuplets = true;
                break;
              }
            }
          }
          if (hasTuplets) {
            var this1 = 0.8;
            this._tupletSize = this.get_Resources().EffectFont.Size * this1;
            this.RegisterOverflowBottom(this._tupletSize);
          }
        }
      },
      CreatePreBeatGlyphs: function() {
        alphaTab.rendering.BarRendererBase.prototype.CreatePreBeatGlyphs.call(
          this
        );
        if (this.Bar.get_MasterBar().IsRepeatStart) {
          this.AddPreBeatGlyph(
            new alphaTab.rendering.glyphs.RepeatOpenGlyph(0, 0, 1.5, 3)
          );
        }
        if (this.get_IsFirstOfLine()) {
          var this1 = 2;
          var center = (this.Bar.Staff.Tuning.length + 1) / this1;
          this.AddPreBeatGlyph(
            new alphaTab.rendering.glyphs.TabClefGlyph(
              5 * this.get_Scale(),
              this.GetTabY(center, 0)
            )
          );
        }
        if (
          this.ShowTimeSignature &&
          (this.Bar.PreviousBar == null ||
            (this.Bar.PreviousBar != null &&
              this.Bar.get_MasterBar().TimeSignatureNumerator !=
                this.Bar.PreviousBar.get_MasterBar().TimeSignatureNumerator) ||
            (this.Bar.PreviousBar != null &&
              this.Bar.get_MasterBar().TimeSignatureDenominator !=
                this.Bar.PreviousBar.get_MasterBar().TimeSignatureDenominator))
        ) {
          this.CreateStartSpacing();
          this.CreateTimeSignatureGlyphs();
        }
        this.AddPreBeatGlyph(
          new alphaTab.rendering.glyphs.BarNumberGlyph(
            0,
            this.GetTabY(-0.5, 0),
            this.Bar.Index + 1
          )
        );
        if (this.Bar.get_IsEmpty()) {
          this.AddPreBeatGlyph(
            new alphaTab.rendering.glyphs.SpacingGlyph(
              0,
              0,
              30 * this.get_Scale()
            )
          );
        }
      },
      CreateStartSpacing: function() {
        if (this._startSpacing) {
          return;
        }
        this.AddPreBeatGlyph(
          new alphaTab.rendering.glyphs.SpacingGlyph(0, 0, 2 * this.get_Scale())
        );
        this._startSpacing = true;
      },
      CreateTimeSignatureGlyphs: function() {
        this.AddPreBeatGlyph(
          new alphaTab.rendering.glyphs.SpacingGlyph(0, 0, 5 * this.get_Scale())
        );
        this.AddPreBeatGlyph(
          new alphaTab.rendering.glyphs.TabTimeSignatureGlyph(
            0,
            this.GetTabY(0, 0),
            this.Bar.get_MasterBar().TimeSignatureNumerator,
            this.Bar.get_MasterBar().TimeSignatureDenominator,
            this.Bar.get_MasterBar().TimeSignatureCommon
          )
        );
      },
      CreateBeatGlyphs: function() {
        var v = 0;
        while (v < this.Bar.Voices.length) {
          var voice = this.Bar.Voices[v];
          if (this.HasVoiceContainer(voice)) {
            this.CreateVoiceGlyphs(this.Bar.Voices[v]);
          }
          ++v;
        }
      },
      CreateVoiceGlyphs: function(v) {
        var i = 0;
        var j = v.Beats.length;
        while (i < j) {
          var b = v.Beats[i];
          var container = new alphaTab.rendering.glyphs.TabBeatContainerGlyph(
            b,
            this.GetOrCreateVoiceContainer(v)
          );
          container.PreNotes = new alphaTab.rendering.glyphs.TabBeatPreNotesGlyph();
          container.OnNotes = new alphaTab.rendering.glyphs.TabBeatGlyph();
          this.AddBeatGlyph(container);
          ++i;
        }
      },
      CreatePostBeatGlyphs: function() {
        alphaTab.rendering.BarRendererBase.prototype.CreatePostBeatGlyphs.call(
          this
        );
        if (this.Bar.get_MasterBar().get_IsRepeatEnd()) {
          this.AddPostBeatGlyph(
            new alphaTab.rendering.glyphs.RepeatCloseGlyph(this.X, 0)
          );
          if (this.Bar.get_MasterBar().RepeatCount > 2) {
            this.AddPostBeatGlyph(
              new alphaTab.rendering.glyphs.RepeatCountGlyph(
                0,
                this.GetTabY(-0.5, -3),
                this.Bar.get_MasterBar().RepeatCount
              )
            );
          }
        } else {
          this.AddPostBeatGlyph(
            new alphaTab.rendering.glyphs.BarSeperatorGlyph(0, 0)
          );
        }
      },
      GetTabY: function(line, correction) {
        if (correction == null) {
          correction = 0;
        }
        return this.get_LineOffset() * line + correction * this.get_Scale();
      },
      PaintBackground: function(cx, cy, canvas) {
        alphaTab.rendering.BarRendererBase.prototype.PaintBackground.call(
          this,
          cx,
          cy,
          canvas
        );
        var res = this.get_Resources();
        canvas.set_Color(res.StaffLineColor);
        var lineY = cy + this.Y + this.TopPadding;
        var padding = this.get_Scale();
        var this1 = [];
        var tabNotes = this1;
        var i = 0;
        var j = this.Bar.Staff.Tuning.length;
        while (i < j) {
          var this2 = [];
          tabNotes.push(this2);
          ++i;
        }
        var voice = $iterator(this.Bar.Voices)();
        while (voice.hasNext()) {
          var voice1 = voice.next();
          if (this.HasVoiceContainer(voice1)) {
            var vc = this.GetOrCreateVoiceContainer(voice1);
            var bg = $iterator(vc.BeatGlyphs)();
            while (bg.hasNext()) {
              var bg1 = bg.next();
              var notes = js.Boot.__cast(
                bg1.OnNotes,
                alphaTab.rendering.glyphs.TabBeatGlyph
              );
              var noteNumbers = notes.NoteNumbers;
              if (noteNumbers != null) {
                var this3 = noteNumbers.NotesPerString;
                var s = $iterator(Object.keys(this3))();
                while (s.hasNext()) {
                  var s1 = s.next();
                  var noteNumber = noteNumbers.NotesPerString[s1];
                  if (!noteNumber.IsEmpty) {
                    tabNotes[this.Bar.Staff.Tuning.length - s1].push(
                      new Float32Array([
                        vc.X + bg1.X + notes.X + noteNumbers.X,
                        noteNumbers.Width + padding
                      ])
                    );
                  }
                }
              }
            }
          }
        }
        var line = $iterator(tabNotes)();
        while (line.hasNext()) {
          var line1 = line.next();
          line1.sort(
            (function(comparison) {
              return function(a, b) {
                return comparison[0](a, b);
              };
            })([
              (function() {
                return function(a1, b1) {
                  if (a1[0] > b1[0]) {
                    return 1;
                  } else if (a1[0] < b1[0]) {
                    return -1;
                  } else {
                    return 0;
                  }
                };
              })()
            ])
          );
        }
        var lineOffset = this.get_LineOffset();
        var i1 = 0;
        var j1 = this.Bar.Staff.Tuning.length;
        while (i1 < j1) {
          if (i1 > 0) {
            lineY = lineY + lineOffset;
          }
          var lineX = 0;
          var line2 = $iterator(tabNotes[i1])();
          while (line2.hasNext()) {
            var line3 = line2.next();
            var tmp = cx + this.X + lineX;
            var this4 = system.Convert.ToInt32_Single(lineY);
            var tmp1 = this.get_Scale();
            canvas.FillRect(tmp, this4, line3[0] - lineX, tmp1);
            lineX = line3[0] + line3[1];
          }
          var tmp2 = cx + this.X + lineX;
          var this5 = system.Convert.ToInt32_Single(lineY);
          canvas.FillRect(tmp2, this5, this.Width - lineX, this.get_Scale());
          ++i1;
        }
        canvas.set_Color(res.MainGlyphColor);
        this.PaintSimileMark(cx, cy, canvas);
      },
      Paint: function(cx, cy, canvas) {
        alphaTab.rendering.BarRendererBase.prototype.Paint.call(
          this,
          cx,
          cy,
          canvas
        );
        if (this.RenderRhythm) {
          this.PaintBeams(cx, cy, canvas);
          this.PaintTuplets(cx, cy, canvas);
        }
      },
      PaintBeams: function(cx, cy, canvas) {
        var i = 0;
        var j = this.Helpers.BeamHelpers.length;
        while (i < j) {
          var v = this.Helpers.BeamHelpers[i];
          var k = 0;
          var l = v.length;
          while (k < l) {
            var h = v[k];
            this.PaintBeamHelper(
              cx + this.get_BeatGlyphsStart(),
              cy,
              canvas,
              h
            );
            ++k;
          }
          ++i;
        }
      },
      PaintTuplets: function(cx, cy, canvas) {
        var voice = $iterator(this.Bar.Voices)();
        while (voice.hasNext()) {
          var voice1 = voice.next();
          if (this.HasVoiceContainer(voice1)) {
            var container = this.GetOrCreateVoiceContainer(voice1);
            var tupletGroup = $iterator(container.TupletGroups)();
            while (tupletGroup.hasNext()) {
              var tupletGroup1 = tupletGroup.next();
              this.PaintTupletHelper(
                cx + this.get_BeatGlyphsStart(),
                cy,
                canvas,
                tupletGroup1
              );
            }
          }
        }
      },
      PaintBeamHelper: function(cx, cy, canvas, h) {
        canvas.set_Color(
          h.Voice.Index == 0
            ? this.get_Resources().MainGlyphColor
            : this.get_Resources().SecondaryGlyphColor
        );
        if (h.Beats.length == 1 || this.RhythmBeams) {
          this.PaintFooter(cx, cy, canvas, h);
        } else {
          this.PaintBar(cx, cy, canvas, h);
        }
      },
      PaintBar: function(cx, cy, canvas, h) {
        var i = 0;
        var j = h.Beats.length;
        while (i < j) {
          var beat = h.Beats[i];
          if (h.HasBeatLineX(beat)) {
            var beatLineX = h.GetBeatLineX(beat);
            var y1 = cy + this.Y;
            var y2 = cy + this.Y + this.Height - this._tupletSize;
            var startGlyph = js.Boot.__cast(
              this.GetOnNotesGlyphForBeat(beat),
              alphaTab.rendering.glyphs.TabBeatGlyph
            );
            if (startGlyph.NoteNumbers == null) {
              y1 = y1 + (this.Height - this.RhythmHeight - this._tupletSize);
            } else {
              y1 =
                y1 +
                (startGlyph.NoteNumbers.GetNoteY(
                  startGlyph.NoteNumbers.MinStringNote,
                  false
                ) +
                  this.get_LineOffset() / 2);
            }
            if (h.Direction == 0) {
              var this1 = 2;
              beatLineX = beatLineX - startGlyph.Width / this1;
            } else {
              var this2 = 2;
              beatLineX = beatLineX + startGlyph.Width / this2;
            }
            canvas.BeginPath();
            canvas.MoveTo(cx + this.X + beatLineX, y1);
            canvas.LineTo(cx + this.X + beatLineX, y2);
            canvas.Stroke();
            var brokenBarOffset = 6 * this.get_Scale();
            var barSpacing = -6 * this.get_Scale();
            var barSize = 3 * this.get_Scale();
            var barCount =
              alphaTab.model.ModelUtils.GetIndex(beat.Duration) - 2;
            var barStart = y2;
            var barIndex = 0;
            while (barIndex < barCount) {
              var barStartX;
              var barEndX;
              var barStartY;
              var barEndY;
              var barY = barStart + barIndex * barSpacing;
              if (h.Beats.length == 1) {
                barStartX = beatLineX;
                barEndX = beatLineX + brokenBarOffset;
                barStartY = barY;
                barEndY = barY;
                alphaTab.rendering.TabBarRenderer.PaintSingleBar(
                  canvas,
                  cx + this.X + barStartX,
                  barStartY,
                  cx + this.X + barEndX,
                  barEndY,
                  barSize
                );
              } else if (i < h.Beats.length - 1) {
                if (
                  alphaTab.rendering.utils.BeamingHelper.IsFullBarJoin(
                    beat,
                    h.Beats[i + 1],
                    barIndex
                  )
                ) {
                  barStartX = beatLineX;
                  barEndX = h.GetBeatLineX(h.Beats[i + 1]) + this.get_Scale();
                  var endGlyph = this.GetOnNotesGlyphForBeat(h.Beats[i + 1]);
                  if (h.Direction == 0) {
                    var this3 = 2;
                    barEndX = barEndX - endGlyph.Width / this3;
                  } else {
                    var this4 = 2;
                    barEndX = barEndX + endGlyph.Width / this4;
                  }
                } else if (
                  i == 0 ||
                  !alphaTab.rendering.utils.BeamingHelper.IsFullBarJoin(
                    h.Beats[i - 1],
                    beat,
                    barIndex
                  )
                ) {
                  barStartX = beatLineX;
                  barEndX = barStartX + brokenBarOffset;
                } else {
                  ++barIndex;
                  continue;
                }
                barStartY = barY;
                barEndY = barY;
                alphaTab.rendering.TabBarRenderer.PaintSingleBar(
                  canvas,
                  cx + this.X + barStartX,
                  barStartY,
                  cx + this.X + barEndX,
                  barEndY,
                  barSize
                );
              } else if (
                i > 0 &&
                !alphaTab.rendering.utils.BeamingHelper.IsFullBarJoin(
                  beat,
                  h.Beats[i - 1],
                  barIndex
                )
              ) {
                barStartX = beatLineX - brokenBarOffset;
                barEndX = beatLineX;
                barStartY = barY;
                barEndY = barY;
                alphaTab.rendering.TabBarRenderer.PaintSingleBar(
                  canvas,
                  cx + this.X + barStartX,
                  barStartY,
                  cx + this.X + barEndX,
                  barEndY,
                  barSize
                );
              }
              ++barIndex;
            }
          }
          ++i;
        }
      },
      PaintTupletHelper: function(cx, cy, canvas, h) {
        var res = this.get_Resources();
        var oldAlign = canvas.get_TextAlign();
        canvas.set_Color(
          h.Voice.Index == 0
            ? this.get_Resources().MainGlyphColor
            : this.get_Resources().SecondaryGlyphColor
        );
        canvas.set_TextAlign(1);
        var s;
        var num = h.Beats[0].TupletNumerator;
        var den = h.Beats[0].TupletDenominator;
        if (num == 2 && den == 3) {
          s = '2';
        } else if (num == 3 && den == 2) {
          s = '3';
        } else if (num == 4 && den == 6) {
          s = '4';
        } else if (num == 5 && den == 4) {
          s = '5';
        } else if (num == 6 && den == 4) {
          s = '6';
        } else if (num == 7 && den == 4) {
          s = '7';
        } else if (num == 9 && den == 8) {
          s = '9';
        } else if (num == 10 && den == 8) {
          s = '10';
        } else if (num == 11 && den == 8) {
          s = '11';
        } else if (num == 12 && den == 8) {
          s = '12';
        } else if (num == 13 && den == 8) {
          s = '13';
        } else {
          s = Std.string(num) + ':' + Std.string(den);
        }
        if (h.Beats.length == 1 || !h.IsFull) {
          var i = 0;
          var j = h.Beats.length;
          while (i < j) {
            var beat = h.Beats[i];
            var beamingHelper = this.Helpers.BeamHelperLookup[h.Voice.Index][
              beat.Index
            ];
            if (beamingHelper == null) {
              ++i;
              continue;
            }
            var tupletX = beamingHelper.GetBeatLineX(beat);
            var startGlyph = js.Boot.__cast(
              this.GetOnNotesGlyphForBeat(beat),
              alphaTab.rendering.glyphs.TabBeatGlyph
            );
            if (beamingHelper.Direction == 0) {
              var this1 = 2;
              tupletX = tupletX - startGlyph.Width / this1;
            } else {
              var this2 = 2;
              tupletX = tupletX + startGlyph.Width / this2;
            }
            var this3 = 0.5;
            var tupletY =
              cy +
              this.Y +
              this.Height -
              this._tupletSize +
              res.EffectFont.Size * this3;
            canvas.set_Font(res.EffectFont);
            canvas.FillText(s, cx + this.X + tupletX, tupletY);
            ++i;
          }
        } else {
          var firstBeat = h.Beats[0];
          var lastBeat = h.Beats[h.Beats.length - 1];
          var firstBeamingHelper = this.Helpers.BeamHelperLookup[h.Voice.Index][
            firstBeat.Index
          ];
          var lastBeamingHelper = this.Helpers.BeamHelperLookup[h.Voice.Index][
            lastBeat.Index
          ];
          if (firstBeamingHelper != null && lastBeamingHelper != null) {
            var startX = firstBeamingHelper.GetBeatLineX(firstBeat);
            var endX = lastBeamingHelper.GetBeatLineX(lastBeat);
            var startGlyph1 = js.Boot.__cast(
              this.GetOnNotesGlyphForBeat(firstBeat),
              alphaTab.rendering.glyphs.TabBeatGlyph
            );
            var endGlyph = js.Boot.__cast(
              this.GetOnNotesGlyphForBeat(firstBeat),
              alphaTab.rendering.glyphs.TabBeatGlyph
            );
            if (firstBeamingHelper.Direction == 0) {
              var this4 = 2;
              startX = startX - startGlyph1.Width / this4;
              var this5 = 2;
              endX = endX - endGlyph.Width / this5;
            } else {
              var this6 = 2;
              startX = startX + startGlyph1.Width / this6;
              var this7 = 2;
              endX = endX + endGlyph.Width / this7;
            }
            canvas.set_Font(res.EffectFont);
            var sw = canvas.MeasureText(s);
            var sp = 3 * this.get_Scale();
            var middleX = (startX + endX) / 2;
            var offset1X = middleX - sw / 2 - sp;
            var offset2X = middleX + sw / 2 + sp;
            var this8 = 0.5;
            var startY =
              cy +
              this.Y +
              this.Height -
              this._tupletSize +
              res.EffectFont.Size * this8;
            var this9 = 0.25;
            var offset = -res.EffectFont.Size * this9;
            var size = -5 * this.get_Scale();
            canvas.BeginPath();
            var tmp = cx + this.X + startX;
            var this10 = system.Convert.ToInt32_Single(startY - offset);
            canvas.MoveTo(tmp, this10);
            var tmp1 = cx + this.X + startX;
            var this11 = system.Convert.ToInt32_Single(startY - offset - size);
            canvas.LineTo(tmp1, this11);
            var tmp2 = cx + this.X + offset1X;
            var this12 = system.Convert.ToInt32_Single(startY - offset - size);
            canvas.LineTo(tmp2, this12);
            canvas.Stroke();
            canvas.BeginPath();
            var tmp3 = cx + this.X + offset2X;
            var this13 = system.Convert.ToInt32_Single(startY - offset - size);
            canvas.MoveTo(tmp3, this13);
            var tmp4 = cx + this.X + endX;
            var this14 = system.Convert.ToInt32_Single(startY - offset - size);
            canvas.LineTo(tmp4, this14);
            var tmp5 = cx + this.X + endX;
            var this15 = system.Convert.ToInt32_Single(startY - offset);
            canvas.LineTo(tmp5, this15);
            canvas.Stroke();
            canvas.FillText(s, cx + this.X + middleX, startY);
          }
        }
        canvas.set_TextAlign(oldAlign);
      },
      PaintFooter: function(cx, cy, canvas, h) {
        var beat = $iterator(h.Beats)();
        while (beat.hasNext()) {
          var beat1 = beat.next();
          if (
            beat1.GraceType != 0 ||
            beat1.Duration == 1 ||
            beat1.Duration == -2 ||
            beat1.Duration == -4
          ) {
            return;
          }
          var beatLineX = h.GetBeatLineX(beat1);
          var y1 = cy + this.Y;
          var y2 = cy + this.Y + this.Height - this._tupletSize;
          var startGlyph = js.Boot.__cast(
            this.GetOnNotesGlyphForBeat(beat1),
            alphaTab.rendering.glyphs.TabBeatGlyph
          );
          if (startGlyph.NoteNumbers == null) {
            y1 = y1 + (this.Height - this.RhythmHeight - this._tupletSize);
          } else {
            y1 =
              y1 +
              (startGlyph.NoteNumbers.GetNoteY(
                startGlyph.NoteNumbers.MinStringNote,
                false
              ) +
                this.get_LineOffset() / 2);
          }
          if (h.Direction == 0) {
            var this1 = 2;
            beatLineX = beatLineX - startGlyph.Width / this1;
          } else {
            var this2 = 2;
            beatLineX = beatLineX + startGlyph.Width / this2;
          }
          canvas.BeginPath();
          canvas.MoveTo(cx + this.X + beatLineX, y1);
          canvas.LineTo(cx + this.X + beatLineX, y2);
          canvas.Stroke();
          if (beat1.Duration > 4) {
            var glyph = new alphaTab.rendering.glyphs.BeamGlyph(
              0,
              0,
              beat1.Duration,
              1,
              false
            );
            glyph.Renderer = this;
            glyph.DoLayout();
            glyph.Paint(cx + this.X + beatLineX, y2, canvas);
          }
        }
      },
      __class__: alphaTab.rendering.TabBarRenderer
    }
  );
  alphaTab.rendering.glyphs.EffectGlyph = function(x, y) {
    alphaTab.rendering.glyphs.Glyph.call(this, x, y);
    this.Beat = null;
    this.NextGlyph = null;
    this.PreviousGlyph = null;
    this.Height = 0.0;
  };
  alphaTab.rendering.glyphs.EffectGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'EffectGlyph'
  ];
  alphaTab.rendering.glyphs.EffectGlyph.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.EffectGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      __class__: alphaTab.rendering.glyphs.EffectGlyph
    }
  );
  alphaTab.rendering.glyphs.MusicFontGlyph = function(
    x,
    y,
    glyphScale,
    symbol
  ) {
    alphaTab.rendering.glyphs.EffectGlyph.call(this, x, y);
    this.GlyphScale = 0.0;
    this.Symbol = -1;
    this.GlyphScale = glyphScale;
    this.Symbol = symbol;
  };
  alphaTab.rendering.glyphs.MusicFontGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'MusicFontGlyph'
  ];
  alphaTab.rendering.glyphs.MusicFontGlyph.__super__ =
    alphaTab.rendering.glyphs.EffectGlyph;
  alphaTab.rendering.glyphs.MusicFontGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.EffectGlyph.prototype,
    {
      Paint: function(cx, cy, canvas) {
        canvas.FillMusicFontSymbol(
          cx + this.X,
          cy + this.Y,
          this.GlyphScale * this.get_Scale(),
          this.Symbol,
          false
        );
      },
      __class__: alphaTab.rendering.glyphs.MusicFontGlyph
    }
  );
  alphaTab.rendering.glyphs.AccentuationGlyph = function(x, y, accentuation) {
    alphaTab.rendering.glyphs.MusicFontGlyph.call(
      this,
      x,
      y,
      1,
      alphaTab.rendering.glyphs.AccentuationGlyph.GetSymbol(accentuation)
    );
  };
  alphaTab.rendering.glyphs.AccentuationGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'AccentuationGlyph'
  ];
  alphaTab.rendering.glyphs.AccentuationGlyph.GetSymbol = function(
    accentuation
  ) {
    switch (accentuation) {
      case 0:
        return -1;
      case 1:
        return 58528;
      case 2:
        return 58540;
      default:
        return -1;
    }
  };
  alphaTab.rendering.glyphs.AccentuationGlyph.__super__ =
    alphaTab.rendering.glyphs.MusicFontGlyph;
  alphaTab.rendering.glyphs.AccentuationGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.MusicFontGlyph.prototype,
    {
      DoLayout: function() {
        this.Width = 9 * this.get_Scale();
      },
      __class__: alphaTab.rendering.glyphs.AccentuationGlyph
    }
  );
  alphaTab.rendering.glyphs.AccidentalGlyph = function(
    x,
    y,
    accidentalType,
    isGrace
  ) {
    if (isGrace == null) {
      isGrace = false;
    }
    alphaTab.rendering.glyphs.MusicFontGlyph.call(
      this,
      x,
      y,
      isGrace ? 0.75 : 1,
      alphaTab.rendering.glyphs.AccidentalGlyph.GetMusicSymbol(accidentalType)
    );
    this._isGrace = false;
    this._isGrace = isGrace;
  };
  alphaTab.rendering.glyphs.AccidentalGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'AccidentalGlyph'
  ];
  alphaTab.rendering.glyphs.AccidentalGlyph.GetMusicSymbol = function(
    accidentalType
  ) {
    switch (accidentalType) {
      case 1:
        return 57953;
      case 2:
        return 57954;
      case 3:
        return 57952;
      case 4:
        return 57970;
      case 5:
        return 57972;
      case 6:
        return 57968;
      default:
    }
    return -1;
  };
  alphaTab.rendering.glyphs.AccidentalGlyph.__super__ =
    alphaTab.rendering.glyphs.MusicFontGlyph;
  alphaTab.rendering.glyphs.AccidentalGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.MusicFontGlyph.prototype,
    {
      DoLayout: function() {
        this.Width = 8 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
      },
      __class__: alphaTab.rendering.glyphs.AccidentalGlyph
    }
  );
  alphaTab.rendering.glyphs.GlyphGroup = function(x, y) {
    alphaTab.rendering.glyphs.Glyph.call(this, x, y);
    this.Glyphs = null;
  };
  alphaTab.rendering.glyphs.GlyphGroup.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'GlyphGroup'
  ];
  alphaTab.rendering.glyphs.GlyphGroup.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.GlyphGroup.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      get_IsEmpty: function() {
        if (this.Glyphs != null) {
          return this.Glyphs.length == 0;
        } else {
          return true;
        }
      },
      DoLayout: function() {
        if (this.Glyphs == null || this.Glyphs.length == 0) {
          this.Width = 0;
          return;
        }
        var w = 0;
        var i = 0;
        var j = this.Glyphs.length;
        while (i < j) {
          var g = this.Glyphs[i];
          g.Renderer = this.Renderer;
          g.DoLayout();
          w = Math.max(w, g.Width);
          ++i;
        }
        this.Width = w;
      },
      AddGlyph: function(g) {
        if (this.Glyphs == null) {
          var this1 = [];
          this.Glyphs = this1;
        }
        this.Glyphs.push(g);
      },
      Paint: function(cx, cy, canvas) {
        var glyphs = this.Glyphs;
        if (glyphs == null || glyphs.length == 0) {
          return;
        }
        var g = $iterator(glyphs)();
        while (g.hasNext()) {
          var g1 = g.next();
          g1.Paint(cx + this.X, cy + this.Y, canvas);
        }
      },
      __class__: alphaTab.rendering.glyphs.GlyphGroup
    }
  );
  alphaTab.rendering.glyphs.AccidentalGroupGlyph = function() {
    alphaTab.rendering.glyphs.GlyphGroup.call(this, 0, 0);
  };
  alphaTab.rendering.glyphs.AccidentalGroupGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'AccidentalGroupGlyph'
  ];
  alphaTab.rendering.glyphs.AccidentalGroupGlyph.__super__ =
    alphaTab.rendering.glyphs.GlyphGroup;
  alphaTab.rendering.glyphs.AccidentalGroupGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.GlyphGroup.prototype,
    {
      DoLayout: function() {
        if (this.Glyphs == null) {
          this.Width = 0;
          return;
        }
        var comparison = function(a, b) {
          if (a.Y < b.Y) {
            return -1;
          }
          if (a.Y > b.Y) {
            return 1;
          }
          return 0;
        };
        this.Glyphs.sort(function(a1, b1) {
          return comparison(a1, b1);
        });
        var this1 = [];
        var columns = this1;
        var this2 = -3000;
        columns.push(this2);
        var accidentalSize = 21 * this.get_Scale();
        var i = 0;
        var j = this.Glyphs.length;
        while (i < j) {
          var g = this.Glyphs[i];
          g.Renderer = this.Renderer;
          g.DoLayout();
          var gColumn = 0;
          while (columns[gColumn] > g.Y) {
            ++gColumn;
            if (gColumn == columns.length) {
              var this3 = -3000;
              columns.push(this3);
            }
          }
          var this4 = gColumn;
          g.X = this4;
          columns[gColumn] = g.Y + accidentalSize;
          ++i;
        }
        var columnWidth = 8 * this.get_Scale();
        var padding = 2 * this.get_Scale();
        if (this.Glyphs.length == 0) {
          this.Width = 0;
        } else {
          this.Width = padding + columnWidth * columns.length;
        }
        var i1 = 0;
        var j1 = this.Glyphs.length;
        while (i1 < j1) {
          var g1 = this.Glyphs[i1];
          g1.X = padding + (this.Width - (g1.X + 1) * columnWidth);
          ++i1;
        }
      },
      __class__: alphaTab.rendering.glyphs.AccidentalGroupGlyph
    }
  );
  alphaTab.rendering.glyphs.AlternateEndingsGlyph = function(
    x,
    y,
    alternateEndings
  ) {
    alphaTab.rendering.glyphs.EffectGlyph.call(this, x, y);
    this._endings = null;
    this._endingsString = null;
    var this1 = [];
    this._endings = this1;
    var i = 0;
    while (i < 8) {
      if ((alternateEndings & (1 << i)) != 0) {
        this._endings.push(i);
      }
      ++i;
    }
  };
  alphaTab.rendering.glyphs.AlternateEndingsGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'AlternateEndingsGlyph'
  ];
  alphaTab.rendering.glyphs.AlternateEndingsGlyph.__super__ =
    alphaTab.rendering.glyphs.EffectGlyph;
  alphaTab.rendering.glyphs.AlternateEndingsGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.EffectGlyph.prototype,
    {
      DoLayout: function() {
        alphaTab.rendering.glyphs.EffectGlyph.prototype.DoLayout.call(this);
        this.Height =
          this.Renderer.get_Resources().WordsFont.Size +
          (3 * this.get_Scale() + 2);
        var this1 = '';
        var endingsStrings = this1;
        var i = 0;
        var j = this._endings.length;
        while (i < j) {
          endingsStrings += Std.string(this._endings[i] + 1);
          endingsStrings += Std.string('. ');
          ++i;
        }
        this._endingsString = endingsStrings;
      },
      Paint: function(cx, cy, canvas) {
        alphaTab.rendering.glyphs.EffectGlyph.prototype.Paint.call(
          this,
          cx,
          cy,
          canvas
        );
        var baseline = canvas.get_TextBaseline();
        canvas.set_TextBaseline(0);
        if (this._endings.length > 0) {
          var res = this.Renderer.get_Resources();
          canvas.set_Font(res.WordsFont);
          canvas.MoveTo(cx + this.X, cy + this.Y + this.Height);
          canvas.LineTo(cx + this.X, cy + this.Y);
          canvas.LineTo(cx + this.X + this.Width, cy + this.Y);
          canvas.Stroke();
          canvas.FillText(
            this._endingsString,
            cx + this.X + 3 * this.get_Scale(),
            cy + this.Y * this.get_Scale()
          );
        }
        canvas.set_TextBaseline(baseline);
      },
      __class__: alphaTab.rendering.glyphs.AlternateEndingsGlyph
    }
  );
  alphaTab.rendering.glyphs.BarNumberGlyph = function(x, y, number) {
    alphaTab.rendering.glyphs.Glyph.call(this, x, y);
    this._number = 0;
    this._number = number;
  };
  alphaTab.rendering.glyphs.BarNumberGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'BarNumberGlyph'
  ];
  alphaTab.rendering.glyphs.BarNumberGlyph.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.BarNumberGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      DoLayout: function() {
        this.Renderer.ScoreRenderer.Canvas.set_Font(
          this.Renderer.get_Resources().BarNumberFont
        );
        this.Width =
          this.Renderer.ScoreRenderer.Canvas.MeasureText(
            Std.string(this._number)
          ) +
          5 * this.get_Scale();
      },
      Paint: function(cx, cy, canvas) {
        if (!this.Renderer.Staff.IsFirstInAccolade) {
          return;
        }
        var res = this.Renderer.get_Resources();
        var c = canvas.get_Color();
        canvas.set_Color(res.BarNumberColor);
        canvas.set_Font(res.BarNumberFont);
        canvas.FillText(Std.string(this._number), cx + this.X, cy + this.Y);
        canvas.set_Color(c);
      },
      __class__: alphaTab.rendering.glyphs.BarNumberGlyph
    }
  );
  alphaTab.rendering.glyphs.BarSeperatorGlyph = function(x, y) {
    alphaTab.rendering.glyphs.Glyph.call(this, x, y);
  };
  alphaTab.rendering.glyphs.BarSeperatorGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'BarSeperatorGlyph'
  ];
  alphaTab.rendering.glyphs.BarSeperatorGlyph.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.BarSeperatorGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      DoLayout: function() {
        if (this.Renderer.get_IsLast()) {
          this.Width = 15 * this.get_Scale();
        } else if (
          this.Renderer.get_NextRenderer() == null ||
          this.Renderer.get_NextRenderer().Staff != this.Renderer.Staff ||
          !this.Renderer.get_NextRenderer().Bar.get_MasterBar().IsRepeatStart
        ) {
          this.Width = 2 * this.get_Scale();
          if (this.Renderer.Bar.get_MasterBar().IsDoubleBar) {
            this.Width = this.Width + 2 * this.get_Scale();
          }
        } else {
          this.Width = 2 * this.get_Scale();
        }
      },
      Paint: function(cx, cy, canvas) {
        var blockWidth = 4 * this.get_Scale();
        var top = cy + this.Y + this.Renderer.TopPadding;
        var bottom =
          cy + this.Y + this.Renderer.Height - this.Renderer.BottomPadding;
        var left = system.Convert.ToInt32_Single(cx + this.X);
        var h = bottom - top;
        if (this.Renderer.get_IsLast()) {
          canvas.FillRect(
            left + this.Width - blockWidth - blockWidth,
            top,
            this.get_Scale(),
            h
          );
          canvas.FillRect(left + this.Width - blockWidth, top, blockWidth, h);
        } else if (
          this.Renderer.get_NextRenderer() == null ||
          this.Renderer.get_NextRenderer().Staff != this.Renderer.Staff ||
          !this.Renderer.get_NextRenderer().Bar.get_MasterBar().IsRepeatStart
        ) {
          canvas.FillRect(
            left + this.Width - this.get_Scale(),
            top,
            this.get_Scale(),
            h
          );
          if (this.Renderer.Bar.get_MasterBar().IsDoubleBar) {
            canvas.FillRect(
              left + this.Width - 5 * this.get_Scale(),
              top,
              this.get_Scale(),
              h
            );
          }
        }
      },
      __class__: alphaTab.rendering.glyphs.BarSeperatorGlyph
    }
  );
  alphaTab.rendering.glyphs.BeamGlyph = function(
    x,
    y,
    duration,
    direction,
    isGrace
  ) {
    alphaTab.rendering.glyphs.MusicFontGlyph.call(
      this,
      x,
      y,
      isGrace ? 0.75 : 1,
      alphaTab.rendering.glyphs.BeamGlyph.GetSymbol(
        duration,
        direction,
        isGrace
      )
    );
  };
  alphaTab.rendering.glyphs.BeamGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'BeamGlyph'
  ];
  alphaTab.rendering.glyphs.BeamGlyph.GetSymbol = function(
    duration,
    direction,
    isGrace
  ) {
    if (isGrace) {
      duration = 8;
    }
    if (direction == 0) {
      switch (duration) {
        case 8:
          return 57920;
        case 16:
          return 57922;
        case 32:
          return 57924;
        case 64:
          return 57926;
        case 128:
          return 57928;
        case 256:
          return 57930;
        default:
          return 57920;
      }
    } else {
      switch (duration) {
        case 8:
          return 57921;
        case 16:
          return 57923;
        case 32:
          return 57925;
        case 64:
          return 57927;
        case 128:
          return 57929;
        case 256:
          return 57929;
        default:
          return 57921;
      }
    }
  };
  alphaTab.rendering.glyphs.BeamGlyph.__super__ =
    alphaTab.rendering.glyphs.MusicFontGlyph;
  alphaTab.rendering.glyphs.BeamGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.MusicFontGlyph.prototype,
    {
      DoLayout: function() {
        this.Width = 0;
      },
      __class__: alphaTab.rendering.glyphs.BeamGlyph
    }
  );
  alphaTab.rendering.glyphs.BeatGlyphBase = function() {
    alphaTab.rendering.glyphs.GlyphGroup.call(this, 0, 0);
    this.Container = null;
  };
  alphaTab.rendering.glyphs.BeatGlyphBase.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'BeatGlyphBase'
  ];
  alphaTab.rendering.glyphs.BeatGlyphBase.__super__ =
    alphaTab.rendering.glyphs.GlyphGroup;
  alphaTab.rendering.glyphs.BeatGlyphBase.prototype = $extend(
    alphaTab.rendering.glyphs.GlyphGroup.prototype,
    {
      DoLayout: function() {
        var w = 0;
        if (this.Glyphs != null) {
          var i = 0;
          var j = this.Glyphs.length;
          while (i < j) {
            var g = this.Glyphs[i];
            g.X = w;
            g.Renderer = this.Renderer;
            g.DoLayout();
            w = w + g.Width;
            ++i;
          }
        }
        this.Width = w;
      },
      NoteLoop: function(action) {
        var i = this.Container.Beat.Notes.length - 1;
        while (i >= 0) {
          action(this.Container.Beat.Notes[i]);
          --i;
        }
      },
      __class__: alphaTab.rendering.glyphs.BeatGlyphBase
    }
  );
  alphaTab.rendering.glyphs.BeatOnNoteGlyphBase = function() {
    alphaTab.rendering.glyphs.BeatGlyphBase.call(this);
    this.BeamingHelper = null;
    this.CenterX = 0.0;
    this.CenterX = 0;
  };
  alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'BeatOnNoteGlyphBase'
  ];
  alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.__super__ =
    alphaTab.rendering.glyphs.BeatGlyphBase;
  alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.prototype = $extend(
    alphaTab.rendering.glyphs.BeatGlyphBase.prototype,
    {
      UpdateBeamingHelper: function() {},
      __class__: alphaTab.rendering.glyphs.BeatOnNoteGlyphBase
    }
  );
  alphaTab.rendering.glyphs.GroupedEffectGlyph = function(endPosition) {
    alphaTab.rendering.glyphs.EffectGlyph.call(this, 0, 0);
    this.EndPosition = 0;
    this.ForceGroupedRendering = false;
    this.EndOnBarLine = false;
    this.EndPosition = endPosition;
  };
  alphaTab.rendering.glyphs.GroupedEffectGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'GroupedEffectGlyph'
  ];
  alphaTab.rendering.glyphs.GroupedEffectGlyph.__super__ =
    alphaTab.rendering.glyphs.EffectGlyph;
  alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.EffectGlyph.prototype,
    {
      get_IsLinkedWithPrevious: function() {
        if (this.PreviousGlyph != null) {
          return (
            this.PreviousGlyph.Renderer.Staff.StaveGroup ==
            this.Renderer.Staff.StaveGroup
          );
        } else {
          return false;
        }
      },
      get_IsLinkedWithNext: function() {
        if (this.NextGlyph != null && this.NextGlyph.Renderer.IsFinalized) {
          return (
            this.NextGlyph.Renderer.Staff.StaveGroup ==
            this.Renderer.Staff.StaveGroup
          );
        } else {
          return false;
        }
      },
      Paint: function(cx, cy, canvas) {
        if (this.get_IsLinkedWithPrevious()) {
          return;
        }
        if (!this.get_IsLinkedWithNext() && !this.ForceGroupedRendering) {
          this.PaintNonGrouped(cx, cy, canvas);
          return;
        }
        var lastLinkedGlyph;
        if (!this.get_IsLinkedWithNext() && this.ForceGroupedRendering) {
          lastLinkedGlyph = this;
        } else {
          lastLinkedGlyph = js.Boot.__cast(
            this.NextGlyph,
            alphaTab.rendering.glyphs.GroupedEffectGlyph
          );
          while (lastLinkedGlyph.get_IsLinkedWithNext())
            lastLinkedGlyph = js.Boot.__cast(
              lastLinkedGlyph.NextGlyph,
              alphaTab.rendering.glyphs.GroupedEffectGlyph
            );
        }
        var endBeatRenderer = lastLinkedGlyph.Renderer;
        var endBeat = lastLinkedGlyph.Beat;
        var position = this.EndPosition;
        var cxRenderer = cx - this.Renderer.X;
        var endX = this.CalculateEndX(
          endBeatRenderer,
          endBeat,
          cxRenderer,
          position
        );
        this.PaintGrouped(cx, cy, endX, canvas);
      },
      CalculateEndX: function(endBeatRenderer, endBeat, cx, endPosition) {
        if (endBeat == null) {
          return cx + endBeatRenderer.X + this.X + this.Width;
        } else {
          return (
            cx +
            endBeatRenderer.X +
            endBeatRenderer.GetBeatX(endBeat, endPosition)
          );
        }
      },
      PaintNonGrouped: function(cx, cy, canvas) {
        var cxRenderer = cx - this.Renderer.X;
        var endX = this.CalculateEndX(
          this.Renderer,
          this.Beat,
          cxRenderer,
          this.EndPosition
        );
        this.PaintGrouped(cx, cy, endX, canvas);
      },
      PaintGrouped: function(cx, cy, endX, canvas) {
        throw new js._Boot.HaxeError('abstract');
      },
      __class__: alphaTab.rendering.glyphs.GroupedEffectGlyph
    }
  );
  alphaTab.rendering.glyphs.BeatVibratoGlyph = function(type) {
    alphaTab.rendering.glyphs.GroupedEffectGlyph.call(this, 4);
    this._type = 0;
    this._stepSize = 0.0;
    this._type = type;
  };
  alphaTab.rendering.glyphs.BeatVibratoGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'BeatVibratoGlyph'
  ];
  alphaTab.rendering.glyphs.BeatVibratoGlyph.__super__ =
    alphaTab.rendering.glyphs.GroupedEffectGlyph;
  alphaTab.rendering.glyphs.BeatVibratoGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype,
    {
      DoLayout: function() {
        alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype.DoLayout.call(
          this
        );
        var _g = this._type;
        switch (_g) {
          case 1:
            this._stepSize = 12 * this.get_Scale();
            break;
          case 2:
            this._stepSize = 23 * this.get_Scale();
            break;
          default:
        }
        this.Height = 18 * this.get_Scale();
      },
      PaintGrouped: function(cx, cy, endX, canvas) {
        var startX = cx + this.X;
        var width = endX - startX;
        var loops = system.Convert.ToInt32_Single(
          Math.max(1, width / this._stepSize)
        );
        canvas.BeginPath();
        canvas.MoveTo(startX, cy + this.Y);
        var i = 0;
        while (i < loops) {
          canvas.LineTo(startX + this._stepSize / 2, cy + this.Y + this.Height);
          canvas.LineTo(startX + this._stepSize, cy + this.Y);
          startX = startX + this._stepSize;
          ++i;
        }
        canvas.Stroke();
      },
      __class__: alphaTab.rendering.glyphs.BeatVibratoGlyph
    }
  );
  alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase = function() {
    alphaTab.rendering.glyphs.Glyph.call(this, 0, 0);
    this._infos = null;
    this._noteHeadPadding = 0.0;
    this.MinNote = null;
    this.MaxNote = null;
    this.SpacingChanged = null;
    this.UpLineX = 0.0;
    this.DownLineX = 0.0;
    this.DisplacedX = 0.0;
    this.NoteStartX = 0.0;
    var this1 = [];
    this._infos = this1;
  };
  alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'ScoreNoteChordGlyphBase'
  ];
  alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      get_Direction: function() {
        throw new js._Boot.HaxeError('abstract');
      },
      Add: function(noteGlyph, noteLine) {
        var info = new alphaTab.rendering.glyphs.ScoreNoteGlyphInfo(
          noteGlyph,
          noteLine
        );
        this._infos.push(info);
        if (this.MinNote == null || this.MinNote.Line > info.Line) {
          this.MinNote = info;
        }
        if (this.MaxNote == null || this.MaxNote.Line < info.Line) {
          this.MaxNote = info;
        }
      },
      get_HasTopOverflow: function() {
        if (this.MinNote != null) {
          return this.MinNote.Line <= 0;
        } else {
          return false;
        }
      },
      get_HasBottomOverflow: function() {
        if (this.MaxNote != null) {
          return this.MaxNote.Line > 8;
        } else {
          return false;
        }
      },
      DoLayout: function() {
        var comparison = function(a, b) {
          return system._Int32.Int32_Impl_.CompareTo_Int32(b.Line, a.Line);
        };
        this._infos.sort(function(a1, b1) {
          return comparison(a1, b1);
        });
        var displacedX = 0;
        var lastDisplaced = false;
        var lastLine = 0;
        var anyDisplaced = false;
        var direction = this.get_Direction();
        var w = 0;
        var i = 0;
        var j = this._infos.length;
        while (i < j) {
          var g = this._infos[i].Glyph;
          g.Renderer = this.Renderer;
          g.DoLayout();
          var displace = false;
          if (i == 0) {
            displacedX = g.Width;
          } else if (Math.abs(lastLine - this._infos[i].Line) <= 1) {
            if (!lastDisplaced) {
              displace = true;
              g.X = displacedX - this.get_Scale();
              anyDisplaced = true;
              lastDisplaced = true;
            } else {
              lastDisplaced = false;
            }
          } else {
            lastDisplaced = false;
          }
          if (direction == 1) {
            g.X = displace ? 0 : displacedX;
          } else {
            g.X = displace ? displacedX : 0;
          }
          g.X = g.X + this.NoteStartX;
          lastLine = this._infos[i].Line;
          w = Math.max(w, g.X + g.Width);
          ++i;
        }
        if (anyDisplaced) {
          this._noteHeadPadding = 0;
          this.UpLineX = displacedX;
          this.DownLineX = displacedX;
        } else {
          this._noteHeadPadding = direction == 1 ? -displacedX : 0;
          w = w + this._noteHeadPadding;
          this.UpLineX = w;
          this.DownLineX = 0;
        }
        this.DisplacedX = displacedX;
        this.Width = w;
      },
      Paint: function(cx, cy, canvas) {
        cx = cx + this.X;
        cy = cy + this.Y;
        var scoreRenderer = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.ScoreBarRenderer
        );
        var linePadding = 3 * this.get_Scale();
        var lineWidth = this.Width - this.NoteStartX + linePadding * 2;
        if (this.get_HasTopOverflow()) {
          var color = canvas.get_Color();
          canvas.set_Color(scoreRenderer.get_Resources().StaffLineColor);
          var l = 0;
          while (l >= this.MinNote.Line) {
            var this1 = l;
            var lY = cy + scoreRenderer.GetScoreY(this1, 0);
            canvas.FillRect(
              cx - linePadding + this.NoteStartX,
              lY,
              lineWidth,
              this.get_Scale()
            );
            l = l - 2;
          }
          canvas.set_Color(color);
        }
        if (this.get_HasBottomOverflow()) {
          var color1 = canvas.get_Color();
          canvas.set_Color(scoreRenderer.get_Resources().StaffLineColor);
          var l1 = 12;
          while (l1 <= this.MaxNote.Line) {
            var this2 = l1;
            var lY1 = cy + scoreRenderer.GetScoreY(this2, 0);
            canvas.FillRect(
              cx - linePadding + this.NoteStartX,
              lY1,
              lineWidth,
              this.get_Scale()
            );
            l1 = l1 + 2;
          }
          canvas.set_Color(color1);
        }
        var infos = this._infos;
        var x = cx + this._noteHeadPadding;
        var g = $iterator(infos)();
        while (g.hasNext()) {
          var g1 = g.next();
          g1.Glyph.Renderer = this.Renderer;
          g1.Glyph.Paint(x, cy, canvas);
        }
      },
      __class__: alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase
    }
  );
  alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph = function(
    beat,
    showParenthesis
  ) {
    if (showParenthesis == null) {
      showParenthesis = false;
    }
    alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.call(this);
    this._beat = null;
    this._showParenthesis = false;
    this._noteValueLookup = null;
    this._accidentals = null;
    this._preNoteParenthesis = null;
    this._postNoteParenthesis = null;
    this.IsEmpty = false;
    this.NoteHeadOffset = 0.0;
    this._beat = beat;
    this._showParenthesis = showParenthesis;
    this.IsEmpty = true;
    this._accidentals = new alphaTab.rendering.glyphs.AccidentalGroupGlyph();
    var this1 = {};
    this._noteValueLookup = this1;
    if (showParenthesis) {
      this._preNoteParenthesis = new alphaTab.rendering.glyphs.GhostNoteContainerGlyph(
        true
      );
      this._postNoteParenthesis = new alphaTab.rendering.glyphs.GhostNoteContainerGlyph(
        false
      );
    }
  };
  alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'BendNoteHeadGroupGlyph'
  ];
  alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph.__super__ =
    alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase;
  alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.prototype,
    {
      get_Direction: function() {
        return 0;
      },
      GetNoteValueY: function(noteValue, aboveNote) {
        if (aboveNote == null) {
          aboveNote = false;
        }
        if (this._noteValueLookup.hasOwnProperty(noteValue)) {
          return (
            this.Y +
            this._noteValueLookup[noteValue].Y +
            (aboveNote ? -(9 * 0.75 * this.get_Scale()) / 2 : 0)
          );
        }
        return 0;
      },
      ContainsNoteValue: function(noteValue) {
        return this._noteValueLookup.hasOwnProperty(noteValue);
      },
      GetNoteX: function(noteValue, onMiddle) {
        if (onMiddle == null) {
          onMiddle = true;
        }
        if (this._noteValueLookup.hasOwnProperty(noteValue)) {
          var n = this._noteValueLookup[noteValue];
          var pos = this.X + n.X;
          if (onMiddle) {
            var this1 = 2.0;
            pos = pos + n.Width / this1;
          }
          return pos;
        }
        return 0;
      },
      AddGlyph: function(noteValue, quarterBend) {
        if (quarterBend == null) {
          quarterBend = false;
        }
        var sr = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.ScoreBarRenderer
        );
        var noteHeadGlyph = new alphaTab.rendering.glyphs.NoteHeadGlyph(
          0,
          0,
          4,
          true
        );
        var accidental = sr.AccidentalHelper.ApplyAccidentalForValue(
          this._beat,
          noteValue,
          quarterBend
        );
        var line = sr.AccidentalHelper.GetNoteLineForValue(noteValue, false);
        var this1 = line;
        noteHeadGlyph.Y = sr.GetScoreY(this1, 0);
        if (this._showParenthesis) {
          this._preNoteParenthesis.Renderer = this.Renderer;
          this._postNoteParenthesis.Renderer = this.Renderer;
          this._preNoteParenthesis.AddParenthesisOnLine(line, true);
          this._postNoteParenthesis.AddParenthesisOnLine(line, true);
        }
        if (accidental != 0) {
          this._accidentals.AddGlyph(
            new alphaTab.rendering.glyphs.AccidentalGlyph(
              0,
              noteHeadGlyph.Y,
              accidental,
              true
            )
          );
        }
        this._noteValueLookup[noteValue] = noteHeadGlyph;
        this.Add(noteHeadGlyph, line);
        this.IsEmpty = false;
      },
      DoLayout: function() {
        var x = 0;
        if (this._showParenthesis) {
          this._preNoteParenthesis.X = x;
          this._preNoteParenthesis.Renderer = this.Renderer;
          this._preNoteParenthesis.DoLayout();
          x = x + (this._preNoteParenthesis.Width + 2 * this.get_Scale());
        }
        if (!this._accidentals.get_IsEmpty()) {
          this._accidentals.X = x;
          this._accidentals.Renderer = this.Renderer;
          this._accidentals.DoLayout();
          x = x + (this._accidentals.Width + 2 * this.get_Scale());
        }
        this.NoteStartX = x;
        alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.prototype.DoLayout.call(
          this
        );
        this.NoteHeadOffset =
          this.NoteStartX + (this.Width - this.NoteStartX) / 2;
        if (this._showParenthesis) {
          var tmp = this.Width;
          var tmp1 = this.get_Scale();
          this._postNoteParenthesis.X = tmp + 2 * tmp1;
          this._postNoteParenthesis.Renderer = this.Renderer;
          this._postNoteParenthesis.DoLayout();
          this.Width =
            this.Width +
            (this._postNoteParenthesis.Width + 2 * this.get_Scale());
        }
      },
      Paint: function(cx, cy, canvas) {
        var x = 0;
        if (!this._accidentals.get_IsEmpty()) {
          x = this._accidentals.X;
        } else if (this._showParenthesis) {
          x = this._preNoteParenthesis.X;
        }
        if (!this._accidentals.get_IsEmpty()) {
          this._accidentals.Paint(cx + this.X, cy + this.Y, canvas);
        }
        if (this._showParenthesis) {
          this._preNoteParenthesis.Paint(cx + this.X, cy + this.Y, canvas);
          this._postNoteParenthesis.Paint(cx + this.X, cy + this.Y, canvas);
        }
        alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.prototype.Paint.call(
          this,
          cx,
          cy,
          canvas
        );
      },
      __class__: alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph
    }
  );
  alphaTab.rendering.glyphs.ChineseCymbalGlyph = function(x, y, isGrace) {
    alphaTab.rendering.glyphs.MusicFontGlyph.call(
      this,
      x,
      y,
      isGrace ? 0.75 : 1,
      57564
    );
    this._isGrace = false;
    this._isGrace = isGrace;
  };
  alphaTab.rendering.glyphs.ChineseCymbalGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'ChineseCymbalGlyph'
  ];
  alphaTab.rendering.glyphs.ChineseCymbalGlyph.__super__ =
    alphaTab.rendering.glyphs.MusicFontGlyph;
  alphaTab.rendering.glyphs.ChineseCymbalGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.MusicFontGlyph.prototype,
    {
      DoLayout: function() {
        this.Width = 9 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
      },
      __class__: alphaTab.rendering.glyphs.ChineseCymbalGlyph
    }
  );
  alphaTab.rendering.glyphs.ChordDiagramContainerGlyph = function(x, y) {
    alphaTab.rendering.glyphs.GlyphGroup.call(this, x, y);
    this._rows = null;
    this.Height = 0.0;
    var this1 = [];
    this.Glyphs = this1;
  };
  alphaTab.rendering.glyphs.ChordDiagramContainerGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'ChordDiagramContainerGlyph'
  ];
  alphaTab.rendering.glyphs.ChordDiagramContainerGlyph.__super__ =
    alphaTab.rendering.glyphs.GlyphGroup;
  alphaTab.rendering.glyphs.ChordDiagramContainerGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.GlyphGroup.prototype,
    {
      AddChord: function(chord) {
        if (chord.Strings.length > 0) {
          var chordDiagram = new alphaTab.rendering.glyphs.ChordDiagramGlyph(
            0,
            0,
            chord
          );
          chordDiagram.Renderer = this.Renderer;
          chordDiagram.DoLayout();
          this.Glyphs.push(chordDiagram);
        }
      },
      DoLayout: function() {
        var x = 0;
        var y = 0;
        var padding = 2 * 3 * this.get_Scale();
        var this1 = [];
        this._rows = this1;
        var row = new alphaTab.rendering.glyphs.ChordDiagramRowGlyph(x, y);
        row.Width = this.Width;
        var g = $iterator(this.Glyphs)();
        while (g.hasNext()) {
          var g1 = g.next();
          if (x + g1.Width < this.Width) {
            row.AddChord(
              js.Boot.__cast(g1, alphaTab.rendering.glyphs.ChordDiagramGlyph)
            );
            x = x + g1.Width;
          } else {
            if (!row.get_IsEmpty()) {
              row.DoLayout();
              this._rows.push(row);
              y = y + (row.Height + padding);
            }
            x = 0;
            row = new alphaTab.rendering.glyphs.ChordDiagramRowGlyph(x, y);
            row.Width = this.Width;
            row.AddChord(
              js.Boot.__cast(g1, alphaTab.rendering.glyphs.ChordDiagramGlyph)
            );
            x = x + g1.Width;
          }
        }
        if (!row.get_IsEmpty()) {
          row.DoLayout();
          this._rows.push(row);
          y = y + (row.Height + padding);
        }
        this.Height = y + padding;
      },
      Paint: function(cx, cy, canvas) {
        var row = $iterator(this._rows)();
        while (row.hasNext()) {
          var row1 = row.next();
          row1.Paint(cx + this.X, cy + this.Y + 3 * this.get_Scale(), canvas);
        }
      },
      __class__: alphaTab.rendering.glyphs.ChordDiagramContainerGlyph
    }
  );
  alphaTab.rendering.glyphs.ChordDiagramGlyph = function(x, y, chord) {
    alphaTab.rendering.glyphs.EffectGlyph.call(this, x, y);
    this._chord = null;
    this._textRow = 0.0;
    this._fretRow = 0.0;
    this._firstFretSpacing = 0.0;
    this._chord = chord;
  };
  alphaTab.rendering.glyphs.ChordDiagramGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'ChordDiagramGlyph'
  ];
  alphaTab.rendering.glyphs.ChordDiagramGlyph.__super__ =
    alphaTab.rendering.glyphs.EffectGlyph;
  alphaTab.rendering.glyphs.ChordDiagramGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.EffectGlyph.prototype,
    {
      DoLayout: function() {
        alphaTab.rendering.glyphs.EffectGlyph.prototype.DoLayout.call(this);
        var res = this.Renderer.get_Resources();
        var this1 = 1.5;
        this._textRow = res.EffectFont.Size * this1;
        var this2 = 1.5;
        this._fretRow = res.EffectFont.Size * this2;
        if (this._chord.FirstFret > 1) {
          this._firstFretSpacing = 12 * this.get_Scale();
        } else {
          this._firstFretSpacing = 0;
        }
        this.Height =
          this._textRow +
          this._fretRow +
          (5 - 1) * 12 * this.get_Scale() +
          2 * 5;
        this.Width =
          this._firstFretSpacing +
          (this._chord.Staff.Tuning.length - 1) * 10 * this.get_Scale() +
          2 * 5;
      },
      Paint: function(cx, cy, canvas) {
        cx = cx + (this.X + 5 * this.get_Scale() + this._firstFretSpacing);
        cy = cy + this.Y;
        var w =
          this.Width -
          2 * 5 * this.get_Scale() +
          this.get_Scale() -
          this._firstFretSpacing;
        var stringSpacing = 10 * this.get_Scale();
        var fretSpacing = 12 * this.get_Scale();
        var res = this.Renderer.get_Resources();
        var circleRadius = 2.5 * this.get_Scale();
        var align = canvas.get_TextAlign();
        var baseline = canvas.get_TextBaseline();
        canvas.set_Font(res.EffectFont);
        canvas.set_TextAlign(1);
        canvas.set_TextBaseline(0);
        if (this._chord.ShowName) {
          canvas.FillText(
            this._chord.Name,
            cx + this.Width / 2,
            cy + res.EffectFont.Size / 2
          );
        }
        cy = cy + this._textRow;
        cx = cx + stringSpacing / 2;
        canvas.set_Font(res.FretboardNumberFont);
        canvas.set_TextBaseline(1);
        var i = 0;
        while (i < this._chord.Staff.Tuning.length) {
          var x = cx + i * stringSpacing;
          var y = cy + this._fretRow / 2;
          var fret = this._chord.Strings[
            this._chord.Staff.Tuning.length - i - 1
          ];
          if (fret < 0) {
            canvas.FillMusicFontSymbol(x, y, this.get_Scale(), 59481, true);
          } else if (fret == 0) {
            canvas.FillMusicFontSymbol(x, y, this.get_Scale(), 59482, true);
          } else {
            fret = fret - (this._chord.FirstFret - 1);
            canvas.FillText(Std.string(fret), x, y);
          }
          ++i;
        }
        cy = cy + this._fretRow;
        var i1 = 0;
        while (i1 < this._chord.Staff.Tuning.length) {
          var x1 = cx + i1 * stringSpacing;
          canvas.FillRect(x1, cy, 1, fretSpacing * 5 + this.get_Scale());
          ++i1;
        }
        if (this._chord.FirstFret > 1) {
          canvas.set_TextAlign(0);
          canvas.FillText(
            Std.string(this._chord.FirstFret),
            cx - this._firstFretSpacing,
            cy + fretSpacing / 2
          );
        }
        canvas.FillRect(cx, cy - this.get_Scale(), w, 2 * this.get_Scale());
        var i2 = 0;
        while (i2 <= 5) {
          var y1 = cy + i2 * fretSpacing;
          canvas.FillRect(cx, y1, w, this.get_Scale());
          ++i2;
        }
        var this1 = {};
        var barreLookup = this1;
        var barreFret = $iterator(this._chord.BarreFrets)();
        while (barreFret.hasNext()) {
          var barreFret1 = barreFret.next();
          var this2 = new Int32Array(2);
          var strings = this2;
          strings[0] = -1;
          strings[1] = -1;
          barreLookup[barreFret1 - this._chord.FirstFret] = strings;
        }
        var guitarString = 0;
        while (guitarString < this._chord.Strings.length) {
          var fret1 = this._chord.Strings[guitarString];
          if (fret1 > 0) {
            fret1 = fret1 - this._chord.FirstFret;
            if (barreLookup.hasOwnProperty(fret1)) {
              var info = barreLookup[fret1];
              if (info[0] == -1 || guitarString < info[0]) {
                info[0] = guitarString;
              }
              if (info[1] == -1 || guitarString > info[1]) {
                info[1] = guitarString;
              }
            }
            var this3 = 0.5;
            var y2 = cy + fret1 * fretSpacing + fretSpacing / 2 + this3;
            var x2 =
              cx +
              (this._chord.Strings.length - guitarString - 1) * stringSpacing;
            canvas.FillCircle(x2, y2, circleRadius);
          }
          ++guitarString;
        }
        var barreFret2 = $iterator(Object.keys(barreLookup))();
        while (barreFret2.hasNext()) {
          var barreFret3 = barreFret2.next();
          var strings1 = barreLookup[barreFret3];
          var y3 =
            cy + barreFret3 * fretSpacing + fretSpacing / 2 + this.get_Scale();
          var xLeft =
            cx + (this._chord.Strings.length - strings1[1] - 1) * stringSpacing;
          var xRight =
            cx + (this._chord.Strings.length - strings1[0] - 1) * stringSpacing;
          canvas.FillRect(
            xLeft,
            y3 - circleRadius,
            xRight - xLeft,
            circleRadius * 2
          );
        }
        canvas.set_TextAlign(align);
        canvas.set_TextBaseline(baseline);
      },
      __class__: alphaTab.rendering.glyphs.ChordDiagramGlyph
    }
  );
  alphaTab.rendering.glyphs.ChordDiagramRowGlyph = function(x, y) {
    this._glyphWidth = 0;
    alphaTab.rendering.glyphs.GlyphGroup.call(this, x, y);
    this.Height = 0.0;
    var this1 = [];
    this.Glyphs = this1;
  };
  alphaTab.rendering.glyphs.ChordDiagramRowGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'ChordDiagramRowGlyph'
  ];
  alphaTab.rendering.glyphs.ChordDiagramRowGlyph.__super__ =
    alphaTab.rendering.glyphs.GlyphGroup;
  alphaTab.rendering.glyphs.ChordDiagramRowGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.GlyphGroup.prototype,
    {
      DoLayout: function() {
        var x = (this.Width - this._glyphWidth) / 2;
        var glyph = $iterator(this.Glyphs)();
        while (glyph.hasNext()) {
          var glyph1 = glyph.next();
          glyph1.X = x;
          x = x + glyph1.Width;
        }
      },
      AddChord: function(chord) {
        this.Glyphs.push(chord);
        this._glyphWidth = this._glyphWidth + chord.Width;
        if (chord.Height > this.Height) {
          this.Height = chord.Height;
        }
      },
      __class__: alphaTab.rendering.glyphs.ChordDiagramRowGlyph
    }
  );
  alphaTab.rendering.glyphs.CircleGlyph = function(x, y, size) {
    alphaTab.rendering.glyphs.Glyph.call(this, x, y);
    this._size = 0.0;
    this._size = size;
  };
  alphaTab.rendering.glyphs.CircleGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'CircleGlyph'
  ];
  alphaTab.rendering.glyphs.CircleGlyph.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.CircleGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      DoLayout: function() {
        this.Width = this._size + 3 * this.get_Scale();
      },
      Paint: function(cx, cy, canvas) {
        canvas.FillCircle(cx + this.X, cy + this.Y, this._size);
      },
      __class__: alphaTab.rendering.glyphs.CircleGlyph
    }
  );
  alphaTab.rendering.glyphs.ClefGlyph = function(x, y, clef, clefOttava) {
    alphaTab.rendering.glyphs.MusicFontGlyph.call(
      this,
      x,
      y,
      1,
      alphaTab.rendering.glyphs.ClefGlyph.GetSymbol(clef)
    );
    this._clef = 0;
    this._clefOttava = 0;
    this._clef = clef;
    this._clefOttava = clefOttava;
  };
  alphaTab.rendering.glyphs.ClefGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'ClefGlyph'
  ];
  alphaTab.rendering.glyphs.ClefGlyph.GetSymbol = function(clef) {
    switch (clef) {
      case 0:
        return 57449;
      case 1:
        return 57436;
      case 2:
        return 57436;
      case 3:
        return 57442;
      case 4:
        return 57424;
      default:
        return -1;
    }
  };
  alphaTab.rendering.glyphs.ClefGlyph.__super__ =
    alphaTab.rendering.glyphs.MusicFontGlyph;
  alphaTab.rendering.glyphs.ClefGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.MusicFontGlyph.prototype,
    {
      DoLayout: function() {
        var _g = this._clef;
        switch (_g) {
          case 0:
            this.Width = 15 * this.get_Scale();
            break;
          case 1:
          case 2:
          case 3:
          case 4:
            this.Width = 28 * this.get_Scale();
            break;
          default:
        }
      },
      Paint: function(cx, cy, canvas) {
        alphaTab.rendering.glyphs.MusicFontGlyph.prototype.Paint.call(
          this,
          cx,
          cy,
          canvas
        );
        var numberGlyph;
        var top = false;
        var _g = this._clefOttava;
        switch (_g) {
          case 0:
            numberGlyph = new alphaTab.rendering.glyphs.MusicFontGlyph(
              -4 * this.get_Scale(),
              0,
              0.5,
              58644
            );
            top = true;
            break;
          case 1:
            numberGlyph = new alphaTab.rendering.glyphs.MusicFontGlyph(
              -2 * this.get_Scale(),
              0,
              0.5,
              58640
            );
            top = true;
            break;
          case 3:
            numberGlyph = new alphaTab.rendering.glyphs.MusicFontGlyph(
              -6 * this.get_Scale(),
              0,
              0.5,
              58640
            );
            break;
          case 4:
            numberGlyph = new alphaTab.rendering.glyphs.MusicFontGlyph(
              -8 * this.get_Scale(),
              0,
              0.5,
              58644
            );
            break;
          default:
            return;
        }
        var offsetY;
        var offsetX;
        var _g1 = this._clef;
        switch (_g1) {
          case 0:
            if (top) {
              offsetY = -12;
            } else {
              offsetY = 15;
            }
            offsetX = 0;
            break;
          case 1:
            if (top) {
              offsetY = -19;
            } else {
              offsetY = 27;
            }
            offsetX = 0;
            break;
          case 2:
            if (top) {
              offsetY = -19;
            } else {
              offsetY = 27;
            }
            offsetX = 0;
            break;
          case 3:
            if (top) {
              offsetY = -9;
            } else {
              offsetY = 27;
            }
            offsetX = -4;
            break;
          case 4:
            if (top) {
              offsetY = -37;
            } else {
              offsetY = 30;
            }
            offsetX = 0;
            break;
          default:
            return;
        }
        numberGlyph.Renderer = this.Renderer;
        numberGlyph.DoLayout();
        var x = this.Width / 2;
        numberGlyph.Paint(
          cx + this.X + x + offsetX * this.get_Scale(),
          cy + this.Y + offsetY * this.get_Scale(),
          canvas
        );
      },
      __class__: alphaTab.rendering.glyphs.ClefGlyph
    }
  );
  alphaTab.rendering.glyphs.CrescendoGlyph = function(x, y, crescendo) {
    alphaTab.rendering.glyphs.GroupedEffectGlyph.call(this, 4);
    this._crescendo = 0;
    this._crescendo = crescendo;
    this.X = x;
    this.Y = y;
  };
  alphaTab.rendering.glyphs.CrescendoGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'CrescendoGlyph'
  ];
  alphaTab.rendering.glyphs.CrescendoGlyph.__super__ =
    alphaTab.rendering.glyphs.GroupedEffectGlyph;
  alphaTab.rendering.glyphs.CrescendoGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype,
    {
      DoLayout: function() {
        alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype.DoLayout.call(
          this
        );
        this.Height = 17 * this.get_Scale();
      },
      PaintGrouped: function(cx, cy, endX, canvas) {
        var startX = cx + this.X;
        var height = this.Height * this.get_Scale();
        canvas.BeginPath();
        if (this._crescendo == 1) {
          endX = endX - ((8 / 2) | 0) * this.get_Scale();
          canvas.MoveTo(endX, cy + this.Y);
          canvas.LineTo(startX, cy + this.Y + height / 2);
          canvas.LineTo(endX, cy + this.Y + height);
        } else {
          endX = endX - ((8 / 2) | 0) * this.get_Scale();
          canvas.MoveTo(startX, cy + this.Y);
          canvas.LineTo(endX, cy + this.Y + height / 2);
          canvas.LineTo(startX, cy + this.Y + height);
        }
        canvas.Stroke();
      },
      __class__: alphaTab.rendering.glyphs.CrescendoGlyph
    }
  );
  alphaTab.rendering.glyphs.DeadNoteHeadGlyph = function(x, y, isGrace) {
    alphaTab.rendering.glyphs.MusicFontGlyph.call(
      this,
      x,
      y,
      isGrace ? 0.75 : 1,
      57514
    );
    this._isGrace = false;
    this._isGrace = isGrace;
  };
  alphaTab.rendering.glyphs.DeadNoteHeadGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'DeadNoteHeadGlyph'
  ];
  alphaTab.rendering.glyphs.DeadNoteHeadGlyph.__super__ =
    alphaTab.rendering.glyphs.MusicFontGlyph;
  alphaTab.rendering.glyphs.DeadNoteHeadGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.MusicFontGlyph.prototype,
    {
      DoLayout: function() {
        this.Width = 9 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
      },
      __class__: alphaTab.rendering.glyphs.DeadNoteHeadGlyph
    }
  );
  alphaTab.rendering.glyphs.DiamondNoteHeadGlyph = function(
    x,
    y,
    duration,
    isGrace
  ) {
    alphaTab.rendering.glyphs.MusicFontGlyph.call(
      this,
      x,
      y,
      isGrace ? 0.75 : 1,
      alphaTab.rendering.glyphs.DiamondNoteHeadGlyph.GetSymbol(duration)
    );
    this._isGrace = false;
    this._isGrace = isGrace;
  };
  alphaTab.rendering.glyphs.DiamondNoteHeadGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'DiamondNoteHeadGlyph'
  ];
  alphaTab.rendering.glyphs.DiamondNoteHeadGlyph.GetSymbol = function(
    duration
  ) {
    switch (duration) {
      case -4:
      case -2:
      case 1:
      case 2:
        return 57566;
      default:
        return 57564;
    }
  };
  alphaTab.rendering.glyphs.DiamondNoteHeadGlyph.__super__ =
    alphaTab.rendering.glyphs.MusicFontGlyph;
  alphaTab.rendering.glyphs.DiamondNoteHeadGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.MusicFontGlyph.prototype,
    {
      DoLayout: function() {
        this.Width = 9 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
      },
      __class__: alphaTab.rendering.glyphs.DiamondNoteHeadGlyph
    }
  );
  alphaTab.rendering.glyphs.DigitGlyph = function(x, y, digit, scale) {
    alphaTab.rendering.glyphs.MusicFontGlyph.call(
      this,
      x,
      y,
      scale,
      alphaTab.rendering.glyphs.DigitGlyph.GetSymbol(digit)
    );
    this._digit = 0;
    this._scale = 0.0;
    this._digit = digit;
    this._scale = scale;
  };
  alphaTab.rendering.glyphs.DigitGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'DigitGlyph'
  ];
  alphaTab.rendering.glyphs.DigitGlyph.GetSymbol = function(digit) {
    switch (digit) {
      case 0:
        return 57472;
      case 1:
        return 57473;
      case 2:
        return 57474;
      case 3:
        return 57475;
      case 4:
        return 57476;
      case 5:
        return 57477;
      case 6:
        return 57478;
      case 7:
        return 57479;
      case 8:
        return 57480;
      case 9:
        return 57481;
      default:
        return -1;
    }
  };
  alphaTab.rendering.glyphs.DigitGlyph.__super__ =
    alphaTab.rendering.glyphs.MusicFontGlyph;
  alphaTab.rendering.glyphs.DigitGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.MusicFontGlyph.prototype,
    {
      DoLayout: function() {
        this.Y = this.Y + 7 * this.get_Scale();
        this.Width =
          this.GetDigitWidth(this._digit) * this.get_Scale() * this._scale;
      },
      GetDigitWidth: function(digit) {
        switch (digit) {
          case 1:
            return 10;
          case 0:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
            return 14;
          default:
            return 0;
        }
      },
      __class__: alphaTab.rendering.glyphs.DigitGlyph
    }
  );
  alphaTab.rendering.glyphs.DrumSticksGlyph = function(x, y, isGrace) {
    alphaTab.rendering.glyphs.MusicFontGlyph.call(
      this,
      x,
      y,
      isGrace ? 0.75 : 1,
      57513
    );
    this._isGrace = false;
    this._isGrace = isGrace;
  };
  alphaTab.rendering.glyphs.DrumSticksGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'DrumSticksGlyph'
  ];
  alphaTab.rendering.glyphs.DrumSticksGlyph.__super__ =
    alphaTab.rendering.glyphs.MusicFontGlyph;
  alphaTab.rendering.glyphs.DrumSticksGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.MusicFontGlyph.prototype,
    {
      DoLayout: function() {
        this.Width = 9 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
      },
      __class__: alphaTab.rendering.glyphs.DrumSticksGlyph
    }
  );
  alphaTab.rendering.glyphs.DynamicsGlyph = function(x, y, dynamics) {
    alphaTab.rendering.glyphs.MusicFontGlyph.call(
      this,
      x,
      y,
      0.6,
      alphaTab.rendering.glyphs.DynamicsGlyph.GetSymbol(dynamics)
    );
  };
  alphaTab.rendering.glyphs.DynamicsGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'DynamicsGlyph'
  ];
  alphaTab.rendering.glyphs.DynamicsGlyph.GetSymbol = function(dynamics) {
    switch (dynamics) {
      case 0:
        return 58666;
      case 1:
        return 58667;
      case 2:
        return 58656;
      case 3:
        return 58668;
      case 4:
        return 58669;
      case 5:
        return 58658;
      case 6:
        return 58671;
      case 7:
        return 58672;
      default:
        return -1;
    }
  };
  alphaTab.rendering.glyphs.DynamicsGlyph.__super__ =
    alphaTab.rendering.glyphs.MusicFontGlyph;
  alphaTab.rendering.glyphs.DynamicsGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.MusicFontGlyph.prototype,
    {
      DoLayout: function() {
        alphaTab.rendering.glyphs.MusicFontGlyph.prototype.DoLayout.call(this);
        this.Height = 17 * this.get_Scale();
        this.Y = this.Y + this.Height / 2;
      },
      __class__: alphaTab.rendering.glyphs.DynamicsGlyph
    }
  );
  alphaTab.rendering.glyphs.FadeInGlyph = function(x, y) {
    alphaTab.rendering.glyphs.EffectGlyph.call(this, x, y);
  };
  alphaTab.rendering.glyphs.FadeInGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'FadeInGlyph'
  ];
  alphaTab.rendering.glyphs.FadeInGlyph.__super__ =
    alphaTab.rendering.glyphs.EffectGlyph;
  alphaTab.rendering.glyphs.FadeInGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.EffectGlyph.prototype,
    {
      DoLayout: function() {
        alphaTab.rendering.glyphs.EffectGlyph.prototype.DoLayout.call(this);
        this.Height = 17 * this.get_Scale();
      },
      Paint: function(cx, cy, canvas) {
        var size = 6 * this.get_Scale();
        var width = Math.max(this.Width, 14 * this.get_Scale());
        var offset = this.Height / 2;
        canvas.BeginPath();
        canvas.MoveTo(cx + this.X, cy + this.Y + offset);
        canvas.QuadraticCurveTo(
          cx + this.X + width / 2,
          cy + this.Y + offset,
          cx + this.X + width,
          cy + this.Y + offset - size
        );
        canvas.MoveTo(cx + this.X, cy + this.Y + offset);
        canvas.QuadraticCurveTo(
          cx + this.X + width / 2,
          cy + this.Y + offset,
          cx + this.X + width,
          cy + this.Y + offset + size
        );
        canvas.Stroke();
      },
      __class__: alphaTab.rendering.glyphs.FadeInGlyph
    }
  );
  alphaTab.rendering.glyphs.FermataGlyph = function(x, y, fermata) {
    alphaTab.rendering.glyphs.MusicFontGlyph.call(
      this,
      x,
      y,
      1,
      alphaTab.rendering.glyphs.FermataGlyph.GetSymbol(fermata)
    );
  };
  alphaTab.rendering.glyphs.FermataGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'FermataGlyph'
  ];
  alphaTab.rendering.glyphs.FermataGlyph.GetSymbol = function(accentuation) {
    switch (accentuation) {
      case 0:
        return 58564;
      case 1:
        return 58560;
      case 2:
        return 58566;
      default:
        return -1;
    }
  };
  alphaTab.rendering.glyphs.FermataGlyph.__super__ =
    alphaTab.rendering.glyphs.MusicFontGlyph;
  alphaTab.rendering.glyphs.FermataGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.MusicFontGlyph.prototype,
    {
      DoLayout: function() {
        this.Width = 23 * this.get_Scale();
        this.Height = 12 * this.get_Scale();
      },
      Paint: function(cx, cy, canvas) {
        alphaTab.rendering.glyphs.MusicFontGlyph.prototype.Paint.call(
          this,
          cx - this.Width / 2,
          cy + this.Height,
          canvas
        );
      },
      __class__: alphaTab.rendering.glyphs.FermataGlyph
    }
  );
  alphaTab.rendering.glyphs.GhostNoteContainerGlyph = function(isOpen) {
    alphaTab.rendering.glyphs.Glyph.call(this, 0, 0);
    this._isOpen = false;
    this._infos = null;
    this._glyphs = null;
    this.IsEmpty = false;
    this._isOpen = isOpen;
    var this1 = [];
    this._infos = this1;
    var this2 = [];
    this._glyphs = this2;
    this.IsEmpty = true;
  };
  alphaTab.rendering.glyphs.GhostNoteContainerGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'GhostNoteContainerGlyph'
  ];
  alphaTab.rendering.glyphs.GhostNoteContainerGlyph.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.GhostNoteContainerGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      AddParenthesis: function(n) {
        var sr = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.ScoreBarRenderer
        );
        var line = sr.GetNoteLine(n);
        var hasParenthesis =
          n.IsGhost ||
          (this.IsTiedBend(n) && sr.get_Settings().ShowParenthesisForTiedBends);
        this.AddParenthesisOnLine(line, hasParenthesis);
      },
      AddParenthesisOnLine: function(line, hasParenthesis) {
        var info = new alphaTab.rendering.glyphs.GhostNoteInfo(
          line,
          hasParenthesis
        );
        this._infos.push(info);
        if (hasParenthesis) {
          this.IsEmpty = false;
        }
      },
      IsTiedBend: function(note) {
        if (note.IsTieDestination) {
          if (note.TieOrigin.get_HasBend()) {
            return true;
          }
          return this.IsTiedBend(note.TieOrigin);
        }
        return false;
      },
      DoLayout: function() {
        var sr = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.ScoreBarRenderer
        );
        var comparison = function(a, b) {
          return system._Int32.Int32_Impl_.CompareTo_Int32(a.Line, b.Line);
        };
        this._infos.sort(function(a1, b1) {
          return comparison(a1, b1);
        });
        var previousGlyph = null;
        var sizePerLine = sr.GetScoreY(1, 0);
        var i = 0;
        var j = this._infos.length;
        while (i < j) {
          var g;
          if (!this._infos[i].IsGhost) {
            previousGlyph = null;
          } else if (previousGlyph == null) {
            g = new alphaTab.rendering.glyphs.GhostParenthesisGlyph(
              this._isOpen
            );
            g.Renderer = this.Renderer;
            var this1 = this._infos[i].Line;
            g.Y = sr.GetScoreY(this1, 0) - sizePerLine;
            g.Height = sizePerLine * 2;
            g.DoLayout();
            this._glyphs.push(g);
            previousGlyph = g;
          } else {
            var this2 = this._infos[i].Line;
            var y = sr.GetScoreY(this2, 0) + sizePerLine;
            previousGlyph.Height = y - previousGlyph.Y;
          }
          ++i;
        }
        this.Width = this._glyphs.length > 0 ? this._glyphs[0].Width : 0;
      },
      Paint: function(cx, cy, canvas) {
        alphaTab.rendering.glyphs.Glyph.prototype.Paint.call(
          this,
          cx,
          cy,
          canvas
        );
        var g = $iterator(this._glyphs)();
        while (g.hasNext()) {
          var g1 = g.next();
          g1.Paint(cx + this.X, cy + this.Y, canvas);
        }
      },
      __class__: alphaTab.rendering.glyphs.GhostNoteContainerGlyph
    }
  );
  alphaTab.rendering.glyphs.GhostNoteInfo = function(line, isGhost) {
    this.Line = 0;
    this.IsGhost = false;
    this.Line = line;
    this.IsGhost = isGhost;
  };
  alphaTab.rendering.glyphs.GhostNoteInfo.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'GhostNoteInfo'
  ];
  alphaTab.rendering.glyphs.GhostNoteInfo.prototype = {
    __class__: alphaTab.rendering.glyphs.GhostNoteInfo
  };
  alphaTab.rendering.glyphs.GhostParenthesisGlyph = function(isOpen) {
    alphaTab.rendering.glyphs.Glyph.call(this, 0, 0);
    this._isOpen = false;
    this.Height = 0.0;
    this._isOpen = isOpen;
  };
  alphaTab.rendering.glyphs.GhostParenthesisGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'GhostParenthesisGlyph'
  ];
  alphaTab.rendering.glyphs.GhostParenthesisGlyph.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.GhostParenthesisGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      DoLayout: function() {
        alphaTab.rendering.glyphs.Glyph.prototype.DoLayout.call(this);
        this.Width = 6 * this.get_Scale();
      },
      Paint: function(cx, cy, canvas) {
        if (this._isOpen) {
          var this1 = 6;
          alphaTab.rendering.glyphs.TieGlyph.PaintTie(
            canvas,
            this.get_Scale(),
            cx + this.X + this.Width,
            cy + this.Y + this.Height,
            cx + this.X + this.Width,
            cy + this.Y,
            false,
            this1,
            3
          );
        } else {
          var this2 = 6;
          alphaTab.rendering.glyphs.TieGlyph.PaintTie(
            canvas,
            this.get_Scale(),
            cx + this.X,
            cy + this.Y,
            cx + this.X,
            cy + this.Y + this.Height,
            false,
            this2,
            3
          );
        }
        canvas.Fill();
      },
      __class__: alphaTab.rendering.glyphs.GhostParenthesisGlyph
    }
  );
  alphaTab.rendering.glyphs.HiHatGlyph = function(x, y, isGrace) {
    alphaTab.rendering.glyphs.MusicFontGlyph.call(
      this,
      x,
      y,
      isGrace ? 0.75 : 1,
      57523
    );
    this._isGrace = false;
    this._isGrace = isGrace;
  };
  alphaTab.rendering.glyphs.HiHatGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'HiHatGlyph'
  ];
  alphaTab.rendering.glyphs.HiHatGlyph.__super__ =
    alphaTab.rendering.glyphs.MusicFontGlyph;
  alphaTab.rendering.glyphs.HiHatGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.MusicFontGlyph.prototype,
    {
      DoLayout: function() {
        this.Width = 9 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
      },
      __class__: alphaTab.rendering.glyphs.HiHatGlyph
    }
  );
  alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup = function() {
    alphaTab.rendering.glyphs.GlyphGroup.call(this, 0, 0);
    var this1 = [];
    this.Glyphs = this1;
  };
  alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'LeftToRightLayoutingGlyphGroup'
  ];
  alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup.__super__ =
    alphaTab.rendering.glyphs.GlyphGroup;
  alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup.prototype = $extend(
    alphaTab.rendering.glyphs.GlyphGroup.prototype,
    {
      AddGlyph: function(g) {
        g.X =
          this.Glyphs.length == 0
            ? 0
            : this.Glyphs[this.Glyphs.length - 1].X +
              this.Glyphs[this.Glyphs.length - 1].Width;
        g.Renderer = this.Renderer;
        g.DoLayout();
        this.Width = g.X + g.Width;
        alphaTab.rendering.glyphs.GlyphGroup.prototype.AddGlyph.call(this, g);
      },
      __class__: alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup
    }
  );
  alphaTab.rendering.glyphs.LineRangedGlyph = function(label) {
    alphaTab.rendering.glyphs.GroupedEffectGlyph.call(this, 1);
    this._label = null;
    this._label = label;
  };
  alphaTab.rendering.glyphs.LineRangedGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'LineRangedGlyph'
  ];
  alphaTab.rendering.glyphs.LineRangedGlyph.__super__ =
    alphaTab.rendering.glyphs.GroupedEffectGlyph;
  alphaTab.rendering.glyphs.LineRangedGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype,
    {
      DoLayout: function() {
        if (this.Renderer.get_Settings().ExtendLineEffectsToBeatEnd) {
          this.EndPosition = 4;
          this.ForceGroupedRendering = true;
        }
        alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype.DoLayout.call(
          this
        );
        this.Height = this.Renderer.get_Resources().EffectFont.Size;
      },
      PaintNonGrouped: function(cx, cy, canvas) {
        var res = this.Renderer.get_Resources();
        canvas.set_Font(res.EffectFont);
        var x = canvas.get_TextAlign();
        canvas.set_TextAlign(1);
        canvas.FillText(this._label, cx + this.X, cy + this.Y);
        canvas.set_TextAlign(x);
      },
      PaintGrouped: function(cx, cy, endX, canvas) {
        this.PaintNonGrouped(cx, cy, canvas);
        var lineSpacing = 3 * this.get_Scale();
        var textWidth = canvas.MeasureText(this._label);
        var this1 = 2;
        var startX = cx + this.X + textWidth / this1 + lineSpacing;
        var lineY = cy + this.Y + 4 * this.get_Scale();
        var lineSize = 8 * this.get_Scale();
        if (endX > startX) {
          var lineX = startX;
          while (lineX < endX) {
            canvas.BeginPath();
            var this2 = system.Convert.ToInt32_Single(lineY);
            canvas.MoveTo(lineX, this2);
            var tmp = Math.min(lineX + lineSize, endX);
            var this3 = system.Convert.ToInt32_Single(lineY);
            canvas.LineTo(tmp, this3);
            lineX = lineX + (lineSize + lineSpacing);
            canvas.Stroke();
          }
          canvas.BeginPath();
          var this4 = system.Convert.ToInt32_Single(
            lineY - 5 * this.get_Scale()
          );
          canvas.MoveTo(endX, this4);
          var this5 = system.Convert.ToInt32_Single(
            lineY + 5 * this.get_Scale()
          );
          canvas.LineTo(endX, this5);
          canvas.Stroke();
        }
      },
      __class__: alphaTab.rendering.glyphs.LineRangedGlyph
    }
  );
  alphaTab.rendering.glyphs.LyricsGlyph = function(
    x,
    y,
    lines,
    font,
    textAlign
  ) {
    if (textAlign == null) {
      textAlign = 1;
    }
    alphaTab.rendering.glyphs.EffectGlyph.call(this, x, y);
    this._lines = null;
    this.Font = null;
    this.TextAlign = 0;
    this._lines = lines;
    this.Font = font;
    this.TextAlign = textAlign;
  };
  alphaTab.rendering.glyphs.LyricsGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'LyricsGlyph'
  ];
  alphaTab.rendering.glyphs.LyricsGlyph.__super__ =
    alphaTab.rendering.glyphs.EffectGlyph;
  alphaTab.rendering.glyphs.LyricsGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.EffectGlyph.prototype,
    {
      DoLayout: function() {
        alphaTab.rendering.glyphs.EffectGlyph.prototype.DoLayout.call(this);
        this.Height = this.Font.Size * this._lines.length;
      },
      Paint: function(cx, cy, canvas) {
        canvas.set_Font(this.Font);
        var old = canvas.get_TextAlign();
        canvas.set_TextAlign(this.TextAlign);
        var i = 0;
        while (i < this._lines.length) {
          if (this._lines[i] != null) {
            canvas.FillText(
              this._lines[i],
              cx + this.X,
              cy + this.Y + i * this.Font.Size
            );
          }
          ++i;
        }
        canvas.set_TextAlign(old);
      },
      __class__: alphaTab.rendering.glyphs.LyricsGlyph
    }
  );
  alphaTab.rendering.glyphs._MusicFontSymbol = {};
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_ = {};
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    '_MusicFontSymbol',
    'MusicFontSymbol_Impl_'
  ];
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case -1:
        return 'None';
      case 57424:
        return 'ClefG';
      case 57436:
        return 'ClefC';
      case 57442:
        return 'ClefF';
      case 57449:
        return 'ClefNeutral';
      case 57453:
        return 'ClefTab';
      case 57454:
        return 'ClefTabSmall';
      case 57472:
        return 'Num0';
      case 57473:
        return 'Num1';
      case 57474:
        return 'Num2';
      case 57475:
        return 'Num3';
      case 57476:
        return 'Num4';
      case 57477:
        return 'Num5';
      case 57478:
        return 'Num6';
      case 57479:
        return 'Num7';
      case 57480:
        return 'Num8';
      case 57481:
        return 'Num9';
      case 57482:
        return 'TimeSignatureCommon';
      case 57483:
        return 'TimeSignatureCutCommon';
      case 57504:
        return 'NoteDoubleWhole';
      case 57505:
        return 'NoteQuadrupleWhole';
      case 57506:
        return 'NoteWhole';
      case 57507:
        return 'NoteHalf';
      case 57508:
        return 'NoteQuarter';
      case 57513:
        return 'NoteSideStick';
      case 57514:
        return 'NoteDead';
      case 57523:
        return 'NoteHiHat';
      case 57564:
        return 'NoteHarmonic';
      case 57566:
        return 'NoteHarmonicWhole';
      case 57591:
        return 'NoteHiHatHalf';
      case 57593:
        return 'NoteChineseCymbal';
      case 57813:
        return 'Tempo';
      case 57815:
        return 'NoteEighth';
      case 57888:
        return 'TremoloPickingEighth';
      case 57889:
        return 'TremoloPickingSixteenth';
      case 57890:
        return 'TremoloPickingThirtySecond';
      case 57920:
        return 'FooterUpEighth';
      case 57921:
        return 'FooterDownEighth';
      case 57922:
        return 'FooterUpSixteenth';
      case 57923:
        return 'FooterDownSixteenth';
      case 57924:
        return 'FooterUpThirtySecond';
      case 57925:
        return 'FooterDownThirtySecond';
      case 57926:
        return 'FooterUpSixtyFourth';
      case 57927:
        return 'FooterDownSixtyFourth';
      case 57928:
        return 'FooterUpOneHundredTwentyEighth';
      case 57929:
        return 'FooterDownOneHundredTwentyEighth';
      case 57930:
        return 'FooterUpTwoHundredFiftySixth';
      case 57931:
        return 'FooterDownTwoHundredFiftySixth';
      case 57952:
        return 'AccidentalFlat';
      case 57953:
        return 'AccidentalNatural';
      case 57954:
        return 'AccidentalSharp';
      case 57968:
        return 'AccidentalQuarterToneFlatArrowUp';
      case 57970:
        return 'AccidentalQuarterToneNaturalArrowUp';
      case 57972:
        return 'AccidentalQuarterToneSharpArrowUp';
      case 58528:
        return 'Accentuation';
      case 58540:
        return 'HeavyAccentuation';
      case 58560:
        return 'FermataMedium';
      case 58564:
        return 'FermataShort';
      case 58566:
        return 'FermataLong';
      case 58593:
        return 'RestQuadrupleWhole';
      case 58594:
        return 'RestDoubleWhole';
      case 58595:
        return 'RestWhole';
      case 58596:
        return 'RestHalf';
      case 58597:
        return 'RestQuarter';
      case 58598:
        return 'RestEighth';
      case 58599:
        return 'RestSixteenth';
      case 58600:
        return 'RestThirtySecond';
      case 58601:
        return 'RestSixtyFourth';
      case 58602:
        return 'RestOneHundredTwentyEighth';
      case 58603:
        return 'RestTwoHundredFiftySixth';
      case 58624:
        return 'SimileMarkSimple';
      case 58625:
        return 'SimileMarkDouble';
      case 58640:
        return 'Ottava8';
      case 58641:
        return 'Ottava8va';
      case 58644:
        return 'Ottava15';
      case 58645:
        return 'Ottava15ma';
      case 58652:
        return 'Ottava8vb';
      case 58656:
        return 'DynamicP';
      case 58658:
        return 'DynamicF';
      case 58666:
        return 'DynamicPPP';
      case 58667:
        return 'DynamicPP';
      case 58668:
        return 'DynamicMP';
      case 58669:
        return 'DynamicMF';
      case 58671:
        return 'DynamicFF';
      case 58672:
        return 'DynamicFFF';
      case 58726:
        return 'Trill';
      case 58896:
        return 'PickStrokeDown';
      case 58898:
        return 'PickStrokeUp';
      case 59481:
        return 'FretboardX';
      case 59482:
        return 'FretboardO';
      case 60068:
        return 'WaveHorizontalSlight';
      case 60126:
        return 'WaveHorizontalWide';
      case 60563:
        return 'OttavaBBaseline';
      case 60565:
        return 'OttavaMBaseline';
    }
    return '';
  };
  alphaTab.rendering.glyphs.NoteHeadGlyph = function(x, y, duration, isGrace) {
    alphaTab.rendering.glyphs.MusicFontGlyph.call(
      this,
      x,
      y,
      isGrace ? 0.75 : 1,
      alphaTab.rendering.glyphs.NoteHeadGlyph.GetSymbol(duration)
    );
    this._isGrace = false;
    this._duration = -4;
    this._isGrace = isGrace;
    this._duration = duration;
  };
  alphaTab.rendering.glyphs.NoteHeadGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'NoteHeadGlyph'
  ];
  alphaTab.rendering.glyphs.NoteHeadGlyph.GetSymbol = function(duration) {
    switch (duration) {
      case -4:
        return 57505;
      case -2:
        return 57504;
      case 1:
        return 57506;
      case 2:
        return 57507;
      default:
        return 57508;
    }
  };
  alphaTab.rendering.glyphs.NoteHeadGlyph.__super__ =
    alphaTab.rendering.glyphs.MusicFontGlyph;
  alphaTab.rendering.glyphs.NoteHeadGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.MusicFontGlyph.prototype,
    {
      Paint: function(cx, cy, canvas) {
        var offset = this._isGrace ? this.get_Scale() : 0;
        canvas.FillMusicFontSymbol(
          cx + this.X,
          cy + this.Y + offset,
          this.GlyphScale * this.get_Scale(),
          this.Symbol,
          false
        );
      },
      DoLayout: function() {
        var scale = (this._isGrace ? 0.75 : 1) * this.get_Scale();
        var _g = this._duration;
        switch (_g) {
          case -4:
            this.Width = 14 * scale;
            this.Height = 9 * scale;
            break;
          case -2:
            this.Width = 14 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
            this.Height = 9 * scale;
            break;
          case 1:
            this.Width = 14 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
            this.Height = 9 * scale;
            break;
          default:
            this.Width = 8 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
            this.Height = 9 * scale;
        }
      },
      __class__: alphaTab.rendering.glyphs.NoteHeadGlyph
    }
  );
  alphaTab.rendering.glyphs.NoteNumberGlyph = function(x, y, note) {
    alphaTab.rendering.glyphs.Glyph.call(this, x, y);
    this._note = null;
    this._noteString = null;
    this._trillNoteString = null;
    this._trillNoteStringWidth = 0.0;
    this.IsEmpty = false;
    this.Height = 0.0;
    this.NoteStringWidth = 0.0;
    this._note = note;
  };
  alphaTab.rendering.glyphs.NoteNumberGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'NoteNumberGlyph'
  ];
  alphaTab.rendering.glyphs.NoteNumberGlyph.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.NoteNumberGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      DoLayout: function() {
        var n = this._note;
        var this1 = n.Fret - n.Beat.Voice.Bar.Staff.TranspositionPitch;
        var fret = this1;
        if (n.HarmonicType == 1 && n.HarmonicValue != 0) {
          var this2 =
            n.HarmonicValue - n.Beat.Voice.Bar.Staff.TranspositionPitch;
          fret = this2;
        }
        if (!n.IsTieDestination) {
          this._noteString = n.IsDead ? 'x' : Std.string(fret);
          if (n.IsGhost) {
            this._noteString = '(' + this._noteString + ')';
          } else if (n.HarmonicType == 1) {
            var this3 = this._noteString;
            var this4 = system.Convert.ToUInt16(46);
            var i = this3.indexOf(String.fromCharCode(this4));
            if (i >= 0) {
              this._noteString = HxOverrides.substr(this._noteString, 0, i + 2);
            }
            this._noteString = '<' + this._noteString + '>';
          }
        } else if (
          (n.Beat.Index == 0 &&
            this.Renderer.get_Settings().DisplayMode == 0) ||
          (n.BendType == 2 &&
            this.Renderer.get_Settings().ShowTabNoteOnTiedBend &&
            n.get_IsTieOrigin())
        ) {
          this._noteString =
            '(' +
            (n.TieOrigin.Fret - n.Beat.Voice.Bar.Staff.TranspositionPitch) +
            ')';
        } else {
          this._noteString = '';
        }
        if (n.get_IsTrill()) {
          this._trillNoteString =
            '(' +
            (n.get_TrillFret() - n.Beat.Voice.Bar.Staff.TranspositionPitch) +
            ')';
        } else if (
          !alphaTab.platform.Platform.IsAlmostEqualTo(n.HarmonicValue, 0)
        ) {
          var _g = n.HarmonicType;
          switch (_g) {
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
              var s = Std.string(fret + n.HarmonicValue);
              var this5 = system.Convert.ToUInt16(46);
              var i1 = s.indexOf(String.fromCharCode(this5));
              if (i1 >= 0) {
                s = HxOverrides.substr(s, 0, i1 + 2);
              }
              this._trillNoteString = '<' + s + '>';
              break;
            default:
              this._trillNoteString = '';
          }
        } else {
          this._trillNoteString = '';
        }
        var s1 = this._noteString;
        this.IsEmpty = s1 == null || s1.length == 0;
        if (!this.IsEmpty) {
          this.Renderer.ScoreRenderer.Canvas.set_Font(
            this.Renderer.get_Resources().TablatureFont
          );
          this.Width = this.NoteStringWidth = this.Renderer.ScoreRenderer.Canvas.MeasureText(
            this._noteString
          );
          this.Height = this.Renderer.ScoreRenderer.Canvas.get_Font().Size;
          var s2 = this._trillNoteString;
          var hasTrill = !(s2 == null || s2.length == 0);
          if (hasTrill) {
            this.Renderer.ScoreRenderer.Canvas.set_Font(
              this.Renderer.get_Resources().GraceFont
            );
            this._trillNoteStringWidth =
              3 * this.get_Scale() +
              this.Renderer.ScoreRenderer.Canvas.MeasureText(
                this._trillNoteString
              );
            this.Width = this.Width + this._trillNoteStringWidth;
          }
        }
      },
      Paint: function(cx, cy, canvas) {
        var _gthis = this;
        if (this.IsEmpty) {
          return;
        }
        var textWidth = this.NoteStringWidth + this._trillNoteStringWidth;
        var x = cx + this.X + (this.Width - textWidth) / 2;
        var prevFont = this.Renderer.ScoreRenderer.Canvas.get_Font();
        this.Renderer.ScoreRenderer.Canvas.set_Font(
          this.Renderer.get_Resources().GraceFont
        );
        canvas.FillText(
          this._trillNoteString,
          x + this.NoteStringWidth + 3 * this.get_Scale(),
          cy + this.Y
        );
        this.Renderer.ScoreRenderer.Canvas.set_Font(prevFont);
        canvas.FillText(this._noteString, x, cy + this.Y);
        if (this.Renderer.get_Settings().IncludeNoteBounds) {
          var noteBounds = new alphaTab.rendering.utils.NoteBounds();
          noteBounds.Note = this._note;
          var _tmp = new alphaTab.rendering.utils.Bounds();
          _tmp.X = cx + _gthis.X;
          _tmp.Y = cy + _gthis.Y;
          _tmp.W = _gthis.Width;
          _tmp.H = _gthis.Height;
          noteBounds.NoteHeadBounds = _tmp;
          this.Renderer.ScoreRenderer.get_BoundsLookup().AddNote(noteBounds);
        }
      },
      __class__: alphaTab.rendering.glyphs.NoteNumberGlyph
    }
  );
  alphaTab.rendering.glyphs.NoteVibratoGlyph = function(x, y, type, scale) {
    if (scale == null) {
      scale = 1.2;
    }
    alphaTab.rendering.glyphs.GroupedEffectGlyph.call(this, 4);
    this._type = 0;
    this._scale = 0.0;
    this._symbol = -1;
    this._symbolSize = 0.0;
    this._symbolOffset = 0.0;
    this._type = type;
    this._scale = scale;
    this.X = x;
    this.Y = y;
  };
  alphaTab.rendering.glyphs.NoteVibratoGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'NoteVibratoGlyph'
  ];
  alphaTab.rendering.glyphs.NoteVibratoGlyph.__super__ =
    alphaTab.rendering.glyphs.GroupedEffectGlyph;
  alphaTab.rendering.glyphs.NoteVibratoGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype,
    {
      DoLayout: function() {
        alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype.DoLayout.call(
          this
        );
        var symbolHeight = 0;
        var _g = this._type;
        switch (_g) {
          case 1:
            this._symbol = 60068;
            this._symbolSize = 8.5 * this._scale;
            this._symbolOffset = 10 * this._scale;
            symbolHeight = 6 * this._scale;
            break;
          case 2:
            this._symbol = 60126;
            this._symbolSize = 10 * this._scale;
            this._symbolOffset = 7 * this._scale;
            symbolHeight = 10 * this._scale;
            break;
          default:
        }
        this.Height = symbolHeight * this.get_Scale();
      },
      PaintGrouped: function(cx, cy, endX, canvas) {
        var startX = cx + this.X;
        var width = endX - startX;
        var step = this._symbolSize * this.get_Scale();
        var loops = system.Convert.ToInt32_Single(Math.max(1, width / step));
        var loopX = 0;
        var i = 0;
        while (i < loops) {
          canvas.FillMusicFontSymbol(
            cx + this.X + loopX,
            cy + this.Y + this._symbolOffset,
            this._scale,
            this._symbol,
            false
          );
          loopX = loopX + step;
          ++i;
        }
      },
      __class__: alphaTab.rendering.glyphs.NoteVibratoGlyph
    }
  );
  alphaTab.rendering.glyphs.NumberGlyph = function(x, y, number, scale) {
    if (scale == null) {
      scale = 1.0;
    }
    alphaTab.rendering.glyphs.GlyphGroup.call(this, x, y);
    this._number = 0;
    this._scale = 0.0;
    this._number = number;
    this._scale = scale;
  };
  alphaTab.rendering.glyphs.NumberGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'NumberGlyph'
  ];
  alphaTab.rendering.glyphs.NumberGlyph.__super__ =
    alphaTab.rendering.glyphs.GlyphGroup;
  alphaTab.rendering.glyphs.NumberGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.GlyphGroup.prototype,
    {
      DoLayout: function() {
        var i = this._number;
        while (i > 0) {
          var num = i % 10;
          var gl = new alphaTab.rendering.glyphs.DigitGlyph(
            0,
            0,
            num,
            this._scale
          );
          this.AddGlyph(gl);
          i = (i / 10) | 0;
        }
        this.Glyphs.reverse();
        var cx = 0;
        var j = 0;
        var k = this.Glyphs.length;
        while (j < k) {
          var g = this.Glyphs[j];
          g.X = cx;
          g.Y = 0;
          g.Renderer = this.Renderer;
          g.DoLayout();
          cx = cx + g.Width;
          ++j;
        }
        this.Width = cx;
      },
      __class__: alphaTab.rendering.glyphs.NumberGlyph
    }
  );
  alphaTab.rendering.glyphs.OttavaGlyph = function(ottava, aboveStaff) {
    alphaTab.rendering.glyphs.GroupedEffectGlyph.call(this, 3);
    this._ottava = 0;
    this._aboveStaff = false;
    this._ottava = ottava;
    this._aboveStaff = aboveStaff;
  };
  alphaTab.rendering.glyphs.OttavaGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'OttavaGlyph'
  ];
  alphaTab.rendering.glyphs.OttavaGlyph.__super__ =
    alphaTab.rendering.glyphs.GroupedEffectGlyph;
  alphaTab.rendering.glyphs.OttavaGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype,
    {
      DoLayout: function() {
        alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype.DoLayout.call(
          this
        );
        this.Height = 13 * this.get_Scale();
      },
      PaintNonGrouped: function(cx, cy, canvas) {
        this.PaintOttava(cx, cy, canvas);
      },
      PaintOttava: function(cx, cy, canvas) {
        var size = 0;
        var _g = this._ottava;
        switch (_g) {
          case 0:
            size = 37 * this.get_Scale();
            canvas.FillMusicFontSymbol(
              cx + this.X - size / 2,
              cy + this.Y + this.Height,
              0.8,
              58645,
              false
            );
            break;
          case 1:
            size = 26 * this.get_Scale();
            canvas.FillMusicFontSymbol(
              cx + this.X - size / 2,
              cy + this.Y + this.Height,
              0.8,
              58641,
              false
            );
            break;
          case 3:
            size = 23 * this.get_Scale();
            canvas.FillMusicFontSymbol(
              cx + this.X - size / 2,
              cy + this.Y + this.Height,
              0.8,
              58652,
              false
            );
            break;
          case 4:
            size = 36 * this.get_Scale();
            canvas.FillMusicFontSymbols(
              cx + this.X - size / 2,
              cy + this.Y + this.Height,
              0.8,
              [58644, 60565, 60563],
              false
            );
            break;
          default:
        }
        return size / 2;
      },
      PaintGrouped: function(cx, cy, endX, canvas) {
        var size = this.PaintOttava(cx, cy, canvas);
        var lineSpacing = 3 * this.get_Scale();
        var startX = cx + this.X + size + lineSpacing;
        var lineY = cy + this.Y;
        lineY =
          lineY +
          (this._aboveStaff
            ? 2 * this.get_Scale()
            : this.Height - 2 * this.get_Scale());
        var lineSize = 8 * this.get_Scale();
        if (endX > startX) {
          var lineX = startX;
          while (lineX < endX) {
            canvas.BeginPath();
            var this1 = system.Convert.ToInt32_Single(lineY);
            canvas.MoveTo(lineX, this1);
            var tmp = Math.min(lineX + lineSize, endX);
            var this2 = system.Convert.ToInt32_Single(lineY);
            canvas.LineTo(tmp, this2);
            lineX = lineX + (lineSize + lineSpacing);
            canvas.Stroke();
          }
          canvas.BeginPath();
          if (this._aboveStaff) {
            canvas.MoveTo(endX, lineY);
            canvas.LineTo(endX, cy + this.Y + this.Height);
          } else {
            canvas.MoveTo(endX, lineY);
            canvas.LineTo(endX, cy + this.Y);
          }
          canvas.Stroke();
        }
      },
      __class__: alphaTab.rendering.glyphs.OttavaGlyph
    }
  );
  alphaTab.rendering.glyphs.PickStrokeGlyph = function(x, y, pickStroke) {
    alphaTab.rendering.glyphs.MusicFontGlyph.call(
      this,
      x,
      y,
      0.75,
      alphaTab.rendering.glyphs.PickStrokeGlyph.GetSymbol(pickStroke)
    );
  };
  alphaTab.rendering.glyphs.PickStrokeGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'PickStrokeGlyph'
  ];
  alphaTab.rendering.glyphs.PickStrokeGlyph.GetSymbol = function(pickStroke) {
    switch (pickStroke) {
      case 1:
        return 58898;
      case 2:
        return 58896;
      default:
        return -1;
    }
  };
  alphaTab.rendering.glyphs.PickStrokeGlyph.__super__ =
    alphaTab.rendering.glyphs.MusicFontGlyph;
  alphaTab.rendering.glyphs.PickStrokeGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.MusicFontGlyph.prototype,
    {
      DoLayout: function() {
        this.Width = 9 * this.get_Scale();
        this.Height = 10 * this.get_Scale();
      },
      Paint: function(cx, cy, canvas) {
        alphaTab.rendering.glyphs.MusicFontGlyph.prototype.Paint.call(
          this,
          cx,
          cy + this.Height,
          canvas
        );
      },
      __class__: alphaTab.rendering.glyphs.PickStrokeGlyph
    }
  );
  alphaTab.rendering.glyphs.RepeatCloseGlyph = function(x, y) {
    alphaTab.rendering.glyphs.Glyph.call(this, x, y);
  };
  alphaTab.rendering.glyphs.RepeatCloseGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'RepeatCloseGlyph'
  ];
  alphaTab.rendering.glyphs.RepeatCloseGlyph.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.RepeatCloseGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      DoLayout: function() {
        this.Width = 11 * this.get_Scale();
      },
      Paint: function(cx, cy, canvas) {
        var blockWidth = 4 * this.get_Scale();
        var top = cy + this.Y + this.Renderer.TopPadding;
        var bottom =
          cy + this.Y + this.Renderer.Height - this.Renderer.BottomPadding;
        var left = cx + this.X;
        var h = bottom - top;
        var this1 = 1.5;
        var circleSize = this1 * this.get_Scale();
        var middle = (top + bottom) / 2;
        var dotOffset = 3;
        canvas.FillCircle(left, middle - circleSize * dotOffset, circleSize);
        canvas.FillCircle(left, middle + circleSize * dotOffset, circleSize);
        left = left + 4 * this.get_Scale();
        canvas.BeginPath();
        canvas.MoveTo(left, top);
        canvas.LineTo(left, bottom);
        canvas.Stroke();
        var this2 = 0.5;
        left = left + (3 * this.get_Scale() + this2);
        canvas.FillRect(left, top, blockWidth, h);
      },
      __class__: alphaTab.rendering.glyphs.RepeatCloseGlyph
    }
  );
  alphaTab.rendering.glyphs.RepeatCountGlyph = function(x, y, count) {
    alphaTab.rendering.glyphs.Glyph.call(this, x, y);
    this._count = 0;
    this._count = count;
  };
  alphaTab.rendering.glyphs.RepeatCountGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'RepeatCountGlyph'
  ];
  alphaTab.rendering.glyphs.RepeatCountGlyph.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.RepeatCountGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      DoLayout: function() {
        this.Width = 0;
      },
      Paint: function(cx, cy, canvas) {
        var res = this.Renderer.get_Resources();
        var oldAlign = canvas.get_TextAlign();
        canvas.set_Font(res.BarNumberFont);
        canvas.set_TextAlign(2);
        var s = 'x' + this._count;
        var this1 = 1.5;
        var w = canvas.MeasureText(s) / this1;
        canvas.FillText(s, cx + this.X - w, cy + this.Y);
        canvas.set_TextAlign(oldAlign);
      },
      __class__: alphaTab.rendering.glyphs.RepeatCountGlyph
    }
  );
  alphaTab.rendering.glyphs.RepeatOpenGlyph = function(
    x,
    y,
    circleSize,
    dotOffset
  ) {
    alphaTab.rendering.glyphs.Glyph.call(this, x, y);
    this._dotOffset = 0.0;
    this._circleSize = 0.0;
    this._dotOffset = dotOffset;
    this._circleSize = circleSize;
  };
  alphaTab.rendering.glyphs.RepeatOpenGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'RepeatOpenGlyph'
  ];
  alphaTab.rendering.glyphs.RepeatOpenGlyph.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.RepeatOpenGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      DoLayout: function() {
        this.Width = 13 * this.get_Scale();
      },
      Paint: function(cx, cy, canvas) {
        var blockWidth = 4 * this.get_Scale();
        var top = cy + this.Y + this.Renderer.TopPadding;
        var bottom =
          cy + this.Y + this.Renderer.Height - this.Renderer.BottomPadding;
        var this1 = 0.5;
        var left = cx + this.X + this1;
        var h = bottom - top;
        canvas.FillRect(left, top, blockWidth, h);
        var this2 = 0.5;
        left = left + (blockWidth * 2 - this2);
        canvas.BeginPath();
        canvas.MoveTo(left, top);
        canvas.LineTo(left, bottom);
        canvas.Stroke();
        left = left + 3 * this.get_Scale();
        var circleSize = this._circleSize * this.get_Scale();
        var middle = (top + bottom) / 2;
        canvas.FillCircle(
          left,
          middle - circleSize * this._dotOffset,
          circleSize
        );
        canvas.FillCircle(
          left,
          middle + circleSize * this._dotOffset,
          circleSize
        );
      },
      __class__: alphaTab.rendering.glyphs.RepeatOpenGlyph
    }
  );
  alphaTab.rendering.glyphs.RideCymbalGlyph = function(x, y, isGrace) {
    alphaTab.rendering.glyphs.MusicFontGlyph.call(
      this,
      x,
      y,
      isGrace ? 0.75 : 1,
      57566
    );
    this._isGrace = false;
    this._isGrace = isGrace;
  };
  alphaTab.rendering.glyphs.RideCymbalGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'RideCymbalGlyph'
  ];
  alphaTab.rendering.glyphs.RideCymbalGlyph.__super__ =
    alphaTab.rendering.glyphs.MusicFontGlyph;
  alphaTab.rendering.glyphs.RideCymbalGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.MusicFontGlyph.prototype,
    {
      DoLayout: function() {
        this.Width = 9 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
      },
      __class__: alphaTab.rendering.glyphs.RideCymbalGlyph
    }
  );
  alphaTab.rendering.glyphs.ScoreBeatGlyph = function() {
    alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.call(this);
  };
  alphaTab.rendering.glyphs.ScoreBeatGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'ScoreBeatGlyph'
  ];
  alphaTab.rendering.glyphs.ScoreBeatGlyph.__super__ =
    alphaTab.rendering.glyphs.BeatOnNoteGlyphBase;
  alphaTab.rendering.glyphs.ScoreBeatGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.prototype,
    {
      UpdateBeamingHelper: function() {
        if (this.NoteHeads != null) {
          this.NoteHeads.UpdateBeamingHelper(this.Container.X + this.X);
        } else if (this.RestGlyph != null) {
          this.RestGlyph.UpdateBeamingHelper(this.Container.X + this.X);
        }
      },
      DoLayout: function() {
        var sr = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.ScoreBarRenderer
        );
        if (!this.Container.Beat.IsEmpty) {
          if (!this.Container.Beat.get_IsRest()) {
            this.NoteHeads = new alphaTab.rendering.glyphs.ScoreNoteChordGlyph();
            this.NoteHeads.Beat = this.Container.Beat;
            this.NoteHeads.BeamingHelper = this.BeamingHelper;
            var ghost = new alphaTab.rendering.glyphs.GhostNoteContainerGlyph(
              false
            );
            ghost.Renderer = this.Renderer;
            var note = $iterator(this.Container.Beat.Notes)();
            while (note.hasNext()) {
              var note1 = note.next();
              if (note1.IsVisible) {
                this.CreateNoteGlyph(note1);
                ghost.AddParenthesis(note1);
              }
            }
            this.AddGlyph(this.NoteHeads);
            if (!ghost.IsEmpty) {
              this.AddGlyph(
                new alphaTab.rendering.glyphs.SpacingGlyph(
                  0,
                  0,
                  4 *
                    (this.Container.Beat.GraceType != 0 ? 0.75 : 1) *
                    this.get_Scale()
                )
              );
              this.AddGlyph(ghost);
            }
            if (this.Container.Beat.get_HasWhammyBar()) {
              var whammy = new alphaTab.rendering.glyphs.ScoreWhammyBarGlyph(
                this.Container.Beat
              );
              whammy.Renderer = this.Renderer;
              whammy.DoLayout();
              this.Container.Ties.push(whammy);
            }
            if (this.Container.Beat.Dots > 0) {
              this.AddGlyph(
                new alphaTab.rendering.glyphs.SpacingGlyph(
                  0,
                  0,
                  5 * this.get_Scale()
                )
              );
              var i = 0;
              while (i < this.Container.Beat.Dots) {
                var group = new alphaTab.rendering.glyphs.GlyphGroup(0, 0);
                var note2 = $iterator(this.Container.Beat.Notes)();
                while (note2.hasNext()) {
                  var note3 = note2.next();
                  this.CreateBeatDot(sr.GetNoteLine(note3), group);
                }
                this.AddGlyph(group);
                ++i;
              }
            }
          } else {
            var dotLine = 0;
            var line = 0;
            var offset = 0;
            var _g = this.Container.Beat.Duration;
            switch (_g) {
              case -4:
                line = 6;
                dotLine = 5;
                break;
              case -2:
                line = 6;
                dotLine = 5;
                break;
              case 1:
                line = 4;
                dotLine = 5;
                break;
              case 2:
                line = 6;
                dotLine = 5;
                break;
              case 4:
                line = 6;
                offset = -2;
                dotLine = 5;
                break;
              case 8:
                line = 6;
                dotLine = 5;
                break;
              case 16:
                line = 6;
                dotLine = 5;
                break;
              case 32:
                line = 6;
                dotLine = 3;
                break;
              case 64:
                line = 6;
                dotLine = 3;
                break;
              case 128:
                line = 6;
                dotLine = 3;
                break;
              case 256:
                line = 6;
                dotLine = 3;
                break;
              default:
            }
            var this1 = line;
            var this2 = offset;
            var y = sr.GetScoreY(this1, this2);
            this.RestGlyph = new alphaTab.rendering.glyphs.ScoreRestGlyph(
              0,
              y,
              this.Container.Beat.Duration
            );
            this.RestGlyph.Beat = this.Container.Beat;
            this.RestGlyph.BeamingHelper = this.BeamingHelper;
            this.AddGlyph(this.RestGlyph);
            if (this.Container.Beat.Dots > 0) {
              this.AddGlyph(
                new alphaTab.rendering.glyphs.SpacingGlyph(
                  0,
                  0,
                  5 * this.get_Scale()
                )
              );
              var i1 = 0;
              while (i1 < this.Container.Beat.Dots) {
                var group1 = new alphaTab.rendering.glyphs.GlyphGroup(0, 0);
                this.CreateBeatDot(dotLine, group1);
                this.AddGlyph(group1);
                ++i1;
              }
            }
          }
        }
        alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.prototype.DoLayout.call(
          this
        );
        if (this.Container.Beat.IsEmpty) {
          this.CenterX = this.Width / 2;
        } else if (this.Container.Beat.get_IsRest()) {
          this.CenterX = this.RestGlyph.X + this.RestGlyph.Width / 2;
        } else {
          this.CenterX = this.NoteHeads.X + this.NoteHeads.Width / 2;
        }
      },
      CreateBeatDot: function(line, group) {
        var sr = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.ScoreBarRenderer
        );
        var this1 = line;
        var this2 = 1.5;
        group.AddGlyph(
          new alphaTab.rendering.glyphs.CircleGlyph(
            0,
            sr.GetScoreY(this1, 0),
            this2 * this.get_Scale()
          )
        );
      },
      CreateNoteHeadGlyph: function(n) {
        var isGrace = this.Container.Beat.GraceType != 0;
        if (n.Beat.Voice.Bar.Staff.IsPercussion) {
          var value = n.get_RealValue();
          if (
            value <= 30 ||
            value >= 67 ||
            alphaTab.rendering.glyphs.ScoreBeatGlyph.NormalKeys.hasOwnProperty(
              value
            )
          ) {
            return new alphaTab.rendering.glyphs.NoteHeadGlyph(
              0,
              0,
              4,
              isGrace
            );
          }
          if (
            alphaTab.rendering.glyphs.ScoreBeatGlyph.XKeys.hasOwnProperty(value)
          ) {
            return new alphaTab.rendering.glyphs.DrumSticksGlyph(0, 0, isGrace);
          }
          if (value == 46) {
            return new alphaTab.rendering.glyphs.HiHatGlyph(0, 0, isGrace);
          }
          if (value == 49 || value == 57) {
            return new alphaTab.rendering.glyphs.DiamondNoteHeadGlyph(
              0,
              0,
              n.Beat.Duration,
              isGrace
            );
          }
          if (value == 52) {
            return new alphaTab.rendering.glyphs.ChineseCymbalGlyph(
              0,
              0,
              isGrace
            );
          }
          if (value == 51 || value == 53 || value == 59) {
            return new alphaTab.rendering.glyphs.RideCymbalGlyph(0, 0, isGrace);
          }
          return new alphaTab.rendering.glyphs.NoteHeadGlyph(0, 0, 4, isGrace);
        }
        if (n.IsDead) {
          return new alphaTab.rendering.glyphs.DeadNoteHeadGlyph(0, 0, isGrace);
        }
        if (n.Beat.GraceType == 3) {
          return new alphaTab.rendering.glyphs.NoteHeadGlyph(0, 0, 4, true);
        }
        if (n.HarmonicType == 1) {
          return new alphaTab.rendering.glyphs.DiamondNoteHeadGlyph(
            0,
            0,
            n.Beat.Duration,
            isGrace
          );
        }
        return new alphaTab.rendering.glyphs.NoteHeadGlyph(
          0,
          0,
          n.Beat.Duration,
          isGrace
        );
      },
      CreateNoteGlyph: function(n) {
        if (n.Beat.GraceType == 3 && !n.get_HasBend()) {
          return;
        }
        var sr = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.ScoreBarRenderer
        );
        var noteHeadGlyph = this.CreateNoteHeadGlyph(n);
        var line = sr.GetNoteLine(n);
        var this1 = line;
        noteHeadGlyph.Y = sr.GetScoreY(this1, 0);
        this.NoteHeads.AddNoteGlyph(noteHeadGlyph, n, line);
        if (n.HarmonicType != 0 && n.HarmonicType != 1) {
          var harmonicFret = n.get_DisplayValue() + n.get_HarmonicPitch();
          noteHeadGlyph = new alphaTab.rendering.glyphs.DiamondNoteHeadGlyph(
            0,
            0,
            n.Beat.Duration,
            this.Container.Beat.GraceType != 0
          );
          line = sr.AccidentalHelper.GetNoteLineForValue(harmonicFret, false);
          var this2 = line;
          noteHeadGlyph.Y = sr.GetScoreY(this2, 0);
          this.NoteHeads.AddNoteGlyph(noteHeadGlyph, n, line);
        }
        if (
          n.IsStaccato &&
          !this.NoteHeads.BeatEffects.hasOwnProperty('Staccato')
        ) {
          this.NoteHeads.BeatEffects[
            'Staccato'
          ] = new alphaTab.rendering.glyphs.CircleGlyph(0, 0, 1.5);
        }
        if (
          n.Accentuated == 1 &&
          !this.NoteHeads.BeatEffects.hasOwnProperty('Accent')
        ) {
          this.NoteHeads.BeatEffects[
            'Accent'
          ] = new alphaTab.rendering.glyphs.AccentuationGlyph(0, 0, 1);
        }
        if (
          n.Accentuated == 2 &&
          !this.NoteHeads.BeatEffects.hasOwnProperty('HAccent')
        ) {
          this.NoteHeads.BeatEffects[
            'HAccent'
          ] = new alphaTab.rendering.glyphs.AccentuationGlyph(0, 0, 2);
        }
      },
      __class__: alphaTab.rendering.glyphs.ScoreBeatGlyph
    }
  );
  alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph = function() {
    alphaTab.rendering.glyphs.BeatGlyphBase.call(this);
  };
  alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'ScoreBeatPreNotesGlyph'
  ];
  alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph.__super__ =
    alphaTab.rendering.glyphs.BeatGlyphBase;
  alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.BeatGlyphBase.prototype,
    {
      get_PrebendNoteHeadOffset: function() {
        return this._prebends.X + this._prebends.NoteHeadOffset;
      },
      DoLayout: function() {
        if (!this.Container.Beat.get_IsRest()) {
          var accidentals = new alphaTab.rendering.glyphs.AccidentalGroupGlyph();
          var ghost = new alphaTab.rendering.glyphs.GhostNoteContainerGlyph(
            true
          );
          ghost.Renderer = this.Renderer;
          this._prebends = new alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph(
            this.Container.Beat,
            true
          );
          this._prebends.Renderer = this.Renderer;
          var note = $iterator(this.Container.Beat.Notes)();
          while (note.hasNext()) {
            var note1 = note.next();
            if (note1.IsVisible) {
              if (note1.get_HasBend()) {
                var _g = note1.BendType;
                switch (_g) {
                  case 6:
                  case 7:
                  case 8:
                    this._prebends.AddGlyph(
                      note1.get_DisplayValue() -
                        ((note1.BendPoints[0].Value / 2) | 0),
                      false
                    );
                    break;
                  default:
                }
              } else if (note1.Beat.get_HasWhammyBar()) {
                var _g1 = note1.Beat.WhammyBarType;
                switch (_g1) {
                  case 5:
                  case 6:
                    this._prebends.AddGlyph(
                      note1.get_DisplayValue() -
                        ((note1.Beat.WhammyBarPoints[0].Value / 2) | 0),
                      false
                    );
                    break;
                  default:
                }
              }
              this.CreateAccidentalGlyph(note1, accidentals);
              ghost.AddParenthesis(note1);
            }
          }
          if (!this._prebends.IsEmpty) {
            this.AddGlyph(this._prebends);
            this.AddGlyph(
              new alphaTab.rendering.glyphs.SpacingGlyph(
                0,
                0,
                4 *
                  (this.Container.Beat.GraceType != 0 ? 0.75 : 1) *
                  this.get_Scale()
              )
            );
          }
          if (this.Container.Beat.BrushType != 0) {
            this.AddGlyph(
              new alphaTab.rendering.glyphs.ScoreBrushGlyph(this.Container.Beat)
            );
            this.AddGlyph(
              new alphaTab.rendering.glyphs.SpacingGlyph(
                0,
                0,
                4 * this.get_Scale()
              )
            );
          }
          if (!ghost.IsEmpty) {
            this.AddGlyph(ghost);
            this.AddGlyph(
              new alphaTab.rendering.glyphs.SpacingGlyph(
                0,
                0,
                4 *
                  (this.Container.Beat.GraceType != 0 ? 0.75 : 1) *
                  this.get_Scale()
              )
            );
          }
          if (!accidentals.get_IsEmpty()) {
            this.AddGlyph(accidentals);
            this.AddGlyph(
              new alphaTab.rendering.glyphs.SpacingGlyph(
                0,
                0,
                4 *
                  (this.Container.Beat.GraceType != 0 ? 0.75 : 1) *
                  this.get_Scale()
              )
            );
          }
        }
        alphaTab.rendering.glyphs.BeatGlyphBase.prototype.DoLayout.call(this);
      },
      CreateAccidentalGlyph: function(n, accidentals) {
        var sr = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.ScoreBarRenderer
        );
        var accidental = sr.AccidentalHelper.ApplyAccidental(n);
        var noteLine = sr.GetNoteLine(n);
        var isGrace = this.Container.Beat.GraceType != 0;
        if (accidental != 0) {
          var this1 = noteLine;
          accidentals.AddGlyph(
            new alphaTab.rendering.glyphs.AccidentalGlyph(
              0,
              sr.GetScoreY(this1, 0),
              accidental,
              isGrace
            )
          );
        }
        if (n.HarmonicType != 0 && n.HarmonicType != 1) {
          var harmonicFret = n.get_DisplayValue() + n.get_HarmonicPitch();
          accidental = sr.AccidentalHelper.ApplyAccidentalForValue(
            n.Beat,
            harmonicFret,
            isGrace
          );
          noteLine = sr.AccidentalHelper.GetNoteLineForValue(
            harmonicFret,
            false
          );
          var this2 = noteLine;
          accidentals.AddGlyph(
            new alphaTab.rendering.glyphs.AccidentalGlyph(
              0,
              sr.GetScoreY(this2, 0),
              accidental,
              isGrace
            )
          );
        }
      },
      __class__: alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph
    }
  );
  alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph = function() {
    alphaTab.rendering.glyphs.Glyph.call(this, 0, 0);
    this._bendNoteHeads = null;
    var this1 = [];
    this._bendNoteHeads = this1;
  };
  alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'ScoreHelperNotesBaseGlyph'
  ];
  alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      DrawBendSlur: function(canvas, x1, y1, x2, y2, down, scale, slurText) {
        var normalVectorX = y2 - y1;
        var normalVectorY = x2 - x1;
        var this1 =
          normalVectorX * normalVectorX + normalVectorY * normalVectorY;
        var length = js.Boot.__cast(Math.sqrt(this1), Float);
        if (down) {
          normalVectorX = normalVectorX * -1;
        } else {
          normalVectorY = normalVectorY * -1;
        }
        normalVectorX = normalVectorX / length;
        normalVectorY = normalVectorY / length;
        var centerX = (x2 + x1) / 2;
        var centerY = (y2 + y1) / 2;
        var offset = 11 * scale;
        if (x2 - x1 < 20) {
          offset = offset / 2;
        }
        var cp1X = centerX + offset * normalVectorX;
        var cp1Y = centerY + offset * normalVectorY;
        canvas.BeginPath();
        canvas.MoveTo(x1, y1);
        canvas.LineTo(cp1X, cp1Y);
        canvas.LineTo(x2, y2);
        canvas.Stroke();
        if (!(slurText == null || slurText.length == 0)) {
          var w = canvas.MeasureText(slurText);
          var textOffset = down ? 0 : -canvas.get_Font().Size;
          canvas.FillText(slurText, cp1X - w / 2, cp1Y + textOffset);
        }
      },
      DoLayout: function() {
        alphaTab.rendering.glyphs.Glyph.prototype.DoLayout.call(this);
        this.Width = 0;
        var noteHeads = $iterator(this._bendNoteHeads)();
        while (noteHeads.hasNext()) {
          var noteHeads1 = noteHeads.next();
          noteHeads1.DoLayout();
          this.Width = this.Width + (noteHeads1.Width + 10 * this.get_Scale());
        }
      },
      GetBeamDirection: function(beat, noteRenderer) {
        var _g = noteRenderer.GetBeatDirection(beat);
        if (_g == 0) {
          return 1;
        } else {
          return 0;
        }
      },
      __class__: alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph
    }
  );
  alphaTab.rendering.glyphs.ScoreBendGlyph = function(beat) {
    alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph.call(this);
    this._beat = null;
    this._notes = null;
    this._endNoteGlyph = null;
    this._middleNoteGlyph = null;
    this._beat = beat;
    var this1 = [];
    this._notes = this1;
    this._middleNoteGlyph = null;
    this._endNoteGlyph = null;
  };
  alphaTab.rendering.glyphs.ScoreBendGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'ScoreBendGlyph'
  ];
  alphaTab.rendering.glyphs.ScoreBendGlyph.__super__ =
    alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph;
  alphaTab.rendering.glyphs.ScoreBendGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph.prototype,
    {
      AddBends: function(note) {
        this._notes.push(note);
        if (note.get_IsTieOrigin()) {
          return;
        }
        var _g = note.BendType;
        switch (_g) {
          case 3:
            if (!note.get_IsTieOrigin()) {
              var endGlyphs = this._endNoteGlyph;
              if (endGlyphs == null) {
                endGlyphs = this._endNoteGlyph = new alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph(
                  note.Beat,
                  false
                );
                endGlyphs.Renderer = this.Renderer;
                this._bendNoteHeads.push(endGlyphs);
              }
              var lastBendPoint = note.BendPoints[note.BendPoints.length - 1];
              endGlyphs.AddGlyph(
                this.GetBendNoteValue(note, lastBendPoint),
                lastBendPoint.Value % 2 != 0
              );
            }
            break;
          case 4:
            var middleGlyphs = this._middleNoteGlyph;
            if (middleGlyphs == null) {
              middleGlyphs = this._middleNoteGlyph = new alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph(
                note.Beat,
                false
              );
              middleGlyphs.Renderer = this.Renderer;
              this._bendNoteHeads.push(middleGlyphs);
            }
            var middleBendPoint = note.BendPoints[1];
            middleGlyphs.AddGlyph(
              this.GetBendNoteValue(note, note.BendPoints[1]),
              middleBendPoint.Value % 2 != 0
            );
            var endGlyphs1 = this._endNoteGlyph;
            if (endGlyphs1 == null) {
              endGlyphs1 = this._endNoteGlyph = new alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph(
                note.Beat,
                false
              );
              endGlyphs1.Renderer = this.Renderer;
              this._bendNoteHeads.push(endGlyphs1);
            }
            var lastBendPoint1 = note.BendPoints[note.BendPoints.length - 1];
            endGlyphs1.AddGlyph(
              this.GetBendNoteValue(note, lastBendPoint1),
              lastBendPoint1.Value % 2 != 0
            );
            break;
          case 2:
          case 7:
          case 8:
            var endGlyphs2 = this._endNoteGlyph;
            if (endGlyphs2 == null) {
              endGlyphs2 = this._endNoteGlyph = new alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph(
                note.Beat,
                false
              );
              endGlyphs2.Renderer = this.Renderer;
              this._bendNoteHeads.push(endGlyphs2);
            }
            var lastBendPoint2 = note.BendPoints[note.BendPoints.length - 1];
            endGlyphs2.AddGlyph(
              this.GetBendNoteValue(note, lastBendPoint2),
              lastBendPoint2.Value % 2 != 0
            );
            break;
          default:
        }
      },
      Paint: function(cx, cy, canvas) {
        var startNoteRenderer = this.Renderer.ScoreRenderer.Layout.GetRendererForBar(
          this.Renderer.Staff.get_StaveId(),
          this._beat.Voice.Bar
        );
        var startX =
          cx + startNoteRenderer.X + startNoteRenderer.GetBeatX(this._beat, 2);
        var endBeatX = cx + startNoteRenderer.X;
        if (this._beat.get_IsLastOfVoice()) {
          endBeatX = endBeatX + startNoteRenderer.get_PostBeatGlyphsStart();
        } else {
          endBeatX =
            endBeatX + startNoteRenderer.GetBeatX(this._beat.NextBeat, 0);
        }
        endBeatX = endBeatX - (((8 / 2) | 0) + 3) * this.get_Scale();
        var middleX = (startX + endBeatX) / 2;
        if (this._middleNoteGlyph != null) {
          this._middleNoteGlyph.X =
            middleX - this._middleNoteGlyph.NoteHeadOffset;
          this._middleNoteGlyph.Y = cy + startNoteRenderer.Y;
          this._middleNoteGlyph.Paint(0, 0, canvas);
        }
        if (this._endNoteGlyph != null) {
          this._endNoteGlyph.X = endBeatX - this._endNoteGlyph.NoteHeadOffset;
          this._endNoteGlyph.Y = cy + startNoteRenderer.Y;
          this._endNoteGlyph.Paint(0, 0, canvas);
        }
        var comparison = function(a, b) {
          return b.get_DisplayValue() - a.get_DisplayValue();
        };
        this._notes.sort(function(a1, b1) {
          return comparison(a1, b1);
        });
        var directionBeat =
          this._beat.GraceType == 3 ? this._beat.NextBeat : this._beat;
        var direction =
          this._notes.length == 1
            ? this.GetBeamDirection(directionBeat, startNoteRenderer)
            : 0;
        var i = 0;
        while (i < this._notes.length) {
          var note = this._notes[i];
          if (i > 0 && i >= ((this._notes.length / 2) | 0)) {
            direction = 1;
          }
          var startY =
            cy + startNoteRenderer.Y + startNoteRenderer.GetNoteY(note, true);
          var this1 = 0.5;
          var heightOffset = 9 * this.get_Scale() * 0.75 * this1;
          if (direction == 1) {
            startY = startY + 9 * this.get_Scale();
          }
          var slurText = note.BendStyle == 1 ? 'grad.' : '';
          if (note.get_IsTieOrigin()) {
            var endNote = note.TieDestination;
            var endNoteRenderer =
              endNote == null
                ? null
                : this.Renderer.ScoreRenderer.Layout.GetRendererForBar(
                    this.Renderer.Staff.get_StaveId(),
                    endNote.Beat.Voice.Bar
                  );
            if (
              endNoteRenderer == null ||
              endNoteRenderer.Staff != startNoteRenderer.Staff
            ) {
              var endX = cx + startNoteRenderer.X + startNoteRenderer.Width;
              var noteValueToDraw = note.TieDestination.get_RealValue();
              var accidental = startNoteRenderer.AccidentalHelper.ApplyAccidentalForValue(
                note.Beat,
                noteValueToDraw,
                false
              );
              var endY = cy + startNoteRenderer.Y;
              var this2 = startNoteRenderer.AccidentalHelper.GetNoteLineForValue(
                noteValueToDraw,
                false
              );
              var endY1 = endY + startNoteRenderer.GetScoreY(this2, 0);
              if (note.BendType == 5 || note.BendType == 6) {
                alphaTab.rendering.glyphs.TieGlyph.PaintTie(
                  canvas,
                  this.get_Scale(),
                  startX,
                  startY,
                  endX,
                  endY1,
                  direction == 1,
                  22,
                  4
                );
                canvas.Fill();
              } else {
                this.DrawBendSlur(
                  canvas,
                  startX,
                  startY,
                  endX,
                  endY1,
                  direction == 1,
                  this.get_Scale(),
                  slurText
                );
              }
            } else {
              var endX1 =
                cx +
                endNoteRenderer.X +
                endNoteRenderer.GetBeatX(endNote.Beat, 2);
              var endY2 =
                cy +
                endNoteRenderer.Y +
                endNoteRenderer.GetNoteY(endNote, true);
              if (direction == 1) {
                endY2 = endY2 + 9 * this.get_Scale();
              }
              if (note.BendType == 5 || note.BendType == 6) {
                alphaTab.rendering.glyphs.TieGlyph.PaintTie(
                  canvas,
                  this.get_Scale(),
                  startX,
                  startY,
                  endX1,
                  endY2,
                  direction == 1,
                  22,
                  4
                );
                canvas.Fill();
              } else {
                this.DrawBendSlur(
                  canvas,
                  startX,
                  startY,
                  endX1,
                  endY2,
                  direction == 1,
                  this.get_Scale(),
                  slurText
                );
              }
            }
            var _g = note.BendType;
            switch (_g) {
              case 6:
              case 7:
              case 8:
                var preX =
                  cx +
                  startNoteRenderer.X +
                  startNoteRenderer.GetBeatX(note.Beat, 0);
                preX =
                  preX +
                  js.Boot.__cast(
                    startNoteRenderer.GetBeatContainer(note.Beat).PreNotes,
                    alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph
                  ).get_PrebendNoteHeadOffset();
                var preY = cy + startNoteRenderer.Y;
                var this3 = startNoteRenderer.AccidentalHelper.GetNoteLineForValue(
                  note.get_DisplayValue() -
                    ((note.BendPoints[0].Value / 2) | 0),
                  false
                );
                var preY1 =
                  preY + startNoteRenderer.GetScoreY(this3, 0) + heightOffset;
                this.DrawBendSlur(
                  canvas,
                  preX,
                  preY1,
                  startX,
                  startY,
                  direction == 1,
                  this.get_Scale(),
                  null
                );
                break;
              default:
            }
          } else {
            if (direction == 0) {
              heightOffset = -heightOffset;
            }
            var endValue;
            var endY3;
            var _g1 = note.BendType;
            switch (_g1) {
              case 2:
                endValue = this.GetBendNoteValue(
                  note,
                  note.BendPoints[note.BendPoints.length - 1]
                );
                endY3 =
                  this._endNoteGlyph.GetNoteValueY(endValue, false) +
                  heightOffset;
                this.DrawBendSlur(
                  canvas,
                  startX,
                  startY,
                  endBeatX,
                  endY3,
                  direction == 1,
                  this.get_Scale(),
                  slurText
                );
                break;
              case 3:
                if (this._bendNoteHeads.length > 0) {
                  endValue = this.GetBendNoteValue(
                    note,
                    note.BendPoints[note.BendPoints.length - 1]
                  );
                  endY3 =
                    this._bendNoteHeads[0].GetNoteValueY(endValue, false) +
                    heightOffset;
                  this.DrawBendSlur(
                    canvas,
                    startX,
                    startY,
                    endBeatX,
                    endY3,
                    direction == 1,
                    this.get_Scale(),
                    slurText
                  );
                }
                break;
              case 4:
                var middleValue = this.GetBendNoteValue(
                  note,
                  note.BendPoints[1]
                );
                var middleY =
                  this._middleNoteGlyph.GetNoteValueY(middleValue, false) +
                  heightOffset;
                this.DrawBendSlur(
                  canvas,
                  startX,
                  startY,
                  middleX,
                  middleY,
                  direction == 1,
                  this.get_Scale(),
                  slurText
                );
                endValue = this.GetBendNoteValue(
                  note,
                  note.BendPoints[note.BendPoints.length - 1]
                );
                endY3 =
                  this._endNoteGlyph.GetNoteValueY(endValue, false) +
                  heightOffset;
                this.DrawBendSlur(
                  canvas,
                  middleX,
                  middleY,
                  endBeatX,
                  endY3,
                  direction == 1,
                  this.get_Scale(),
                  slurText
                );
                break;
              case 6:
              case 7:
              case 8:
                var preX1 =
                  cx +
                  startNoteRenderer.X +
                  startNoteRenderer.GetBeatX(note.Beat, 0);
                preX1 =
                  preX1 +
                  js.Boot.__cast(
                    startNoteRenderer.GetBeatContainer(note.Beat).PreNotes,
                    alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph
                  ).get_PrebendNoteHeadOffset();
                var preY2 = cy + startNoteRenderer.Y;
                var this4 = startNoteRenderer.AccidentalHelper.GetNoteLineForValue(
                  note.get_DisplayValue() -
                    ((note.BendPoints[0].Value / 2) | 0),
                  false
                );
                var preY3 =
                  preY2 + startNoteRenderer.GetScoreY(this4, 0) + heightOffset;
                this.DrawBendSlur(
                  canvas,
                  preX1,
                  preY3,
                  startX,
                  startY,
                  direction == 1,
                  this.get_Scale(),
                  null
                );
                if (this._bendNoteHeads.length > 0) {
                  endValue = this.GetBendNoteValue(
                    note,
                    note.BendPoints[note.BendPoints.length - 1]
                  );
                  endY3 =
                    this._bendNoteHeads[0].GetNoteValueY(endValue, false) +
                    heightOffset;
                  this.DrawBendSlur(
                    canvas,
                    startX,
                    startY,
                    endBeatX,
                    endY3,
                    direction == 1,
                    this.get_Scale(),
                    slurText
                  );
                }
                break;
              default:
            }
          }
          ++i;
        }
      },
      GetBendNoteValue: function(note, bendPoint) {
        return note.get_DisplayValueWithoutBend() + ((bendPoint.Value / 2) | 0);
      },
      __class__: alphaTab.rendering.glyphs.ScoreBendGlyph
    }
  );
  alphaTab.rendering.glyphs.ScoreBrushGlyph = function(beat) {
    alphaTab.rendering.glyphs.Glyph.call(this, 0, 0);
    this._beat = null;
    this._beat = beat;
  };
  alphaTab.rendering.glyphs.ScoreBrushGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'ScoreBrushGlyph'
  ];
  alphaTab.rendering.glyphs.ScoreBrushGlyph.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.ScoreBrushGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      DoLayout: function() {
        this.Width = 10 * this.get_Scale();
      },
      Paint: function(cx, cy, canvas) {
        var scoreBarRenderer = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.ScoreBarRenderer
        );
        var lineSize = scoreBarRenderer.get_LineOffset();
        var startY =
          cy +
          this.Y +
          (scoreBarRenderer.GetNoteY(this._beat.MaxNote, false) - lineSize);
        var endY =
          cy +
          this.Y +
          scoreBarRenderer.GetNoteY(this._beat.MinNote, false) +
          lineSize;
        var arrowX = cx + this.X + this.Width / 2;
        var arrowSize = 8 * this.get_Scale();
        if (this._beat.BrushType != 0) {
          if (this._beat.BrushType == 3) {
            var lineStartY = startY - arrowSize;
            var lineEndY = endY - arrowSize;
            canvas.BeginRotate(
              cx + this.X + 2 * this.get_Scale(),
              lineEndY,
              -90
            );
            var glyph = new alphaTab.rendering.glyphs.NoteVibratoGlyph(
              0,
              0,
              1,
              1.2
            );
            glyph.Renderer = this.Renderer;
            glyph.DoLayout();
            glyph.Width = Math.abs(lineEndY - lineStartY);
            glyph.Paint(0, 0, canvas);
            canvas.EndRotate();
            canvas.BeginPath();
            canvas.MoveTo(arrowX, endY);
            canvas.LineTo(arrowX + arrowSize / 2, endY - arrowSize);
            canvas.LineTo(arrowX - arrowSize / 2, endY - arrowSize);
            canvas.ClosePath();
            canvas.Fill();
          } else if (this._beat.BrushType == 4) {
            var lineStartY1 = startY + arrowSize;
            var lineEndY1 = endY + arrowSize;
            canvas.BeginRotate(
              cx + this.X + 7 * this.get_Scale(),
              lineStartY1,
              90
            );
            var glyph1 = new alphaTab.rendering.glyphs.NoteVibratoGlyph(
              0,
              0,
              1,
              1.2
            );
            glyph1.Renderer = this.Renderer;
            glyph1.DoLayout();
            glyph1.Width = Math.abs(lineEndY1 - lineStartY1);
            glyph1.Paint(0, 0, canvas);
            canvas.EndRotate();
            canvas.BeginPath();
            canvas.MoveTo(arrowX, startY);
            canvas.LineTo(arrowX + arrowSize / 2, startY + arrowSize);
            canvas.LineTo(arrowX - arrowSize / 2, startY + arrowSize);
            canvas.ClosePath();
            canvas.Fill();
          }
        }
      },
      __class__: alphaTab.rendering.glyphs.ScoreBrushGlyph
    }
  );
  alphaTab.rendering.glyphs.TieGlyph = function(startBeat, endBeat, forEnd) {
    alphaTab.rendering.glyphs.Glyph.call(this, 0, 0);
    this.StartBeat = null;
    this.EndBeat = null;
    this.YOffset = 0.0;
    this.ForEnd = false;
    this.StartBeat = startBeat;
    this.EndBeat = endBeat;
    this.ForEnd = forEnd;
  };
  alphaTab.rendering.glyphs.TieGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'TieGlyph'
  ];
  alphaTab.rendering.glyphs.TieGlyph.PaintTie = function(
    canvas,
    scale,
    x1,
    y1,
    x2,
    y2,
    down,
    offset,
    size
  ) {
    if (size == null) {
      size = 4;
    }
    if (offset == null) {
      offset = 22;
    }
    if (down == null) {
      down = false;
    }
    if (x1 == x2 && y1 == y2) {
      return;
    }
    if (x2 < x1) {
      var t = x1;
      x1 = x2;
      x2 = t;
      t = y1;
      y1 = y2;
      y2 = t;
    }
    offset = offset * scale;
    size = size * scale;
    var normalVectorX = y2 - y1;
    var normalVectorY = x2 - x1;
    var this1 = normalVectorX * normalVectorX + normalVectorY * normalVectorY;
    var length = js.Boot.__cast(Math.sqrt(this1), Float);
    if (down) {
      normalVectorX = normalVectorX * -1;
    } else {
      normalVectorY = normalVectorY * -1;
    }
    normalVectorX = normalVectorX / length;
    normalVectorY = normalVectorY / length;
    var centerX = (x2 + x1) / 2;
    var centerY = (y2 + y1) / 2;
    var cp1X = centerX + offset * normalVectorX;
    var cp1Y = centerY + offset * normalVectorY;
    var cp2X = centerX + (offset - size) * normalVectorX;
    var cp2Y = centerY + (offset - size) * normalVectorY;
    canvas.BeginPath();
    canvas.MoveTo(x1, y1);
    canvas.QuadraticCurveTo(cp1X, cp1Y, x2, y2);
    canvas.QuadraticCurveTo(cp2X, cp2Y, x1, y1);
    canvas.ClosePath();
  };
  alphaTab.rendering.glyphs.TieGlyph.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.TieGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      DoLayout: function() {
        this.Width = 0;
      },
      Paint: function(cx, cy, canvas) {
        if (this.EndBeat == null) {
          return;
        }
        var startNoteRenderer = this.Renderer.ScoreRenderer.Layout.GetRendererForBar(
          this.Renderer.Staff.get_StaveId(),
          this.StartBeat.Voice.Bar
        );
        var endNoteRenderer = this.Renderer.ScoreRenderer.Layout.GetRendererForBar(
          this.Renderer.Staff.get_StaveId(),
          this.EndBeat.Voice.Bar
        );
        var startX = 0;
        var endX = 0;
        var startY = 0;
        var endY = 0;
        var shouldDraw = false;
        var direction = this.GetBeamDirection(
          this.StartBeat,
          startNoteRenderer
        );
        if (!this.ForEnd) {
          if (startNoteRenderer != endNoteRenderer) {
            startX =
              cx + startNoteRenderer.X + this.GetStartX(startNoteRenderer);
            startY =
              cy +
              startNoteRenderer.Y +
              this.GetStartY(startNoteRenderer, direction) +
              this.YOffset;
            if (
              endNoteRenderer == null ||
              startNoteRenderer.Staff != endNoteRenderer.Staff
            ) {
              endX = cx + startNoteRenderer.X + startNoteRenderer.Width;
              endY = startY;
            } else {
              endX = cx + endNoteRenderer.X + this.GetEndX(endNoteRenderer);
              endY =
                cy +
                endNoteRenderer.Y +
                this.GetEndY(endNoteRenderer, direction) +
                this.YOffset;
            }
          } else {
            startX =
              cx + startNoteRenderer.X + this.GetStartX(startNoteRenderer);
            endX = cx + endNoteRenderer.X + this.GetEndX(endNoteRenderer);
            startY =
              cy +
              startNoteRenderer.Y +
              this.GetStartY(startNoteRenderer, direction) +
              this.YOffset;
            endY =
              cy +
              endNoteRenderer.Y +
              this.GetEndY(endNoteRenderer, direction) +
              this.YOffset;
          }
          shouldDraw = true;
        } else if (startNoteRenderer.Staff != endNoteRenderer.Staff) {
          startX = cx + endNoteRenderer.X;
          endX = cx + endNoteRenderer.X + this.GetEndX(endNoteRenderer);
          startY =
            cy +
            endNoteRenderer.Y +
            this.GetEndY(endNoteRenderer, direction) +
            this.YOffset;
          endY = startY;
          shouldDraw = true;
        }
        if (shouldDraw) {
          alphaTab.rendering.glyphs.TieGlyph.PaintTie(
            canvas,
            this.get_Scale(),
            startX,
            startY,
            endX,
            endY,
            direction == 1,
            this.GetTieHeight(startX, startY, endX, endY),
            4
          );
          canvas.Fill();
        }
      },
      GetTieHeight: function(startX, startY, endX, endY) {
        return 22;
      },
      GetBeamDirection: function(beat, noteRenderer) {
        return 1;
      },
      GetStartY: function(noteRenderer, direction) {
        return 0;
      },
      GetEndY: function(noteRenderer, direction) {
        return 0;
      },
      GetStartX: function(noteRenderer) {
        return 0;
      },
      GetEndX: function(noteRenderer) {
        return 0;
      },
      __class__: alphaTab.rendering.glyphs.TieGlyph
    }
  );
  alphaTab.rendering.glyphs.ScoreLegatoGlyph = function(
    startBeat,
    endBeat,
    forEnd
  ) {
    if (forEnd == null) {
      forEnd = false;
    }
    alphaTab.rendering.glyphs.TieGlyph.call(this, startBeat, endBeat, forEnd);
  };
  alphaTab.rendering.glyphs.ScoreLegatoGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'ScoreLegatoGlyph'
  ];
  alphaTab.rendering.glyphs.ScoreLegatoGlyph.__super__ =
    alphaTab.rendering.glyphs.TieGlyph;
  alphaTab.rendering.glyphs.ScoreLegatoGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.TieGlyph.prototype,
    {
      DoLayout: function() {
        alphaTab.rendering.glyphs.TieGlyph.prototype.DoLayout.call(this);
        this.YOffset = 9 / 2;
      },
      GetBeamDirection: function(beat, noteRenderer) {
        if (beat.get_IsRest()) {
          return 0;
        }
        var _g = js.Boot.__cast(
          noteRenderer,
          alphaTab.rendering.ScoreBarRenderer
        ).GetBeatDirection(beat);
        if (_g == 0) {
          return 1;
        } else {
          return 0;
        }
      },
      GetStartY: function(noteRenderer, direction) {
        if (this.StartBeat.get_IsRest()) {
          return js.Boot.__cast(
            noteRenderer,
            alphaTab.rendering.ScoreBarRenderer
          ).GetScoreY(9, 0);
        }
        if (direction == 0) {
          return noteRenderer.GetNoteY(this.StartBeat.MinNote, false);
        } else {
          return noteRenderer.GetNoteY(this.StartBeat.MaxNote, false);
        }
      },
      GetEndY: function(noteRenderer, direction) {
        if (this.EndBeat.get_IsRest()) {
          if (direction == 0) {
            return js.Boot.__cast(
              noteRenderer,
              alphaTab.rendering.ScoreBarRenderer
            ).GetScoreY(9, 0);
          } else {
            return js.Boot.__cast(
              noteRenderer,
              alphaTab.rendering.ScoreBarRenderer
            ).GetScoreY(0, 0);
          }
        }
        if (direction == 0) {
          return js.Boot.__cast(
            noteRenderer,
            alphaTab.rendering.ScoreBarRenderer
          ).GetNoteY(this.EndBeat.MinNote, false);
        } else {
          return js.Boot.__cast(
            noteRenderer,
            alphaTab.rendering.ScoreBarRenderer
          ).GetNoteY(this.EndBeat.MaxNote, false);
        }
      },
      GetStartX: function(noteRenderer) {
        if (this.StartBeat.get_IsRest()) {
          return noteRenderer.GetBeatX(this.StartBeat, 0);
        } else {
          return noteRenderer.GetNoteX(this.StartBeat.MinNote, true);
        }
      },
      GetEndX: function(noteRenderer) {
        if (this.EndBeat.get_IsRest()) {
          return noteRenderer.GetBeatX(this.EndBeat, 0);
        } else {
          return noteRenderer.GetNoteX(this.EndBeat.MinNote, false);
        }
      },
      __class__: alphaTab.rendering.glyphs.ScoreLegatoGlyph
    }
  );
  alphaTab.rendering.glyphs.ScoreNoteChordGlyph = function() {
    alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.call(this);
    this._noteGlyphLookup = null;
    this._notes = null;
    this._tremoloPicking = null;
    this.BeatEffects = null;
    this.Beat = null;
    this.BeamingHelper = null;
    var this1 = {};
    this.BeatEffects = this1;
    var this2 = {};
    this._noteGlyphLookup = this2;
    var this3 = [];
    this._notes = this3;
  };
  alphaTab.rendering.glyphs.ScoreNoteChordGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'ScoreNoteChordGlyph'
  ];
  alphaTab.rendering.glyphs.ScoreNoteChordGlyph.__super__ =
    alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase;
  alphaTab.rendering.glyphs.ScoreNoteChordGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.prototype,
    {
      get_Direction: function() {
        return this.BeamingHelper.Direction;
      },
      GetNoteX: function(note, onEnd) {
        if (onEnd == null) {
          onEnd = true;
        }
        if (this._noteGlyphLookup.hasOwnProperty(note.Id)) {
          var n = this._noteGlyphLookup[note.Id];
          var pos = this.X + n.X;
          if (onEnd) {
            pos = pos + n.Width;
          }
          return pos;
        }
        return 0;
      },
      GetNoteY: function(note, aboveNote) {
        if (aboveNote == null) {
          aboveNote = false;
        }
        if (this._noteGlyphLookup.hasOwnProperty(note.Id)) {
          return (
            this.Y +
            this._noteGlyphLookup[note.Id].Y +
            (aboveNote ? -(9 * this.get_Scale()) / 2 : 0)
          );
        }
        return 0;
      },
      AddNoteGlyph: function(noteGlyph, note, noteLine) {
        alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.prototype.Add.call(
          this,
          noteGlyph,
          noteLine
        );
        this._noteGlyphLookup[note.Id] = noteGlyph;
        this._notes.push(note);
      },
      UpdateBeamingHelper: function(cx) {
        if (this.BeamingHelper != null) {
          this.BeamingHelper.RegisterBeatLineX(
            'score',
            this.Beat,
            cx + this.X + this.UpLineX,
            cx + this.X + this.DownLineX
          );
        }
      },
      DoLayout: function() {
        alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.prototype.DoLayout.call(
          this
        );
        var direction = this.get_Direction();
        var this1 = this.BeatEffects;
        var effectKey = $iterator(Object.keys(this1))();
        while (effectKey.hasNext()) {
          var effectKey1 = effectKey.next();
          var effect = this.BeatEffects[effectKey1];
          effect.Renderer = this.Renderer;
          effect.DoLayout();
        }
        if (this.Beat.get_IsTremolo()) {
          var offset;
          var baseNote = direction == 0 ? this.MinNote : this.MaxNote;
          var tremoloX = direction == 0 ? this.DisplacedX : 0;
          var speed = this.Beat.TremoloSpeed;
          switch (speed) {
            case 8:
              if (direction == 0) {
                offset = -10;
              } else {
                offset = 10;
              }
              break;
            case 16:
              if (direction == 0) {
                offset = -12;
              } else {
                offset = 15;
              }
              break;
            case 32:
              if (direction == 0) {
                offset = -15;
              } else {
                offset = 15;
              }
              break;
            default:
              if (direction == 0) {
                offset = -10;
              } else {
                offset = 15;
              }
          }
          this._tremoloPicking = new alphaTab.rendering.glyphs.TremoloPickingGlyph(
            tremoloX,
            baseNote.Glyph.Y + offset * this.get_Scale(),
            this.Beat.TremoloSpeed
          );
          this._tremoloPicking.Renderer = this.Renderer;
          this._tremoloPicking.DoLayout();
        }
      },
      Paint: function(cx, cy, canvas) {
        var _gthis = this;
        var scoreRenderer = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.ScoreBarRenderer
        );
        var effectY;
        if (this.BeamingHelper.Direction == 0) {
          var this1 = this.MaxNote.Line;
          var this2 = 1.5;
          effectY = scoreRenderer.GetScoreY(this1, this2 * 9);
        } else {
          var this3 = this.MinNote.Line;
          effectY = scoreRenderer.GetScoreY(this3, -1.0 * 9);
        }
        var effectSpacing =
          this.BeamingHelper.Direction == 0
            ? 7 * this.get_Scale()
            : -7 * this.get_Scale();
        var this4 = this.BeatEffects;
        var effectKey = $iterator(Object.keys(this4))();
        while (effectKey.hasNext()) {
          var effectKey1 = effectKey.next();
          var g = this.BeatEffects[effectKey1];
          g.Y = effectY;
          g.X = this.Width / 2;
          g.Paint(cx + this.X, cy + this.Y, canvas);
          effectY = effectY + effectSpacing;
        }
        if (this.Renderer.get_Settings().IncludeNoteBounds) {
          var note = $iterator(this._notes)();
          while (note.hasNext()) {
            var note1 = note.next();
            if (this._noteGlyphLookup.hasOwnProperty(note1.Id)) {
              var glyph = this._noteGlyphLookup[note1.Id];
              var noteBounds = new alphaTab.rendering.utils.NoteBounds();
              noteBounds.Note = note1;
              var _tmp = new alphaTab.rendering.utils.Bounds();
              _tmp.X = cx + _gthis.X + glyph.X;
              _tmp.Y = cy + _gthis.Y + glyph.Y;
              _tmp.W = glyph.Width;
              _tmp.H = glyph.Height;
              noteBounds.NoteHeadBounds = _tmp;
              this.Renderer.ScoreRenderer.get_BoundsLookup().AddNote(
                noteBounds
              );
            }
          }
        }
        alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.prototype.Paint.call(
          this,
          cx,
          cy,
          canvas
        );
        if (this._tremoloPicking != null) {
          this._tremoloPicking.Paint(cx, cy, canvas);
        }
      },
      __class__: alphaTab.rendering.glyphs.ScoreNoteChordGlyph
    }
  );
  alphaTab.rendering.glyphs.ScoreNoteGlyphInfo = function(glyph, line) {
    this.Glyph = null;
    this.Line = 0;
    this.Glyph = glyph;
    this.Line = line;
  };
  alphaTab.rendering.glyphs.ScoreNoteGlyphInfo.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'ScoreNoteGlyphInfo'
  ];
  alphaTab.rendering.glyphs.ScoreNoteGlyphInfo.prototype = {
    __class__: alphaTab.rendering.glyphs.ScoreNoteGlyphInfo
  };
  alphaTab.rendering.glyphs.ScoreRestGlyph = function(x, y, duration) {
    alphaTab.rendering.glyphs.MusicFontGlyph.call(
      this,
      x,
      y,
      1,
      alphaTab.rendering.glyphs.ScoreRestGlyph.GetSymbol(duration)
    );
    this._duration = -4;
    this.BeamingHelper = null;
    this._duration = duration;
  };
  alphaTab.rendering.glyphs.ScoreRestGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'ScoreRestGlyph'
  ];
  alphaTab.rendering.glyphs.ScoreRestGlyph.GetSymbol = function(duration) {
    switch (duration) {
      case -4:
        return 58593;
      case -2:
        return 58594;
      case 1:
        return 58595;
      case 2:
        return 58596;
      case 4:
        return 58597;
      case 8:
        return 58598;
      case 16:
        return 58599;
      case 32:
        return 58600;
      case 64:
        return 58601;
      case 128:
        return 58602;
      case 256:
        return 58603;
      default:
        return -1;
    }
  };
  alphaTab.rendering.glyphs.ScoreRestGlyph.GetSize = function(duration) {
    switch (duration) {
      case -4:
      case -2:
      case 1:
      case 2:
      case 4:
      case 8:
      case 16:
        return 9;
      case 32:
        return 12;
      case 64:
        return 14;
      case 128:
      case 256:
        return 20;
      default:
    }
    return 10;
  };
  alphaTab.rendering.glyphs.ScoreRestGlyph.__super__ =
    alphaTab.rendering.glyphs.MusicFontGlyph;
  alphaTab.rendering.glyphs.ScoreRestGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.MusicFontGlyph.prototype,
    {
      DoLayout: function() {
        this.Width =
          alphaTab.rendering.glyphs.ScoreRestGlyph.GetSize(this._duration) *
          this.get_Scale();
      },
      UpdateBeamingHelper: function(cx) {
        if (this.BeamingHelper != null) {
          this.BeamingHelper.RegisterBeatLineX(
            'score',
            this.Beat,
            cx + this.X + this.Width / 2,
            cx + this.X + this.Width / 2
          );
        }
      },
      __class__: alphaTab.rendering.glyphs.ScoreRestGlyph
    }
  );
  alphaTab.rendering.glyphs.ScoreSlideLineGlyph = function(
    type,
    startNote,
    parent
  ) {
    alphaTab.rendering.glyphs.Glyph.call(this, 0, 0);
    this._startNote = null;
    this._type = 0;
    this._parent = null;
    this._type = type;
    this._startNote = startNote;
    this._parent = parent;
  };
  alphaTab.rendering.glyphs.ScoreSlideLineGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'ScoreSlideLineGlyph'
  ];
  alphaTab.rendering.glyphs.ScoreSlideLineGlyph.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.ScoreSlideLineGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      DoLayout: function() {
        this.Width = 0;
      },
      Paint: function(cx, cy, canvas) {
        var startNoteRenderer = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.ScoreBarRenderer
        );
        var sizeX = 12 * this.get_Scale();
        var offsetX = this.get_Scale();
        var startX;
        var startY;
        var endX;
        var endY;
        var waves = false;
        var _g = this._type;
        switch (_g) {
          case 1:
          case 2:
            startX =
              cx +
              startNoteRenderer.X +
              startNoteRenderer.GetBeatX(this._startNote.Beat, 3) +
              offsetX;
            var isUp =
              this._startNote.SlideTarget.get_RealValue() >
              this._startNote.get_RealValue();
            startY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false);
            var this1 = 0.25;
            var lineOffset = this1 * 9 * this.get_Scale();
            if (isUp) {
              startY = startY + lineOffset;
            } else {
              startY = startY - lineOffset;
            }
            if (this._startNote.SlideTarget != null) {
              var endNoteRenderer = this.Renderer.ScoreRenderer.Layout.GetRendererForBar(
                this.Renderer.Staff.get_StaveId(),
                this._startNote.SlideTarget.Beat.Voice.Bar
              );
              if (
                endNoteRenderer == null ||
                endNoteRenderer.Staff != startNoteRenderer.Staff
              ) {
                endX = cx + startNoteRenderer.X + this._parent.X;
                endY = startY;
              } else {
                endX =
                  cx +
                  endNoteRenderer.X +
                  endNoteRenderer.GetBeatX(
                    this._startNote.SlideTarget.Beat,
                    0
                  ) -
                  offsetX;
                endY =
                  cy +
                  endNoteRenderer.Y +
                  endNoteRenderer.GetNoteY(this._startNote.SlideTarget, false);
                if (isUp) {
                  endY = endY - lineOffset;
                } else {
                  endY = endY + lineOffset;
                }
              }
            } else {
              endX = cx + startNoteRenderer.X + this._parent.X;
              endY = startY;
            }
            break;
          case 3:
            endX =
              cx +
              startNoteRenderer.X +
              startNoteRenderer.GetNoteX(this._startNote, false) -
              offsetX;
            endY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false) +
              9 / 2;
            startX = endX - sizeX;
            startY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false) +
              9;
            break;
          case 4:
            endX =
              cx +
              startNoteRenderer.X +
              startNoteRenderer.GetNoteX(this._startNote, false) -
              offsetX;
            endY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false) +
              9 / 2;
            startX = endX - sizeX;
            startY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false);
            break;
          case 5:
            startX =
              cx +
              startNoteRenderer.X +
              startNoteRenderer.GetNoteX(this._startNote, true) +
              offsetX;
            startY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false) +
              9 / 2;
            endX = startX + sizeX;
            endY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false);
            break;
          case 6:
            startX =
              cx +
              startNoteRenderer.X +
              startNoteRenderer.GetNoteX(this._startNote, true) +
              offsetX;
            startY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false) +
              9 / 2;
            endX = startX + sizeX;
            endY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false) +
              9;
            break;
          case 7:
            startX =
              cx +
              startNoteRenderer.X +
              startNoteRenderer.GetNoteX(this._startNote, true);
            startY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false) -
              9 / 2;
            endX =
              cx +
              startNoteRenderer.X +
              startNoteRenderer.GetBeatX(this._startNote.Beat, 4);
            endY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false) +
              9;
            waves = true;
            break;
          case 8:
            startX =
              cx +
              startNoteRenderer.X +
              startNoteRenderer.GetNoteX(this._startNote, true);
            startY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false) +
              9 / 2;
            endX =
              cx +
              startNoteRenderer.X +
              startNoteRenderer.GetBeatX(this._startNote.Beat, 4);
            endY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false) -
              9;
            waves = true;
            break;
          default:
            return;
        }
        if (waves) {
          var b = endX - startX;
          var a = endY - startY;
          var this2 = a;
          var this3 = b;
          var c = Math.sqrt(Math.pow(this2, 2) + Math.pow(this3, 2));
          var this4 = a / c;
          var angle = js.Boot.__cast(
            Math.asin(this4) * 57.29577951308238,
            Float
          );
          canvas.BeginRotate(startX, startY, angle);
          var glyph = new alphaTab.rendering.glyphs.NoteVibratoGlyph(
            0,
            0,
            1,
            1.2
          );
          glyph.Renderer = this.Renderer;
          glyph.DoLayout();
          glyph.Width = b;
          glyph.Paint(0, 0, canvas);
          canvas.EndRotate();
        } else {
          canvas.BeginPath();
          canvas.MoveTo(startX, startY);
          canvas.LineTo(endX, endY);
          canvas.Stroke();
        }
      },
      __class__: alphaTab.rendering.glyphs.ScoreSlideLineGlyph
    }
  );
  alphaTab.rendering.glyphs.ScoreTieGlyph = function(
    startNote,
    endNote,
    forEnd
  ) {
    if (forEnd == null) {
      forEnd = false;
    }
    alphaTab.rendering.glyphs.TieGlyph.call(
      this,
      startNote == null ? null : startNote.Beat,
      endNote == null ? null : endNote.Beat,
      forEnd
    );
    this.StartNote = null;
    this.EndNote = null;
    this.StartNote = startNote;
    this.EndNote = endNote;
  };
  alphaTab.rendering.glyphs.ScoreTieGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'ScoreTieGlyph'
  ];
  alphaTab.rendering.glyphs.ScoreTieGlyph.__super__ =
    alphaTab.rendering.glyphs.TieGlyph;
  alphaTab.rendering.glyphs.ScoreTieGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.TieGlyph.prototype,
    {
      DoLayout: function() {
        alphaTab.rendering.glyphs.TieGlyph.prototype.DoLayout.call(this);
        this.YOffset = 9 / 2;
      },
      GetBeamDirection: function(beat, noteRenderer) {
        var _g = js.Boot.__cast(
          noteRenderer,
          alphaTab.rendering.ScoreBarRenderer
        ).GetBeatDirection(beat);
        if (_g == 0) {
          return 1;
        } else {
          return 0;
        }
      },
      GetStartY: function(noteRenderer, direction) {
        return noteRenderer.GetNoteY(this.StartNote, false);
      },
      GetEndY: function(noteRenderer, direction) {
        return noteRenderer.GetNoteY(this.EndNote, false);
      },
      GetStartX: function(noteRenderer) {
        return noteRenderer.GetBeatX(this.StartNote.Beat, 2);
      },
      GetEndX: function(noteRenderer) {
        return noteRenderer.GetNoteX(this.EndNote, false);
      },
      __class__: alphaTab.rendering.glyphs.ScoreTieGlyph
    }
  );
  alphaTab.rendering.glyphs.ScoreSlurGlyph = function(
    startNote,
    endNote,
    forEnd
  ) {
    if (forEnd == null) {
      forEnd = false;
    }
    alphaTab.rendering.glyphs.ScoreTieGlyph.call(
      this,
      startNote,
      endNote,
      forEnd
    );
  };
  alphaTab.rendering.glyphs.ScoreSlurGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'ScoreSlurGlyph'
  ];
  alphaTab.rendering.glyphs.ScoreSlurGlyph.__super__ =
    alphaTab.rendering.glyphs.ScoreTieGlyph;
  alphaTab.rendering.glyphs.ScoreSlurGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.ScoreTieGlyph.prototype,
    {
      GetTieHeight: function(startX, startY, endX, endY) {
        var this1 = endX - startX + 1;
        return (
          js.Boot.__cast(Math.log(this1), Float) *
          this.Renderer.get_Settings().SlurHeight
        );
      },
      __class__: alphaTab.rendering.glyphs.ScoreSlurGlyph
    }
  );
  alphaTab.rendering.glyphs.TimeSignatureGlyph = function(
    x,
    y,
    numerator,
    denominator,
    isCommon
  ) {
    alphaTab.rendering.glyphs.GlyphGroup.call(this, x, y);
    this._numerator = 0;
    this._denominator = 0;
    this._isCommon = false;
    this._numerator = numerator;
    this._denominator = denominator;
    this._isCommon = isCommon;
  };
  alphaTab.rendering.glyphs.TimeSignatureGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'TimeSignatureGlyph'
  ];
  alphaTab.rendering.glyphs.TimeSignatureGlyph.__super__ =
    alphaTab.rendering.glyphs.GlyphGroup;
  alphaTab.rendering.glyphs.TimeSignatureGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.GlyphGroup.prototype,
    {
      get_CommonY: function() {
        throw new js._Boot.HaxeError('abstract');
      },
      get_NumeratorY: function() {
        throw new js._Boot.HaxeError('abstract');
      },
      get_DenominatorY: function() {
        throw new js._Boot.HaxeError('abstract');
      },
      get_CommonScale: function() {
        throw new js._Boot.HaxeError('abstract');
      },
      get_NumberScale: function() {
        throw new js._Boot.HaxeError('abstract');
      },
      DoLayout: function() {
        if (this._isCommon && this._numerator == 2 && this._denominator == 2) {
          var common = new alphaTab.rendering.glyphs.MusicFontGlyph(
            0,
            this.get_CommonY(),
            this.get_CommonScale(),
            57483
          );
          common.Width = 14 * this.get_Scale();
          this.AddGlyph(common);
          alphaTab.rendering.glyphs.GlyphGroup.prototype.DoLayout.call(this);
        } else if (
          this._isCommon &&
          this._numerator == 4 &&
          this._denominator == 4
        ) {
          var common1 = new alphaTab.rendering.glyphs.MusicFontGlyph(
            0,
            this.get_CommonY(),
            this.get_CommonScale(),
            57482
          );
          common1.Width = 14 * this.get_Scale();
          this.AddGlyph(common1);
          alphaTab.rendering.glyphs.GlyphGroup.prototype.DoLayout.call(this);
        } else {
          var numerator = new alphaTab.rendering.glyphs.NumberGlyph(
            0,
            this.get_NumeratorY(),
            this._numerator,
            this.get_NumberScale()
          );
          var denominator = new alphaTab.rendering.glyphs.NumberGlyph(
            0,
            this.get_DenominatorY(),
            this._denominator,
            this.get_NumberScale()
          );
          this.AddGlyph(numerator);
          this.AddGlyph(denominator);
          alphaTab.rendering.glyphs.GlyphGroup.prototype.DoLayout.call(this);
          var i = 0;
          var j = this.Glyphs.length;
          while (i < j) {
            var g = this.Glyphs[i];
            g.X = (this.Width - g.Width) / 2;
            ++i;
          }
        }
      },
      __class__: alphaTab.rendering.glyphs.TimeSignatureGlyph
    }
  );
  alphaTab.rendering.glyphs.ScoreTimeSignatureGlyph = function(
    x,
    y,
    numerator,
    denominator,
    isCommon
  ) {
    alphaTab.rendering.glyphs.TimeSignatureGlyph.call(
      this,
      x,
      y,
      numerator,
      denominator,
      isCommon
    );
  };
  alphaTab.rendering.glyphs.ScoreTimeSignatureGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'ScoreTimeSignatureGlyph'
  ];
  alphaTab.rendering.glyphs.ScoreTimeSignatureGlyph.__super__ =
    alphaTab.rendering.glyphs.TimeSignatureGlyph;
  alphaTab.rendering.glyphs.ScoreTimeSignatureGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.TimeSignatureGlyph.prototype,
    {
      get_CommonY: function() {
        var renderer = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.ScoreBarRenderer
        );
        return renderer.GetScoreY(4, 0);
      },
      get_NumeratorY: function() {
        return 2 * this.get_Scale();
      },
      get_DenominatorY: function() {
        return 20 * this.get_Scale();
      },
      get_CommonScale: function() {
        return 1;
      },
      get_NumberScale: function() {
        return 1;
      },
      __class__: alphaTab.rendering.glyphs.ScoreTimeSignatureGlyph
    }
  );
  alphaTab.rendering.glyphs.ScoreWhammyBarGlyph = function(beat) {
    alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph.call(this);
    this._beat = null;
    this._beat = beat;
  };
  alphaTab.rendering.glyphs.ScoreWhammyBarGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'ScoreWhammyBarGlyph'
  ];
  alphaTab.rendering.glyphs.ScoreWhammyBarGlyph.__super__ =
    alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph;
  alphaTab.rendering.glyphs.ScoreWhammyBarGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph.prototype,
    {
      DoLayout: function() {
        var whammyMode = this.Renderer.get_Settings().DisplayMode;
        var _g = this._beat.WhammyBarType;
        switch (_g) {
          case 0:
          case 1:
          case 4:
            return;
          case 2:
          case 6:
            var endGlyphs = new alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph(
              this._beat,
              false
            );
            endGlyphs.Renderer = this.Renderer;
            var lastWhammyPoint = this._beat.WhammyBarPoints[
              this._beat.WhammyBarPoints.length - 1
            ];
            var note = $iterator(this._beat.Notes)();
            while (note.hasNext()) {
              var note1 = note.next();
              if (!note1.get_IsTieOrigin()) {
                endGlyphs.AddGlyph(
                  this.GetBendNoteValue(note1, lastWhammyPoint),
                  lastWhammyPoint.Value % 2 != 0
                );
              }
            }
            endGlyphs.DoLayout();
            this._bendNoteHeads.push(endGlyphs);
            break;
          case 3:
            if (whammyMode == 1) {
              var res = this.Renderer.get_Resources();
              var this1 = 1.5;
              var tmp =
                res.TablatureFont.Size * this1 + 6 * 2 * this.get_Scale();
              var tmp1 = this.get_Scale();
              js.Boot.__cast(
                this.Renderer,
                alphaTab.rendering.ScoreBarRenderer
              ).SimpleWhammyOverflow = tmp + 2 * tmp1;
            } else {
              var middleGlyphs = new alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph(
                this._beat,
                false
              );
              middleGlyphs.Renderer = this.Renderer;
              if (this.Renderer.get_Settings().DisplayMode == 0) {
                var middleBendPoint = this._beat.WhammyBarPoints[1];
                var note2 = $iterator(this._beat.Notes)();
                while (note2.hasNext()) {
                  var note3 = note2.next();
                  middleGlyphs.AddGlyph(
                    this.GetBendNoteValue(note3, this._beat.WhammyBarPoints[1]),
                    middleBendPoint.Value % 2 != 0
                  );
                }
              }
              middleGlyphs.DoLayout();
              this._bendNoteHeads.push(middleGlyphs);
              var endGlyphs1 = new alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph(
                this._beat,
                false
              );
              endGlyphs1.Renderer = this.Renderer;
              if (this.Renderer.get_Settings().DisplayMode == 0) {
                var lastBendPoint = this._beat.WhammyBarPoints[
                  this._beat.WhammyBarPoints.length - 1
                ];
                var note4 = $iterator(this._beat.Notes)();
                while (note4.hasNext()) {
                  var note5 = note4.next();
                  endGlyphs1.AddGlyph(
                    this.GetBendNoteValue(note5, lastBendPoint),
                    lastBendPoint.Value % 2 != 0
                  );
                }
              }
              endGlyphs1.DoLayout();
              this._bendNoteHeads.push(endGlyphs1);
            }
            break;
          case 5:
            break;
          default:
        }
        alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph.prototype.DoLayout.call(
          this
        );
      },
      Paint: function(cx, cy, canvas) {
        var beat = this._beat;
        var _g = beat.WhammyBarType;
        switch (_g) {
          case 0:
          case 1:
            return;
          default:
        }
        var whammyMode = this.Renderer.get_Settings().DisplayMode;
        var startNoteRenderer = this.Renderer.ScoreRenderer.Layout.GetRendererForBar(
          this.Renderer.Staff.get_StaveId(),
          beat.Voice.Bar
        );
        var startX =
          cx + startNoteRenderer.X + startNoteRenderer.GetBeatX(beat, 2);
        var beatDirection = this.GetBeamDirection(beat, startNoteRenderer);
        var direction = this._beat.Notes.length == 1 ? beatDirection : 0;
        var textalign = canvas.get_TextAlign();
        var i = 0;
        while (i < beat.Notes.length) {
          var note = beat.Notes[i];
          var startY =
            cy + startNoteRenderer.Y + startNoteRenderer.GetNoteY(note, true);
          if (direction == 1) {
            startY = startY + 9 * this.get_Scale();
          }
          if (i > 0 && i >= ((this._beat.Notes.length / 2) | 0)) {
            direction = 1;
          }
          var endX = cx + startNoteRenderer.X;
          if (beat.get_IsLastOfVoice()) {
            endX = endX + startNoteRenderer.Width;
          } else {
            endX = endX + startNoteRenderer.GetBeatX(beat, 4);
          }
          endX = endX - (((8 / 2) | 0) + 3) * this.get_Scale();
          var slurText = beat.WhammyStyle == 1 && i == 0 ? 'grad.' : '';
          var endNoteRenderer = null;
          if (note.get_IsTieOrigin()) {
            endNoteRenderer = this.Renderer.ScoreRenderer.Layout.GetRendererForBar(
              this.Renderer.Staff.get_StaveId(),
              note.TieDestination.Beat.Voice.Bar
            );
            if (
              endNoteRenderer != null &&
              endNoteRenderer.Staff == startNoteRenderer.Staff
            ) {
              endX =
                cx +
                endNoteRenderer.X +
                endNoteRenderer.GetBeatX(note.TieDestination.Beat, 2);
            } else {
              endNoteRenderer = null;
            }
          }
          var this1 = 0.5;
          var heightOffset = 9 * this.get_Scale() * 0.75 * this1;
          if (direction == 0) {
            heightOffset = -heightOffset;
          }
          var endValue;
          var endY;
          var _g1 = beat.WhammyBarType;
          switch (_g1) {
            case 2:
              if (i == 0) {
                this._bendNoteHeads[0].X =
                  endX - this._bendNoteHeads[0].NoteHeadOffset;
                this._bendNoteHeads[0].Y = cy + startNoteRenderer.Y;
                this._bendNoteHeads[0].Paint(0, 0, canvas);
              }
              endValue = this.GetBendNoteValue(
                note,
                beat.WhammyBarPoints[beat.WhammyBarPoints.length - 1]
              );
              if (this._bendNoteHeads[0].ContainsNoteValue(endValue)) {
                endY =
                  this._bendNoteHeads[0].GetNoteValueY(endValue, false) +
                  heightOffset;
                this.DrawBendSlur(
                  canvas,
                  startX,
                  startY,
                  endX,
                  endY,
                  direction == 1,
                  this.get_Scale(),
                  slurText
                );
              } else if (
                endNoteRenderer != null &&
                ((note.get_IsTieOrigin() &&
                  note.TieDestination.Beat.get_HasWhammyBar()) ||
                  note.Beat.IsContinuedWhammy)
              ) {
                endY =
                  cy +
                  endNoteRenderer.Y +
                  endNoteRenderer.GetNoteY(note.TieDestination, true);
                this.DrawBendSlur(
                  canvas,
                  startX,
                  startY,
                  endX,
                  endY,
                  direction == 1,
                  this.get_Scale(),
                  slurText
                );
              } else if (note.get_IsTieOrigin()) {
                if (endNoteRenderer == null) {
                  endY = startY;
                } else {
                  endY =
                    cy +
                    endNoteRenderer.Y +
                    endNoteRenderer.GetNoteY(note.TieDestination, true);
                }
                alphaTab.rendering.glyphs.TieGlyph.PaintTie(
                  canvas,
                  this.get_Scale(),
                  startX,
                  startY,
                  endX,
                  endY,
                  beatDirection == 1,
                  22,
                  4
                );
                canvas.Fill();
              }
              break;
            case 3:
              if (whammyMode == 1) {
                if (i == 0) {
                  var simpleStartX =
                    cx +
                    startNoteRenderer.X +
                    startNoteRenderer.GetBeatX(this._beat, 1) -
                    2 * this.get_Scale();
                  var simpleEndX =
                    cx +
                    startNoteRenderer.X +
                    startNoteRenderer.GetBeatX(this._beat, 3) +
                    2 * this.get_Scale();
                  var middleX = (simpleStartX + simpleEndX) / 2;
                  var text = Std.string(
                    ((this._beat.WhammyBarPoints[1].Value -
                      this._beat.WhammyBarPoints[0].Value) /
                      4) |
                      0
                  );
                  canvas.set_Font(this.Renderer.get_Resources().TablatureFont);
                  canvas.FillText(text, middleX, cy + this.Y);
                  var simpleStartY =
                    cy + this.Y + canvas.get_Font().Size + 2 * this.get_Scale();
                  var simpleEndY = simpleStartY + 6 * 2 * this.get_Scale();
                  if (
                    this._beat.WhammyBarPoints[1].Value >
                    this._beat.WhammyBarPoints[0].Value
                  ) {
                    canvas.MoveTo(simpleStartX, simpleEndY);
                    canvas.LineTo(middleX, simpleStartY);
                    canvas.LineTo(simpleEndX, simpleEndY);
                  } else {
                    canvas.MoveTo(simpleStartX, simpleStartY);
                    canvas.LineTo(middleX, simpleEndY);
                    canvas.LineTo(simpleEndX, simpleStartY);
                  }
                  canvas.Stroke();
                }
                if (note.get_IsTieOrigin()) {
                  if (endNoteRenderer == null) {
                    endY = startY;
                  } else {
                    endY =
                      cy +
                      endNoteRenderer.Y +
                      endNoteRenderer.GetNoteY(note.TieDestination, true);
                  }
                  alphaTab.rendering.glyphs.TieGlyph.PaintTie(
                    canvas,
                    this.get_Scale(),
                    startX,
                    startY,
                    endX,
                    endY,
                    beatDirection == 1,
                    22,
                    4
                  );
                  canvas.Fill();
                }
              } else {
                var middleX1 = (startX + endX) / 2;
                this._bendNoteHeads[0].X =
                  middleX1 - this._bendNoteHeads[0].NoteHeadOffset;
                this._bendNoteHeads[0].Y = cy + startNoteRenderer.Y;
                this._bendNoteHeads[0].Paint(0, 0, canvas);
                var middleValue = this.GetBendNoteValue(
                  note,
                  beat.WhammyBarPoints[1]
                );
                var middleY =
                  this._bendNoteHeads[0].GetNoteValueY(middleValue, false) +
                  heightOffset;
                this.DrawBendSlur(
                  canvas,
                  startX,
                  startY,
                  middleX1,
                  middleY,
                  direction == 1,
                  this.get_Scale(),
                  slurText
                );
                this._bendNoteHeads[1].X =
                  endX - this._bendNoteHeads[1].NoteHeadOffset;
                this._bendNoteHeads[1].Y = cy + startNoteRenderer.Y;
                this._bendNoteHeads[1].Paint(0, 0, canvas);
                endValue = this.GetBendNoteValue(
                  note,
                  beat.WhammyBarPoints[beat.WhammyBarPoints.length - 1]
                );
                endY =
                  this._bendNoteHeads[1].GetNoteValueY(endValue, false) +
                  heightOffset;
                this.DrawBendSlur(
                  canvas,
                  middleX1,
                  middleY,
                  endX,
                  endY,
                  direction == 1,
                  this.get_Scale(),
                  slurText
                );
              }
              break;
            case 4:
              if (note.get_IsTieOrigin()) {
                if (endNoteRenderer == null) {
                  endY = startY;
                } else {
                  endY =
                    cy +
                    endNoteRenderer.Y +
                    endNoteRenderer.GetNoteY(note.TieDestination, true);
                }
                alphaTab.rendering.glyphs.TieGlyph.PaintTie(
                  canvas,
                  this.get_Scale(),
                  startX,
                  startY,
                  endX,
                  endY,
                  beatDirection == 1,
                  22,
                  4
                );
                canvas.Fill();
              }
              break;
            case 5:
            case 6:
              var preX =
                cx +
                startNoteRenderer.X +
                startNoteRenderer.GetBeatX(note.Beat, 0);
              preX =
                preX +
                js.Boot.__cast(
                  startNoteRenderer.GetBeatContainer(note.Beat).PreNotes,
                  alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph
                ).get_PrebendNoteHeadOffset();
              var preY = cy + startNoteRenderer.Y;
              var this2 = startNoteRenderer.AccidentalHelper.GetNoteLineForValue(
                note.get_DisplayValue() -
                  ((note.Beat.WhammyBarPoints[0].Value / 2) | 0),
                false
              );
              var preY1 =
                preY + startNoteRenderer.GetScoreY(this2, 0) + heightOffset;
              this.DrawBendSlur(
                canvas,
                preX,
                preY1,
                startX,
                startY,
                direction == 1,
                this.get_Scale(),
                slurText
              );
              if (this._bendNoteHeads.length > 0) {
                this._bendNoteHeads[0].X =
                  endX - this._bendNoteHeads[0].NoteHeadOffset;
                this._bendNoteHeads[0].Y = cy + startNoteRenderer.Y;
                this._bendNoteHeads[0].Paint(0, 0, canvas);
                endValue = this.GetBendNoteValue(
                  note,
                  beat.WhammyBarPoints[beat.WhammyBarPoints.length - 1]
                );
                endY =
                  this._bendNoteHeads[0].GetNoteValueY(endValue, false) +
                  heightOffset;
                this.DrawBendSlur(
                  canvas,
                  startX,
                  startY,
                  endX,
                  endY,
                  direction == 1,
                  this.get_Scale(),
                  slurText
                );
              }
              break;
            default:
          }
          ++i;
        }
        canvas.set_TextAlign(textalign);
      },
      GetBendNoteValue: function(note, bendPoint) {
        return note.get_DisplayValueWithoutBend() + ((bendPoint.Value / 2) | 0);
      },
      __class__: alphaTab.rendering.glyphs.ScoreWhammyBarGlyph
    }
  );
  alphaTab.rendering.glyphs.SpacingGlyph = function(x, y, width) {
    alphaTab.rendering.glyphs.Glyph.call(this, x, y);
    this.Width = width;
  };
  alphaTab.rendering.glyphs.SpacingGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'SpacingGlyph'
  ];
  alphaTab.rendering.glyphs.SpacingGlyph.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.SpacingGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      __class__: alphaTab.rendering.glyphs.SpacingGlyph
    }
  );
  alphaTab.rendering.glyphs.TabBeatContainerGlyph = function(
    beat,
    voiceContainer
  ) {
    alphaTab.rendering.glyphs.BeatContainerGlyph.call(
      this,
      beat,
      voiceContainer
    );
    this._bend = null;
    this._effectSlurs = null;
  };
  alphaTab.rendering.glyphs.TabBeatContainerGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'TabBeatContainerGlyph'
  ];
  alphaTab.rendering.glyphs.TabBeatContainerGlyph.__super__ =
    alphaTab.rendering.glyphs.BeatContainerGlyph;
  alphaTab.rendering.glyphs.TabBeatContainerGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.BeatContainerGlyph.prototype,
    {
      DoLayout: function() {
        var this1 = [];
        this._effectSlurs = this1;
        alphaTab.rendering.glyphs.BeatContainerGlyph.prototype.DoLayout.call(
          this
        );
        if (this._bend != null) {
          this._bend.Renderer = this.Renderer;
          this._bend.DoLayout();
          this.UpdateWidth();
        }
      },
      CreateTies: function(n) {
        if (!n.IsVisible) {
          return;
        }
        var renderer = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.TabBarRenderer
        );
        if (
          n.get_IsTieOrigin() &&
          renderer.ShowTiedNotes &&
          n.TieDestination.IsVisible
        ) {
          var tie = new alphaTab.rendering.glyphs.TabTieGlyph(
            n,
            n.TieDestination,
            false,
            false
          );
          this.Ties.push(tie);
        }
        if (n.IsTieDestination && renderer.ShowTiedNotes) {
          var tie1 = new alphaTab.rendering.glyphs.TabTieGlyph(
            n.TieOrigin,
            n,
            false,
            true
          );
          this.Ties.push(tie1);
        }
        if (n.IsEffectSlurOrigin && n.EffectSlurDestination != null) {
          var expanded = false;
          var slur = $iterator(this._effectSlurs)();
          while (slur.hasNext()) {
            var slur1 = slur.next();
            if (slur1.TryExpand(n, n.EffectSlurDestination, false, false)) {
              expanded = true;
              break;
            }
          }
          if (!expanded) {
            var effectSlur = new alphaTab.rendering.glyphs.TabSlurGlyph(
              n,
              n.EffectSlurDestination,
              false,
              false
            );
            this._effectSlurs.push(effectSlur);
            this.Ties.push(effectSlur);
          }
        }
        if (n.get_IsEffectSlurDestination() && n.EffectSlurOrigin != null) {
          var expanded1 = false;
          var slur2 = $iterator(this._effectSlurs)();
          while (slur2.hasNext()) {
            var slur3 = slur2.next();
            if (slur3.TryExpand(n.EffectSlurOrigin, n, false, true)) {
              expanded1 = true;
              break;
            }
          }
          if (!expanded1) {
            var effectSlur1 = new alphaTab.rendering.glyphs.TabSlurGlyph(
              n.EffectSlurOrigin,
              n,
              false,
              true
            );
            this._effectSlurs.push(effectSlur1);
            this.Ties.push(effectSlur1);
          }
        }
        if (n.SlideType != 0) {
          var l = new alphaTab.rendering.glyphs.TabSlideLineGlyph(
            n.SlideType,
            n,
            this
          );
          this.Ties.push(l);
        }
        if (n.get_HasBend()) {
          if (this._bend == null) {
            this._bend = new alphaTab.rendering.glyphs.TabBendGlyph(n.Beat);
            this._bend.Renderer = this.Renderer;
            this.Ties.push(this._bend);
          }
          this._bend.AddBends(n);
        }
      },
      __class__: alphaTab.rendering.glyphs.TabBeatContainerGlyph
    }
  );
  alphaTab.rendering.glyphs.TabBeatGlyph = function() {
    alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.call(this);
  };
  alphaTab.rendering.glyphs.TabBeatGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'TabBeatGlyph'
  ];
  alphaTab.rendering.glyphs.TabBeatGlyph.__super__ =
    alphaTab.rendering.glyphs.BeatOnNoteGlyphBase;
  alphaTab.rendering.glyphs.TabBeatGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.prototype,
    {
      DoLayout: function() {
        var tabRenderer = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.TabBarRenderer
        );
        if (!this.Container.Beat.get_IsRest()) {
          var isGrace =
            this.Renderer.get_Settings().SmallGraceTabNotes &&
            this.Container.Beat.GraceType != 0;
          this.NoteNumbers = new alphaTab.rendering.glyphs.TabNoteChordGlyph(
            0,
            0,
            isGrace
          );
          this.NoteNumbers.Beat = this.Container.Beat;
          this.NoteNumbers.BeamingHelper = this.BeamingHelper;
          var note = $iterator(this.Container.Beat.Notes)();
          while (note.hasNext()) {
            var note1 = note.next();
            if (note1.IsVisible) {
              this.CreateNoteGlyph(note1);
            }
          }
          this.AddGlyph(this.NoteNumbers);
          if (this.Container.Beat.get_HasWhammyBar()) {
            var whammy = new alphaTab.rendering.glyphs.TabWhammyBarGlyph(
              this.Container.Beat
            );
            whammy.Renderer = this.Renderer;
            whammy.DoLayout();
            this.Container.Ties.push(whammy);
          }
          if (
            this.Container.Beat.get_IsTremolo() &&
            !this.NoteNumbers.BeatEffects.hasOwnProperty('Tremolo')
          ) {
            var offset = 0;
            var speed = this.Container.Beat.TremoloSpeed;
            switch (speed) {
              case 8:
                offset = 0;
                break;
              case 16:
                offset = 5;
                break;
              case 32:
                offset = 10;
                break;
              default:
            }
            this.NoteNumbers.BeatEffects[
              'Tremolo'
            ] = new alphaTab.rendering.glyphs.TremoloPickingGlyph(
              5 * this.get_Scale(),
              offset * this.get_Scale(),
              this.Container.Beat.TremoloSpeed
            );
          }
          if (this.Container.Beat.Dots > 0 && tabRenderer.RenderRhythm) {
            this.AddGlyph(
              new alphaTab.rendering.glyphs.SpacingGlyph(
                0,
                0,
                5 * this.get_Scale()
              )
            );
            var i = 0;
            while (i < this.Container.Beat.Dots) {
              var this1 = 1.5;
              this.AddGlyph(
                new alphaTab.rendering.glyphs.CircleGlyph(
                  0,
                  tabRenderer.get_LineOffset() *
                    tabRenderer.Bar.Staff.Tuning.length +
                    tabRenderer.RhythmHeight,
                  this1 * this.get_Scale()
                )
              );
              ++i;
            }
          }
        } else {
          var line = 0;
          var offset1 = 0;
          var _g = this.Container.Beat.Duration;
          switch (_g) {
            case -4:
              line = 3;
              break;
            case -2:
              line = 3;
              break;
            case 1:
              line = 2;
              break;
            case 2:
              line = 3;
              break;
            case 4:
              line = 3;
              break;
            case 8:
              line = 2;
              offset1 = 5;
              break;
            case 16:
              line = 2;
              offset1 = 5;
              break;
            case 32:
              line = 3;
              break;
            case 64:
              line = 3;
              break;
            case 128:
              line = 3;
              break;
            case 256:
              line = 3;
              break;
            default:
          }
          var this2 = offset1;
          var y = tabRenderer.GetTabY(line, this2);
          this.RestGlyph = new alphaTab.rendering.glyphs.TabRestGlyph(
            0,
            y,
            tabRenderer.ShowRests,
            this.Container.Beat.Duration
          );
          this.RestGlyph.Beat = this.Container.Beat;
          this.RestGlyph.BeamingHelper = this.BeamingHelper;
          this.AddGlyph(this.RestGlyph);
          if (this.Container.Beat.Dots > 0 && tabRenderer.ShowRests) {
            this.AddGlyph(
              new alphaTab.rendering.glyphs.SpacingGlyph(
                0,
                0,
                5 * this.get_Scale()
              )
            );
            var i1 = 0;
            while (i1 < this.Container.Beat.Dots) {
              var this3 = 1.5;
              this.AddGlyph(
                new alphaTab.rendering.glyphs.CircleGlyph(
                  0,
                  y,
                  this3 * this.get_Scale()
                )
              );
              ++i1;
            }
          }
        }
        if (this.Glyphs == null) {
          return;
        }
        var w = 0;
        var i2 = 0;
        var j = this.Glyphs.length;
        while (i2 < j) {
          var g = this.Glyphs[i2];
          g.X = w;
          g.Renderer = this.Renderer;
          g.DoLayout();
          w = w + g.Width;
          ++i2;
        }
        this.Width = w;
        if (this.Container.Beat.IsEmpty) {
          this.CenterX = this.Width / 2;
        } else if (this.Container.Beat.get_IsRest()) {
          this.CenterX = this.RestGlyph.X + this.RestGlyph.Width / 2;
        } else {
          this.CenterX =
            this.NoteNumbers.X + this.NoteNumbers.NoteStringWidth / 2;
        }
      },
      UpdateBeamingHelper: function() {
        if (!this.Container.Beat.get_IsRest()) {
          this.NoteNumbers.UpdateBeamingHelper(this.Container.X + this.X);
        } else {
          this.RestGlyph.UpdateBeamingHelper(this.Container.X + this.X);
        }
      },
      CreateNoteGlyph: function(n) {
        var tr = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.TabBarRenderer
        );
        var noteNumberGlyph = new alphaTab.rendering.glyphs.NoteNumberGlyph(
          0,
          0,
          n
        );
        var l = n.Beat.Voice.Bar.Staff.Tuning.length - n.String + 1;
        var this1 = l;
        noteNumberGlyph.Y = tr.GetTabY(this1, -2);
        noteNumberGlyph.Renderer = this.Renderer;
        noteNumberGlyph.DoLayout();
        this.NoteNumbers.AddNoteGlyph(noteNumberGlyph, n);
      },
      __class__: alphaTab.rendering.glyphs.TabBeatGlyph
    }
  );
  alphaTab.rendering.glyphs.TabBeatPreNotesGlyph = function() {
    alphaTab.rendering.glyphs.BeatGlyphBase.call(this);
  };
  alphaTab.rendering.glyphs.TabBeatPreNotesGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'TabBeatPreNotesGlyph'
  ];
  alphaTab.rendering.glyphs.TabBeatPreNotesGlyph.__super__ =
    alphaTab.rendering.glyphs.BeatGlyphBase;
  alphaTab.rendering.glyphs.TabBeatPreNotesGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.BeatGlyphBase.prototype,
    {
      DoLayout: function() {
        if (
          this.Container.Beat.BrushType != 0 &&
          !this.Container.Beat.get_IsRest()
        ) {
          this.AddGlyph(
            new alphaTab.rendering.glyphs.TabBrushGlyph(this.Container.Beat)
          );
          this.AddGlyph(
            new alphaTab.rendering.glyphs.SpacingGlyph(
              0,
              0,
              4 * this.get_Scale()
            )
          );
        }
        alphaTab.rendering.glyphs.BeatGlyphBase.prototype.DoLayout.call(this);
      },
      __class__: alphaTab.rendering.glyphs.TabBeatPreNotesGlyph
    }
  );
  alphaTab.rendering.glyphs.TabBendGlyph = function(beat) {
    alphaTab.rendering.glyphs.Glyph.call(this, 0, 0);
    this._beat = null;
    this._notes = null;
    this._renderPoints = null;
    this._preBendMinValue = 0;
    this._bendMiddleMinValue = 0;
    this._bendEndMinValue = 0;
    this._bendEndContinuedMinValue = 0;
    this._releaseMinValue = 0;
    this._releaseContinuedMinValue = 0;
    this._maxBendValue = 0;
    this._beat = beat;
    var this1 = [];
    this._notes = this1;
    var this2 = {};
    this._renderPoints = this2;
    this._preBendMinValue = -1;
    this._bendMiddleMinValue = -1;
    this._bendEndMinValue = -1;
    this._bendEndContinuedMinValue = -1;
    this._releaseMinValue = -1;
    this._releaseContinuedMinValue = -1;
    this._maxBendValue = -1;
  };
  alphaTab.rendering.glyphs.TabBendGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'TabBendGlyph'
  ];
  alphaTab.rendering.glyphs.TabBendGlyph.GetFractionSign = function(steps) {
    switch (steps) {
      case 1:
        return 'Â¼';
      case 2:
        return 'Â½';
      case 3:
        return 'Â¾';
      default:
        return Std.string(steps) + '/ 4';
    }
  };
  alphaTab.rendering.glyphs.TabBendGlyph.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.TabBendGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      AddBends: function(note) {
        this._notes.push(note);
        var renderPoints = this.CreateRenderingPoints(note);
        this._renderPoints[note.Id] = renderPoints;
        if (
          this._maxBendValue == -1 ||
          this._maxBendValue < note.MaxBendPoint.Value
        ) {
          this._maxBendValue = note.MaxBendPoint.Value;
        }
        var value;
        var _g = note.BendType;
        switch (_g) {
          case 2:
            value = renderPoints[1].Value;
            if (note.get_IsTieOrigin()) {
              if (
                this._bendEndContinuedMinValue == -1 ||
                value < this._bendEndContinuedMinValue
              ) {
                this._bendEndContinuedMinValue = value;
              }
            } else if (
              this._bendEndMinValue == -1 ||
              value < this._bendEndMinValue
            ) {
              this._bendEndMinValue = value;
            }
            break;
          case 3:
            value = renderPoints[1].Value;
            if (note.get_IsTieOrigin()) {
              if (
                this._releaseContinuedMinValue == -1 ||
                value < this._releaseContinuedMinValue
              ) {
                this._releaseContinuedMinValue = value;
              }
            } else if (
              value > 0 &&
              (this._releaseMinValue == -1 || value < this._releaseMinValue)
            ) {
              this._releaseMinValue = value;
            }
            break;
          case 4:
            value = renderPoints[1].Value;
            if (
              this._bendMiddleMinValue == -1 ||
              value < this._bendMiddleMinValue
            ) {
              this._bendMiddleMinValue = value;
            }
            value = renderPoints[2].Value;
            if (note.get_IsTieOrigin()) {
              if (
                this._releaseContinuedMinValue == -1 ||
                value < this._releaseContinuedMinValue
              ) {
                this._releaseContinuedMinValue = value;
              }
            } else if (
              value > 0 &&
              (this._releaseMinValue == -1 || value < this._releaseMinValue)
            ) {
              this._releaseMinValue = value;
            }
            break;
          case 6:
            value = renderPoints[0].Value;
            if (this._preBendMinValue == -1 || value < this._preBendMinValue) {
              this._preBendMinValue = value;
            }
            break;
          case 7:
            value = renderPoints[0].Value;
            if (this._preBendMinValue == -1 || value < this._preBendMinValue) {
              this._preBendMinValue = value;
            }
            value = renderPoints[1].Value;
            if (note.get_IsTieOrigin()) {
              if (
                this._bendEndContinuedMinValue == -1 ||
                value < this._bendEndContinuedMinValue
              ) {
                this._bendEndContinuedMinValue = value;
              }
            } else if (
              this._bendEndMinValue == -1 ||
              value < this._bendEndMinValue
            ) {
              this._bendEndMinValue = value;
            }
            break;
          case 8:
            value = renderPoints[0].Value;
            if (this._preBendMinValue == -1 || value < this._preBendMinValue) {
              this._preBendMinValue = value;
            }
            value = renderPoints[1].Value;
            if (note.get_IsTieOrigin()) {
              if (
                this._releaseContinuedMinValue == -1 ||
                value < this._releaseContinuedMinValue
              ) {
                this._releaseContinuedMinValue = value;
              }
            } else if (
              value > 0 &&
              (this._releaseMinValue == -1 || value < this._releaseMinValue)
            ) {
              this._releaseMinValue = value;
            }
            break;
          default:
        }
      },
      DoLayout: function() {
        alphaTab.rendering.glyphs.Glyph.prototype.DoLayout.call(this);
        var bendHeight = this._maxBendValue * 6 * this.get_Scale();
        this.Renderer.RegisterOverflowTop(bendHeight);
        var value;
        var note = $iterator(this._notes)();
        while (note.hasNext()) {
          var note1 = note.next();
          var renderPoints = this._renderPoints[note1.Id];
          var _g = note1.BendType;
          switch (_g) {
            case 2:
              var tmp = note1.get_IsTieOrigin()
                ? this._bendEndContinuedMinValue
                : this._bendEndMinValue;
              renderPoints[1].LineValue = tmp;
              break;
            case 3:
              if (note1.get_IsTieOrigin()) {
                value = this._releaseContinuedMinValue;
              } else {
                value = this._releaseMinValue;
              }
              if (value >= 0) {
                renderPoints[1].LineValue = value;
              }
              break;
            case 4:
              renderPoints[1].LineValue = this._bendMiddleMinValue;
              if (note1.get_IsTieOrigin()) {
                value = this._releaseContinuedMinValue;
              } else {
                value = this._releaseMinValue;
              }
              if (value >= 0) {
                renderPoints[2].LineValue = value;
              }
              break;
            case 6:
              renderPoints[0].LineValue = this._preBendMinValue;
              break;
            case 7:
              renderPoints[0].LineValue = this._preBendMinValue;
              var tmp1 = note1.get_IsTieOrigin()
                ? this._bendEndContinuedMinValue
                : this._bendEndMinValue;
              renderPoints[1].LineValue = tmp1;
              break;
            case 8:
              renderPoints[0].LineValue = this._preBendMinValue;
              if (note1.get_IsTieOrigin()) {
                value = this._releaseContinuedMinValue;
              } else {
                value = this._releaseMinValue;
              }
              if (value >= 0) {
                renderPoints[1].LineValue = value;
              }
              break;
            default:
          }
        }
        this.Width = 0;
        var comparison = function(a, b) {
          if (a.get_IsStringed()) {
            return a.String - b.String;
          }
          return a.get_RealValue() - b.get_RealValue();
        };
        this._notes.sort(function(a1, b1) {
          return comparison(a1, b1);
        });
      },
      CreateRenderingPoints: function(note) {
        var this1 = [];
        var renderingPoints = this1;
        var _g = note.BendType;
        switch (_g) {
          case 1:
            var bendPoint = $iterator(note.BendPoints)();
            while (bendPoint.hasNext()) {
              var bendPoint1 = bendPoint.next();
              renderingPoints.push(
                new alphaTab.rendering.glyphs.TabBendRenderPoint(
                  bendPoint1.Offset,
                  bendPoint1.Value
                )
              );
            }
            break;
          case 4:
            renderingPoints.push(
              new alphaTab.rendering.glyphs.TabBendRenderPoint(
                0,
                note.BendPoints[0].Value
              )
            );
            renderingPoints.push(
              new alphaTab.rendering.glyphs.TabBendRenderPoint(
                (60 / 2) | 0,
                note.BendPoints[1].Value
              )
            );
            renderingPoints.push(
              new alphaTab.rendering.glyphs.TabBendRenderPoint(
                60,
                note.BendPoints[3].Value
              )
            );
            break;
          case 2:
          case 3:
          case 5:
          case 6:
          case 7:
          case 8:
            renderingPoints.push(
              new alphaTab.rendering.glyphs.TabBendRenderPoint(
                0,
                note.BendPoints[0].Value
              )
            );
            renderingPoints.push(
              new alphaTab.rendering.glyphs.TabBendRenderPoint(
                60,
                note.BendPoints[1].Value
              )
            );
            break;
          default:
        }
        return renderingPoints;
      },
      Paint: function(cx, cy, canvas) {
        var color = canvas.get_Color();
        if (this._notes.length > 1) {
          canvas.set_Color(this.Renderer.get_Resources().SecondaryGlyphColor);
        }
        var note = $iterator(this._notes)();
        while (note.hasNext()) {
          var note1 = note.next();
          var renderPoints = this._renderPoints[note1.Id];
          var startNoteRenderer = this.Renderer;
          var endNote = note1;
          var isMultiBeatBend = false;
          var endNoteRenderer;
          var endNoteHasBend = false;
          var slurText = note1.BendStyle == 1 ? 'grad.' : '';
          var endBeat = null;
          while (endNote.get_IsTieOrigin()) {
            var nextNote = endNote.TieDestination;
            endNoteRenderer = this.Renderer.ScoreRenderer.Layout.GetRendererForBar(
              this.Renderer.Staff.get_StaveId(),
              nextNote.Beat.Voice.Bar
            );
            if (
              endNoteRenderer == null ||
              startNoteRenderer.Staff != endNoteRenderer.Staff
            ) {
              break;
            }
            endNote = nextNote;
            isMultiBeatBend = true;
            if (
              endNote.get_HasBend() ||
              !this.Renderer.get_Settings().ExtendBendArrowsOnTiedNotes
            ) {
              endNoteHasBend = true;
              break;
            }
          }
          endBeat = endNote.Beat;
          endNoteRenderer = this.Renderer.ScoreRenderer.Layout.GetRendererForBar(
            this.Renderer.Staff.get_StaveId(),
            endBeat.Voice.Bar
          );
          if (
            endBeat.get_IsLastOfVoice() &&
            !endNote.get_HasBend() &&
            this.Renderer.get_Settings().ExtendBendArrowsOnTiedNotes
          ) {
            endBeat = null;
          }
          var startX = 0;
          var endX = 0;
          var topY = cy + startNoteRenderer.Y;
          var bottomY =
            cy + startNoteRenderer.Y + startNoteRenderer.GetNoteY(note1, false);
          startX = cx + startNoteRenderer.X;
          if (renderPoints[0].Value > 0 || note1.IsContinuedBend) {
            startX = startX + startNoteRenderer.GetBeatX(note1.Beat, 2);
          } else {
            startX = startX + startNoteRenderer.GetNoteX(note1, true);
          }
          if (
            endBeat == null ||
            (endBeat.get_IsLastOfVoice() && !endNoteHasBend)
          ) {
            endX =
              cx +
              endNoteRenderer.X +
              endNoteRenderer.get_PostBeatGlyphsStart();
          } else if (endNoteHasBend || endBeat.NextBeat == null) {
            endX =
              cx + endNoteRenderer.X + endNoteRenderer.GetBeatX(endBeat, 2);
          } else if (note1.BendType == 5) {
            endX =
              cx +
              endNoteRenderer.X +
              endNoteRenderer.GetBeatX(endBeat.NextBeat, 1);
          } else {
            endX =
              cx +
              endNoteRenderer.X +
              endNoteRenderer.GetBeatX(endBeat.NextBeat, 0);
          }
          if (!isMultiBeatBend) {
            endX = endX - 6 * this.get_Scale();
          }
          var width = endX - startX;
          var dX = width / 60;
          canvas.BeginPath();
          var i = 0;
          var j = renderPoints.length - 1;
          while (i < j) {
            var firstPt = renderPoints[i];
            var secondPt = renderPoints[i + 1];
            if (i == 0 && firstPt.Value != 0 && !note1.IsTieDestination) {
              this.PaintBend(
                note1,
                new alphaTab.rendering.glyphs.TabBendRenderPoint(0, 0),
                firstPt,
                startX,
                topY,
                dX,
                slurText,
                canvas
              );
            }
            if (note1.BendType != 6) {
              this.PaintBend(
                note1,
                firstPt,
                secondPt,
                startX,
                topY,
                dX,
                slurText,
                canvas
              );
            } else if (
              note1.get_IsTieOrigin() &&
              note1.TieDestination.get_HasBend()
            ) {
              var _tmp = new alphaTab.rendering.glyphs.TabBendRenderPoint(
                60,
                firstPt.Value
              );
              _tmp.LineValue = firstPt.LineValue;
              this.PaintBend(
                note1,
                firstPt,
                _tmp,
                startX,
                topY,
                dX,
                slurText,
                canvas
              );
            }
            ++i;
          }
          canvas.set_Color(color);
        }
      },
      PaintBend: function(
        note,
        firstPt,
        secondPt,
        cx,
        cy,
        dX,
        slurText,
        canvas
      ) {
        var r = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.TabBarRenderer
        );
        var res = this.Renderer.get_Resources();
        var overflowOffset = r.get_LineOffset() / 2;
        var x1 = cx + dX * firstPt.Offset;
        var bendValueHeight = 6 * this.get_Scale();
        var y1 = cy - bendValueHeight * firstPt.LineValue;
        if (firstPt.Value == 0) {
          if (secondPt.Offset == firstPt.Offset) {
            y1 = y1 + r.GetNoteY(note.Beat.MaxStringNote, true);
          } else {
            y1 = y1 + r.GetNoteY(note, false);
          }
        } else {
          y1 = y1 + overflowOffset;
        }
        var x2 = cx + dX * secondPt.Offset;
        var y2 = cy - bendValueHeight * secondPt.LineValue;
        if (secondPt.LineValue == 0) {
          y2 = y2 + r.GetNoteY(note, false);
        } else {
          y2 = y2 + overflowOffset;
        }
        var arrowOffset = 0;
        var arrowSize = 6 * this.get_Scale();
        if (secondPt.Value > firstPt.Value) {
          if (y2 + arrowSize > y1) {
            y2 = y1 - arrowSize;
          }
          canvas.BeginPath();
          canvas.MoveTo(x2, y2);
          var this1 = 0.5;
          canvas.LineTo(x2 - arrowSize * this1, y2 + arrowSize);
          var this2 = 0.5;
          canvas.LineTo(x2 + arrowSize * this2, y2 + arrowSize);
          canvas.ClosePath();
          canvas.Fill();
          arrowOffset = arrowSize;
        } else if (secondPt.Value != firstPt.Value) {
          if (y2 < y1) {
            y2 = y1 + arrowSize;
          }
          canvas.BeginPath();
          canvas.MoveTo(x2, y2);
          var this3 = 0.5;
          canvas.LineTo(x2 - arrowSize * this3, y2 - arrowSize);
          var this4 = 0.5;
          canvas.LineTo(x2 + arrowSize * this4, y2 - arrowSize);
          canvas.ClosePath();
          canvas.Fill();
          arrowOffset = -arrowSize;
        }
        canvas.Stroke();
        if (firstPt.Value == secondPt.Value) {
          if (firstPt.LineValue > 0) {
            var dashX = x2;
            var dashSize = 3 * this.get_Scale();
            var end = x1 + dashSize;
            var dashes = (dashX - x1) / (dashSize * 2);
            if (dashes < 1) {
              canvas.MoveTo(dashX, y1);
              canvas.LineTo(x1, y1);
            } else {
              while (dashX > end) {
                canvas.MoveTo(dashX, y1);
                canvas.LineTo(dashX - dashSize, y1);
                dashX = dashX - dashSize * 2;
              }
            }
            canvas.Stroke();
          }
        } else if (x2 > x1) {
          canvas.MoveTo(x1, y1);
          canvas.BezierCurveTo((x1 + x2) / 2, y1, x2, y1, x2, y2 + arrowOffset);
          canvas.Stroke();
        } else {
          canvas.MoveTo(x1, y1);
          canvas.LineTo(x2, y2);
          canvas.Stroke();
        }
        if (
          !(slurText == null || slurText.length == 0) &&
          firstPt.Offset < secondPt.Offset
        ) {
          canvas.set_Font(res.GraceFont);
          var size = canvas.MeasureText(slurText);
          var y;
          var x;
          if (y1 > y2) {
            var h = Math.abs(y1 - y2);
            var this5 = 1.3;
            if (h > canvas.get_Font().Size * this5) {
              y = y1 - h / 2;
            } else {
              y = y1;
            }
            x = (x1 + x2 - size) / 2;
          } else {
            y = y1;
            x = x2 - size;
          }
          canvas.FillText(slurText, x, y);
        }
        if (secondPt.Value != 0 && firstPt.Value != secondPt.Value) {
          var dV = secondPt.Value;
          var up = secondPt.Value > firstPt.Value;
          dV = Math.abs(dV);
          var s = '';
          if (dV == 4) {
            s = 'full';
            dV = dV - 4;
          } else if (dV >= 4 || dV <= -4) {
            var steps = (dV / 4) | 0;
            s = s + Std.string(steps);
            dV = dV - steps * 4;
          }
          if (dV > 0) {
            s = s + alphaTab.rendering.glyphs.TabBendGlyph.GetFractionSign(dV);
          }
          if (s != '') {
            y2 = cy - bendValueHeight * secondPt.Value;
            var startY = y2;
            if (!up) {
              var this6 = 1;
              startY = y1 + (Math.abs(y2 - y1) * this6) / 3;
            }
            canvas.set_Font(res.TablatureFont);
            var size1 = canvas.MeasureText(s);
            var this7 = 0.5;
            var y3 =
              startY - res.TablatureFont.Size * this7 - 2 * this.get_Scale();
            var x3 = x2 - size1 / 2;
            canvas.FillText(s, x3, y3);
          }
        }
      },
      __class__: alphaTab.rendering.glyphs.TabBendGlyph
    }
  );
  alphaTab.rendering.glyphs.TabBendRenderPoint = function(offset, value) {
    if (value == null) {
      value = 0;
    }
    if (offset == null) {
      offset = 0;
    }
    alphaTab.model.BendPoint.call(this, offset, value);
    this.LineValue = 0;
    this.LineValue = value;
  };
  alphaTab.rendering.glyphs.TabBendRenderPoint.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'TabBendRenderPoint'
  ];
  alphaTab.rendering.glyphs.TabBendRenderPoint.__super__ =
    alphaTab.model.BendPoint;
  alphaTab.rendering.glyphs.TabBendRenderPoint.prototype = $extend(
    alphaTab.model.BendPoint.prototype,
    {
      __class__: alphaTab.rendering.glyphs.TabBendRenderPoint
    }
  );
  alphaTab.rendering.glyphs.TabBrushGlyph = function(beat) {
    alphaTab.rendering.glyphs.Glyph.call(this, 0, 0);
    this._beat = null;
    this._beat = beat;
  };
  alphaTab.rendering.glyphs.TabBrushGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'TabBrushGlyph'
  ];
  alphaTab.rendering.glyphs.TabBrushGlyph.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.TabBrushGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      DoLayout: function() {
        this.Width = 10 * this.get_Scale();
      },
      Paint: function(cx, cy, canvas) {
        var tabBarRenderer = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.TabBarRenderer
        );
        var res = this.Renderer.get_Resources();
        var startY =
          cy +
          this.X +
          (tabBarRenderer.GetNoteY(this._beat.MaxNote, false) -
            res.TablatureFont.Size / 2);
        var endY =
          cy +
          this.Y +
          tabBarRenderer.GetNoteY(this._beat.MinNote, false) +
          res.TablatureFont.Size / 2;
        var arrowX = system.Convert.ToInt32_Single(
          cx + this.X + this.Width / 2
        );
        var arrowSize = 8 * this.get_Scale();
        if (this._beat.BrushType != 0) {
          if (this._beat.BrushType == 1 || this._beat.BrushType == 2) {
            canvas.BeginPath();
            var this1 = arrowX;
            canvas.MoveTo(this1, startY);
            var this2 = arrowX;
            canvas.LineTo(this2, endY);
            canvas.Stroke();
          } else if (this._beat.BrushType == 3) {
            var lineStartY = startY - arrowSize;
            var lineEndY = endY - arrowSize;
            canvas.BeginRotate(
              cx + this.X + 2 * this.get_Scale(),
              lineEndY,
              -90
            );
            var glyph = new alphaTab.rendering.glyphs.NoteVibratoGlyph(
              0,
              0,
              1,
              1.2
            );
            glyph.Renderer = this.Renderer;
            glyph.DoLayout();
            glyph.Width = Math.abs(lineEndY - lineStartY);
            glyph.Paint(0, 0, canvas);
            canvas.EndRotate();
          } else if (this._beat.BrushType == 4) {
            var lineStartY1 = startY + arrowSize;
            var lineEndY1 = endY + arrowSize;
            canvas.BeginRotate(
              cx + this.X + 7 * this.get_Scale(),
              lineStartY1,
              90
            );
            var glyph1 = new alphaTab.rendering.glyphs.NoteVibratoGlyph(
              0,
              0,
              1,
              1.2
            );
            glyph1.Renderer = this.Renderer;
            glyph1.DoLayout();
            glyph1.Width = Math.abs(lineEndY1 - lineStartY1);
            glyph1.Paint(0, 0, canvas);
            canvas.EndRotate();
          }
          if (this._beat.BrushType == 1 || this._beat.BrushType == 3) {
            canvas.BeginPath();
            var this3 = arrowX;
            canvas.MoveTo(this3, endY);
            canvas.LineTo(arrowX + arrowSize / 2, endY - arrowSize);
            canvas.LineTo(arrowX - arrowSize / 2, endY - arrowSize);
            canvas.ClosePath();
            canvas.Fill();
          } else {
            canvas.BeginPath();
            var this4 = arrowX;
            canvas.MoveTo(this4, startY);
            canvas.LineTo(arrowX + arrowSize / 2, startY + arrowSize);
            canvas.LineTo(arrowX - arrowSize / 2, startY + arrowSize);
            canvas.ClosePath();
            canvas.Fill();
          }
        }
      },
      __class__: alphaTab.rendering.glyphs.TabBrushGlyph
    }
  );
  alphaTab.rendering.glyphs.TabClefGlyph = function(x, y) {
    alphaTab.rendering.glyphs.Glyph.call(this, x, y);
  };
  alphaTab.rendering.glyphs.TabClefGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'TabClefGlyph'
  ];
  alphaTab.rendering.glyphs.TabClefGlyph.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.TabClefGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      DoLayout: function() {
        this.Width = 28 * this.get_Scale();
      },
      Paint: function(cx, cy, canvas) {
        var strings = this.Renderer.Bar.Staff.Tuning.length;
        var this1 = 0.5;
        var correction = strings * this.get_Scale() * this1;
        var symbol = strings <= 4 ? 57454 : 57453;
        var scale;
        if (strings <= 4) {
          var this2 = 4.5;
          scale = strings / this2;
        } else {
          var this3 = 6.5;
          scale = strings / this3;
        }
        canvas.FillMusicFontSymbol(
          cx + this.X + 5 * this.get_Scale(),
          cy + this.Y - correction,
          scale * this.get_Scale(),
          symbol,
          false
        );
      },
      __class__: alphaTab.rendering.glyphs.TabClefGlyph
    }
  );
  alphaTab.rendering.glyphs.TabNoteChordGlyph = function(x, y, isGrace) {
    alphaTab.rendering.glyphs.Glyph.call(this, x, y);
    this._notes = null;
    this._isGrace = false;
    this.Beat = null;
    this.BeamingHelper = null;
    this.MinStringNote = null;
    this.BeatEffects = null;
    this.NotesPerString = null;
    this.NoteStringWidth = 0.0;
    this._isGrace = isGrace;
    var this1 = [];
    this._notes = this1;
    var this2 = {};
    this.BeatEffects = this2;
    var this3 = {};
    this.NotesPerString = this3;
  };
  alphaTab.rendering.glyphs.TabNoteChordGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'TabNoteChordGlyph'
  ];
  alphaTab.rendering.glyphs.TabNoteChordGlyph.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.TabNoteChordGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      GetNoteX: function(note, onEnd) {
        if (onEnd == null) {
          onEnd = true;
        }
        if (this.NotesPerString.hasOwnProperty(note.String)) {
          var n = this.NotesPerString[note.String];
          var pos = this.X + n.X;
          if (onEnd) {
            pos = pos + n.Width;
          }
          return pos;
        }
        return 0;
      },
      GetNoteY: function(note, aboveNote) {
        if (aboveNote == null) {
          aboveNote = false;
        }
        if (this.NotesPerString.hasOwnProperty(note.String)) {
          return (
            this.Y +
            this.NotesPerString[note.String].Y +
            (aboveNote ? -this.NotesPerString[note.String].Height / 2 : 0)
          );
        }
        return 0;
      },
      DoLayout: function() {
        var w = 0;
        var noteStringWidth = 0;
        var i = 0;
        var j = this._notes.length;
        while (i < j) {
          var g = this._notes[i];
          g.Renderer = this.Renderer;
          g.DoLayout();
          if (g.Width > w) {
            w = g.Width;
          }
          if (g.NoteStringWidth > noteStringWidth) {
            noteStringWidth = g.NoteStringWidth;
          }
          ++i;
        }
        this.NoteStringWidth = noteStringWidth;
        var tabHeight = this.Renderer.get_Resources().TablatureFont.Size;
        var effectY = this.GetNoteY(this.MinStringNote, false) + tabHeight / 2;
        var effectSpacing = 7 * this.get_Scale();
        var this1 = this.BeatEffects;
        var beatEffectKey = $iterator(Object.keys(this1))();
        while (beatEffectKey.hasNext()) {
          var beatEffectKey1 = beatEffectKey.next();
          var g1 = this.BeatEffects[beatEffectKey1];
          g1.Y = g1.Y + effectY;
          g1.X = g1.X + this.Width / 2;
          g1.Renderer = this.Renderer;
          effectY = effectY + effectSpacing;
          g1.DoLayout();
        }
        this.Width = w;
      },
      AddNoteGlyph: function(noteGlyph, note) {
        this._notes.push(noteGlyph);
        this.NotesPerString[note.String] = noteGlyph;
        if (
          this.MinStringNote == null ||
          note.String < this.MinStringNote.String
        ) {
          this.MinStringNote = note;
        }
      },
      Paint: function(cx, cy, canvas) {
        cx = cx + this.X;
        cy = cy + this.Y;
        var res = this.Renderer.get_Resources();
        var oldBaseLine = canvas.get_TextBaseline();
        canvas.set_TextBaseline(1);
        canvas.set_Font(this._isGrace ? res.GraceFont : res.TablatureFont);
        var notes = this._notes;
        var w = this.Width;
        var g = $iterator(notes)();
        while (g.hasNext()) {
          var g1 = g.next();
          g1.Renderer = this.Renderer;
          g1.Width = w;
          g1.Paint(cx, cy, canvas);
        }
        canvas.set_TextBaseline(oldBaseLine);
        var this1 = this.BeatEffects;
        var beatEffectKey = $iterator(Object.keys(this1))();
        while (beatEffectKey.hasNext()) {
          var beatEffectKey1 = beatEffectKey.next();
          var g2 = this.BeatEffects[beatEffectKey1];
          g2.Paint(cx, cy, canvas);
        }
      },
      UpdateBeamingHelper: function(cx) {
        if (
          this.BeamingHelper != null &&
          this.BeamingHelper.IsPositionFrom('tab', this.Beat)
        ) {
          this.BeamingHelper.RegisterBeatLineX(
            'tab',
            this.Beat,
            cx + this.X + this.Width,
            cx + this.X
          );
        }
      },
      __class__: alphaTab.rendering.glyphs.TabNoteChordGlyph
    }
  );
  alphaTab.rendering.glyphs.TabRestGlyph = function(
    x,
    y,
    isVisibleRest,
    duration
  ) {
    alphaTab.rendering.glyphs.MusicFontGlyph.call(
      this,
      x,
      y,
      1,
      alphaTab.rendering.glyphs.ScoreRestGlyph.GetSymbol(duration)
    );
    this._isVisibleRest = false;
    this._duration = -4;
    this.BeamingHelper = null;
    this._isVisibleRest = isVisibleRest;
    this._duration = duration;
  };
  alphaTab.rendering.glyphs.TabRestGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'TabRestGlyph'
  ];
  alphaTab.rendering.glyphs.TabRestGlyph.__super__ =
    alphaTab.rendering.glyphs.MusicFontGlyph;
  alphaTab.rendering.glyphs.TabRestGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.MusicFontGlyph.prototype,
    {
      DoLayout: function() {
        if (this._isVisibleRest) {
          this.Width =
            alphaTab.rendering.glyphs.ScoreRestGlyph.GetSize(this._duration) *
            this.get_Scale();
        } else {
          this.Width = 10 * this.get_Scale();
        }
      },
      UpdateBeamingHelper: function(cx) {
        if (
          this.BeamingHelper != null &&
          this.BeamingHelper.IsPositionFrom('tab', this.Beat)
        ) {
          this.BeamingHelper.RegisterBeatLineX(
            'tab',
            this.Beat,
            cx + this.X + this.Width,
            cx + this.X
          );
        }
      },
      Paint: function(cx, cy, canvas) {
        if (this._isVisibleRest) {
          alphaTab.rendering.glyphs.MusicFontGlyph.prototype.Paint.call(
            this,
            cx,
            cy,
            canvas
          );
        }
      },
      __class__: alphaTab.rendering.glyphs.TabRestGlyph
    }
  );
  alphaTab.rendering.glyphs.TabSlideLineGlyph = function(
    type,
    startNote,
    parent
  ) {
    alphaTab.rendering.glyphs.Glyph.call(this, 0, 0);
    this._startNote = null;
    this._type = 0;
    this._parent = null;
    this._type = type;
    this._startNote = startNote;
    this._parent = parent;
  };
  alphaTab.rendering.glyphs.TabSlideLineGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'TabSlideLineGlyph'
  ];
  alphaTab.rendering.glyphs.TabSlideLineGlyph.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.TabSlideLineGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      DoLayout: function() {
        this.Width = 0;
      },
      Paint: function(cx, cy, canvas) {
        var startNoteRenderer = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.TabBarRenderer
        );
        var sizeX = 12 * this.get_Scale();
        var sizeY = 3 * this.get_Scale();
        var startX;
        var startY;
        var endX;
        var endY;
        var waves = false;
        var _g = this._type;
        switch (_g) {
          case 1:
          case 2:
            var startOffsetY;
            var endOffsetY;
            if (this._startNote.SlideTarget == null) {
              startOffsetY = 0;
              endOffsetY = 0;
            } else if (
              this._startNote.SlideTarget.Fret > this._startNote.Fret
            ) {
              startOffsetY = sizeY;
              endOffsetY = sizeY * -1;
            } else {
              startOffsetY = sizeY * -1;
              endOffsetY = sizeY;
            }
            startX =
              cx +
              startNoteRenderer.X +
              startNoteRenderer.GetBeatX(this._startNote.Beat, 3);
            startY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false) +
              startOffsetY;
            if (this._startNote.SlideTarget != null) {
              var endNoteRenderer = this.Renderer.ScoreRenderer.Layout.GetRendererForBar(
                this.Renderer.Staff.get_StaveId(),
                this._startNote.SlideTarget.Beat.Voice.Bar
              );
              if (
                endNoteRenderer == null ||
                endNoteRenderer.Staff != startNoteRenderer.Staff
              ) {
                endX = cx + startNoteRenderer.X + this._parent.X;
                endY = startY;
              } else {
                endX =
                  cx +
                  endNoteRenderer.X +
                  endNoteRenderer.GetBeatX(this._startNote.SlideTarget.Beat, 1);
                endY =
                  cy +
                  endNoteRenderer.Y +
                  endNoteRenderer.GetNoteY(this._startNote.SlideTarget, false) +
                  endOffsetY;
              }
            } else {
              endX = cx + startNoteRenderer.X + this._parent.X;
              endY = startY;
            }
            break;
          case 3:
            endX =
              cx +
              startNoteRenderer.X +
              startNoteRenderer.GetNoteX(this._startNote, false);
            endY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false);
            startX = endX - sizeX;
            startY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false) +
              sizeY;
            break;
          case 4:
            endX =
              cx +
              startNoteRenderer.X +
              startNoteRenderer.GetNoteX(this._startNote, false);
            endY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false);
            startX = endX - sizeX;
            startY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false) -
              sizeY;
            break;
          case 5:
            startX =
              cx +
              startNoteRenderer.X +
              startNoteRenderer.GetNoteX(this._startNote, true);
            startY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false);
            endX = startX + sizeX;
            endY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false) -
              sizeY;
            break;
          case 6:
            startX =
              cx +
              startNoteRenderer.X +
              startNoteRenderer.GetNoteX(this._startNote, true);
            startY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false);
            endX = startX + sizeX;
            endY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false) +
              sizeY;
            break;
          case 7:
            startX =
              cx +
              startNoteRenderer.X +
              startNoteRenderer.GetNoteX(this._startNote, true);
            startY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false) -
              sizeY * 2;
            endX =
              cx +
              startNoteRenderer.X +
              startNoteRenderer.GetBeatX(this._startNote.Beat, 4);
            endY = startY + sizeY * 3;
            waves = true;
            break;
          case 8:
            startX =
              cx +
              startNoteRenderer.X +
              startNoteRenderer.GetNoteX(this._startNote, true);
            startY =
              cy +
              startNoteRenderer.Y +
              startNoteRenderer.GetNoteY(this._startNote, false) +
              sizeY;
            endX =
              cx +
              startNoteRenderer.X +
              startNoteRenderer.GetBeatX(this._startNote.Beat, 4);
            endY = startY - sizeY * 3;
            waves = true;
            break;
          default:
            return;
        }
        if (waves) {
          var b = endX - startX;
          var a = endY - startY;
          var this1 = a;
          var this2 = b;
          var c = Math.sqrt(Math.pow(this1, 2) + Math.pow(this2, 2));
          var this3 = a / c;
          var angle = js.Boot.__cast(
            Math.asin(this3) * 57.29577951308238,
            Float
          );
          canvas.BeginRotate(startX, startY, angle);
          var glyph = new alphaTab.rendering.glyphs.NoteVibratoGlyph(
            0,
            0,
            1,
            1.2
          );
          glyph.Renderer = this.Renderer;
          glyph.DoLayout();
          glyph.Width = b;
          glyph.Paint(0, 0, canvas);
          canvas.EndRotate();
        } else {
          canvas.BeginPath();
          canvas.MoveTo(startX, startY);
          canvas.LineTo(endX, endY);
          canvas.Stroke();
        }
      },
      __class__: alphaTab.rendering.glyphs.TabSlideLineGlyph
    }
  );
  alphaTab.rendering.glyphs.TabTieGlyph = function(
    startNote,
    endNote,
    forSlide,
    forEnd
  ) {
    if (forEnd == null) {
      forEnd = false;
    }
    alphaTab.rendering.glyphs.TieGlyph.call(
      this,
      startNote.Beat,
      endNote.Beat,
      forEnd
    );
    this.StartNote = null;
    this.EndNote = null;
    this.ForSlide = false;
    this.StartNote = startNote;
    this.EndNote = endNote;
    this.ForSlide = forSlide;
  };
  alphaTab.rendering.glyphs.TabTieGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'TabTieGlyph'
  ];
  alphaTab.rendering.glyphs.TabTieGlyph.GetBeamDirection_Note = function(note) {
    if (note.String > 3) {
      return 0;
    } else {
      return 1;
    }
  };
  alphaTab.rendering.glyphs.TabTieGlyph.__super__ =
    alphaTab.rendering.glyphs.TieGlyph;
  alphaTab.rendering.glyphs.TabTieGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.TieGlyph.prototype,
    {
      get_Offset: function() {
        if (this.ForSlide) {
          return 5 * this.get_Scale();
        } else {
          return 0;
        }
      },
      GetBeamDirection: function(beat, noteRenderer) {
        return alphaTab.rendering.glyphs.TabTieGlyph.GetBeamDirection_Note(
          this.StartNote
        );
      },
      GetStartY: function(noteRenderer, direction) {
        return noteRenderer.GetNoteY(this.StartNote, false) - this.get_Offset();
      },
      GetEndY: function(noteRenderer, direction) {
        return noteRenderer.GetNoteY(this.EndNote, false) - this.get_Offset();
      },
      GetStartX: function(noteRenderer) {
        return noteRenderer.GetNoteX(this.StartNote, true);
      },
      GetEndX: function(noteRenderer) {
        return noteRenderer.GetNoteX(this.EndNote, false);
      },
      __class__: alphaTab.rendering.glyphs.TabTieGlyph
    }
  );
  alphaTab.rendering.glyphs.TabSlurGlyph = function(
    startNote,
    endNote,
    forSlide,
    forEnd
  ) {
    if (forEnd == null) {
      forEnd = false;
    }
    alphaTab.rendering.glyphs.TabTieGlyph.call(
      this,
      startNote,
      endNote,
      forSlide,
      forEnd
    );
    this._direction = 0;
    this._direction = alphaTab.rendering.glyphs.TabTieGlyph.GetBeamDirection_Note(
      startNote
    );
  };
  alphaTab.rendering.glyphs.TabSlurGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'TabSlurGlyph'
  ];
  alphaTab.rendering.glyphs.TabSlurGlyph.__super__ =
    alphaTab.rendering.glyphs.TabTieGlyph;
  alphaTab.rendering.glyphs.TabSlurGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.TabTieGlyph.prototype,
    {
      GetTieHeight: function(startX, startY, endX, endY) {
        var this1 = endX - startX + 1;
        return (
          js.Boot.__cast(Math.log(this1), Float) *
          this.Renderer.get_Settings().SlurHeight
        );
      },
      TryExpand: function(startNote, endNote, forSlide, forEnd) {
        if (this.ForSlide != forSlide) {
          return false;
        }
        if (this.ForEnd != forEnd) {
          return false;
        }
        if (this.StartNote.Beat.Id != startNote.Beat.Id) {
          return false;
        }
        if (this.EndNote.Beat.Id != endNote.Beat.Id) {
          return false;
        }
        if (
          this._direction !=
          alphaTab.rendering.glyphs.TabTieGlyph.GetBeamDirection_Note(startNote)
        ) {
          return false;
        }
        var _g = this._direction;
        switch (_g) {
          case 0:
            if (startNote.get_RealValue() > this.StartNote.get_RealValue()) {
              this.StartNote = startNote;
              this.StartBeat = startNote.Beat;
            }
            if (endNote.get_RealValue() > this.EndNote.get_RealValue()) {
              this.EndNote = endNote;
              this.EndBeat = endNote.Beat;
            }
            break;
          case 1:
            if (startNote.get_RealValue() < this.StartNote.get_RealValue()) {
              this.StartNote = startNote;
              this.StartBeat = startNote.Beat;
            }
            if (endNote.get_RealValue() < this.EndNote.get_RealValue()) {
              this.EndNote = endNote;
              this.EndBeat = endNote.Beat;
            }
            break;
          default:
        }
        return true;
      },
      Paint: function(cx, cy, canvas) {
        var startNoteRenderer = this.Renderer.ScoreRenderer.Layout.GetRendererForBar(
          this.Renderer.Staff.get_StaveId(),
          this.StartBeat.Voice.Bar
        );
        var direction = this.GetBeamDirection(
          this.StartBeat,
          startNoteRenderer
        );
        var slurId =
          'tab.slur.' +
          this.StartNote.Beat.Id +
          '.' +
          this.EndNote.Beat.Id +
          '.' +
          direction;
        var renderer = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.TabBarRenderer
        );
        var isSlurRendered = renderer.Staff.GetSharedLayoutData(slurId, false);
        if (!isSlurRendered) {
          renderer.Staff.SetSharedLayoutData(slurId, true);
          alphaTab.rendering.glyphs.TabTieGlyph.prototype.Paint.call(
            this,
            cx,
            cy,
            canvas
          );
        }
      },
      __class__: alphaTab.rendering.glyphs.TabSlurGlyph
    }
  );
  alphaTab.rendering.glyphs.TabTimeSignatureGlyph = function(
    x,
    y,
    numerator,
    denominator,
    isCommon
  ) {
    alphaTab.rendering.glyphs.TimeSignatureGlyph.call(
      this,
      x,
      y,
      numerator,
      denominator,
      isCommon
    );
  };
  alphaTab.rendering.glyphs.TabTimeSignatureGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'TabTimeSignatureGlyph'
  ];
  alphaTab.rendering.glyphs.TabTimeSignatureGlyph.__super__ =
    alphaTab.rendering.glyphs.TimeSignatureGlyph;
  alphaTab.rendering.glyphs.TabTimeSignatureGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.TimeSignatureGlyph.prototype,
    {
      get_CommonY: function() {
        var renderer = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.TabBarRenderer
        );
        return renderer.GetTabY(0, 0);
      },
      get_NumeratorY: function() {
        var renderer = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.TabBarRenderer
        );
        var offset;
        if (renderer.Bar.Staff.Tuning.length <= 4) {
          var this1 = 4;
          offset = 1 / this1;
        } else {
          var this2 = 3;
          offset = 1 / this2;
        }
        return (
          renderer.get_LineOffset() *
          renderer.Bar.Staff.Tuning.length *
          offset *
          this.get_Scale()
        );
      },
      get_DenominatorY: function() {
        var renderer = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.TabBarRenderer
        );
        var offset;
        if (renderer.Bar.Staff.Tuning.length <= 4) {
          var this1 = 5;
          offset = 3 / this1;
        } else {
          var this2 = 5;
          offset = 3 / this2;
        }
        return (
          renderer.get_LineOffset() *
          renderer.Bar.Staff.Tuning.length *
          offset *
          this.get_Scale()
        );
      },
      get_CommonScale: function() {
        return 1;
      },
      get_NumberScale: function() {
        var renderer = js.Boot.__cast(
          this.Renderer,
          alphaTab.rendering.TabBarRenderer
        );
        if (renderer.Bar.Staff.Tuning.length <= 4) {
          return 0.75;
        } else {
          return 1;
        }
      },
      __class__: alphaTab.rendering.glyphs.TabTimeSignatureGlyph
    }
  );
  alphaTab.rendering.glyphs.TabWhammyBarGlyph = function(beat) {
    alphaTab.rendering.glyphs.Glyph.call(this, 0, 0);
    this._beat = null;
    this._renderPoints = null;
    this._isSimpleDip = false;
    this._beat = beat;
    this._renderPoints = this.CreateRenderingPoints(beat);
    this._isSimpleDip = false;
  };
  alphaTab.rendering.glyphs.TabWhammyBarGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'TabWhammyBarGlyph'
  ];
  alphaTab.rendering.glyphs.TabWhammyBarGlyph.__super__ =
    alphaTab.rendering.glyphs.Glyph;
  alphaTab.rendering.glyphs.TabWhammyBarGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.Glyph.prototype,
    {
      CreateRenderingPoints: function(beat) {
        if (beat.WhammyBarType == 1) {
          return beat.WhammyBarPoints;
        }
        var this1 = [];
        var renderingPoints = this1;
        var _g = beat.WhammyBarType;
        switch (_g) {
          case 3:
            renderingPoints.push(
              new alphaTab.model.BendPoint(0, beat.WhammyBarPoints[0].Value)
            );
            renderingPoints.push(
              new alphaTab.model.BendPoint(
                (60 / 2) | 0,
                beat.WhammyBarPoints[1].Value
              )
            );
            renderingPoints.push(
              new alphaTab.model.BendPoint(
                60,
                beat.WhammyBarPoints[beat.WhammyBarPoints.length - 1].Value
              )
            );
            break;
          case 2:
          case 4:
          case 5:
          case 6:
            renderingPoints.push(
              new alphaTab.model.BendPoint(0, beat.WhammyBarPoints[0].Value)
            );
            renderingPoints.push(
              new alphaTab.model.BendPoint(60, beat.WhammyBarPoints[1].Value)
            );
            break;
          default:
        }
        return renderingPoints;
      },
      DoLayout: function() {
        alphaTab.rendering.glyphs.Glyph.prototype.DoLayout.call(this);
        this._isSimpleDip =
          this.Renderer.get_Settings().DisplayMode == 1 &&
          this._beat.WhammyBarType == 3;
        var minValue = null;
        var maxValue = null;
        var beat = this._beat;
        while (beat != null && beat.get_HasWhammyBar()) {
          if (minValue == null || minValue.Value > beat.MinWhammyPoint.Value) {
            minValue = beat.MinWhammyPoint;
          }
          if (maxValue == null || maxValue.Value < beat.MaxWhammyPoint.Value) {
            maxValue = beat.MaxWhammyPoint;
          }
          beat = beat.NextBeat;
        }
        var topOffset =
          maxValue.Value > 0 ? Math.abs(this.GetOffset(maxValue.Value)) : 0;
        if (
          topOffset > 0 ||
          this._beat.WhammyBarPoints[0].Value != 0 ||
          this.Renderer.get_Settings().ShowZeroOnDiveWhammy
        ) {
          var this1 = 2;
          topOffset =
            topOffset +
            this.Renderer.get_Resources().TablatureFont.Size * this1;
        }
        var bottomOffset =
          minValue.Value < 0 ? Math.abs(this.GetOffset(minValue.Value)) : 0;
        this.Renderer.RegisterOverflowTop(topOffset + bottomOffset);
        var currentOffset = this.Renderer.Staff.GetSharedLayoutData(
          'tab.whammy.topoffset',
          -1
        );
        if (topOffset > currentOffset) {
          this.Renderer.Staff.SetSharedLayoutData(
            'tab.whammy.topoffset',
            topOffset
          );
        }
      },
      GetOffset: function(value) {
        if (value == 0) {
          return 0;
        }
        var this1 = 2;
        var offset =
          6 * this.get_Scale() +
          Math.log2(Math.abs(value) / this1) * 6 * this.get_Scale();
        if (value < 0) {
          offset = -offset;
        }
        return offset;
      },
      Paint: function(cx, cy, canvas) {
        var startNoteRenderer = this.Renderer;
        var endBeat = this._beat.NextBeat;
        var endNoteRenderer = null;
        var endXPositionType = 0;
        if (endBeat != null) {
          endNoteRenderer = this.Renderer.ScoreRenderer.Layout.GetRendererForBar(
            this.Renderer.Staff.get_StaveId(),
            endBeat.Voice.Bar
          );
          if (
            endNoteRenderer == null ||
            endNoteRenderer.Staff != startNoteRenderer.Staff
          ) {
            endBeat = null;
            endNoteRenderer = null;
          } else if (
            endNoteRenderer != startNoteRenderer &&
            !endBeat.get_HasWhammyBar()
          ) {
            endBeat = null;
            endNoteRenderer = null;
          } else if (
            endBeat.get_HasWhammyBar() &&
            (startNoteRenderer.get_Settings().DisplayMode != 1 ||
              endBeat.WhammyBarType != 3)
          ) {
            endXPositionType = 2;
          } else {
            endXPositionType = 0;
          }
        }
        var startX;
        var endX;
        if (this._isSimpleDip) {
          startX =
            cx +
            startNoteRenderer.X +
            startNoteRenderer.GetBeatX(this._beat, 1) -
            2 * this.get_Scale();
          endX =
            cx +
            startNoteRenderer.X +
            startNoteRenderer.GetBeatX(this._beat, 3) +
            2 * this.get_Scale();
        } else {
          startX =
            cx +
            startNoteRenderer.X +
            startNoteRenderer.GetBeatX(this._beat, 2);
          if (endNoteRenderer == null) {
            endX =
              cx +
              startNoteRenderer.X +
              startNoteRenderer.Width -
              2 * this.get_Scale();
          } else {
            endX =
              cx +
              endNoteRenderer.X +
              endNoteRenderer.GetBeatX(endBeat, endXPositionType);
          }
        }
        var old = canvas.get_TextAlign();
        canvas.set_TextAlign(1);
        if (this._renderPoints.length >= 2) {
          var dx = (endX - startX) / 60;
          canvas.BeginPath();
          var zeroY =
            cy +
            this.Renderer.Staff.GetSharedLayoutData('tab.whammy.topoffset', 0);
          var slurText = this._beat.WhammyStyle == 1 ? 'grad.' : '';
          var i = 0;
          var j = this._renderPoints.length - 1;
          while (i < j) {
            var firstPt = this._renderPoints[i];
            var secondPt = this._renderPoints[i + 1];
            var nextPt = i < j - 2 ? this._renderPoints[i + 2] : null;
            var isFirst = i == 0;
            if (i == 0 && firstPt.Value != 0 && !this._beat.IsContinuedWhammy) {
              this.PaintWhammy(
                false,
                new alphaTab.model.BendPoint(0, 0),
                firstPt,
                secondPt,
                startX,
                zeroY,
                dx,
                canvas,
                null
              );
              isFirst = false;
            }
            this.PaintWhammy(
              isFirst,
              firstPt,
              secondPt,
              nextPt,
              startX,
              zeroY,
              dx,
              canvas,
              slurText
            );
            slurText = '';
            ++i;
          }
          canvas.Stroke();
        }
        canvas.set_TextAlign(old);
      },
      PaintWhammy: function(
        isFirst,
        firstPt,
        secondPt,
        nextPt,
        cx,
        cy,
        dx,
        canvas,
        slurText
      ) {
        var x1 = cx + dx * firstPt.Offset;
        var x2 = cx + dx * secondPt.Offset;
        var y1 = cy - this.GetOffset(firstPt.Value);
        var y2 = cy - this.GetOffset(secondPt.Value);
        if (firstPt.Offset == secondPt.Offset) {
          var dashSize = 3 * this.get_Scale();
          var dashes = Math.abs(y2 - y1) / (dashSize * 2);
          if (dashes < 1) {
            canvas.MoveTo(x1, y1);
            canvas.LineTo(x2, y2);
          } else {
            var dashEndY = Math.max(y1, y2);
            var dashStartY = Math.min(y1, y2);
            while (dashEndY > dashStartY) {
              canvas.MoveTo(x1, dashStartY);
              canvas.LineTo(x1, dashStartY + dashSize);
              dashStartY = dashStartY + dashSize * 2;
            }
          }
          canvas.Stroke();
        } else if (firstPt.Value == secondPt.Value) {
          var dashSize1 = 3 * this.get_Scale();
          var dashes1 = Math.abs(x2 - x1) / (dashSize1 * 2);
          if (dashes1 < 1) {
            canvas.MoveTo(x1, y1);
            canvas.LineTo(x2, y2);
          } else {
            var dashEndX = Math.max(x1, x2);
            var dashStartX = Math.min(x1, x2);
            while (dashEndX > dashStartX) {
              canvas.MoveTo(dashEndX, y1);
              canvas.LineTo(dashEndX - dashSize1, y1);
              dashEndX = dashEndX - dashSize1 * 2;
            }
          }
          canvas.Stroke();
        } else {
          canvas.MoveTo(x1, y1);
          canvas.LineTo(x2, y2);
        }
        var res = this.Renderer.get_Resources();
        if (isFirst && !this._beat.IsContinuedWhammy && !this._isSimpleDip) {
          var y = y1;
          y = y - (res.TablatureFont.Size + 2 * this.get_Scale());
          if (this.Renderer.get_Settings().ShowZeroOnDiveWhammy) {
            canvas.FillText('0', x1, y);
          }
          if (slurText != null) {
            y = y - (res.TablatureFont.Size + 2 * this.get_Scale());
            canvas.FillText(slurText, x1, y);
          }
        }
        var dV = Math.abs(secondPt.Value);
        if (
          (dV != 0 ||
            (this.Renderer.get_Settings().ShowZeroOnDiveWhammy &&
              !this._isSimpleDip)) &&
          firstPt.Value != secondPt.Value
        ) {
          var s = '';
          if (secondPt.Value < 0) {
            s = s + '-';
          }
          if (dV >= 4) {
            var steps = (dV / 4) | 0;
            s = s + Std.string(steps);
            dV = dV - steps * 4;
          } else if (dV == 0) {
            s = s + '0';
          }
          if (dV > 0) {
            s = s + alphaTab.rendering.glyphs.TabBendGlyph.GetFractionSign(dV);
          }
          var y3;
          if (this._isSimpleDip) {
            y3 =
              Math.min(y1, y2) - res.TablatureFont.Size - 2 * this.get_Scale();
          } else {
            if (firstPt.Offset == secondPt.Offset) {
              y3 = Math.min(y1, y2);
            } else {
              y3 = y2;
            }
            y3 = y3 - (res.TablatureFont.Size + 2 * this.get_Scale());
            if (nextPt != null && nextPt.Value > secondPt.Value) {
              y3 = y3 - 2 * this.get_Scale();
            }
          }
          var x = x2;
          canvas.FillText(s, x, y3);
        }
      },
      __class__: alphaTab.rendering.glyphs.TabWhammyBarGlyph
    }
  );
  alphaTab.rendering.glyphs.TempoGlyph = function(x, y, tempo) {
    alphaTab.rendering.glyphs.EffectGlyph.call(this, x, y);
    this._tempo = 0;
    this._tempo = tempo;
  };
  alphaTab.rendering.glyphs.TempoGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'TempoGlyph'
  ];
  alphaTab.rendering.glyphs.TempoGlyph.__super__ =
    alphaTab.rendering.glyphs.EffectGlyph;
  alphaTab.rendering.glyphs.TempoGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.EffectGlyph.prototype,
    {
      DoLayout: function() {
        alphaTab.rendering.glyphs.EffectGlyph.prototype.DoLayout.call(this);
        this.Height = 25 * this.get_Scale();
      },
      Paint: function(cx, cy, canvas) {
        var res = this.Renderer.get_Resources();
        canvas.set_Font(res.MarkerFont);
        var this1 = 0.8;
        var this2 = 0.75;
        canvas.FillMusicFontSymbol(
          cx + this.X,
          cy + this.Y + this.Height * this1,
          this.get_Scale() * this2,
          57813,
          false
        );
        canvas.FillText(
          '= ' + this._tempo,
          cx + this.X + this.Height / 2,
          cy + this.Y + canvas.get_Font().Size / 2
        );
      },
      __class__: alphaTab.rendering.glyphs.TempoGlyph
    }
  );
  alphaTab.rendering.glyphs.TextGlyph = function(x, y, text, font, textAlign) {
    if (textAlign == null) {
      textAlign = 0;
    }
    alphaTab.rendering.glyphs.EffectGlyph.call(this, x, y);
    this._lines = null;
    this.Font = null;
    this.TextAlign = 0;
    var this1 = system.Convert.ToUInt16(10);
    var this2 = this1;
    this._lines = system._CsString.CsString_Impl_.Split_CharArray(text, [
      this2
    ]);
    this.Font = font;
    this.TextAlign = textAlign;
  };
  alphaTab.rendering.glyphs.TextGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'TextGlyph'
  ];
  alphaTab.rendering.glyphs.TextGlyph.__super__ =
    alphaTab.rendering.glyphs.EffectGlyph;
  alphaTab.rendering.glyphs.TextGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.EffectGlyph.prototype,
    {
      DoLayout: function() {
        alphaTab.rendering.glyphs.EffectGlyph.prototype.DoLayout.call(this);
        this.Height = this.Font.Size * this._lines.length;
      },
      Paint: function(cx, cy, canvas) {
        canvas.set_Font(this.Font);
        var old = canvas.get_TextAlign();
        var y = cy + this.Y;
        var line = HxOverrides.iter(this._lines);
        while (line.hasNext()) {
          var line1 = line.next();
          canvas.set_TextAlign(this.TextAlign);
          canvas.FillText(line1, cx + this.X, y);
          canvas.set_TextAlign(old);
          y = y + this.Font.Size;
        }
      },
      __class__: alphaTab.rendering.glyphs.TextGlyph
    }
  );
  alphaTab.rendering.glyphs.TremoloPickingGlyph = function(x, y, duration) {
    alphaTab.rendering.glyphs.MusicFontGlyph.call(
      this,
      x,
      y,
      1,
      alphaTab.rendering.glyphs.TremoloPickingGlyph.GetSymbol(duration)
    );
  };
  alphaTab.rendering.glyphs.TremoloPickingGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'TremoloPickingGlyph'
  ];
  alphaTab.rendering.glyphs.TremoloPickingGlyph.GetSymbol = function(duration) {
    switch (duration) {
      case 8:
        return 57888;
      case 16:
        return 57889;
      case 32:
        return 57890;
      default:
        return -1;
    }
  };
  alphaTab.rendering.glyphs.TremoloPickingGlyph.__super__ =
    alphaTab.rendering.glyphs.MusicFontGlyph;
  alphaTab.rendering.glyphs.TremoloPickingGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.MusicFontGlyph.prototype,
    {
      DoLayout: function() {
        this.Width = 12 * this.get_Scale();
      },
      __class__: alphaTab.rendering.glyphs.TremoloPickingGlyph
    }
  );
  alphaTab.rendering.glyphs.TrillGlyph = function(x, y) {
    alphaTab.rendering.glyphs.EffectGlyph.call(this, x, y);
  };
  alphaTab.rendering.glyphs.TrillGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'TrillGlyph'
  ];
  alphaTab.rendering.glyphs.TrillGlyph.__super__ =
    alphaTab.rendering.glyphs.EffectGlyph;
  alphaTab.rendering.glyphs.TrillGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.EffectGlyph.prototype,
    {
      DoLayout: function() {
        alphaTab.rendering.glyphs.EffectGlyph.prototype.DoLayout.call(this);
        this.Height = 20 * this.get_Scale();
      },
      Paint: function(cx, cy, canvas) {
        var res = this.Renderer.get_Resources();
        canvas.set_Font(res.MarkerFont);
        var textw = canvas.MeasureText('tr');
        canvas.FillText(
          'tr',
          cx + this.X,
          cy + this.Y + canvas.get_Font().Size / 2
        );
        var startX = textw + 3 * this.get_Scale();
        var endX = this.Width - startX;
        var waveScale = 1.2;
        var step = 11 * this.get_Scale() * waveScale;
        var loops = Math.max(1, (endX - startX) / step);
        var loopX = startX;
        var loopY = cy + this.Y + this.Height;
        var i = 0;
        while (i < loops) {
          canvas.FillMusicFontSymbol(
            cx + this.X + loopX,
            loopY,
            waveScale,
            60068,
            false
          );
          loopX = loopX + step;
          ++i;
        }
      },
      __class__: alphaTab.rendering.glyphs.TrillGlyph
    }
  );
  alphaTab.rendering.glyphs.TripletFeelGlyph = function(tripletFeel) {
    alphaTab.rendering.glyphs.EffectGlyph.call(this, 0, 0);
    this._tripletFeel = 0;
    this._tripletFeel = tripletFeel;
  };
  alphaTab.rendering.glyphs.TripletFeelGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'TripletFeelGlyph'
  ];
  alphaTab.rendering.glyphs.TripletFeelGlyph.__super__ =
    alphaTab.rendering.glyphs.EffectGlyph;
  alphaTab.rendering.glyphs.TripletFeelGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.EffectGlyph.prototype,
    {
      DoLayout: function() {
        alphaTab.rendering.glyphs.EffectGlyph.prototype.DoLayout.call(this);
        this.Height = 25 * this.get_Scale();
      },
      Paint: function(cx, cy, canvas) {
        cx = cx + this.X;
        cy = cy + this.Y;
        var this1 = 0.75;
        var noteY = cy + this.Height * this1;
        canvas.set_Font(this.Renderer.get_Resources().EffectFont);
        var this2 = 0.3;
        canvas.FillText('(', cx, cy + this.Height * this2);
        var leftNoteX = cx + 10 * this.get_Scale();
        var rightNoteX = cx + 40 * this.get_Scale();
        var _g = this._tripletFeel;
        switch (_g) {
          case 0:
            this.RenderBarNote(leftNoteX, noteY, 0.4, canvas, [0]);
            this.RenderBarNote(rightNoteX, noteY, 0.4, canvas, [0]);
            break;
          case 1:
            this.RenderBarNote(leftNoteX, noteY, 0.4, canvas, [0, 0]);
            this.RenderBarNote(rightNoteX, noteY, 0.4, canvas, [0, 2]);
            this.RenderTriplet(rightNoteX, cy, canvas);
            break;
          case 2:
            this.RenderBarNote(leftNoteX, noteY, 0.4, canvas, [0]);
            canvas.FillMusicFontSymbol(rightNoteX, noteY, 0.4, 57813, false);
            canvas.FillMusicFontSymbol(
              rightNoteX + 12 * this.get_Scale(),
              noteY,
              0.4,
              57815,
              false
            );
            this.RenderTriplet(rightNoteX, cy, canvas);
            break;
          case 3:
            this.RenderBarNote(leftNoteX, noteY, 0.4, canvas, [0, 0]);
            this.RenderBarNote(rightNoteX, noteY, 0.4, canvas, [0, 0, 2]);
            canvas.FillCircle(
              rightNoteX + 9 * this.get_Scale(),
              noteY,
              this.get_Scale()
            );
            break;
          case 4:
            this.RenderBarNote(leftNoteX, noteY, 0.4, canvas, [0]);
            this.RenderBarNote(rightNoteX, noteY, 0.4, canvas, [0, 2]);
            canvas.FillCircle(
              rightNoteX + 9 * this.get_Scale(),
              noteY,
              this.get_Scale()
            );
            break;
          case 5:
            this.RenderBarNote(leftNoteX, noteY, 0.4, canvas, [0, 0]);
            this.RenderBarNote(rightNoteX, noteY, 0.4, canvas, [0, 0, 1]);
            canvas.FillCircle(
              rightNoteX + 12 * this.get_Scale() + 8 * this.get_Scale(),
              noteY,
              this.get_Scale()
            );
            break;
          case 6:
            this.RenderBarNote(leftNoteX, noteY, 0.4, canvas, [0]);
            this.RenderBarNote(rightNoteX, noteY, 0.4, canvas, [0, 1]);
            canvas.FillCircle(
              rightNoteX + 12 * this.get_Scale() + 8 * this.get_Scale(),
              noteY,
              this.get_Scale()
            );
            break;
          default:
        }
        canvas.FillText(
          '=',
          cx + 30 * this.get_Scale(),
          cy + 5 * this.get_Scale()
        );
        var this3 = 0.3;
        canvas.FillText(
          ')',
          cx + 65 * this.get_Scale(),
          cy + this.Height * this3
        );
      },
      RenderBarNote: function(cx, noteY, noteScale, canvas, bars) {
        canvas.FillMusicFontSymbol(cx, noteY, noteScale, 57813, false);
        var this1 = 2;
        var partialBarWidth = (12 / this1) * this.get_Scale();
        var i = 0;
        while (i < bars.length) {
          var _g = bars[i];
          switch (_g) {
            case 0:
              canvas.FillRect(
                cx + 4 * this.get_Scale(),
                noteY - 12 * this.get_Scale() + 3 * this.get_Scale() * i,
                12 * this.get_Scale(),
                2 * this.get_Scale()
              );
              break;
            case 1:
              canvas.FillRect(
                cx + 4 * this.get_Scale(),
                noteY - 12 * this.get_Scale() + 3 * this.get_Scale() * i,
                partialBarWidth,
                2 * this.get_Scale()
              );
              break;
            case 2:
              canvas.FillRect(
                cx + 4 * this.get_Scale() + partialBarWidth,
                noteY - 12 * this.get_Scale() + 3 * this.get_Scale() * i,
                partialBarWidth,
                2 * this.get_Scale()
              );
              break;
            default:
          }
          ++i;
        }
        canvas.FillMusicFontSymbol(
          cx + 12 * this.get_Scale(),
          noteY,
          noteScale,
          57813,
          false
        );
      },
      RenderTriplet: function(cx, cy, canvas) {
        cy = cy + 2 * this.get_Scale();
        var font = this.Renderer.get_Resources().EffectFont;
        var this1 = 0.8;
        canvas.set_Font(
          new alphaTab.platform.model.Font(
            font.Family,
            font.Size * this1,
            font.Style
          )
        );
        var rightX = cx + 12 * this.get_Scale() + 3 * this.get_Scale();
        canvas.BeginPath();
        canvas.MoveTo(cx, cy + 3 * this.get_Scale());
        canvas.LineTo(cx, cy);
        canvas.LineTo(cx + 5 * this.get_Scale(), cy);
        canvas.MoveTo(rightX + 5 * this.get_Scale(), cy + 3 * this.get_Scale());
        canvas.LineTo(rightX + 5 * this.get_Scale(), cy);
        canvas.LineTo(rightX, cy);
        canvas.Stroke();
        canvas.FillText(
          '3',
          cx + 7 * this.get_Scale(),
          cy - 10 * this.get_Scale()
        );
        canvas.set_Font(font);
      },
      __class__: alphaTab.rendering.glyphs.TripletFeelGlyph
    }
  );
  alphaTab.rendering.glyphs._TripletFeelGlyph_BarType = {};
  alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_ = {};
  alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    '_TripletFeelGlyph_BarType',
    'TripletFeelGlyph_BarType_Impl_'
  ];
  alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'Full';
      case 1:
        return 'PartialLeft';
      case 2:
        return 'PartialRight';
    }
    return '';
  };
  alphaTab.rendering.glyphs.TuningGlyph = function(
    x,
    y,
    scale,
    resources,
    tuning
  ) {
    alphaTab.rendering.glyphs.GlyphGroup.call(this, x, y);
    this._scale = 0.0;
    this._resources = null;
    this.Height = 0.0;
    this._scale = scale;
    this._resources = resources;
    this.CreateGlyphs(tuning);
  };
  alphaTab.rendering.glyphs.TuningGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'TuningGlyph'
  ];
  alphaTab.rendering.glyphs.TuningGlyph.__super__ =
    alphaTab.rendering.glyphs.GlyphGroup;
  alphaTab.rendering.glyphs.TuningGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.GlyphGroup.prototype,
    {
      CreateGlyphs: function(tuning) {
        this.AddGlyph(
          new alphaTab.rendering.glyphs.TextGlyph(
            0,
            0,
            tuning.Name,
            this._resources.EffectFont,
            0
          )
        );
        this.Height = this.Height + 15 * this._scale;
        if (!tuning.IsStandard) {
          var stringsPerColumn = system.Convert.ToInt32_Double(
            Math.ceil(tuning.Tunings.length / 2.0)
          );
          var currentX = 0;
          var currentY = this.Height;
          var i = 0;
          var j = tuning.Tunings.length;
          while (i < j) {
            var str =
              '(' +
              (i + 1) +
              ') = ' +
              alphaTab.model.Tuning.GetTextForTuning(tuning.Tunings[i], false);
            this.AddGlyph(
              new alphaTab.rendering.glyphs.TextGlyph(
                currentX,
                currentY,
                str,
                this._resources.EffectFont,
                0
              )
            );
            currentY = currentY + this.Height;
            if (i == stringsPerColumn - 1) {
              currentY = this.Height;
              currentX = currentX + 43 * this._scale;
            }
            ++i;
          }
          this.Height = this.Height + stringsPerColumn * (15 * this._scale);
        }
      },
      __class__: alphaTab.rendering.glyphs.TuningGlyph
    }
  );
  alphaTab.rendering.glyphs.VoiceContainerGlyph = function(x, y, voice) {
    alphaTab.rendering.glyphs.GlyphGroup.call(this, x, y);
    this.BeatGlyphs = null;
    this.Voice = null;
    this.MinWidth = 0.0;
    this.TupletGroups = null;
    this.Voice = voice;
    var this1 = [];
    this.BeatGlyphs = this1;
    var this2 = [];
    this.TupletGroups = this2;
  };
  alphaTab.rendering.glyphs.VoiceContainerGlyph.__name__ = [
    'alphaTab',
    'rendering',
    'glyphs',
    'VoiceContainerGlyph'
  ];
  alphaTab.rendering.glyphs.VoiceContainerGlyph.__super__ =
    alphaTab.rendering.glyphs.GlyphGroup;
  alphaTab.rendering.glyphs.VoiceContainerGlyph.prototype = $extend(
    alphaTab.rendering.glyphs.GlyphGroup.prototype,
    {
      ScaleToWidth: function(width) {
        var force = this.Renderer.LayoutingInfo.SpaceToForce(width);
        this.ScaleToForce(force);
      },
      ScaleToForce: function(force) {
        this.Width = this.Renderer.LayoutingInfo.CalculateVoiceWidth(force);
        var positions = this.Renderer.LayoutingInfo.BuildOnTimePositions(force);
        var beatGlyphs = this.BeatGlyphs;
        var i = 0;
        var j = beatGlyphs.length;
        while (i < j) {
          var currentBeatGlyph = beatGlyphs[i];
          var time = currentBeatGlyph.Beat.get_AbsoluteDisplayStart();
          var tmp = currentBeatGlyph.get_OnTimeX();
          currentBeatGlyph.X = positions[time] - tmp;
          if (i > 0) {
            var beatWidth = currentBeatGlyph.X - beatGlyphs[i - 1].X;
            beatGlyphs[i - 1].ScaleToWidth(beatWidth);
          }
          if (i == j - 1) {
            var beatWidth1 = this.Width - beatGlyphs[beatGlyphs.length - 1].X;
            currentBeatGlyph.ScaleToWidth(beatWidth1);
          }
          ++i;
        }
      },
      RegisterLayoutingInfo: function(info) {
        info.UpdateVoiceSize(this.Width);
        var beatGlyphs = this.BeatGlyphs;
        var b = $iterator(beatGlyphs)();
        while (b.hasNext()) {
          var b1 = b.next();
          b1.RegisterLayoutingInfo(info);
        }
      },
      ApplyLayoutingInfo: function(info) {
        var beatGlyphs = this.BeatGlyphs;
        var b = $iterator(beatGlyphs)();
        while (b.hasNext()) {
          var b1 = b.next();
          b1.ApplyLayoutingInfo(info);
        }
        this.ScaleToForce(
          Math.max(
            this.Renderer.get_Settings().StretchForce,
            info.MinStretchForce
          )
        );
      },
      AddGlyph: function(g) {
        var bg = js.Boot.__cast(
          g,
          alphaTab.rendering.glyphs.BeatContainerGlyph
        );
        g.X =
          this.BeatGlyphs.length == 0
            ? 0
            : this.BeatGlyphs[this.BeatGlyphs.length - 1].X +
              this.BeatGlyphs[this.BeatGlyphs.length - 1].Width;
        g.Renderer = this.Renderer;
        g.DoLayout();
        this.BeatGlyphs.push(bg);
        this.Width = g.X + g.Width;
        if (
          bg.Beat.get_HasTuplet() &&
          bg.Beat.TupletGroup.Beats[0].Id == bg.Beat.Id
        ) {
          this.TupletGroups.push(bg.Beat.TupletGroup);
        }
      },
      DoLayout: function() {
        this.MinWidth = this.Width;
      },
      Paint: function(cx, cy, canvas) {
        canvas.set_Color(
          this.Voice.Index == 0
            ? this.Renderer.get_Resources().MainGlyphColor
            : this.Renderer.get_Resources().SecondaryGlyphColor
        );
        var i = 0;
        var j = this.BeatGlyphs.length;
        while (i < j) {
          this.BeatGlyphs[i].Paint(cx + this.X, cy + this.Y, canvas);
          ++i;
        }
      },
      __class__: alphaTab.rendering.glyphs.VoiceContainerGlyph
    }
  );
  alphaTab.rendering.layout._HeaderFooterElements = {};
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_ = {};
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.__name__ = [
    'alphaTab',
    'rendering',
    'layout',
    '_HeaderFooterElements',
    'HeaderFooterElements_Impl_'
  ];
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'None';
      case 1:
        return 'Title';
      case 2:
        return 'SubTitle';
      case 4:
        return 'Artist';
      case 8:
        return 'Album';
      case 16:
        return 'Words';
      case 32:
        return 'Music';
      case 64:
        return 'WordsAndMusic';
      case 128:
        return 'Copyright';
      case 256:
        return 'PageNumber';
      case 511:
        return 'All';
    }
    return '';
  };
  alphaTab.rendering.layout.HorizontalScreenLayoutPartialInfo = function() {
    this.Width = 0.0;
    this.MasterBars = null;
    var this1 = [];
    this.MasterBars = this1;
  };
  alphaTab.rendering.layout.HorizontalScreenLayoutPartialInfo.__name__ = [
    'alphaTab',
    'rendering',
    'layout',
    'HorizontalScreenLayoutPartialInfo'
  ];
  alphaTab.rendering.layout.HorizontalScreenLayoutPartialInfo.prototype = {
    __class__: alphaTab.rendering.layout.HorizontalScreenLayoutPartialInfo
  };
  alphaTab.rendering.staves = {};
  alphaTab.rendering.staves.BarLayoutingInfo = function() {
    this._timeSortedSprings = null;
    this._xMin = 0.0;
    this._minTime = 0;
    this._onTimePositionsForce = 0.0;
    this._onTimePositions = null;
    this.Version = 0;
    this.PreBeatSizes = null;
    this.OnBeatSizes = null;
    this.OnBeatCenterX = null;
    this.PreBeatSize = 0.0;
    this.PostBeatSize = 0.0;
    this.VoiceSize = 0.0;
    this.MinStretchForce = 0.0;
    this.TotalSpringConstant = 0.0;
    this.Springs = null;
    var this1 = {};
    this.PreBeatSizes = this1;
    var this2 = {};
    this.OnBeatSizes = this2;
    var this3 = {};
    this.OnBeatCenterX = this3;
    this.VoiceSize = 0;
    var this4 = {};
    this.Springs = this4;
    this.Version = 0;
    var this5 = [];
    this._timeSortedSprings = this5;
    this._minTime = 2147483647;
  };
  alphaTab.rendering.staves.BarLayoutingInfo.__name__ = [
    'alphaTab',
    'rendering',
    'staves',
    'BarLayoutingInfo'
  ];
  alphaTab.rendering.staves.BarLayoutingInfo.prototype = {
    UpdateVoiceSize: function(size) {
      if (size > this.VoiceSize) {
        this.VoiceSize = size;
        this.Version++;
      }
    },
    SetPreBeatSize: function(beat, size) {
      if (
        !this.PreBeatSizes.hasOwnProperty(beat.Index) ||
        this.PreBeatSizes[beat.Index] < size
      ) {
        this.PreBeatSizes[beat.Index] = size;
        this.Version++;
      }
    },
    GetPreBeatSize: function(beat) {
      if (this.PreBeatSizes.hasOwnProperty(beat.Index)) {
        return this.PreBeatSizes[beat.Index];
      }
      return 0;
    },
    SetOnBeatSize: function(beat, size) {
      if (
        !this.OnBeatSizes.hasOwnProperty(beat.Index) ||
        this.OnBeatSizes[beat.Index] < size
      ) {
        this.OnBeatSizes[beat.Index] = size;
        this.Version++;
      }
    },
    GetOnBeatSize: function(beat) {
      if (this.OnBeatSizes.hasOwnProperty(beat.Index)) {
        return this.OnBeatSizes[beat.Index];
      }
      return 0;
    },
    GetBeatCenterX: function(beat) {
      if (this.OnBeatCenterX.hasOwnProperty(beat.Index)) {
        return this.OnBeatCenterX[beat.Index];
      }
      return 0;
    },
    SetBeatCenterX: function(beat, x) {
      if (
        !this.OnBeatCenterX.hasOwnProperty(beat.Index) ||
        this.OnBeatCenterX[beat.Index] < x
      ) {
        this.OnBeatCenterX[beat.Index] = x;
        this.Version++;
      }
    },
    UpdateMinStretchForce: function(force) {
      if (this.MinStretchForce < force) {
        this.MinStretchForce = force;
        this.Version++;
      }
    },
    AddSpring: function(start, duration, preSpringSize, postSpringSize) {
      this.Version++;
      var spring;
      if (!this.Springs.hasOwnProperty(start)) {
        spring = new alphaTab.rendering.staves.Spring();
        spring.TimePosition = start;
        spring.AllDurations.push(duration);
        if (this._timeSortedSprings.length > 0) {
          var smallestDuration = duration;
          var previousSpring = this._timeSortedSprings[
            this._timeSortedSprings.length - 1
          ];
          var prevDuration = $iterator(previousSpring.AllDurations)();
          while (prevDuration.hasNext()) {
            var prevDuration1 = prevDuration.next();
            var end = previousSpring.TimePosition + prevDuration1;
            if (end >= start && prevDuration1 < smallestDuration) {
              smallestDuration = prevDuration1;
            }
          }
        }
        spring.LongestDuration = duration;
        spring.PostSpringWidth = postSpringSize;
        spring.PreSpringWidth = preSpringSize;
        this.Springs[start] = spring;
        var timeSorted = this._timeSortedSprings;
        var insertPos = timeSorted.length - 1;
        while (insertPos > 0 && timeSorted[insertPos].TimePosition > start)
          --insertPos;
        this._timeSortedSprings.splice(insertPos + 1, 0, spring);
      } else {
        spring = this.Springs[start];
        if (spring.PostSpringWidth < postSpringSize) {
          spring.PostSpringWidth = postSpringSize;
        }
        if (spring.PreSpringWidth < preSpringSize) {
          spring.PreSpringWidth = preSpringSize;
        }
        if (duration < spring.SmallestDuration) {
          spring.SmallestDuration = duration;
        }
        if (duration > spring.LongestDuration) {
          spring.LongestDuration = duration;
        }
        spring.AllDurations.push(duration);
      }
      if (this._minTime > start) {
        this._minTime = start;
      }
      return spring;
    },
    AddBeatSpring: function(beat, preBeatSize, postBeatSize) {
      var start = beat.get_AbsoluteDisplayStart();
      return this.AddSpring(
        start,
        beat.DisplayDuration,
        preBeatSize,
        postBeatSize
      );
    },
    Finish: function() {
      this.CalculateSpringConstants();
      this.Version++;
    },
    CalculateSpringConstants: function() {
      this._xMin = 0;
      var springs = this.Springs;
      var time = $iterator(Object.keys(springs))();
      while (time.hasNext()) {
        var time1 = time.next();
        var spring = springs[time1];
        if (spring.get_SpringWidth() < this._xMin) {
          this._xMin = spring.get_SpringWidth();
        }
      }
      var totalSpringConstant = 0;
      var sortedSprings = this._timeSortedSprings;
      var i = 0;
      while (i < sortedSprings.length) {
        var currentSpring = sortedSprings[i];
        var duration;
        if (i == sortedSprings.length - 1) {
          duration = currentSpring.LongestDuration;
        } else {
          var nextSpring = sortedSprings[i + 1];
          duration = Math.abs(
            nextSpring.TimePosition - currentSpring.TimePosition
          );
        }
        currentSpring.SpringConstant = this.CalculateSpringConstant(
          currentSpring,
          duration
        );
        totalSpringConstant =
          totalSpringConstant + 1 / currentSpring.SpringConstant;
        ++i;
      }
      this.TotalSpringConstant = 1 / totalSpringConstant;
      var i1 = 0;
      while (i1 < sortedSprings.length) {
        var force =
          sortedSprings[i1].get_SpringWidth() *
          sortedSprings[i1].SpringConstant;
        this.UpdateMinStretchForce(force);
        ++i1;
      }
    },
    CalculateSpringConstant: function(spring, duration) {
      if (duration <= 0) {
        duration = alphaTab.audio.MidiUtils.ToTicks(64);
      }
      if (spring.SmallestDuration == 0) {
        spring.SmallestDuration = duration;
      }
      var this1 = spring.SmallestDuration;
      var minDuration = this1;
      var this2 = 0.6;
      var phi = 1 + this2 * Math.log2(duration / js.Boot.__cast(30, Float));
      return (minDuration / duration) * (1 / (phi * 10));
    },
    SpaceToForce: function(space) {
      return space * this.TotalSpringConstant;
    },
    CalculateVoiceWidth: function(force) {
      return this.CalculateWidth(force, this.TotalSpringConstant);
    },
    CalculateWidth: function(force, springConstant) {
      return force / springConstant;
    },
    BuildOnTimePositions: function(force) {
      if (
        Math.abs(this._onTimePositionsForce - force) < 0.00001 &&
        this._onTimePositions != null
      ) {
        return this._onTimePositions;
      }
      this._onTimePositionsForce = force;
      var this1 = {};
      var positions = (this._onTimePositions = this1);
      var sortedSprings = this._timeSortedSprings;
      if (sortedSprings.length == 0) {
        return positions;
      }
      var springX = sortedSprings[0].PreSpringWidth;
      var i = 0;
      while (i < sortedSprings.length) {
        positions[sortedSprings[i].TimePosition] = springX;
        springX =
          springX + this.CalculateWidth(force, sortedSprings[i].SpringConstant);
        ++i;
      }
      return positions;
    },
    __class__: alphaTab.rendering.staves.BarLayoutingInfo
  };
  alphaTab.rendering.staves.MasterBarsRenderers = function() {
    this.Width = 0.0;
    this.IsLinkedToPrevious = false;
    this.CanWrap = false;
    this.MasterBar = null;
    this.Renderers = null;
    this.LayoutingInfo = null;
    var this1 = [];
    this.Renderers = this1;
    this.CanWrap = true;
  };
  alphaTab.rendering.staves.MasterBarsRenderers.__name__ = [
    'alphaTab',
    'rendering',
    'staves',
    'MasterBarsRenderers'
  ];
  alphaTab.rendering.staves.MasterBarsRenderers.prototype = {
    __class__: alphaTab.rendering.staves.MasterBarsRenderers
  };
  alphaTab.rendering.staves.Spring = function() {
    this.TimePosition = 0;
    this.LongestDuration = 0;
    this.SmallestDuration = 0;
    this.Force = 0.0;
    this.SpringConstant = 0.0;
    this.PreSpringWidth = 0.0;
    this.PostSpringWidth = 0.0;
    this.AllDurations = null;
    var this1 = [];
    this.AllDurations = this1;
  };
  alphaTab.rendering.staves.Spring.__name__ = [
    'alphaTab',
    'rendering',
    'staves',
    'Spring'
  ];
  alphaTab.rendering.staves.Spring.prototype = {
    get_SpringWidth: function() {
      return this.PreSpringWidth + this.PostSpringWidth;
    },
    __class__: alphaTab.rendering.staves.Spring
  };
  alphaTab.rendering.staves.Staff = function(trackIndex, staff, factory) {
    this._factory = null;
    this._sharedLayoutData = null;
    this.StaveTrackGroup = null;
    this.StaveGroup = null;
    this.BarRenderers = null;
    this.X = 0.0;
    this.Y = 0.0;
    this.Height = 0.0;
    this.Index = 0;
    this.StaffIndex = 0;
    this.TrackIndex = 0;
    this.ModelStaff = null;
    this.StaveTop = 0.0;
    this.TopSpacing = 0.0;
    this.BottomSpacing = 0.0;
    this.StaveBottom = 0.0;
    this.IsFirstInAccolade = false;
    this.IsLastInAccolade = false;
    var this1 = [];
    this.BarRenderers = this1;
    this.TrackIndex = trackIndex;
    this.ModelStaff = staff;
    this._factory = factory;
    this.TopSpacing = 20;
    this.BottomSpacing = 5;
    this.StaveTop = 0;
    this.StaveBottom = 0;
    var this2 = {};
    this._sharedLayoutData = this2;
  };
  alphaTab.rendering.staves.Staff.__name__ = [
    'alphaTab',
    'rendering',
    'staves',
    'Staff'
  ];
  alphaTab.rendering.staves.Staff.prototype = {
    get_StaveId: function() {
      return this._factory.get_StaffId();
    },
    GetSharedLayoutData: function(key, def) {
      if (this._sharedLayoutData.hasOwnProperty(key)) {
        return this._sharedLayoutData[key];
      }
      return def;
    },
    SetSharedLayoutData: function(key, def) {
      this._sharedLayoutData[key] = def;
    },
    get_IsInAccolade: function() {
      return this._factory.IsInAccolade;
    },
    RegisterStaffTop: function(offset) {
      this.StaveTop = offset;
    },
    RegisterStaffBottom: function(offset) {
      this.StaveBottom = offset;
    },
    AddBarRenderer: function(renderer) {
      renderer.Staff = this;
      renderer.Index = this.BarRenderers.length;
      renderer.ReLayout();
      this.BarRenderers.push(renderer);
      this.StaveGroup.Layout.RegisterBarRenderer(this.get_StaveId(), renderer);
    },
    AddBar: function(bar, layoutingInfo) {
      var renderer;
      if (bar == null) {
        renderer = new alphaTab.rendering.BarRendererBase(
          this.StaveGroup.Layout.Renderer,
          bar
        );
      } else {
        renderer = this._factory.Create(
          this.StaveGroup.Layout.Renderer,
          bar,
          this.StaveGroup.Layout.Renderer.Settings.Staves
        );
      }
      renderer.Staff = this;
      renderer.Index = this.BarRenderers.length;
      renderer.LayoutingInfo = layoutingInfo;
      renderer.DoLayout();
      renderer.RegisterLayoutingInfo();
      this.BarRenderers.push(renderer);
      if (bar != null) {
        this.StaveGroup.Layout.RegisterBarRenderer(
          this.get_StaveId(),
          renderer
        );
      }
    },
    RevertLastBar: function() {
      var lastBar = this.BarRenderers[this.BarRenderers.length - 1];
      var index = this.BarRenderers.length - 1;
      if (index != -1) {
        this.BarRenderers.splice(index, 1);
      }
      this.StaveGroup.Layout.UnregisterBarRenderer(this.get_StaveId(), lastBar);
      return lastBar;
    },
    ScaleToWidth: function(width) {
      var this1 = {};
      this._sharedLayoutData = this1;
      var difference = width - this.StaveGroup.Width;
      var spacePerBar = difference / this.BarRenderers.length;
      var i = 0;
      var j = this.BarRenderers.length;
      while (i < j) {
        this.BarRenderers[i].ScaleToWidth(
          this.BarRenderers[i].Width + spacePerBar
        );
        ++i;
      }
    },
    get_TopOverflow: function() {
      var m = 0;
      var i = 0;
      var j = this.BarRenderers.length;
      while (i < j) {
        var r = this.BarRenderers[i];
        if (r.TopOverflow > m) {
          m = r.TopOverflow;
        }
        ++i;
      }
      return m;
    },
    get_BottomOverflow: function() {
      var m = 0;
      var i = 0;
      var j = this.BarRenderers.length;
      while (i < j) {
        var r = this.BarRenderers[i];
        if (r.BottomOverflow > m) {
          m = r.BottomOverflow;
        }
        ++i;
      }
      return m;
    },
    FinalizeStaff: function() {
      var x = 0;
      this.Height = 0;
      var topOverflow = this.get_TopOverflow();
      var bottomOverflow = this.get_BottomOverflow();
      var i = 0;
      while (i < this.BarRenderers.length) {
        this.BarRenderers[i].X = x;
        this.BarRenderers[i].Y = this.TopSpacing + topOverflow;
        this.Height = Math.max(this.Height, this.BarRenderers[i].Height);
        this.BarRenderers[i].FinalizeRenderer();
        x = x + this.BarRenderers[i].Width;
        ++i;
      }
      if (this.Height > 0) {
        this.Height =
          this.Height +
          (this.TopSpacing + topOverflow + bottomOverflow + this.BottomSpacing);
      }
    },
    Paint: function(cx, cy, canvas, startIndex, count) {
      if (this.Height == 0 || count == 0) {
        return;
      }
      var i = startIndex;
      var j = Math.min(startIndex + count, this.BarRenderers.length);
      while (i < j) {
        this.BarRenderers[i].Paint(cx + this.X, cy + this.Y, canvas);
        ++i;
      }
    },
    __class__: alphaTab.rendering.staves.Staff
  };
  alphaTab.rendering.staves.StaveGroup = function() {
    this._allStaves = null;
    this._firstStaffInAccolade = null;
    this._lastStaffInAccolade = null;
    this.X = 0.0;
    this.Y = 0.0;
    this.Index = 0;
    this._accoladeSpacingCalculated = false;
    this.AccoladeSpacing = 0.0;
    this.IsFull = false;
    this.Width = 0.0;
    this.IsLast = false;
    this.MasterBarsRenderers = null;
    this.Staves = null;
    this.Layout = null;
    var this1 = [];
    this.MasterBarsRenderers = this1;
    var this2 = [];
    this.Staves = this2;
    var this3 = [];
    this._allStaves = this3;
    this.Width = 0;
    this.Index = 0;
    this._accoladeSpacingCalculated = false;
    this.AccoladeSpacing = 0;
  };
  alphaTab.rendering.staves.StaveGroup.__name__ = [
    'alphaTab',
    'rendering',
    'staves',
    'StaveGroup'
  ];
  alphaTab.rendering.staves.StaveGroup.prototype = {
    get_FirstBarIndex: function() {
      return this.MasterBarsRenderers[0].MasterBar.Index;
    },
    get_LastBarIndex: function() {
      return this.MasterBarsRenderers[this.MasterBarsRenderers.length - 1]
        .MasterBar.Index;
    },
    AddMasterBarRenderers: function(tracks, renderers) {
      if (tracks.length == 0) {
        return null;
      }
      this.MasterBarsRenderers.push(renderers);
      this.CalculateAccoladeSpacing(tracks);
      renderers.LayoutingInfo.PreBeatSize = 0;
      var src = 0;
      var i = 0;
      var j = this.Staves.length;
      while (i < j) {
        var g = this.Staves[i];
        var k = 0;
        var l = g.Staves.length;
        while (k < l) {
          var s = g.Staves[k];
          var renderer = renderers.Renderers[src++];
          s.AddBarRenderer(renderer);
          ++k;
        }
        ++i;
      }
      this.UpdateWidth();
      return renderers;
    },
    AddBars: function(tracks, barIndex) {
      if (tracks.length == 0) {
        return null;
      }
      var result = new alphaTab.rendering.staves.MasterBarsRenderers();
      result.LayoutingInfo = new alphaTab.rendering.staves.BarLayoutingInfo();
      result.MasterBar = tracks[0].Score.MasterBars[barIndex];
      this.MasterBarsRenderers.push(result);
      this.CalculateAccoladeSpacing(tracks);
      var barLayoutingInfo = result.LayoutingInfo;
      var g = $iterator(this.Staves)();
      while (g.hasNext()) {
        var g1 = g.next();
        var s = $iterator(g1.Staves)();
        while (s.hasNext()) {
          var s1 = s.next();
          var bar = g1.Track.Staves[s1.ModelStaff.Index].Bars[barIndex];
          s1.AddBar(bar, barLayoutingInfo);
          var renderer = s1.BarRenderers[s1.BarRenderers.length - 1];
          result.Renderers.push(renderer);
          if (renderer.IsLinkedToPrevious) {
            result.IsLinkedToPrevious = true;
          }
          if (!renderer.CanWrap) {
            result.CanWrap = false;
          }
        }
      }
      barLayoutingInfo.Finish();
      result.Width = this.UpdateWidth();
      return result;
    },
    RevertLastBar: function() {
      if (this.MasterBarsRenderers.length > 1) {
        var toRemove = this.MasterBarsRenderers[
          this.MasterBarsRenderers.length - 1
        ];
        var index = this.MasterBarsRenderers.length - 1;
        if (index != -1) {
          this.MasterBarsRenderers.splice(index, 1);
        }
        var w = 0;
        var i = 0;
        var j = this._allStaves.length;
        while (i < j) {
          var s = this._allStaves[i];
          var lastBar = s.RevertLastBar();
          w = Math.max(w, lastBar.Width);
          ++i;
        }
        this.Width = this.Width - w;
        return toRemove;
      }
      return null;
    },
    UpdateWidth: function() {
      var realWidth = 0;
      var i = 0;
      var j = this._allStaves.length;
      while (i < j) {
        var s = this._allStaves[i];
        s.BarRenderers[s.BarRenderers.length - 1].ApplyLayoutingInfo();
        if (s.BarRenderers[s.BarRenderers.length - 1].Width > realWidth) {
          realWidth = s.BarRenderers[s.BarRenderers.length - 1].Width;
        }
        ++i;
      }
      this.Width = this.Width + realWidth;
      return realWidth;
    },
    CalculateAccoladeSpacing: function(tracks) {
      if (!this._accoladeSpacingCalculated && this.Index == 0) {
        this._accoladeSpacingCalculated = true;
        if (this.Layout.Renderer.Settings.Layout.Get('hideTrackNames', false)) {
          this.AccoladeSpacing = 0;
        } else {
          var canvas = this.Layout.Renderer.Canvas;
          var res = this.Layout.Renderer.Settings.RenderingResources.EffectFont;
          canvas.set_Font(res);
          var t = HxOverrides.iter(tracks);
          while (t.hasNext()) {
            var t1 = t.next();
            var this1 = Math.max(
              this.AccoladeSpacing,
              canvas.MeasureText(t1.ShortName)
            );
            this.AccoladeSpacing = js.Boot.__cast(Math.ceil(this1), Float);
          }
          this.AccoladeSpacing = this.AccoladeSpacing + 2 * 10;
          this.Width = this.Width + this.AccoladeSpacing;
        }
      }
    },
    GetStaveTrackGroup: function(track) {
      var i = 0;
      var j = this.Staves.length;
      while (i < j) {
        var g = this.Staves[i];
        if (g.Track == track) {
          return g;
        }
        ++i;
      }
      return null;
    },
    AddStaff: function(track, staff) {
      var group = this.GetStaveTrackGroup(track);
      if (group == null) {
        group = new alphaTab.rendering.staves.StaveTrackGroup(this, track);
        this.Staves.push(group);
      }
      staff.StaveTrackGroup = group;
      staff.StaveGroup = this;
      staff.Index = this._allStaves.length;
      this._allStaves.push(staff);
      group.Staves.push(staff);
      if (staff.get_IsInAccolade()) {
        if (this._firstStaffInAccolade == null) {
          this._firstStaffInAccolade = staff;
          staff.IsFirstInAccolade = true;
        }
        if (group.FirstStaffInAccolade == null) {
          group.FirstStaffInAccolade = staff;
        }
        if (this._lastStaffInAccolade == null) {
          this._lastStaffInAccolade = staff;
          staff.IsLastInAccolade = true;
        }
        if (this._lastStaffInAccolade != null) {
          this._lastStaffInAccolade.IsLastInAccolade = false;
        }
        this._lastStaffInAccolade = staff;
        this._lastStaffInAccolade.IsLastInAccolade = true;
        group.LastStaffInAccolade = staff;
      }
    },
    get_Height: function() {
      return (
        this._allStaves[this._allStaves.length - 1].Y +
        this._allStaves[this._allStaves.length - 1].Height
      );
    },
    ScaleToWidth: function(width) {
      var i = 0;
      var j = this._allStaves.length;
      while (i < j) {
        this._allStaves[i].ScaleToWidth(width);
        ++i;
      }
      this.Width = width;
    },
    Paint: function(cx, cy, canvas) {
      this.PaintPartial(
        cx + this.X,
        cy + this.Y,
        canvas,
        0,
        this.MasterBarsRenderers.length
      );
    },
    PaintPartial: function(cx, cy, canvas, startIndex, count) {
      this.BuildBoundingsLookup(cx, cy);
      var i = 0;
      var j = this._allStaves.length;
      while (i < j) {
        this._allStaves[i].Paint(cx, cy, canvas, startIndex, count);
        ++i;
      }
      var res = this.Layout.Renderer.Settings.RenderingResources;
      if (this.Staves.length > 0 && startIndex == 0) {
        canvas.set_Color(res.BarSeparatorColor);
        if (
          this._firstStaffInAccolade != null &&
          this._lastStaffInAccolade != null
        ) {
          var firstStart =
            cy +
            this._firstStaffInAccolade.Y +
            this._firstStaffInAccolade.StaveTop +
            this._firstStaffInAccolade.TopSpacing +
            this._firstStaffInAccolade.get_TopOverflow();
          var lastEnd =
            cy +
            this._lastStaffInAccolade.Y +
            this._lastStaffInAccolade.TopSpacing +
            this._lastStaffInAccolade.get_TopOverflow() +
            this._lastStaffInAccolade.StaveBottom;
          var acooladeX = cx + this._firstStaffInAccolade.X;
          canvas.BeginPath();
          canvas.MoveTo(acooladeX, firstStart);
          canvas.LineTo(acooladeX, lastEnd);
          canvas.Stroke();
        }
        canvas.set_Font(res.EffectFont);
        var i1 = 0;
        var j1 = this.Staves.length;
        while (i1 < j1) {
          var g = this.Staves[i1];
          if (g.FirstStaffInAccolade != null && g.LastStaffInAccolade != null) {
            var firstStart1 =
              cy +
              g.FirstStaffInAccolade.Y +
              g.FirstStaffInAccolade.StaveTop +
              g.FirstStaffInAccolade.TopSpacing +
              g.FirstStaffInAccolade.get_TopOverflow();
            var lastEnd1 =
              cy +
              g.LastStaffInAccolade.Y +
              g.LastStaffInAccolade.TopSpacing +
              g.LastStaffInAccolade.get_TopOverflow() +
              g.LastStaffInAccolade.StaveBottom;
            var acooladeX1 = cx + g.FirstStaffInAccolade.X;
            var barSize = 3 * this.Layout.Renderer.Settings.Scale;
            var barOffset = barSize;
            var accoladeStart = firstStart1 - barSize * 4;
            var accoladeEnd = lastEnd1 + barSize * 4;
            if (
              this.Index == 0 &&
              !this.Layout.Renderer.Settings.Layout.Get('hideTrackNames', false)
            ) {
              canvas.FillText(
                g.Track.ShortName,
                cx + 10 * this.Layout.get_Scale(),
                firstStart1
              );
            }
            canvas.FillRect(
              acooladeX1 - barOffset - barSize,
              accoladeStart,
              barSize,
              accoladeEnd - accoladeStart
            );
            var spikeStartX = acooladeX1 - barOffset - barSize;
            var spikeEndX = acooladeX1 + barSize * 2;
            canvas.BeginPath();
            canvas.MoveTo(spikeStartX, accoladeStart);
            canvas.BezierCurveTo(
              spikeStartX,
              accoladeStart,
              spikeStartX,
              accoladeStart,
              spikeEndX,
              accoladeStart - barSize
            );
            canvas.BezierCurveTo(
              acooladeX1,
              accoladeStart + barSize,
              spikeStartX,
              accoladeStart + barSize,
              spikeStartX,
              accoladeStart + barSize
            );
            canvas.ClosePath();
            canvas.Fill();
            canvas.BeginPath();
            canvas.MoveTo(spikeStartX, accoladeEnd);
            canvas.BezierCurveTo(
              spikeStartX,
              accoladeEnd,
              acooladeX1,
              accoladeEnd,
              spikeEndX,
              accoladeEnd + barSize
            );
            canvas.BezierCurveTo(
              acooladeX1,
              accoladeEnd - barSize,
              spikeStartX,
              accoladeEnd - barSize,
              spikeStartX,
              accoladeEnd - barSize
            );
            canvas.ClosePath();
            canvas.Fill();
          }
          ++i1;
        }
      }
    },
    FinalizeGroup: function() {
      var currentY = 0;
      var staff = $iterator(this._allStaves)();
      while (staff.hasNext()) {
        var staff1 = staff.next();
        staff1.X = this.AccoladeSpacing;
        staff1.Y = currentY;
        staff1.FinalizeStaff();
        currentY = currentY + staff1.Height;
      }
    },
    BuildBoundingsLookup: function(cx, cy) {
      var _gthis = this;
      if (this.Layout.Renderer.get_BoundsLookup().IsFinished) {
        return;
      }
      if (
        this._firstStaffInAccolade == null ||
        this._lastStaffInAccolade == null
      ) {
        return;
      }
      var lastStaff = this._allStaves[this._allStaves.length - 1];
      var visualTop = cy + this.Y + this._firstStaffInAccolade.Y;
      var visualBottom =
        cy +
        this.Y +
        this._lastStaffInAccolade.Y +
        this._lastStaffInAccolade.Height;
      var realTop = cy + this.Y + this._allStaves[0].Y;
      var realBottom = cy + this.Y + lastStaff.Y + lastStaff.Height;
      var lineTop =
        cy +
        this.Y +
        this._firstStaffInAccolade.Y +
        this._firstStaffInAccolade.TopSpacing +
        this._firstStaffInAccolade.get_TopOverflow() +
        (this._firstStaffInAccolade.BarRenderers.length > 0
          ? this._firstStaffInAccolade.BarRenderers[0].TopPadding
          : 0);
      var lineBottom =
        cy +
        this.Y +
        lastStaff.Y +
        lastStaff.Height -
        lastStaff.BottomSpacing -
        lastStaff.get_BottomOverflow() -
        (lastStaff.BarRenderers.length > 0
          ? lastStaff.BarRenderers[0].BottomPadding
          : 0);
      var visualHeight = visualBottom - visualTop;
      var lineHeight = lineBottom - lineTop;
      var realHeight = realBottom - realTop;
      var x = this.X + this._firstStaffInAccolade.X;
      var staveGroupBounds = new alphaTab.rendering.utils.StaveGroupBounds();
      var _tmp = new alphaTab.rendering.utils.Bounds();
      _tmp.X = cx;
      _tmp.Y = cy + _gthis.Y;
      _tmp.W = _gthis.Width;
      _tmp.H = _gthis.get_Height();
      staveGroupBounds.VisualBounds = _tmp;
      var _tmp1 = new alphaTab.rendering.utils.Bounds();
      _tmp1.X = cx;
      _tmp1.Y = cy + _gthis.Y;
      _tmp1.W = _gthis.Width;
      _tmp1.H = _gthis.get_Height();
      staveGroupBounds.RealBounds = _tmp1;
      this.Layout.Renderer.get_BoundsLookup().AddStaveGroup(staveGroupBounds);
      var this1 = [];
      var masterBarBoundsLookup = this1;
      var i = 0;
      while (i < this.Staves.length) {
        var j = 0;
        var k = this.Staves[i].FirstStaffInAccolade.BarRenderers.length;
        while (j < k) {
          var renderer = this.Staves[i].FirstStaffInAccolade.BarRenderers[j];
          if (i == 0) {
            var masterBarBounds = new alphaTab.rendering.utils.MasterBarBounds();
            masterBarBounds.Index = renderer.Bar.get_MasterBar().Index;
            masterBarBounds.IsFirstOfLine = renderer.get_IsFirstOfLine();
            var _tmp2 = new alphaTab.rendering.utils.Bounds();
            _tmp2.X = x + renderer.X;
            _tmp2.Y = realTop;
            _tmp2.W = renderer.Width;
            _tmp2.H = realHeight;
            masterBarBounds.RealBounds = _tmp2;
            var _tmp3 = new alphaTab.rendering.utils.Bounds();
            _tmp3.X = x + renderer.X;
            _tmp3.Y = visualTop;
            _tmp3.W = renderer.Width;
            _tmp3.H = visualHeight;
            masterBarBounds.VisualBounds = _tmp3;
            var _tmp4 = new alphaTab.rendering.utils.Bounds();
            _tmp4.X = x + renderer.X;
            _tmp4.Y = lineTop;
            _tmp4.W = renderer.Width;
            _tmp4.H = lineHeight;
            masterBarBounds.LineAlignedBounds = _tmp4;
            this.Layout.Renderer.get_BoundsLookup().AddMasterBar(
              masterBarBounds
            );
            masterBarBoundsLookup.push(masterBarBounds);
          }
          renderer.BuildBoundingsLookup(
            masterBarBoundsLookup[j],
            x,
            cy + this.Y + this._firstStaffInAccolade.Y
          );
          ++j;
        }
        ++i;
      }
    },
    GetBarX: function(index) {
      if (
        this._firstStaffInAccolade == null ||
        this.Layout.Renderer.Tracks.length == 0
      ) {
        return 0;
      }
      var bar = this.Layout.Renderer.Tracks[0].Staves[0].Bars[index];
      var renderer = this.Layout.GetRendererForBar(
        this._firstStaffInAccolade.get_StaveId(),
        bar
      );
      return renderer.X;
    },
    __class__: alphaTab.rendering.staves.StaveGroup
  };
  alphaTab.rendering.staves.StaveTrackGroup = function(staveGroup, track) {
    this.Track = null;
    this.StaveGroup = null;
    this.Staves = null;
    this.FirstStaffInAccolade = null;
    this.LastStaffInAccolade = null;
    this.StaveGroup = staveGroup;
    this.Track = track;
    var this1 = [];
    this.Staves = this1;
  };
  alphaTab.rendering.staves.StaveTrackGroup.__name__ = [
    'alphaTab',
    'rendering',
    'staves',
    'StaveTrackGroup'
  ];
  alphaTab.rendering.staves.StaveTrackGroup.prototype = {
    __class__: alphaTab.rendering.staves.StaveTrackGroup
  };
  alphaTab.rendering.utils.AccidentalHelper = function(bar) {
    this._bar = null;
    this._registeredAccidentals = null;
    this._appliedScoreLines = null;
    this._appliedScoreLinesByValue = null;
    this._notesByValue = null;
    this.MaxNoteValueBeat = null;
    this.MinNoteValueBeat = null;
    this.MaxNoteValue = 0;
    this.MinNoteValue = 0;
    this._bar = bar;
    var this1 = {};
    this._registeredAccidentals = this1;
    var this2 = {};
    this._appliedScoreLines = this2;
    var this3 = {};
    this._appliedScoreLinesByValue = this3;
    var this4 = {};
    this._notesByValue = this4;
    this.MaxNoteValue = -1;
    this.MinNoteValue = -1;
  };
  alphaTab.rendering.utils.AccidentalHelper.__name__ = [
    'alphaTab',
    'rendering',
    'utils',
    'AccidentalHelper'
  ];
  alphaTab.rendering.utils.AccidentalHelper.prototype = {
    ApplyAccidental: function(note) {
      var staff = this._bar.Staff;
      var noteValue = staff.IsPercussion
        ? alphaTab.rendering.utils.PercussionMapper.MapNoteForDisplay(
            note.get_DisplayValue()
          )
        : note.get_DisplayValue();
      var quarterBend = note.get_HasQuarterToneOffset();
      var line = this.RegisterNoteLine(note, noteValue);
      if (this.MinNoteValue == -1 || noteValue < this.MinNoteValue) {
        this.MinNoteValue = noteValue;
        this.MinNoteValueBeat = note.Beat;
      }
      if (this.MaxNoteValue == -1 || noteValue > this.MaxNoteValue) {
        this.MaxNoteValue = noteValue;
        this.MaxNoteValueBeat = note.Beat;
      }
      return this.GetAccidental(line, noteValue, quarterBend);
    },
    ApplyAccidentalForValue: function(relatedBeat, noteValue, quarterBend) {
      var staff = this._bar.Staff;
      if (staff.IsPercussion) {
        noteValue = alphaTab.rendering.utils.PercussionMapper.MapNoteForDisplay(
          noteValue
        );
      }
      var line = this.RegisterNoteValueLine(noteValue);
      if (this.MinNoteValue == -1 || noteValue < this.MinNoteValue) {
        this.MinNoteValue = noteValue;
        this.MinNoteValueBeat = relatedBeat;
      }
      if (this.MaxNoteValue == -1 || noteValue > this.MaxNoteValue) {
        this.MaxNoteValue = noteValue;
        this.MaxNoteValueBeat = relatedBeat;
      }
      return this.GetAccidental(line, noteValue, quarterBend);
    },
    GetAccidental: function(line, noteValue, quarterBend) {
      var accidentalToSet = 0;
      if (!this._bar.Staff.IsPercussion) {
        var ks = this._bar.get_MasterBar().KeySignature;
        var ksi = ks + 7;
        var index = noteValue % 12;
        var keySignatureAccidental = ksi < 7 ? 3 : 2;
        var hasNoteAccidentalForKeySignature =
          alphaTab.rendering.utils.AccidentalHelper.KeySignatureLookup[ksi][
            index
          ];
        var isAccidentalNote =
          alphaTab.rendering.utils.AccidentalHelper.AccidentalNotes[index];
        if (quarterBend) {
          if (isAccidentalNote) {
            accidentalToSet = keySignatureAccidental;
          } else {
            accidentalToSet = 1;
          }
        } else {
          var isAccidentalRegistered = this._registeredAccidentals.hasOwnProperty(
            line
          );
          if (
            hasNoteAccidentalForKeySignature != isAccidentalNote &&
            !isAccidentalRegistered
          ) {
            this._registeredAccidentals[line] = true;
            if (isAccidentalNote) {
              accidentalToSet = keySignatureAccidental;
            } else {
              accidentalToSet = 1;
            }
          } else if (
            hasNoteAccidentalForKeySignature == isAccidentalNote &&
            isAccidentalRegistered
          ) {
            var this1 = this._registeredAccidentals;
            delete this1[line];
            if (isAccidentalNote) {
              accidentalToSet = keySignatureAccidental;
            } else {
              accidentalToSet = 1;
            }
          }
        }
      }
      if (quarterBend) {
        switch (accidentalToSet) {
          case 1:
            return 4;
          case 2:
            return 5;
          case 3:
            return 6;
          default:
        }
      }
      return accidentalToSet;
    },
    RegisterNoteLine: function(n, noteValue) {
      var steps = this.CalculateNoteLine(noteValue, n.AccidentalMode);
      this._appliedScoreLines[n.Id] = steps;
      this._notesByValue[noteValue] = n;
      return steps;
    },
    RegisterNoteValueLine: function(noteValue) {
      var steps = this.CalculateNoteLine(noteValue, 0);
      this._appliedScoreLinesByValue[noteValue] = steps;
      return steps;
    },
    CalculateNoteLine: function(noteValue, mode) {
      var value = noteValue;
      var ks = this._bar.get_MasterBar().KeySignature;
      var clef = this._bar.Clef;
      var index = value % 12;
      var octave = ((value / 12) | 0) - 1;
      var steps = alphaTab.rendering.utils.AccidentalHelper.OctaveSteps[clef];
      steps = steps - octave * 7;
      var stepList =
        alphaTab.model.ModelUtils.KeySignatureIsSharp(ks) ||
        alphaTab.model.ModelUtils.KeySignatureIsNatural(ks)
          ? alphaTab.rendering.utils.AccidentalHelper.SharpNoteSteps
          : alphaTab.rendering.utils.AccidentalHelper.FlatNoteSteps;
      var offset = 0;
      offset = stepList[index];
      steps = steps - stepList[index];
      return steps;
    },
    GetNoteLine: function(n) {
      return this._appliedScoreLines[n.Id];
    },
    GetNoteLineForValue: function(rawValue, searchForNote) {
      if (searchForNote == null) {
        searchForNote = false;
      }
      if (this._appliedScoreLinesByValue.hasOwnProperty(rawValue)) {
        return this._appliedScoreLinesByValue[rawValue];
      }
      if (searchForNote && this._notesByValue.hasOwnProperty(rawValue)) {
        return this.GetNoteLine(this._notesByValue[rawValue]);
      } else {
        return 0;
      }
    },
    __class__: alphaTab.rendering.utils.AccidentalHelper
  };
  alphaTab.rendering.utils.BarBounds = $hx_exports['alphaTab']['rendering'][
    'utils'
  ]['BarBounds'] = function() {
    this.MasterBarBounds = null;
    this.VisualBounds = null;
    this.RealBounds = null;
    this.Bar = null;
    this.Beats = null;
    var this1 = [];
    this.Beats = this1;
  };
  alphaTab.rendering.utils.BarBounds.__name__ = [
    'alphaTab',
    'rendering',
    'utils',
    'BarBounds'
  ];
  alphaTab.rendering.utils.BarBounds.prototype = {
    AddBeat: function(bounds) {
      bounds.BarBounds = this;
      this.Beats.push(bounds);
      this.MasterBarBounds.AddBeat(bounds);
    },
    FindBeatAtPos: function(x) {
      var beat = null;
      var t = $iterator(this.Beats)();
      while (t.hasNext()) {
        var t1 = t.next();
        if (beat == null || t1.RealBounds.X < x) {
          beat = t1;
        } else if (t1.RealBounds.X > x) {
          break;
        }
      }
      return beat;
    },
    __class__: alphaTab.rendering.utils.BarBounds
  };
  alphaTab.rendering.utils.BarHelpers = function(bar) {
    this.BeamHelpers = null;
    this.BeamHelperLookup = null;
    var this1 = [];
    this.BeamHelpers = this1;
    var this2 = [];
    this.BeamHelperLookup = this2;
    var currentBeamHelper = null;
    var currentGraceBeamHelper = null;
    if (bar != null) {
      var i = 0;
      var j = bar.Voices.length;
      while (i < j) {
        var v = bar.Voices[i];
        var this3 = this.BeamHelpers;
        var this4 = [];
        this3.push(this4);
        var this5 = this.BeamHelperLookup;
        var this6 = {};
        this5.push(this6);
        var k = 0;
        var l = v.Beats.length;
        while (k < l) {
          var b = v.Beats[k];
          var helperForBeat;
          if (b.GraceType != 0) {
            helperForBeat = currentGraceBeamHelper;
          } else {
            helperForBeat = currentBeamHelper;
            currentGraceBeamHelper = null;
          }
          if (!b.get_IsRest()) {
            if (helperForBeat == null || !helperForBeat.CheckBeat(b)) {
              if (helperForBeat != null) {
                helperForBeat.Finish();
              }
              helperForBeat = new alphaTab.rendering.utils.BeamingHelper(
                bar.Staff
              );
              helperForBeat.CheckBeat(b);
              if (b.GraceType != 0) {
                currentGraceBeamHelper = helperForBeat;
              } else {
                currentBeamHelper = helperForBeat;
              }
              this.BeamHelpers[v.Index].push(helperForBeat);
            }
          }
          this.BeamHelperLookup[v.Index][b.Index] = helperForBeat;
          ++k;
        }
        if (currentBeamHelper != null) {
          currentBeamHelper.Finish();
        }
        if (currentGraceBeamHelper != null) {
          currentGraceBeamHelper.Finish();
        }
        currentBeamHelper = null;
        currentGraceBeamHelper = null;
        ++i;
      }
    }
  };
  alphaTab.rendering.utils.BarHelpers.__name__ = [
    'alphaTab',
    'rendering',
    'utils',
    'BarHelpers'
  ];
  alphaTab.rendering.utils.BarHelpers.prototype = {
    GetBeamingHelperForBeat: function(beat) {
      return this.BeamHelperLookup[beat.Voice.Index][beat.Index];
    },
    __class__: alphaTab.rendering.utils.BarHelpers
  };
  alphaTab.rendering.utils._BeamDirection = {};
  alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_ = {};
  alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.__name__ = [
    'alphaTab',
    'rendering',
    'utils',
    '_BeamDirection',
    'BeamDirection_Impl_'
  ];
  alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.toString = function(
    this1
  ) {
    switch (this1) {
      case 0:
        return 'Up';
      case 1:
        return 'Down';
    }
    return '';
  };
  alphaTab.rendering.utils.BeamingHelper = function(staff) {
    this._staff = null;
    this._beatLineXPositions = null;
    this.Voice = null;
    this.Beats = null;
    this.ShortestDuration = -4;
    this.FingeringCount = 0;
    this.HasTuplet = false;
    this.FirstMinNoteValue = 0;
    this.FirstMaxNoteValue = 0;
    this.LastMinNoteValue = 0;
    this.LastMaxNoteValue = 0;
    this.MinNoteValue = 0;
    this.MinNoteBeat = null;
    this.MaxNoteValue = 0;
    this.MaxNoteBeat = null;
    this.InvertBeamDirection = false;
    this.IsGrace = false;
    this.Direction = 0;
    this._staff = staff;
    var this1 = [];
    this.Beats = this1;
    var this2 = {};
    this._beatLineXPositions = this2;
    this.ShortestDuration = -4;
    this.MaxNoteValue = -2147483648;
    this.MinNoteValue = -2147483648;
    this.FirstMinNoteValue = -2147483648;
    this.FirstMaxNoteValue = -2147483648;
    this.LastMinNoteValue = -2147483648;
    this.LastMaxNoteValue = -2147483648;
  };
  alphaTab.rendering.utils.BeamingHelper.__name__ = [
    'alphaTab',
    'rendering',
    'utils',
    'BeamingHelper'
  ];
  alphaTab.rendering.utils.BeamingHelper.CanJoin = function(b1, b2) {
    if (
      b1 == null ||
      b2 == null ||
      b1.get_IsRest() ||
      b2.get_IsRest() ||
      b1.GraceType != b2.GraceType ||
      b1.GraceType == 3 ||
      b2.GraceType == 3
    ) {
      return false;
    }
    if (b1.GraceType != 0 && b2.GraceType != 0) {
      return true;
    }
    var m1 = b1.Voice.Bar;
    var m2 = b1.Voice.Bar;
    if (m1 != m2) {
      return false;
    }
    var start1 = b1.PlaybackStart;
    var start2 = b2.PlaybackStart;
    if (
      !alphaTab.rendering.utils.BeamingHelper.CanJoinDuration(b1.Duration) ||
      !alphaTab.rendering.utils.BeamingHelper.CanJoinDuration(b2.Duration)
    ) {
      return start1 == start2;
    }
    if (b1.TupletGroup != b2.TupletGroup) {
      return false;
    }
    if (b1.get_HasTuplet() && b2.get_HasTuplet()) {
      if (b1.TupletGroup == b2.TupletGroup && b1.TupletGroup.IsFull) {
        return true;
      }
    }
    var divisionLength = 960;
    var _g = m1.get_MasterBar().TimeSignatureDenominator;
    if (_g == 8) {
      if (m1.get_MasterBar().TimeSignatureNumerator % 3 == 0) {
        divisionLength = divisionLength + ((960 / 2) | 0);
      }
    }
    var division1 = ((divisionLength + start1) / divisionLength) | 0 | 0;
    var division2 = ((divisionLength + start2) / divisionLength) | 0 | 0;
    return division1 == division2;
  };
  alphaTab.rendering.utils.BeamingHelper.CanJoinDuration = function(d) {
    switch (d) {
      case 1:
      case 2:
      case 4:
        return false;
      default:
        return true;
    }
  };
  alphaTab.rendering.utils.BeamingHelper.IsFullBarJoin = function(
    a,
    b,
    barIndex
  ) {
    if (alphaTab.model.ModelUtils.GetIndex(a.Duration) - 2 - barIndex > 0) {
      return alphaTab.model.ModelUtils.GetIndex(b.Duration) - 2 - barIndex > 0;
    } else {
      return false;
    }
  };
  alphaTab.rendering.utils.BeamingHelper.prototype = {
    GetValue: function(n) {
      if (this._staff.IsPercussion) {
        return alphaTab.rendering.utils.PercussionMapper.MapNoteForDisplay(
          n.get_DisplayValue()
        );
      } else {
        return n.get_DisplayValue();
      }
    },
    GetMaxValue: function(n) {
      var value = this.GetValue(n);
      if (n.HarmonicType != 0 && n.HarmonicType != 1) {
        value = n.get_RealValue() - this._staff.DisplayTranspositionPitch;
      }
      return value;
    },
    GetMinValue: function(n) {
      var value = this.GetValue(n);
      return value;
    },
    GetBeatLineX: function(beat) {
      if (this.HasBeatLineX(beat)) {
        if (this.Direction == 0) {
          var this1 = system.Convert.ToInt32_Single(
            this._beatLineXPositions[beat.Index].Up
          );
          return this1;
        }
        var this2 = system.Convert.ToInt32_Single(
          this._beatLineXPositions[beat.Index].Down
        );
        return this2;
      }
      return 0;
    },
    HasBeatLineX: function(beat) {
      return this._beatLineXPositions.hasOwnProperty(beat.Index);
    },
    RegisterBeatLineX: function(staffId, beat, up, down) {
      var positions = this.GetOrCreateBeatPositions(beat);
      positions.StaffId = staffId;
      positions.Up = up;
      positions.Down = down;
    },
    GetOrCreateBeatPositions: function(beat) {
      if (this._beatLineXPositions.hasOwnProperty(beat.Index)) {
        return this._beatLineXPositions[beat.Index];
      } else {
        return (this._beatLineXPositions[
          beat.Index
        ] = new alphaTab.rendering.utils.BeatLinePositions());
      }
    },
    Finish: function() {
      this.Direction = this.CalculateDirection();
    },
    CalculateDirection: function() {
      if (this.Voice.Index > 0) {
        return this.Invert(1);
      }
      if (this.Voice.Bar.Voices.length > 1) {
        var v = 1;
        while (v < this.Voice.Bar.Voices.length) {
          if (!this.Voice.Bar.Voices[v].IsEmpty) {
            return this.Invert(0);
          }
          ++v;
        }
      }
      if (this.Beats[0].GraceType != 0) {
        return this.Invert(0);
      }
      var avg = ((this.MaxNoteValue + this.MinNoteValue) / 2) | 0;
      return this.Invert(
        avg <
          alphaTab.rendering.utils.BeamingHelper.ScoreMiddleKeys[
            this.Beats[this.Beats.length - 1].Voice.Bar.Clef
          ]
          ? 0
          : 1
      );
    },
    Invert: function(direction) {
      if (!this.InvertBeamDirection) {
        return direction;
      }
      switch (direction) {
        case 0:
          return 1;
        case 1:
          return 0;
        default:
      }
      return 0;
    },
    CheckBeat: function(beat) {
      if (beat.InvertBeamDirection) {
        this.InvertBeamDirection = true;
      }
      if (this.Voice == null) {
        this.Voice = beat.Voice;
      }
      var add = false;
      if (this.Beats.length == 0) {
        add = true;
      } else if (
        alphaTab.rendering.utils.BeamingHelper.CanJoin(
          this.Beats[this.Beats.length - 1],
          beat
        )
      ) {
        add = true;
      }
      if (add) {
        this.Beats.push(beat);
        if (beat.GraceType != 0) {
          this.IsGrace = true;
        }
        var positions = this.GetOrCreateBeatPositions(beat);
        if (beat.get_HasTuplet()) {
          this.HasTuplet = true;
        }
        var fingeringCount = 0;
        var n = 0;
        while (n < beat.Notes.length) {
          var note = beat.Notes[n];
          if (note.LeftHandFinger != -2 || note.RightHandFinger != -2) {
            ++fingeringCount;
          }
          ++n;
        }
        if (fingeringCount > this.FingeringCount) {
          this.FingeringCount = fingeringCount;
        }
        this.LastMinNoteValue = -2147483648;
        this.LastMaxNoteValue = -2147483648;
        this.CheckNote(beat.MinNote);
        this.CheckNote(beat.MaxNote);
        positions.MinNoteValue = this.LastMinNoteValue;
        positions.MaxNoteValue = this.LastMaxNoteValue;
        if (this.ShortestDuration < beat.Duration) {
          this.ShortestDuration = beat.Duration;
        }
        if (beat.get_HasTuplet()) {
          this.HasTuplet = true;
        }
      }
      return add;
    },
    CheckNote: function(note) {
      var value = this.GetValue(note);
      if (this.Beats.length == 1 && this.Beats[0] == note.Beat) {
        if (
          this.FirstMinNoteValue == -2147483648 ||
          value < this.FirstMinNoteValue
        ) {
          this.FirstMinNoteValue = value;
        }
        if (
          this.FirstMaxNoteValue == -2147483648 ||
          value > this.FirstMaxNoteValue
        ) {
          this.FirstMaxNoteValue = value;
        }
      }
      if (
        this.LastMinNoteValue == -2147483648 ||
        value < this.LastMinNoteValue
      ) {
        this.LastMinNoteValue = value;
      }
      if (
        this.LastMaxNoteValue == -2147483648 ||
        value > this.LastMaxNoteValue
      ) {
        this.LastMaxNoteValue = value;
      }
      var minValue = this.GetMinValue(note);
      if (this.MinNoteValue == -2147483648 || this.MinNoteValue > minValue) {
        this.MinNoteValue = minValue;
        this.MinNoteBeat = note.Beat;
      }
      var maxValue = this.GetMaxValue(note);
      if (this.MaxNoteValue == -2147483648 || this.MaxNoteValue < maxValue) {
        this.MaxNoteValue = maxValue;
        this.MaxNoteBeat = note.Beat;
      }
    },
    CalculateBeamY: function(
      stemSize,
      xCorrection,
      xPosition,
      scale,
      yPosition
    ) {
      return this.CalculateBeamYWithDirection(
        stemSize,
        xCorrection,
        xPosition,
        scale,
        yPosition,
        this.Direction
      );
    },
    CalculateBeamYWithDirection: function(
      stemSize,
      xCorrection,
      xPosition,
      scale,
      yPosition,
      direction
    ) {
      if (this.Beats.length == 1) {
        if (direction == 0) {
          return (
            yPosition.GetYPositionForNoteValue(this.MaxNoteValue) - stemSize
          );
        }
        return yPosition.GetYPositionForNoteValue(this.MinNoteValue) + stemSize;
      }
      var maxDistance = 10 * scale;
      if (
        direction == 1 &&
        this.MinNoteBeat != this.Beats[0] &&
        this.MinNoteBeat != this.Beats[this.Beats.length - 1]
      ) {
        return yPosition.GetYPositionForNoteValue(this.MinNoteValue) + stemSize;
      }
      if (
        direction == 0 &&
        this.MaxNoteBeat != this.Beats[0] &&
        this.MinNoteBeat != this.Beats[this.Beats.length - 1]
      ) {
        return yPosition.GetYPositionForNoteValue(this.MaxNoteValue) - stemSize;
      }
      var startX = this.GetBeatLineX(this.Beats[0]) + xCorrection;
      var startY =
        direction == 0
          ? yPosition.GetYPositionForNoteValue(this.FirstMaxNoteValue) -
            stemSize
          : yPosition.GetYPositionForNoteValue(this.FirstMinNoteValue) +
            stemSize;
      var endX =
        this.GetBeatLineX(this.Beats[this.Beats.length - 1]) + xCorrection;
      var endY =
        direction == 0
          ? yPosition.GetYPositionForNoteValue(this.LastMaxNoteValue) - stemSize
          : yPosition.GetYPositionForNoteValue(this.LastMinNoteValue) +
            stemSize;
      if (direction == 1 && startY > endY && startY - endY > maxDistance) {
        endY = startY - maxDistance;
      }
      if (direction == 1 && endY > startY && endY - startY > maxDistance) {
        startY = endY - maxDistance;
      }
      if (direction == 0 && startY < endY && endY - startY > maxDistance) {
        endY = startY + maxDistance;
      }
      if (direction == 0 && endY < startY && startY - endY > maxDistance) {
        startY = endY + maxDistance;
      }
      if (startX == endX) {
        return startY;
      }
      return (
        ((endY - startY) / (endX - startX)) * (xPosition - startX) + startY
      );
    },
    IsPositionFrom: function(staffId, beat) {
      if (!this._beatLineXPositions.hasOwnProperty(beat.Index)) {
        return true;
      }
      if (this._beatLineXPositions[beat.Index].StaffId != staffId) {
        return this._beatLineXPositions[beat.Index].StaffId == null;
      } else {
        return true;
      }
    },
    GetBeatMinValue: function(beat) {
      if (!this._beatLineXPositions.hasOwnProperty(beat.Index)) {
        return beat.MinNote.get_DisplayValue();
      }
      return this._beatLineXPositions[beat.Index].MinNoteValue;
    },
    GetBeatMaxValue: function(beat) {
      if (!this._beatLineXPositions.hasOwnProperty(beat.Index)) {
        return beat.MaxNote.get_DisplayValue();
      }
      return this._beatLineXPositions[beat.Index].MaxNoteValue;
    },
    __class__: alphaTab.rendering.utils.BeamingHelper
  };
  alphaTab.rendering.utils.BeatBounds = $hx_exports['alphaTab']['rendering'][
    'utils'
  ]['BeatBounds'] = function() {
    this.BarBounds = null;
    this.VisualBounds = null;
    this.RealBounds = null;
    this.Beat = null;
    this.Notes = null;
  };
  alphaTab.rendering.utils.BeatBounds.__name__ = [
    'alphaTab',
    'rendering',
    'utils',
    'BeatBounds'
  ];
  alphaTab.rendering.utils.BeatBounds.prototype = {
    AddNote: function(bounds) {
      if (this.Notes == null) {
        var this1 = [];
        this.Notes = this1;
      }
      this.Notes.push(bounds);
    },
    FindNoteAtPos: function(x, y) {
      if (this.Notes == null) {
        return null;
      }
      var note = $iterator(this.Notes)();
      while (note.hasNext()) {
        var note1 = note.next();
        var bottom = note1.NoteHeadBounds.Y + note1.NoteHeadBounds.H;
        var right = note1.NoteHeadBounds.X + note1.NoteHeadBounds.W;
        if (
          note1.NoteHeadBounds.X >= x &&
          note1.NoteHeadBounds.Y >= y &&
          x <= right &&
          y <= bottom
        ) {
          return note1.Note;
        }
      }
      return null;
    },
    __class__: alphaTab.rendering.utils.BeatBounds
  };
  alphaTab.rendering.utils.BeatLinePositions = function() {
    this.StaffId = null;
    this.Up = 0.0;
    this.Down = 0.0;
    this.MinNoteValue = 0;
    this.MaxNoteValue = 0;
  };
  alphaTab.rendering.utils.BeatLinePositions.__name__ = [
    'alphaTab',
    'rendering',
    'utils',
    'BeatLinePositions'
  ];
  alphaTab.rendering.utils.BeatLinePositions.prototype = {
    __class__: alphaTab.rendering.utils.BeatLinePositions
  };
  alphaTab.rendering.utils.Bounds = $hx_exports['alphaTab']['rendering'][
    'utils'
  ]['Bounds'] = function() {
    this.X = 0.0;
    this.Y = 0.0;
    this.W = 0.0;
    this.H = 0.0;
  };
  alphaTab.rendering.utils.Bounds.__name__ = [
    'alphaTab',
    'rendering',
    'utils',
    'Bounds'
  ];
  alphaTab.rendering.utils.Bounds.prototype = {
    __class__: alphaTab.rendering.utils.Bounds
  };
  alphaTab.rendering.utils.BoundsLookup = $hx_exports['alphaTab']['rendering'][
    'utils'
  ]['BoundsLookup'] = function() {
    this._beatLookup = null;
    this._masterBarLookup = null;
    this._currentStaveGroup = null;
    this.StaveGroups = null;
    this.IsFinished = false;
    var this1 = [];
    this.StaveGroups = this1;
    var this2 = {};
    this._beatLookup = this2;
    var this3 = {};
    this._masterBarLookup = this3;
  };
  alphaTab.rendering.utils.BoundsLookup.__name__ = [
    'alphaTab',
    'rendering',
    'utils',
    'BoundsLookup'
  ];
  alphaTab.rendering.utils.BoundsLookup.FromJson = function(json, score) {
    var lookup = new alphaTab.rendering.utils.BoundsLookup();
    var staveGroups = json['StaveGroups'];
    var staveGroup = $iterator(staveGroups)();
    while (staveGroup.hasNext()) {
      var staveGroup1 = staveGroup.next();
      var sg = new alphaTab.rendering.utils.StaveGroupBounds();
      sg.VisualBounds = staveGroup1.VisualBounds;
      sg.RealBounds = staveGroup1.RealBounds;
      lookup.AddStaveGroup(sg);
      var masterBar = $iterator(staveGroup1.Bars)();
      while (masterBar.hasNext()) {
        var masterBar1 = masterBar.next();
        var mb = new alphaTab.rendering.utils.MasterBarBounds();
        mb.Index = masterBar1.Index;
        mb.IsFirstOfLine = masterBar1.IsFirstOfLine;
        mb.LineAlignedBounds = masterBar1.LineAlignedBounds;
        mb.VisualBounds = masterBar1.VisualBounds;
        mb.RealBounds = masterBar1.RealBounds;
        sg.AddBar(mb);
        var bar = $iterator(masterBar1.Bars)();
        while (bar.hasNext()) {
          var bar1 = bar.next();
          var b = new alphaTab.rendering.utils.BarBounds();
          b.VisualBounds = bar1.VisualBounds;
          b.RealBounds = bar1.RealBounds;
          mb.AddBar(b);
          var beat = $iterator(bar1.Beats)();
          while (beat.hasNext()) {
            var beat1 = beat.next();
            var bb = new alphaTab.rendering.utils.BeatBounds();
            bb.VisualBounds = beat1.VisualBounds;
            bb.RealBounds = beat1.RealBounds;
            bb.Beat =
              score.Tracks[beat1['TrackIndex']].Staves[
                beat1['StaffIndex']
              ].Bars[beat1['BarIndex']].Voices[beat1['VoiceIndex']].Beats[
                beat1['BeatIndex']
              ];
            if (beat1.Notes != null) {
              var this1 = [];
              bb.Notes = this1;
              var note = $iterator(beat1.Notes)();
              while (note.hasNext()) {
                var note1 = note.next();
                var n = new alphaTab.rendering.utils.NoteBounds();
                n.Note = bb.Beat.Notes[note1['Index']];
                n.NoteHeadBounds = note1.NoteHeadBounds;
                bb.AddNote(n);
              }
            }
            b.AddBeat(bb);
          }
        }
      }
    }
    return lookup;
  };
  alphaTab.rendering.utils.BoundsLookup.prototype = {
    ToJson: function() {
      var json = {};
      var this1 = [];
      var staveGroups = this1;
      json.StaveGroups = staveGroups;
      var group = $iterator(this.StaveGroups)();
      while (group.hasNext()) {
        var group1 = group.next();
        var g = {};
        g.VisualBounds = this.BoundsToJson(group1.VisualBounds);
        g.RealBounds = this.BoundsToJson(group1.RealBounds);
        var this2 = [];
        g.Bars = this2;
        var masterBar = $iterator(group1.Bars)();
        while (masterBar.hasNext()) {
          var masterBar1 = masterBar.next();
          var mb = {};
          mb.LineAlignedBounds = this.BoundsToJson(
            masterBar1.LineAlignedBounds
          );
          mb.VisualBounds = this.BoundsToJson(masterBar1.VisualBounds);
          mb.RealBounds = this.BoundsToJson(masterBar1.RealBounds);
          mb.Index = masterBar1.Index;
          var this3 = [];
          mb.Bars = this3;
          var bar = $iterator(masterBar1.Bars)();
          while (bar.hasNext()) {
            var bar1 = bar.next();
            var b = {};
            b.VisualBounds = this.BoundsToJson(bar1.VisualBounds);
            b.RealBounds = this.BoundsToJson(bar1.RealBounds);
            var this4 = [];
            b.Beats = this4;
            var beat = $iterator(bar1.Beats)();
            while (beat.hasNext()) {
              var beat1 = beat.next();
              var bb = {};
              bb.VisualBounds = this.BoundsToJson(beat1.VisualBounds);
              bb.RealBounds = this.BoundsToJson(beat1.RealBounds);
              bb.BeatIndex = beat1.Beat.Index;
              bb.VoiceIndex = beat1.Beat.Voice.Index;
              bb.BarIndex = beat1.Beat.Voice.Bar.Index;
              bb.StaffIndex = beat1.Beat.Voice.Bar.Staff.Index;
              bb.TrackIndex = beat1.Beat.Voice.Bar.Staff.Track.Index;
              if (beat1.Notes != null) {
                var this5 = [];
                var notes = (bb.Notes = this5);
                var note = $iterator(beat1.Notes)();
                while (note.hasNext()) {
                  var note1 = note.next();
                  var n = {};
                  n.Index = note1.Note.Index;
                  n.NoteHeadBounds = this.BoundsToJson(note1.NoteHeadBounds);
                  notes.push(n);
                }
              }
              b.Beats.push(bb);
            }
            mb.Bars.push(b);
          }
          g.Bars.push(mb);
        }
        staveGroups.push(g);
      }
      return json;
    },
    BoundsToJson: function(bounds) {
      var json = {};
      json.X = bounds.X;
      json.Y = bounds.Y;
      json.W = bounds.W;
      json.H = bounds.H;
      return json;
    },
    Finish: function() {
      var t = $iterator(this.StaveGroups)();
      while (t.hasNext()) {
        var t1 = t.next();
        t1.Finish();
      }
      this.IsFinished = true;
    },
    AddNote: function(bounds) {
      var beat = this.FindBeat(bounds.Note.Beat);
      beat.AddNote(bounds);
    },
    AddStaveGroup: function(bounds) {
      bounds.Index = this.StaveGroups.length;
      bounds.BoundsLookup = this;
      this.StaveGroups.push(bounds);
      this._currentStaveGroup = bounds;
    },
    AddMasterBar: function(bounds) {
      if (bounds.StaveGroupBounds == null) {
        bounds.StaveGroupBounds = this._currentStaveGroup;
        this._masterBarLookup[bounds.Index] = bounds;
        this._currentStaveGroup.AddBar(bounds);
      } else {
        this._masterBarLookup[bounds.Index] = bounds;
      }
    },
    AddBeat: function(bounds) {
      this._beatLookup[bounds.Beat.Id] = bounds;
    },
    FindMasterBarByIndex: function(index) {
      if (this._masterBarLookup.hasOwnProperty(index)) {
        return this._masterBarLookup[index];
      }
      return null;
    },
    FindMasterBar: function(bar) {
      var id = bar.Index;
      if (this._masterBarLookup.hasOwnProperty(id)) {
        return this._masterBarLookup[id];
      }
      return null;
    },
    FindBeat: function(beat) {
      var id = beat.Id;
      if (this._beatLookup.hasOwnProperty(id)) {
        return this._beatLookup[id];
      }
      return null;
    },
    GetBeatAtPos: function(x, y) {
      var bottom = 0;
      var top = this.StaveGroups.length - 1;
      var staveGroupIndex = -1;
      while (bottom <= top) {
        var middle = ((top + bottom) / 2) | 0;
        var group = this.StaveGroups[middle];
        if (
          y >= group.RealBounds.Y &&
          y <= group.RealBounds.Y + group.RealBounds.H
        ) {
          staveGroupIndex = middle;
          break;
        }
        if (y < group.RealBounds.Y) {
          top = middle - 1;
        } else {
          bottom = middle + 1;
        }
      }
      if (staveGroupIndex == -1) {
        return null;
      }
      var staveGroup = this.StaveGroups[staveGroupIndex];
      var bar = staveGroup.FindBarAtPos(x);
      if (bar != null) {
        return bar.FindBeatAtPos(x, y);
      }
      return null;
    },
    GetNoteAtPos: function(beat, x, y) {
      var beatBounds = this.FindBeat(beat);
      if (beatBounds == null) {
        return null;
      }
      x =
        x - beatBounds.BarBounds.MasterBarBounds.StaveGroupBounds.RealBounds.X;
      y =
        y - beatBounds.BarBounds.MasterBarBounds.StaveGroupBounds.RealBounds.Y;
      return beatBounds.FindNoteAtPos(x, y);
    },
    __class__: alphaTab.rendering.utils.BoundsLookup
  };
  alphaTab.rendering.utils.MasterBarBounds = $hx_exports['alphaTab'][
    'rendering'
  ]['utils']['MasterBarBounds'] = function() {
    this.Index = 0;
    this.IsFirstOfLine = false;
    this.VisualBounds = null;
    this.RealBounds = null;
    this.LineAlignedBounds = null;
    this.Bars = null;
    this.StaveGroupBounds = null;
    var this1 = [];
    this.Bars = this1;
  };
  alphaTab.rendering.utils.MasterBarBounds.__name__ = [
    'alphaTab',
    'rendering',
    'utils',
    'MasterBarBounds'
  ];
  alphaTab.rendering.utils.MasterBarBounds.prototype = {
    AddBar: function(bounds) {
      bounds.MasterBarBounds = this;
      this.Bars.push(bounds);
    },
    FindBeatAtPos: function(x, y) {
      var beat = null;
      var bar = $iterator(this.Bars)();
      while (bar.hasNext()) {
        var bar1 = bar.next();
        var b = bar1.FindBeatAtPos(x);
        if (b != null && (beat == null || beat.RealBounds.X < b.RealBounds.X)) {
          beat = b;
        }
      }
      if (beat == null) {
        return null;
      } else {
        return beat.Beat;
      }
    },
    Finish: function() {
      var comparison = function(a, b) {
        if (a.RealBounds.Y < b.RealBounds.Y) {
          return -1;
        }
        if (a.RealBounds.Y > b.RealBounds.Y) {
          return 1;
        }
        if (a.RealBounds.X < b.RealBounds.X) {
          return -1;
        }
        if (a.RealBounds.X > b.RealBounds.X) {
          return 1;
        }
        return 0;
      };
      this.Bars.sort(function(a1, b1) {
        return comparison(a1, b1);
      });
    },
    AddBeat: function(bounds) {
      this.StaveGroupBounds.BoundsLookup.AddBeat(bounds);
    },
    __class__: alphaTab.rendering.utils.MasterBarBounds
  };
  alphaTab.rendering.utils.NoteBounds = $hx_exports['alphaTab']['rendering'][
    'utils'
  ]['NoteBounds'] = function() {
    this.NoteHeadBounds = null;
    this.Note = null;
  };
  alphaTab.rendering.utils.NoteBounds.__name__ = [
    'alphaTab',
    'rendering',
    'utils',
    'NoteBounds'
  ];
  alphaTab.rendering.utils.NoteBounds.prototype = {
    __class__: alphaTab.rendering.utils.NoteBounds
  };
  alphaTab.rendering.utils.PercussionMapper = function() {};
  alphaTab.rendering.utils.PercussionMapper.__name__ = [
    'alphaTab',
    'rendering',
    'utils',
    'PercussionMapper'
  ];
  alphaTab.rendering.utils.PercussionMapper.MidiFromElementVariation = function(
    note
  ) {
    return alphaTab.rendering.utils.PercussionMapper.ElementVariationToMidi[
      note.Element
    ][note.Variation];
  };
  alphaTab.rendering.utils.PercussionMapper.MapNoteForDisplay = function(
    value
  ) {
    if (value == 61 || value == 66 || value == 44) {
      return 62;
    } else if (value == 60 || value == 65) {
      return 64;
    } else if (value >= 35 && value <= 36) {
      return 65;
    } else if (value == 41 || value == 64) {
      return 67;
    } else if (value == 43 || value == 62) {
      return 69;
    } else if (value == 45 || value == 63) {
      return 71;
    } else if (value == 47 || value == 54) {
      return 74;
    } else if (value == 48 || value == 56) {
      return 76;
    } else if (value == 50) {
      return 77;
    } else if (
      value == 42 ||
      value == 46 ||
      (value >= 49 && value <= 53) ||
      value == 57 ||
      value == 59
    ) {
      return 79;
    }
    return 72;
  };
  alphaTab.rendering.utils.PercussionMapper.prototype = {
    __class__: alphaTab.rendering.utils.PercussionMapper
  };
  alphaTab.rendering.utils.StaveGroupBounds = $hx_exports['alphaTab'][
    'rendering'
  ]['utils']['StaveGroupBounds'] = function() {
    this.Index = 0;
    this.VisualBounds = null;
    this.RealBounds = null;
    this.Bars = null;
    this.BoundsLookup = null;
    var this1 = [];
    this.Bars = this1;
    this.Index = 0;
  };
  alphaTab.rendering.utils.StaveGroupBounds.__name__ = [
    'alphaTab',
    'rendering',
    'utils',
    'StaveGroupBounds'
  ];
  alphaTab.rendering.utils.StaveGroupBounds.prototype = {
    Finish: function() {
      var t = $iterator(this.Bars)();
      while (t.hasNext()) {
        var t1 = t.next();
        t1.Finish();
      }
    },
    AddBar: function(bounds) {
      this.BoundsLookup.AddMasterBar(bounds);
      bounds.StaveGroupBounds = this;
      this.Bars.push(bounds);
    },
    FindBarAtPos: function(x) {
      var b = null;
      var bar = $iterator(this.Bars)();
      while (bar.hasNext()) {
        var bar1 = bar.next();
        if (b == null || bar1.RealBounds.X < x) {
          b = bar1;
        } else if (x > bar1.RealBounds.X + bar1.RealBounds.W) {
          break;
        }
      }
      return b;
    },
    __class__: alphaTab.rendering.utils.StaveGroupBounds
  };
  alphaTab.ui = {};
  alphaTab.ui.IMouseEventArgs = $hx_exports['alphaTab']['ui'][
    'IMouseEventArgs'
  ] = function() {};
  alphaTab.ui.IMouseEventArgs.__name__ = ['alphaTab', 'ui', 'IMouseEventArgs'];
  alphaTab.ui.IMouseEventArgs.prototype = {
    __class__: alphaTab.ui.IMouseEventArgs
  };
  alphaTab.ui.BrowserMouseEventArgs = function(e) {
    this._e = null;
    this._e = e;
  };
  alphaTab.ui.BrowserMouseEventArgs.__name__ = [
    'alphaTab',
    'ui',
    'BrowserMouseEventArgs'
  ];
  alphaTab.ui.BrowserMouseEventArgs.__interfaces__ = [
    alphaTab.ui.IMouseEventArgs
  ];
  alphaTab.ui.BrowserMouseEventArgs.prototype = {
    get_IsLeftMouseButton: function() {
      return this._e.button == 0;
    },
    GetX: function(relativeTo) {
      var relativeToElement = js.Boot.__cast(
        relativeTo,
        alphaTab.ui.HtmlElementContainer
      ).Element;
      var bounds = relativeToElement.getBoundingClientRect();
      var left =
        bounds.left + relativeToElement.ownerDocument.defaultView.pageXOffset;
      return this._e.pageX - left;
    },
    GetY: function(relativeTo) {
      var relativeToElement = js.Boot.__cast(
        relativeTo,
        alphaTab.ui.HtmlElementContainer
      ).Element;
      var bounds = relativeToElement.getBoundingClientRect();
      var top =
        bounds.top + relativeToElement.ownerDocument.defaultView.pageYOffset;
      return this._e.pageY - top;
    },
    PreventDefault: function() {
      this._e.preventDefault();
    },
    __class__: alphaTab.ui.BrowserMouseEventArgs
  };
  alphaTab.ui.IUiFacade = $hx_exports['alphaTab']['ui'][
    'IUiFacade'
  ] = function() {};
  alphaTab.ui.IUiFacade.__name__ = ['alphaTab', 'ui', 'IUiFacade'];
  alphaTab.ui.IUiFacade.prototype = {
    __class__: alphaTab.ui.IUiFacade
  };
  alphaTab.ui.BrowserUiFacade = function(rootElement) {
    this._api = null;
    this._contents = null;
    this._file = null;
    this._visibilityCheckIntervalId = 0;
    this._visibilityCheckInterval = 0;
    this._totalResultCount = 0;
    this.__RootContainer = null;
    this.__AreWorkersSupported = false;
    rootElement.classList.add('alphaTab');
    this.__RootContainer = new alphaTab.ui.HtmlElementContainer(rootElement);
    var workersUnsupported = !window['Worker'];
    this.__AreWorkersSupported = !workersUnsupported;
  };
  alphaTab.ui.BrowserUiFacade.__name__ = ['alphaTab', 'ui', 'BrowserUiFacade'];
  alphaTab.ui.BrowserUiFacade.__interfaces__ = [alphaTab.ui.IUiFacade];
  alphaTab.ui.BrowserUiFacade.prototype = {
    add__rootContainerBecameVisible: function(value) {
      this._rootContainerBecameVisible = system._EventAction.EventAction_Impl_.add(
        this._rootContainerBecameVisible,
        value
      );
    },
    remove__rootContainerBecameVisible: function(value) {
      this._rootContainerBecameVisible = system._EventAction.EventAction_Impl_.sub(
        this._rootContainerBecameVisible,
        value
      );
    },
    get_ResizeThrottle: function() {
      return 10;
    },
    get_RootContainer: function() {
      return this.__RootContainer;
    },
    get_AreWorkersSupported: function() {
      return this.__AreWorkersSupported;
    },
    get_CanRender: function() {
      if (this._api.Settings.Engine == 'html5') {
        return alphaTab.Environment.IsFontLoaded;
      } else {
        return true;
      }
    },
    add_CanRenderChanged: function(value) {
      alphaTab.Environment.add_FontLoaded(value);
    },
    remove_CanRenderChanged: function(value) {
      alphaTab.Environment.add_FontLoaded(value);
    },
    CreateWorkerRenderer: function() {
      return new alphaTab.platform.javaScript.AlphaTabWorkerScoreRenderer(
        this._api,
        this._api.Settings
      );
    },
    add_RootContainerBecameVisible: function(value) {
      var _gthis = this;
      if (this.get_RootContainer().get_IsVisible()) {
        value();
      } else {
        this.add__rootContainerBecameVisible(value);
        if (this._visibilityCheckIntervalId == 0) {
          this._visibilityCheckIntervalId = window.setInterval(function() {
            if (_gthis._api.Container.get_IsVisible()) {
              window.clearInterval(_gthis._visibilityCheckIntervalId);
              _gthis._visibilityCheckIntervalId = 0;
              if (_gthis._rootContainerBecameVisible != null) {
                system._EventAction.EventAction_Impl_.Invoke(
                  _gthis._rootContainerBecameVisible
                );
              }
              _gthis._visibilityCheckIntervalId = 0;
            }
          }, this._visibilityCheckInterval);
        }
      }
    },
    remove_RootContainerBecameVisible: function(value) {
      this.remove__rootContainerBecameVisible(value);
    },
    Initialize: function(api, raw) {
      this._api = api;
      var options = raw;
      var dataAttributes = this.GetDataAttributes();
      var settings = alphaTab.Settings.FromJson(options, dataAttributes);
      api.Settings = settings;
      if (settings.Engine == 'default' || settings.Engine == 'svg') {
        api.Container.add_Scroll($bind(this, this.ShowSvgsInViewPort));
        api.Container.add_Resize($bind(this, this.ShowSvgsInViewPort));
      }
      var tracksData;
      if (options != null && options.tracks) {
        tracksData = options.tracks;
      } else if (dataAttributes.hasOwnProperty('tracks')) {
        tracksData = dataAttributes['tracks'];
      } else {
        tracksData = 0;
      }
      this.SetTracks(tracksData, false);
      this._contents = '';
      var element = js.Boot.__cast(
        api.Container,
        alphaTab.ui.HtmlElementContainer
      );
      if (dataAttributes.hasOwnProperty('tex') && !!element.Element.innerText) {
        this._contents = element.Element.innerHTML;
        element.Element.innerHTML = '';
      }
      this.CreateStyleElement(settings);
      if (options && options.file) {
        this._file = options.file;
      } else if (dataAttributes.hasOwnProperty('file')) {
        this._file = dataAttributes['file'];
      }
      this._visibilityCheckInterval = 500;
      if (options && options.visibilityCheckInterval) {
        this._visibilityCheckInterval = options.visibilityCheckInterval;
      }
    },
    Destroy: function() {
      js.Boot.__cast(
        this.__RootContainer,
        alphaTab.ui.HtmlElementContainer
      ).Element.innerHTML = '';
    },
    CreateCanvasElement: function() {
      var canvasElement = window.document.createElement('div');
      canvasElement.className = 'alphaTabSurface';
      canvasElement.style.fontSize = '0';
      canvasElement.style.overflow = 'hidden';
      canvasElement.style.lineHeight = '0';
      return new alphaTab.ui.HtmlElementContainer(canvasElement);
    },
    TriggerEvent: function(container, name, details) {
      var element = js.Boot.__cast(container, alphaTab.ui.HtmlElementContainer)
        .Element;
      name = 'alphaTab.' + name;
      var e = window.document.createEvent('CustomEvent');
      e.initCustomEvent(name, false, false, details);
      element.dispatchEvent(e);
      var json = window;
      if (json && 'jQuery' in json) {
        var jquery = window['jQuery'];
        jquery(element).trigger(name, details);
      }
    },
    InitialRender: function() {
      var _gthis = this;
      this._api.Renderer.add_PreRender(function() {
        _gthis._totalResultCount = 0;
      });
      this.add_RootContainerBecameVisible(function() {
        if (_gthis._api.AutoSize) {
          var tmp = system.Convert.ToInt32_Single(
            _gthis.get_RootContainer().get_Width()
          );
          _gthis._api.Settings.Width = tmp;
          _gthis._api.Renderer.UpdateSettings(_gthis._api.Settings);
        }
        var s = _gthis._contents;
        if (!(s == null || s.length == 0)) {
          _gthis._api.Tex(_gthis._contents, null);
        } else {
          var s1 = _gthis._file;
          if (!(s1 == null || s1.length == 0)) {
            alphaTab.importer.ScoreLoader.LoadScoreAsync(
              _gthis._file,
              function(s2) {
                _gthis._api.ScoreLoaded(s2, true);
              },
              function(e) {
                _gthis._api.OnError('import', e);
              },
              _gthis._api.Settings
            );
          }
        }
      });
    },
    ShowSvgsInViewPort: function() {
      var placeholders = js.Boot.__cast(
        this._api.CanvasElement,
        alphaTab.ui.HtmlElementContainer
      ).Element.querySelectorAll('[data-lazy=true]');
      var i = 0;
      while (i < placeholders.length) {
        var placeholder = placeholders.item(i);
        if (this.IsElementInViewPort(placeholder)) {
          placeholder.outerHTML = placeholder['svg'];
        }
        ++i;
      }
    },
    IsElementInViewPort: function(element) {
      var rect = element.getBoundingClientRect();
      if (
        rect.top + rect.height >= 0 &&
        rect.top <= window.innerHeight &&
        rect.left + rect.width >= 0
      ) {
        return rect.left <= window.innerWidth;
      } else {
        return false;
      }
    },
    CreateStyleElement: function(settings) {
      var elementDocument = js.Boot.__cast(
        this._api.Container,
        alphaTab.ui.HtmlElementContainer
      ).Element.ownerDocument;
      var styleElement = elementDocument.getElementById('alphaTabStyle');
      if (styleElement == null) {
        var fontDirectory = settings.FontDirectory;
        styleElement = elementDocument.createElement('style');
        styleElement.id = 'alphaTabStyle';
        styleElement.type = 'text/css';
        var this1 = '';
        var css = this1;
        css = css + ('@font-face {' + '\r\n');
        css = css + ("    font-family: 'alphaTab';" + '\r\n');
        css =
          css + ("     src: url('" + fontDirectory + "Bravura.eot');" + '\r\n');
        css =
          css +
          ("     src: url('" +
            fontDirectory +
            "Bravura.eot?#iefix') format('embedded-opentype')" +
            '\r\n');
        css =
          css +
          ("          , url('" +
            fontDirectory +
            "Bravura.woff') format('woff')" +
            '\r\n');
        css =
          css +
          ("          , url('" +
            fontDirectory +
            "Bravura.otf') format('opentype')" +
            '\r\n');
        css =
          css +
          ("          , url('" +
            fontDirectory +
            "Bravura.svg#Bravura') format('svg');" +
            '\r\n');
        css = css + ('     font-weight: normal;' + '\r\n');
        css = css + ('     font-style: normal;' + '\r\n');
        css = css + ('}' + '\r\n');
        css = css + ('.alphaTabSurface * {' + '\r\n');
        css = css + ('    cursor: default;' + '\r\n');
        css = css + ('}' + '\r\n');
        css = css + ('.at {' + '\r\n');
        css = css + ("     font-family: 'alphaTab';" + '\r\n');
        css = css + ('     speak: none;' + '\r\n');
        css = css + ('     font-style: normal;' + '\r\n');
        css = css + ('     font-weight: normal;' + '\r\n');
        css = css + ('     font-variant: normal;' + '\r\n');
        css = css + ('     text-transform: none;' + '\r\n');
        css = css + ('     line-height: 1;' + '\r\n');
        css = css + ('     line-height: 1;' + '\r\n');
        css = css + ('     -webkit-font-smoothing: antialiased;' + '\r\n');
        css = css + ('     -moz-osx-font-smoothing: grayscale;' + '\r\n');
        css = css + ('     font-size: 34px;' + '\r\n');
        css = css + ('     overflow: visible !important;' + '\r\n');
        css = css + ('}' + '\r\n');
        styleElement.innerHTML = css;
        elementDocument
          .getElementsByTagName('head')
          .item(0)
          .appendChild(styleElement);
        alphaTab.Environment.CheckForFontAvailability();
      }
    },
    SetTracks: function(tracksData, render) {
      if (render == null) {
        render = true;
      }
      var score = null;
      var tmp;
      if (tracksData.length) {
        var o = tracksData[0].Index;
        tmp = typeof o == 'number';
      } else {
        tmp = false;
      }
      if (tmp) {
        score = tracksData[0].Score;
      } else {
        var o1 = tracksData.Index;
        if (typeof o1 == 'number') {
          score = tracksData.Score;
        }
      }
      this._api.RenderTracks(score, this.ParseTracks(tracksData), render);
    },
    ParseTracks: function(tracksData) {
      var this1 = [];
      var tracks = this1;
      if (typeof tracksData == 'string') {
        try {
          if (tracksData == 'all') {
            return null;
          }
          tracksData = JSON.parse(tracksData);
        } catch (__e) {
          tracksData = [0];
        }
      }
      if (typeof tracksData == 'number') {
        tracks.push(tracksData);
      } else if (tracksData.length) {
        var i = 0;
        while (i < tracksData.length) {
          var value;
          if (typeof tracksData[i] == 'number') {
            value = tracksData[i];
          } else {
            var o = tracksData[i].Index;
            if (typeof o == 'number') {
              var track = tracksData[i];
              value = track.Index;
            } else {
              value = alphaTab.platform.Platform.ParseInt(
                tracksData[i].ToString()
              );
            }
          }
          if (value >= 0) {
            tracks.push(value);
          }
          ++i;
        }
      } else {
        var o1 = tracksData.Index;
        if (typeof o1 == 'number') {
          tracks.push(tracksData.Index.As());
        }
      }
      return new Int32Array(tracks);
    },
    GetDataAttributes: function() {
      var this1 = {};
      var dataAttributes = this1;
      var element = js.Boot.__cast(
        this._api.Container,
        alphaTab.ui.HtmlElementContainer
      ).Element;
      if (element.dataset) {
        var json = element.dataset;
        var key = HxOverrides.iter(Object.keys(json));
        while (key.hasNext()) {
          var key1 = key.next();
          var value = element.dataset[key1];
          try {
            var stringValue = value;
            value = JSON.parse(stringValue);
          } catch (__e) {
            if (value == '') {
              value = null;
            }
          }
          dataAttributes[key1] = value;
        }
      } else {
        var i = 0;
        while (i < element.attributes.length) {
          var attr = element.attributes.item(i);
          var nodeName = attr.nodeName;
          if (StringTools.startsWith(nodeName, 'data-')) {
            var a = HxOverrides.substr(nodeName, 5, null);
            var this2 = system.Convert.ToUInt16(45);
            var this3 = this2;
            var keyParts = system._CsString.CsString_Impl_.Split_CharArray(a, [
              this3
            ]);
            var key2 = keyParts[0];
            var j = 1;
            while (j < keyParts.length) {
              key2 =
                key2 +
                (HxOverrides.substr(keyParts[j], 0, 1).toUpperCase() +
                  HxOverrides.substr(keyParts[j], 1, null));
              ++j;
            }
            var value1 = attr.nodeValue;
            try {
              value1 = JSON.parse(value1);
            } catch (__e1) {
              if (value1 == '') {
                value1 = null;
              }
            }
            dataAttributes[key2] = value1;
          }
          ++i;
        }
      }
      return dataAttributes;
    },
    BeginAppendRenderResults: function(renderResult) {
      var _gthis = this;
      window.setTimeout(function() {
        var canvasElement = js.Boot.__cast(
          _gthis._api.CanvasElement,
          alphaTab.ui.HtmlElementContainer
        ).Element;
        if (renderResult == null) {
          while (canvasElement.childElementCount > _gthis._totalResultCount)
            canvasElement.removeChild(canvasElement.lastChild);
        } else {
          var body = renderResult.RenderResult;
          if (typeof body == 'string') {
            var placeholder;
            if (_gthis._totalResultCount < canvasElement.childElementCount) {
              placeholder = canvasElement.childNodes.item(
                _gthis._totalResultCount
              );
            } else {
              placeholder = window.document.createElement('div');
              canvasElement.appendChild(placeholder);
            }
            placeholder.style.width = Std.string(renderResult.Width) + 'px';
            placeholder.style.height = Std.string(renderResult.Height) + 'px';
            placeholder.style.display = 'inline-block';
            if (
              _gthis.IsElementInViewPort(placeholder) ||
              _gthis._api.Settings.DisableLazyLoading
            ) {
              var bodyHtml = body;
              placeholder.outerHTML = bodyHtml;
            } else {
              placeholder['svg'] = body;
              placeholder.setAttribute('data-lazy', 'true');
            }
          } else if (
            _gthis._totalResultCount < canvasElement.childElementCount
          ) {
            canvasElement.replaceChild(
              renderResult.RenderResult,
              canvasElement.childNodes.item(_gthis._totalResultCount)
            );
          } else {
            canvasElement.appendChild(renderResult.RenderResult);
          }
          _gthis._totalResultCount++;
        }
      }, 1);
    },
    CreateWorkerPlayer: function() {
      var _gthis = this;
      var supportsWebAudio = !!window.ScriptProcessorNode;
      var supportsWebWorkers = !!window.Worker;
      var forceFlash = !!window.ForceFlash;
      var alphaSynthScriptFile = alphaTab.Environment.ScriptFile;
      var player = null;
      if (supportsWebAudio && !forceFlash) {
        alphaTab.util.Logger.Info(
          'Player',
          'Will use webworkers for synthesizing and web audio api for playback',
          null
        );
        player = new alphaTab.platform.javaScript.AlphaSynthWebWorkerApi(
          new alphaTab.platform.javaScript.AlphaSynthWebAudioOutput(),
          alphaSynthScriptFile,
          this._api.Settings.LogLevel
        );
      } else if (supportsWebWorkers) {
        alphaTab.util.Logger.Info(
          'Player',
          'Will use webworkers for synthesizing and flash for playback',
          null
        );
        player = new alphaTab.platform.javaScript.AlphaSynthWebWorkerApi(
          new alphaTab.platform.javaScript.AlphaSynthFlashOutput(
            alphaSynthScriptFile
          ),
          alphaSynthScriptFile,
          this._api.Settings.LogLevel
        );
      }
      if (player == null) {
        alphaTab.util.Logger.Error(
          'Player',
          'Player requires webworkers and web audio api or flash, browser unsupported',
          null
        );
      } else {
        player.add_Ready(function() {
          player.LoadSoundFontFromUrl(_gthis._api.Settings.SoundFontFile);
        });
        player.add_SoundFontLoad(function(data) {
          _gthis.TriggerEvent(_gthis._api.Container, 'soundFontLoad', data);
        });
      }
      return player;
    },
    BeginInvoke: function(action) {
      window.requestAnimationFrame(function(f) {
        action();
      });
    },
    HighlightElements: function(groupId) {
      var element = js.Boot.__cast(
        this._api.Container,
        alphaTab.ui.HtmlElementContainer
      ).Element;
      var elementsToHighlight = element.getElementsByClassName(groupId);
      var i = 0;
      while (i < elementsToHighlight.length) {
        elementsToHighlight.item(i).classList.add('atHighlight');
        ++i;
      }
    },
    RemoveHighlights: function() {
      var element = js.Boot.__cast(
        this._api.Container,
        alphaTab.ui.HtmlElementContainer
      ).Element;
      var elements = element.getElementsByClassName('atHighlight');
      while (elements.length > 0)
        elements.item(0).classList.remove('atHighlight');
    },
    CreateCursors: function() {
      var element = js.Boot.__cast(
        this._api.Container,
        alphaTab.ui.HtmlElementContainer
      ).Element;
      var cursorWrapper = window.document.createElement('div');
      cursorWrapper.classList.add('cursors');
      var selectionWrapper = window.document.createElement('div');
      selectionWrapper.classList.add('selectionWrapper');
      var barCursor = window.document.createElement('div');
      barCursor.classList.add('barCursor');
      var beatCursor = window.document.createElement('div');
      beatCursor.classList.add('beatCursor');
      element.style.position = 'relative';
      element.style.textAlign = 'left';
      cursorWrapper.style.position = 'absolute';
      cursorWrapper.style.zIndex = '1000';
      cursorWrapper.style.display = 'inline';
      cursorWrapper.style.pointerEvents = 'none';
      selectionWrapper.style.position = 'absolute';
      barCursor.style.position = 'absolute';
      beatCursor.style.position = 'absolute';
      beatCursor.style.transition = 'all 0s linear';
      element.insertBefore(cursorWrapper, element.firstChild);
      cursorWrapper.appendChild(selectionWrapper);
      cursorWrapper.appendChild(barCursor);
      cursorWrapper.appendChild(beatCursor);
      return new alphaTab.ui.Cursors(
        new alphaTab.ui.HtmlElementContainer(cursorWrapper),
        new alphaTab.ui.HtmlElementContainer(barCursor),
        new alphaTab.ui.HtmlElementContainer(beatCursor),
        new alphaTab.ui.HtmlElementContainer(selectionWrapper)
      );
    },
    GetOffset: function(scrollContainer, container) {
      var element = js.Boot.__cast(container, alphaTab.ui.HtmlElementContainer)
        .Element;
      var bounds = element.getBoundingClientRect();
      var top = bounds.top + element.ownerDocument.defaultView.pageYOffset;
      var left = bounds.left + element.ownerDocument.defaultView.pageXOffset;
      if (scrollContainer != null) {
        var scrollElement = js.Boot.__cast(
          scrollContainer,
          alphaTab.ui.HtmlElementContainer
        ).Element;
        var nodeName = scrollElement.nodeName.toLowerCase();
        if (nodeName != 'html' && nodeName != 'body') {
          var scrollElementOffset = this.GetOffset(null, scrollContainer);
          top = top + scrollElement.scrollTop - scrollElementOffset.Y;
          left = left + scrollElement.scrollLeft - scrollElementOffset.X;
        }
      }
      var _tmp = new alphaTab.rendering.utils.Bounds();
      _tmp.X = left;
      _tmp.Y = top;
      _tmp.W = bounds.width;
      _tmp.H = bounds.height;
      return _tmp;
    },
    GetScrollContainer: function() {
      var scrollElement = this._api.Settings.ScrollElement;
      var scrollElement1 = window.document.querySelector(scrollElement);
      var nodeName = scrollElement1.nodeName.toLowerCase();
      if (nodeName == 'html' || nodeName == 'body') {
        scrollElement1 = window.document.documentElement;
      }
      return new alphaTab.ui.HtmlElementContainer(scrollElement1);
    },
    CreateSelectionElement: function() {
      var element = window.document.createElement('div');
      element.style.position = 'absolute';
      return new alphaTab.ui.HtmlElementContainer(element);
    },
    ScrollToY: function(element, scrollTargetY, speed) {
      var this1 = speed;
      this.InternalScrollToY(
        js.Boot.__cast(element, alphaTab.ui.HtmlElementContainer).Element,
        scrollTargetY,
        this1
      );
    },
    ScrollToX: function(element, scrollTargetY, speed) {
      this.InternalScrollToX(
        js.Boot.__cast(element, alphaTab.ui.HtmlElementContainer).Element,
        scrollTargetY,
        speed
      );
    },
    InternalScrollToY: function(element, scrollTargetY, speed) {
      var startY = element.scrollTop;
      var diff = scrollTargetY - startY;
      var start = 0;
      var step = null;
      step = function(x) {
        if (start == 0) {
          start = x;
        }
        var time = x - start;
        var percent = Math.min(time / speed, 1);
        var step1 = system.Convert.ToInt32_Double(startY + diff * percent);
        element.scrollTop = step1;
        if (time < speed) {
          window.requestAnimationFrame(step);
        }
      };
      window.requestAnimationFrame(step);
    },
    InternalScrollToX: function(element, scrollTargetX, speed) {
      var startX = element.scrollLeft;
      var diff = scrollTargetX - startX;
      var start = 0;
      var step = null;
      step = function(t) {
        if (start == 0) {
          start = t;
        }
        var time = t - start;
        var percent = Math.min(time / speed, 1);
        var step1 = system.Convert.ToInt32_Double(startX + diff * percent);
        element.scrollLeft = step1;
        if (time < speed) {
          window.requestAnimationFrame(step);
        }
      };
      window.requestAnimationFrame(step);
    },
    __class__: alphaTab.ui.BrowserUiFacade
  };
  alphaTab.ui.Cursors = $hx_exports['alphaTab']['ui']['Cursors'] = function(
    cursorWrapper,
    barCursor,
    beatCursor,
    selectionWrapper
  ) {
    this.CursorWrapper = null;
    this.BarCursor = null;
    this.BeatCursor = null;
    this.SelectionWrapper = null;
    this.CursorWrapper = cursorWrapper;
    this.BarCursor = barCursor;
    this.BeatCursor = beatCursor;
    this.SelectionWrapper = selectionWrapper;
  };
  alphaTab.ui.Cursors.__name__ = ['alphaTab', 'ui', 'Cursors'];
  alphaTab.ui.Cursors.prototype = {
    __class__: alphaTab.ui.Cursors
  };
  alphaTab.ui.IContainer = $hx_exports['alphaTab']['ui'][
    'IContainer'
  ] = function() {};
  alphaTab.ui.IContainer.__name__ = ['alphaTab', 'ui', 'IContainer'];
  alphaTab.ui.IContainer.prototype = {
    __class__: alphaTab.ui.IContainer
  };
  alphaTab.ui.HtmlElementContainer = function(element) {
    this.Element = null;
    this.Element = element;
  };
  alphaTab.ui.HtmlElementContainer.__name__ = [
    'alphaTab',
    'ui',
    'HtmlElementContainer'
  ];
  alphaTab.ui.HtmlElementContainer.__interfaces__ = [alphaTab.ui.IContainer];
  alphaTab.ui.HtmlElementContainer.prototype = {
    get_Top: function() {
      var s = this.Element.style.top;
      return parseFloat(s);
    },
    set_Top: function(value) {
      var x = Std.string(value) + 'px';
      this.Element.style.top = x;
      return this.get_Top();
    },
    get_Left: function() {
      var s = this.Element.style.top;
      return parseFloat(s);
    },
    set_Left: function(value) {
      var x = Std.string(value) + 'px';
      this.Element.style.left = x;
      return this.get_Left();
    },
    get_Width: function() {
      return this.Element.offsetWidth;
    },
    set_Width: function(value) {
      var x = Std.string(value) + 'px';
      this.Element.style.width = x;
      return this.get_Width();
    },
    get_ScrollLeft: function() {
      return this.Element.scrollLeft;
    },
    set_ScrollLeft: function(value) {
      var tmp = system.Convert.ToInt32_Single(value);
      return (this.Element.scrollTop = tmp);
    },
    get_ScrollTop: function() {
      return this.Element.scrollLeft;
    },
    set_ScrollTop: function(value) {
      var tmp = system.Convert.ToInt32_Single(value);
      return (this.Element.scrollTop = tmp);
    },
    get_Height: function() {
      return this.Element.offsetHeight;
    },
    set_Height: function(value) {
      if (value >= 0) {
        this.Element.style.height = Std.string(value) + 'px';
      } else {
        this.Element.style.height = '100%';
      }
      return this.get_Height();
    },
    get_IsVisible: function() {
      if (!(!!this.Element.offsetWidth || !!this.Element.offsetHeight)) {
        return !!this.Element.getClientRects().length;
      } else {
        return true;
      }
    },
    StopAnimation: function() {
      this.Element.style.transition = 'none';
    },
    TransitionToX: function(duration, x) {
      this.Element.style.transition = 'all 0s linear';
      this.Element.style.transitionDuration = duration + 'ms';
      this.Element.style.left = Std.string(x) + 'px';
    },
    add_MouseDown: function(value) {
      this.Element.addEventListener(
        'mousedown',
        function(e) {
          value(
            new alphaTab.ui.BrowserMouseEventArgs(js.Boot.__cast(e, MouseEvent))
          );
        },
        true
      );
    },
    remove_MouseDown: function(value) {},
    add_MouseMove: function(value) {
      this.Element.addEventListener(
        'mousemove',
        function(e) {
          value(
            new alphaTab.ui.BrowserMouseEventArgs(js.Boot.__cast(e, MouseEvent))
          );
        },
        true
      );
    },
    remove_MouseMove: function(value) {},
    add_MouseUp: function(value) {
      this.Element.addEventListener(
        'mouseup',
        function(e) {
          value(
            new alphaTab.ui.BrowserMouseEventArgs(js.Boot.__cast(e, MouseEvent))
          );
        },
        true
      );
    },
    remove_MouseUp: function(value) {},
    Clear: function() {
      this.Element.innerHTML = '';
    },
    AppendChild: function(child) {
      this.Element.appendChild(
        js.Boot.__cast(child, alphaTab.ui.HtmlElementContainer).Element
      );
    },
    add_Scroll: function(value) {
      window.addEventListener('scroll', value, true);
    },
    remove_Scroll: function(value) {
      window.removeEventListener('scroll', value, true);
    },
    add_Resize: function(value) {
      window.addEventListener('resize', value, true);
    },
    remove_Resize: function(value) {
      window.removeEventListener('resize', value, true);
    },
    __class__: alphaTab.ui.HtmlElementContainer
  };
  alphaTab.util.Lazy = function(factory) {
    this._factory = null;
    this._created = false;
    this._value = null;
    this._factory = factory;
  };
  alphaTab.util.Lazy.__name__ = ['alphaTab', 'util', 'Lazy'];
  alphaTab.util.Lazy.prototype = {
    get_Value: function() {
      if (!this._created) {
        this._value = this._factory();
        this._created = true;
      }
      return this._value;
    },
    __class__: alphaTab.util.Lazy
  };
  alphaTab.util._LogLevel = {};
  alphaTab.util._LogLevel.LogLevel_Impl_ = $hx_exports['alphaTab']['util'][
    '_LogLevel'
  ]['LogLevel_Impl_'] = {};
  alphaTab.util._LogLevel.LogLevel_Impl_.__name__ = [
    'alphaTab',
    'util',
    '_LogLevel',
    'LogLevel_Impl_'
  ];
  alphaTab.util._LogLevel.LogLevel_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.util._LogLevel.LogLevel_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.util._LogLevel.LogLevel_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.util._LogLevel.LogLevel_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.util._LogLevel.LogLevel_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.util._LogLevel.LogLevel_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.util._LogLevel.LogLevel_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.util._LogLevel.LogLevel_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.util._LogLevel.LogLevel_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.util._LogLevel.LogLevel_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.util._LogLevel.LogLevel_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.util._LogLevel.LogLevel_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.util._LogLevel.LogLevel_Impl_.toString = function(this1) {
    switch (this1) {
      case 0:
        return 'None';
      case 1:
        return 'Debug';
      case 2:
        return 'Info';
      case 3:
        return 'Warning';
      case 4:
        return 'Error';
    }
    return '';
  };
  alphaTab.utils = {};
  alphaTab.utils._UnionData = {};
  alphaTab.utils._UnionData.UnionData_Impl_ = {};
  alphaTab.utils._UnionData.UnionData_Impl_.__name__ = [
    'alphaTab',
    'utils',
    '_UnionData',
    'UnionData_Impl_'
  ];
  alphaTab.utils._UnionData.UnionData_Impl_._new = function() {
    var this1 = new DataView(new ArrayBuffer(8));
    return this1;
  };
  alphaTab.utils._UnionData.UnionData_Impl_.get_Double1 = function(this1) {
    return this1.getFloat64(0, true);
  };
  alphaTab.utils._UnionData.UnionData_Impl_.get_Float1 = function(this1) {
    return this1.getFloat32(0, true);
  };
  alphaTab.utils._UnionData.UnionData_Impl_.get_Float2 = function(this1) {
    return this1.getFloat32(4, true);
  };
  alphaTab.utils._UnionData.UnionData_Impl_.get_Int1 = function(this1) {
    return this1.getInt32(0, true);
  };
  alphaTab.utils._UnionData.UnionData_Impl_.get_Int2 = function(this1) {
    return this1.getInt32(4, true);
  };
  alphaTab.xml = {};
  alphaTab.xml.XmlNode = function() {
    this.NodeType = 0;
    this.LocalName = null;
    this.Value = null;
    this.ChildNodes = null;
    this.Attributes = null;
    this.FirstChild = null;
    this.FirstElement = null;
    var this1 = {};
    this.Attributes = this1;
    var this2 = [];
    this.ChildNodes = this2;
  };
  alphaTab.xml.XmlNode.__name__ = ['alphaTab', 'xml', 'XmlNode'];
  alphaTab.xml.XmlNode.prototype = {
    AddChild: function(node) {
      this.ChildNodes.push(node);
      this.FirstChild = node;
      if (node.NodeType == 1) {
        this.FirstElement = node;
      }
    },
    GetAttribute: function(name) {
      if (this.Attributes.hasOwnProperty(name)) {
        return this.Attributes[name];
      }
      return '';
    },
    GetElementsByTagName: function(name, recursive) {
      if (recursive == null) {
        recursive = false;
      }
      var this1 = [];
      var tags = this1;
      this.SearchElementsByTagName(this.ChildNodes, tags, name, recursive);
      return tags;
    },
    SearchElementsByTagName: function(all, result, name, recursive) {
      if (recursive == null) {
        recursive = false;
      }
      var c = $iterator(all)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1 != null && c1.NodeType == 1 && c1.LocalName == name) {
          result.push(c1);
        }
        if (recursive) {
          this.SearchElementsByTagName(c1.ChildNodes, result, name, true);
        }
      }
    },
    FindChildElement: function(name) {
      var c = $iterator(this.ChildNodes)();
      while (c.hasNext()) {
        var c1 = c.next();
        if (c1 != null && c1.NodeType == 1 && c1.LocalName == name) {
          return c1;
        }
      }
      return null;
    },
    get_InnerText: function() {
      if (this.NodeType == 1 || this.NodeType == 9) {
        var this1 = '';
        var txt = this1;
        var c = $iterator(this.ChildNodes)();
        while (c.hasNext()) {
          var c1 = c.next();
          txt += Std.string(c1.get_InnerText());
        }
        var s = txt;
        return StringTools.trim(s);
      }
      return this.Value;
    },
    __class__: alphaTab.xml.XmlNode
  };
  alphaTab.xml.XmlDocument = function(xml) {
    alphaTab.xml.XmlNode.call(this);
    this.DocumentElement = null;
    this.NodeType = 9;
    alphaTab.xml.XmlParser.Parse(xml, 0, this);
    var child = $iterator(this.ChildNodes)();
    while (child.hasNext()) {
      var child1 = child.next();
      if (child1.NodeType == 1) {
        this.DocumentElement = child1;
        break;
      }
    }
  };
  alphaTab.xml.XmlDocument.__name__ = ['alphaTab', 'xml', 'XmlDocument'];
  alphaTab.xml.XmlDocument.__super__ = alphaTab.xml.XmlNode;
  alphaTab.xml.XmlDocument.prototype = $extend(alphaTab.xml.XmlNode.prototype, {
    __class__: alphaTab.xml.XmlDocument
  });
  alphaTab.xml.XmlException = function() {
    alphaTab.AlphaTabException.call(this);
    this.Xml = null;
    this.Pos = 0;
  };
  alphaTab.xml.XmlException.__name__ = ['alphaTab', 'xml', 'XmlException'];
  alphaTab.xml.XmlException.__super__ = alphaTab.AlphaTabException;
  alphaTab.xml.XmlException.prototype = $extend(
    alphaTab.AlphaTabException.prototype,
    {
      XmlException: function(message, xml, pos) {
        this.AlphaTabException(message);
        this.Xml = null;
        this.Pos = 0;
        this.Xml = xml;
        this.Pos = pos;
        return this;
      },
      __class__: alphaTab.xml.XmlException
    }
  );
  alphaTab.xml._XmlNodeType = {};
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_ = {};
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.__name__ = [
    'alphaTab',
    'xml',
    '_XmlNodeType',
    'XmlNodeType_Impl_'
  ];
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToBoolean_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1 != 0;
  };
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToChar_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToSByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt8(this1);
  };
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToByte_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt8(this1);
  };
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToInt16(this1);
  };
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToUInt16_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt16(this1);
  };
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToUInt32_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToUInt64_IFormatProvider = function(
    this1,
    provider
  ) {
    return system.Convert.ToUInt32(this1);
  };
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToSingle_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToDouble_IFormatProvider = function(
    this1,
    provider
  ) {
    return this1;
  };
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.toString = function(this1) {
    switch (this1) {
      case 0:
        return 'None';
      case 1:
        return 'Element';
      case 2:
        return 'Attribute';
      case 3:
        return 'Text';
      case 4:
        return 'CDATA';
      case 5:
        return 'EntityReference';
      case 6:
        return 'Entity';
      case 7:
        return 'ProcessingInstruction';
      case 8:
        return 'Comment';
      case 9:
        return 'Document';
      case 10:
        return 'DocumentType';
      case 11:
        return 'DocumentFragment';
      case 12:
        return 'Notation';
      case 13:
        return 'Whitespace';
      case 14:
        return 'SignificantWhitespace';
      case 15:
        return 'EndElement';
      case 16:
        return 'EndEntity';
      case 17:
        return 'XmlDeclaration';
    }
    return '';
  };
  alphaTab.xml.XmlParser = function() {};
  alphaTab.xml.XmlParser.__name__ = ['alphaTab', 'xml', 'XmlParser'];
  alphaTab.xml.XmlParser.Parse = function(str, p, parent) {
    var this1 = system.Convert.ToUInt16(HxOverrides.cca(str, p));
    var this2 = this1;
    var c = this2;
    var state = 1;
    var next = 1;
    var start = 0;
    var this3 = '';
    var buf = this3;
    var escapeNext = 1;
    var xml = null;
    var aname = null;
    var nbrackets = 0;
    var attrValQuote = 0;
    while (p < str.length) {
      var this4 = system.Convert.ToUInt16(HxOverrides.cca(str, p));
      c = this4;
      switch (state) {
        case 0:
          switch (c) {
            case 9:
            case 10:
            case 13:
            case 32:
              break;
            default:
              state = next;
              continue;
          }
          break;
        case 1:
          if (c == 60) {
            state = 0;
            next = 2;
          } else {
            start = p;
            state = 13;
            continue;
          }
          break;
        case 2:
          switch (c) {
            case 33:
              var this5 = system.Convert.ToUInt16(HxOverrides.cca(str, p + 1));
              if (this5 == 91) {
                p = p + 2;
                if (HxOverrides.substr(str, p, 6).toUpperCase() != 'CDATA[') {
                  throw new js._Boot.HaxeError(
                    new alphaTab.xml.XmlException().XmlException(
                      'Expected <![CDATA[',
                      str,
                      p
                    )
                  );
                }
                p = p + 5;
                state = 17;
                start = p + 1;
              } else {
                var tmp;
                var this6 = system.Convert.ToUInt16(
                  HxOverrides.cca(str, p + 1)
                );
                if (!(this6 == 68)) {
                  var this7 = system.Convert.ToUInt16(
                    HxOverrides.cca(str, p + 1)
                  );
                  tmp = this7 == 100;
                } else {
                  tmp = true;
                }
                if (tmp) {
                  if (
                    HxOverrides.substr(str, p + 2, 6).toUpperCase() != 'OCTYPE'
                  ) {
                    throw new js._Boot.HaxeError(
                      new alphaTab.xml.XmlException().XmlException(
                        'Expected <!DOCTYPE',
                        str,
                        p
                      )
                    );
                  }
                  p = p + 8;
                  state = 16;
                  start = p + 1;
                } else {
                  var tmp1;
                  var this8 = system.Convert.ToUInt16(
                    HxOverrides.cca(str, p + 1)
                  );
                  if (!(this8 != 45)) {
                    var this9 = system.Convert.ToUInt16(
                      HxOverrides.cca(str, p + 2)
                    );
                    tmp1 = this9 != 45;
                  } else {
                    tmp1 = true;
                  }
                  if (tmp1) {
                    throw new js._Boot.HaxeError(
                      new alphaTab.xml.XmlException().XmlException(
                        'Expected <!--',
                        str,
                        p
                      )
                    );
                  } else {
                    p = p + 2;
                    state = 15;
                    start = p + 1;
                  }
                }
              }
              break;
            case 47:
              if (parent == null) {
                throw new js._Boot.HaxeError(
                  new alphaTab.xml.XmlException().XmlException(
                    'Expected node name',
                    str,
                    p
                  )
                );
              }
              start = p + 1;
              state = 0;
              next = 10;
              break;
            case 63:
              state = 14;
              start = p;
              break;
            default:
              state = 3;
              start = p;
              continue;
          }
          break;
        case 3:
          if (!alphaTab.xml.XmlParser.IsValidChar(c)) {
            if (p == start) {
              throw new js._Boot.HaxeError(
                new alphaTab.xml.XmlException().XmlException(
                  'Expected node name',
                  str,
                  p
                )
              );
            }
            xml = new alphaTab.xml.XmlNode();
            xml.NodeType = 1;
            xml.LocalName = HxOverrides.substr(str, start, p - start);
            parent.AddChild(xml);
            state = 0;
            next = 4;
            continue;
          }
          break;
        case 4:
          switch (c) {
            case 47:
              state = 11;
              break;
            case 62:
              state = 9;
              break;
            default:
              state = 5;
              start = p;
              continue;
          }
          break;
        case 5:
          if (!alphaTab.xml.XmlParser.IsValidChar(c)) {
            if (start == p) {
              throw new js._Boot.HaxeError(
                new alphaTab.xml.XmlException().XmlException(
                  'Expected attribute name',
                  str,
                  p
                )
              );
            }
            var tmp2 = HxOverrides.substr(str, start, p - start);
            aname = tmp2;
            if (xml.Attributes.hasOwnProperty(aname)) {
              throw new js._Boot.HaxeError(
                new alphaTab.xml.XmlException().XmlException(
                  'Duplicate attribute [' + aname + ']',
                  str,
                  p
                )
              );
            }
            state = 0;
            next = 6;
            continue;
          }
          break;
        case 6:
          if (c == 61) {
            state = 0;
            next = 7;
          } else {
            throw new js._Boot.HaxeError(
              new alphaTab.xml.XmlException().XmlException('Expected =', str, p)
            );
          }
          break;
        case 7:
          switch (c) {
            case 34:
            case 39:
              var this10 = '';
              buf = this10;
              state = 8;
              start = p + 1;
              attrValQuote = c;
              break;
            default:
          }
          break;
        case 8:
          if (c == 38) {
            buf += Std.string(HxOverrides.substr(str, start, p - start));
            state = 18;
            escapeNext = 8;
            start = p + 1;
          } else if (c == attrValQuote) {
            buf += Std.string(HxOverrides.substr(str, start, p - start));
            var val = buf;
            var this11 = '';
            buf = this11;
            xml.Attributes[aname] = val;
            state = 0;
            next = 4;
          }
          break;
        case 9:
          p = alphaTab.xml.XmlParser.Parse(str, p, xml);
          start = p;
          state = 1;
          break;
        case 10:
          if (!alphaTab.xml.XmlParser.IsValidChar(c)) {
            if (start == p) {
              throw new js._Boot.HaxeError(
                new alphaTab.xml.XmlException().XmlException(
                  'Expected node name',
                  str,
                  p
                )
              );
            }
            var v = HxOverrides.substr(str, start, p - start);
            if (v != parent.LocalName) {
              var tmp3 = 'Expected </' + parent.LocalName + '>';
              throw new js._Boot.HaxeError(
                new alphaTab.xml.XmlException().XmlException(tmp3, str, p)
              );
            }
            state = 0;
            next = 12;
            continue;
          }
          break;
        case 11:
          if (c == 62) {
            state = 1;
          } else {
            throw new js._Boot.HaxeError(
              new alphaTab.xml.XmlException().XmlException('Expected >', str, p)
            );
          }
          break;
        case 12:
          if (c == 62) {
            return p;
          } else {
            throw new js._Boot.HaxeError(
              new alphaTab.xml.XmlException().XmlException('Expected >', str, p)
            );
          }
          break;
        case 13:
          if (c == 60) {
            buf += Std.string(HxOverrides.substr(str, start, p - start));
            var child = new alphaTab.xml.XmlNode();
            child.NodeType = 3;
            child.Value = buf;
            var this12 = '';
            buf = this12;
            parent.AddChild(child);
            state = 0;
            next = 2;
          } else if (c == 38) {
            buf += Std.string(HxOverrides.substr(str, start, p - start));
            state = 18;
            escapeNext = 13;
            start = p + 1;
          }
          break;
        case 14:
          var tmp4;
          if (c == 63) {
            var this13 = system.Convert.ToUInt16(HxOverrides.cca(str, p + 1));
            tmp4 = this13 == 62;
          } else {
            tmp4 = false;
          }
          if (tmp4) {
            ++p;
            state = 1;
          }
          break;
        case 15:
          var tmp5;
          var tmp6;
          if (c == 45) {
            var this14 = system.Convert.ToUInt16(HxOverrides.cca(str, p + 1));
            tmp6 = this14 == 45;
          } else {
            tmp6 = false;
          }
          if (tmp6) {
            var this15 = system.Convert.ToUInt16(HxOverrides.cca(str, p + 2));
            tmp5 = this15 == 62;
          } else {
            tmp5 = false;
          }
          if (tmp5) {
            p = p + 2;
            state = 1;
          }
          break;
        case 16:
          if (c == 91) {
            ++nbrackets;
          } else if (c == 93) {
            --nbrackets;
          } else if (c == 62 && nbrackets == 0) {
            var node = new alphaTab.xml.XmlNode();
            node.NodeType = 10;
            node.Value = HxOverrides.substr(str, start, p - start);
            parent.AddChild(node);
            state = 1;
          }
          break;
        case 17:
          var tmp7;
          var tmp8;
          if (c == 93) {
            var this16 = system.Convert.ToUInt16(HxOverrides.cca(str, p + 1));
            tmp8 = this16 == 93;
          } else {
            tmp8 = false;
          }
          if (tmp8) {
            var this17 = system.Convert.ToUInt16(HxOverrides.cca(str, p + 2));
            tmp7 = this17 == 62;
          } else {
            tmp7 = false;
          }
          if (tmp7) {
            var child1 = new alphaTab.xml.XmlNode();
            child1.NodeType = 4;
            child1.Value = HxOverrides.substr(str, start, p - start);
            parent.AddChild(child1);
            p = p + 2;
            state = 1;
          }
          break;
        case 18:
          var this18 = system.Convert.ToUInt16(59);
          if (c == this18) {
            var s = HxOverrides.substr(str, start, p - start);
            var this19 = system.Convert.ToUInt16(HxOverrides.cca(s, 0));
            if (this19 == 35) {
              var code;
              var this20 = system.Convert.ToUInt16(HxOverrides.cca(s, 1));
              if (this20 == 120) {
                code = alphaTab.platform.Platform.ParseInt(
                  '0' + HxOverrides.substr(s, 1, s.length - 1)
                );
              } else {
                code = alphaTab.platform.Platform.ParseInt(
                  HxOverrides.substr(s, 1, s.length - 1)
                );
              }
              buf += String.fromCharCode(code);
            } else if (alphaTab.xml.XmlParser.Escapes.hasOwnProperty(s)) {
              buf += Std.string(alphaTab.xml.XmlParser.Escapes[s]);
            } else {
              buf += Std.string('&' + s + ';');
            }
            start = p + 1;
            state = escapeNext;
          } else if (!alphaTab.xml.XmlParser.IsValidChar(c) && c != 35) {
            buf += Std.string('&');
            buf += Std.string(HxOverrides.substr(str, start, p - start));
            --p;
            start = p + 1;
            state = escapeNext;
          }
          break;
        default:
      }
      ++p;
    }
    if (state == 1) {
      start = p;
      state = 13;
    }
    if (state == 13) {
      if (p != start) {
        buf += Std.string(HxOverrides.substr(str, start, p - start));
        var node1 = new alphaTab.xml.XmlNode();
        node1.NodeType = 3;
        node1.Value = buf;
        parent.AddChild(node1);
      }
      return p;
    }
    if (state == 18 && escapeNext == 13) {
      buf += Std.string('&');
      buf += Std.string(HxOverrides.substr(str, start, p - start));
      var node2 = new alphaTab.xml.XmlNode();
      node2.NodeType = 3;
      node2.Value = buf;
      parent.AddChild(node2);
      return p;
    }
    throw new js._Boot.HaxeError(
      new alphaTab.xml.XmlException().XmlException('Unexpected end', str, p)
    );
  };
  alphaTab.xml.XmlParser.IsValidChar = function(c) {
    if (
      !(
        (c >= 97 && c <= 122) ||
        (c >= 65 && c <= 90) ||
        (c >= 48 && c <= 57) ||
        c == 58 ||
        c == 46 ||
        c == 95
      )
    ) {
      return c == 45;
    } else {
      return true;
    }
  };
  alphaTab.xml.XmlParser.prototype = {
    __class__: alphaTab.xml.XmlParser
  };
  alphaTab.xml.XmlParser_XmlState = function() {};
  alphaTab.xml.XmlParser_XmlState.__name__ = [
    'alphaTab',
    'xml',
    'XmlParser_XmlState'
  ];
  alphaTab.xml.XmlParser_XmlState.prototype = {
    __class__: alphaTab.xml.XmlParser_XmlState
  };
  haxe.IMap = function() {};
  haxe.IMap.__name__ = ['haxe', 'IMap'];
  haxe._Int64 = {};
  haxe._Int64.___Int64 = function(high, low) {
    this.high = high;
    this.low = low;
  };
  haxe._Int64.___Int64.__name__ = ['haxe', '_Int64', '___Int64'];
  haxe._Int64.___Int64.prototype = {
    __class__: haxe._Int64.___Int64
  };
  haxe.crypto = {};
  haxe.crypto.Adler32 = function() {
    this.a1 = 1;
    this.a2 = 0;
  };
  haxe.crypto.Adler32.__name__ = ['haxe', 'crypto', 'Adler32'];
  haxe.crypto.Adler32.read = function(i) {
    var a = new haxe.crypto.Adler32();
    var a2a = i.readByte();
    var a2b = i.readByte();
    var a1a = i.readByte();
    var a1b = i.readByte();
    a.a1 = (a1a << 8) | a1b;
    a.a2 = (a2a << 8) | a2b;
    return a;
  };
  haxe.crypto.Adler32.prototype = {
    update: function(b, pos, len) {
      var a1 = this.a1;
      var a2 = this.a2;
      var _g1 = pos;
      var _g = pos + len;
      while (_g1 < _g) {
        var p = _g1++;
        var c = b.b[p];
        a1 = (a1 + c) % 65521;
        a2 = (a2 + a1) % 65521;
      }
      this.a1 = a1;
      this.a2 = a2;
    },
    equals: function(a) {
      if (a.a1 == this.a1) {
        return a.a2 == this.a2;
      } else {
        return false;
      }
    },
    __class__: haxe.crypto.Adler32
  };
  haxe.ds = {};
  haxe.ds.IntMap = function() {
    this.h = {};
  };
  haxe.ds.IntMap.__name__ = ['haxe', 'ds', 'IntMap'];
  haxe.ds.IntMap.__interfaces__ = [haxe.IMap];
  haxe.ds.IntMap.prototype = {
    __class__: haxe.ds.IntMap
  };
  haxe.io.Bytes = function(data) {
    this.length = data.byteLength;
    this.b = new Uint8Array(data);
    this.b.bufferValue = data;
    data.hxBytes = this;
    data.bytes = this.b;
  };
  haxe.io.Bytes.__name__ = ['haxe', 'io', 'Bytes'];
  haxe.io.Bytes.prototype = {
    blit: function(pos, src, srcpos, len) {
      if (
        pos < 0 ||
        srcpos < 0 ||
        len < 0 ||
        pos + len > this.length ||
        srcpos + len > src.length
      ) {
        throw new js._Boot.HaxeError(haxe.io.Error.OutsideBounds);
      }
      if (srcpos == 0 && len == src.b.byteLength) {
        this.b.set(src.b, pos);
      } else {
        this.b.set(src.b.subarray(srcpos, srcpos + len), pos);
      }
    },
    getString: function(pos, len) {
      if (pos < 0 || len < 0 || pos + len > this.length) {
        throw new js._Boot.HaxeError(haxe.io.Error.OutsideBounds);
      }
      var s = '';
      var b = this.b;
      var fcc = String.fromCharCode;
      var i = pos;
      var max = pos + len;
      while (i < max) {
        var c = b[i++];
        if (c < 128) {
          if (c == 0) {
            break;
          }
          s += fcc(c);
        } else if (c < 224) {
          s += fcc(((c & 63) << 6) | (b[i++] & 127));
        } else if (c < 240) {
          var c2 = b[i++];
          s += fcc(((c & 31) << 12) | ((c2 & 127) << 6) | (b[i++] & 127));
        } else {
          var c21 = b[i++];
          var c3 = b[i++];
          var u =
            ((c & 15) << 18) |
            ((c21 & 127) << 12) |
            ((c3 & 127) << 6) |
            (b[i++] & 127);
          s += fcc((u >> 10) + 55232);
          s += fcc((u & 1023) | 56320);
        }
      }
      return s;
    },
    toString: function() {
      return this.getString(0, this.length);
    },
    __class__: haxe.io.Bytes
  };
  haxe.io.BytesBuffer = function() {
    this.b = [];
  };
  haxe.io.BytesBuffer.__name__ = ['haxe', 'io', 'BytesBuffer'];
  haxe.io.BytesBuffer.prototype = {
    getBytes: function() {
      var bytes = new haxe.io.Bytes(new Uint8Array(this.b).buffer);
      this.b = null;
      return bytes;
    },
    __class__: haxe.io.BytesBuffer
  };
  haxe.io.Eof = function() {};
  haxe.io.Eof.__name__ = ['haxe', 'io', 'Eof'];
  haxe.io.Eof.prototype = {
    toString: function() {
      return 'Eof';
    },
    __class__: haxe.io.Eof
  };
  haxe.io.Error = {
    __ename__: true,
    __constructs__: ['Blocked', 'Overflow', 'OutsideBounds', 'Custom']
  };
  haxe.io.Error.Blocked = ['Blocked', 0];
  haxe.io.Error.Blocked.toString = $estr;
  haxe.io.Error.Blocked.__enum__ = haxe.io.Error;
  haxe.io.Error.Overflow = ['Overflow', 1];
  haxe.io.Error.Overflow.toString = $estr;
  haxe.io.Error.Overflow.__enum__ = haxe.io.Error;
  haxe.io.Error.OutsideBounds = ['OutsideBounds', 2];
  haxe.io.Error.OutsideBounds.toString = $estr;
  haxe.io.Error.OutsideBounds.__enum__ = haxe.io.Error;
  haxe.io.Error.Custom = function(e) {
    var $x = ['Custom', 3, e];
    $x.__enum__ = haxe.io.Error;
    $x.toString = $estr;
    return $x;
  };
  haxe.io.FPHelper = function() {};
  haxe.io.FPHelper.__name__ = ['haxe', 'io', 'FPHelper'];
  haxe.io.FPHelper.i32ToFloat = function(i) {
    var sign = 1 - ((i >>> 31) << 1);
    var exp = (i >>> 23) & 255;
    var sig = i & 8388607;
    if (sig == 0 && exp == 0) {
      return 0.0;
    }
    return sign * (1 + Math.pow(2, -23) * sig) * Math.pow(2, exp - 127);
  };
  haxe.io.FPHelper.floatToI32 = function(f) {
    if (f == 0) {
      return 0;
    }
    var af = f < 0 ? -f : f;
    var exp = Math.floor(Math.log(af) / 0.6931471805599453);
    if (exp < -127) {
      exp = -127;
    } else if (exp > 128) {
      exp = 128;
    }
    var sig = Math.round((af / Math.pow(2, exp) - 1) * 8388608);
    if (sig == 8388608 && exp < 128) {
      sig = 0;
      ++exp;
    }
    return (f < 0 ? -2147483648 : 0) | ((exp + 127) << 23) | sig;
  };
  haxe.io.FPHelper.i64ToDouble = function(low, high) {
    var sign = 1 - ((high >>> 31) << 1);
    var exp = ((high >> 20) & 2047) - 1023;
    var sig =
      (high & 1048575) * 4294967296 +
      (low >>> 31) * 2147483648 +
      (low & 2147483647);
    if (sig == 0 && exp == -1023) {
      return 0.0;
    }
    return sign * (1.0 + Math.pow(2, -52) * sig) * Math.pow(2, exp);
  };
  haxe.io.FPHelper.doubleToI64 = function(v) {
    var i64 = haxe.io.FPHelper.i64tmp;
    if (v == 0) {
      i64.low = 0;
      i64.high = 0;
    } else if (!isFinite(v)) {
      if (v > 0) {
        i64.low = 0;
        i64.high = 2146435072;
      } else {
        i64.low = 0;
        i64.high = -1048576;
      }
    } else {
      var av = v < 0 ? -v : v;
      var exp = Math.floor(Math.log(av) / 0.6931471805599453);
      var sig = Math.round((av / Math.pow(2, exp) - 1) * 4503599627370496);
      var sig_l = sig | 0;
      var sig_h = (sig / 4294967296.0) | 0;
      i64.low = sig_l;
      i64.high = (v < 0 ? -2147483648 : 0) | ((exp + 1023) << 20) | sig_h;
    }
    return i64;
  };
  haxe.zip = {};
  haxe.zip.ExtraField = {
    __ename__: true,
    __constructs__: ['FUnknown', 'FInfoZipUnicodePath', 'FUtf8']
  };
  haxe.zip.ExtraField.FUnknown = function(tag, bytes) {
    var $x = ['FUnknown', 0, tag, bytes];
    $x.__enum__ = haxe.zip.ExtraField;
    $x.toString = $estr;
    return $x;
  };
  haxe.zip.ExtraField.FInfoZipUnicodePath = function(name, crc) {
    var $x = ['FInfoZipUnicodePath', 1, name, crc];
    $x.__enum__ = haxe.zip.ExtraField;
    $x.toString = $estr;
    return $x;
  };
  haxe.zip.ExtraField.FUtf8 = ['FUtf8', 2];
  haxe.zip.ExtraField.FUtf8.toString = $estr;
  haxe.zip.ExtraField.FUtf8.__enum__ = haxe.zip.ExtraField;
  haxe.zip.Huffman = {
    __ename__: true,
    __constructs__: ['Found', 'NeedBit', 'NeedBits']
  };
  haxe.zip.Huffman.Found = function(i) {
    var $x = ['Found', 0, i];
    $x.__enum__ = haxe.zip.Huffman;
    $x.toString = $estr;
    return $x;
  };
  haxe.zip.Huffman.NeedBit = function(left, right) {
    var $x = ['NeedBit', 1, left, right];
    $x.__enum__ = haxe.zip.Huffman;
    $x.toString = $estr;
    return $x;
  };
  haxe.zip.Huffman.NeedBits = function(n, table) {
    var $x = ['NeedBits', 2, n, table];
    $x.__enum__ = haxe.zip.Huffman;
    $x.toString = $estr;
    return $x;
  };
  haxe.zip.HuffTools = function() {};
  haxe.zip.HuffTools.__name__ = ['haxe', 'zip', 'HuffTools'];
  haxe.zip.HuffTools.prototype = {
    treeDepth: function(t) {
      switch (t[1]) {
        case 0:
          return 0;
        case 1:
          var b = t[3];
          var a = t[2];
          var da = this.treeDepth(a);
          var db = this.treeDepth(b);
          return 1 + (da < db ? da : db);
        case 2:
          throw new js._Boot.HaxeError('assert');
          break;
      }
    },
    treeCompress: function(t) {
      var d = this.treeDepth(t);
      if (d == 0) {
        return t;
      }
      if (d == 1) {
        if (t[1] == 1) {
          var b = t[3];
          var a = t[2];
          return haxe.zip.Huffman.NeedBit(
            this.treeCompress(a),
            this.treeCompress(b)
          );
        } else {
          throw new js._Boot.HaxeError('assert');
        }
      }
      var size = 1 << d;
      var table = [];
      var _g1 = 0;
      var _g = size;
      while (_g1 < _g) {
        var i = _g1++;
        table.push(haxe.zip.Huffman.Found(-1));
      }
      this.treeWalk(table, 0, 0, d, t);
      return haxe.zip.Huffman.NeedBits(d, table);
    },
    treeWalk: function(table, p, cd, d, t) {
      if (t[1] == 1) {
        var b = t[3];
        var a = t[2];
        if (d > 0) {
          this.treeWalk(table, p, cd + 1, d - 1, a);
          this.treeWalk(table, p | (1 << cd), cd + 1, d - 1, b);
        } else {
          table[p] = this.treeCompress(t);
        }
      } else {
        table[p] = this.treeCompress(t);
      }
    },
    treeMake: function(bits, maxbits, v, len) {
      if (len > maxbits) {
        throw new js._Boot.HaxeError('Invalid huffman');
      }
      var idx = (v << 5) | len;
      if (bits.h.hasOwnProperty(idx)) {
        return haxe.zip.Huffman.Found(bits.h[idx]);
      }
      v <<= 1;
      ++len;
      return haxe.zip.Huffman.NeedBit(
        this.treeMake(bits, maxbits, v, len),
        this.treeMake(bits, maxbits, v | 1, len)
      );
    },
    make: function(lengths, pos, nlengths, maxbits) {
      var counts = [];
      var tmp = [];
      if (maxbits > 32) {
        throw new js._Boot.HaxeError('Invalid huffman');
      }
      var _g1 = 0;
      var _g = maxbits;
      while (_g1 < _g) {
        var i = _g1++;
        counts.push(0);
        tmp.push(0);
      }
      var _g11 = 0;
      var _g2 = nlengths;
      while (_g11 < _g2) {
        var i1 = _g11++;
        var p = lengths[i1 + pos];
        if (p >= maxbits) {
          throw new js._Boot.HaxeError('Invalid huffman');
        }
        counts[p]++;
      }
      var code = 0;
      var _g12 = 1;
      var _g3 = maxbits - 1;
      while (_g12 < _g3) {
        var i2 = _g12++;
        code = (code + counts[i2]) << 1;
        tmp[i2] = code;
      }
      var bits = new haxe.ds.IntMap();
      var _g13 = 0;
      var _g4 = nlengths;
      while (_g13 < _g4) {
        var i3 = _g13++;
        var l = lengths[i3 + pos];
        if (l != 0) {
          var n = tmp[l - 1];
          tmp[l - 1] = n + 1;
          bits.h[(n << 5) | l] = i3;
        }
      }
      return this.treeCompress(
        haxe.zip.Huffman.NeedBit(
          this.treeMake(bits, maxbits, 0, 1),
          this.treeMake(bits, maxbits, 1, 1)
        )
      );
    },
    __class__: haxe.zip.HuffTools
  };
  haxe.zip._InflateImpl = {};
  haxe.zip._InflateImpl.Window = function(hasCrc) {
    this.buffer = new haxe.io.Bytes(new ArrayBuffer(65536));
    this.pos = 0;
    if (hasCrc) {
      this.crc = new haxe.crypto.Adler32();
    }
  };
  haxe.zip._InflateImpl.Window.__name__ = [
    'haxe',
    'zip',
    '_InflateImpl',
    'Window'
  ];
  haxe.zip._InflateImpl.Window.prototype = {
    slide: function() {
      if (this.crc != null) {
        this.crc.update(this.buffer, 0, 32768);
      }
      var b = new haxe.io.Bytes(new ArrayBuffer(65536));
      this.pos -= 32768;
      b.blit(0, this.buffer, 32768, this.pos);
      this.buffer = b;
    },
    addBytes: function(b, p, len) {
      if (this.pos + len > 65536) {
        this.slide();
      }
      this.buffer.blit(this.pos, b, p, len);
      this.pos += len;
    },
    addByte: function(c) {
      if (this.pos == 65536) {
        this.slide();
      }
      this.buffer.b[this.pos] = c & 255;
      this.pos++;
    },
    getLastChar: function() {
      return this.buffer.b[this.pos - 1];
    },
    available: function() {
      return this.pos;
    },
    checksum: function() {
      if (this.crc != null) {
        this.crc.update(this.buffer, 0, this.pos);
      }
      return this.crc;
    },
    __class__: haxe.zip._InflateImpl.Window
  };
  haxe.zip._InflateImpl.State = {
    __ename__: true,
    __constructs__: [
      'Head',
      'Block',
      'CData',
      'Flat',
      'Crc',
      'Dist',
      'DistOne',
      'Done'
    ]
  };
  haxe.zip._InflateImpl.State.Head = ['Head', 0];
  haxe.zip._InflateImpl.State.Head.toString = $estr;
  haxe.zip._InflateImpl.State.Head.__enum__ = haxe.zip._InflateImpl.State;
  haxe.zip._InflateImpl.State.Block = ['Block', 1];
  haxe.zip._InflateImpl.State.Block.toString = $estr;
  haxe.zip._InflateImpl.State.Block.__enum__ = haxe.zip._InflateImpl.State;
  haxe.zip._InflateImpl.State.CData = ['CData', 2];
  haxe.zip._InflateImpl.State.CData.toString = $estr;
  haxe.zip._InflateImpl.State.CData.__enum__ = haxe.zip._InflateImpl.State;
  haxe.zip._InflateImpl.State.Flat = ['Flat', 3];
  haxe.zip._InflateImpl.State.Flat.toString = $estr;
  haxe.zip._InflateImpl.State.Flat.__enum__ = haxe.zip._InflateImpl.State;
  haxe.zip._InflateImpl.State.Crc = ['Crc', 4];
  haxe.zip._InflateImpl.State.Crc.toString = $estr;
  haxe.zip._InflateImpl.State.Crc.__enum__ = haxe.zip._InflateImpl.State;
  haxe.zip._InflateImpl.State.Dist = ['Dist', 5];
  haxe.zip._InflateImpl.State.Dist.toString = $estr;
  haxe.zip._InflateImpl.State.Dist.__enum__ = haxe.zip._InflateImpl.State;
  haxe.zip._InflateImpl.State.DistOne = ['DistOne', 6];
  haxe.zip._InflateImpl.State.DistOne.toString = $estr;
  haxe.zip._InflateImpl.State.DistOne.__enum__ = haxe.zip._InflateImpl.State;
  haxe.zip._InflateImpl.State.Done = ['Done', 7];
  haxe.zip._InflateImpl.State.Done.toString = $estr;
  haxe.zip._InflateImpl.State.Done.__enum__ = haxe.zip._InflateImpl.State;
  haxe.zip.InflateImpl = function(i, header, crc) {
    if (crc == null) {
      crc = true;
    }
    if (header == null) {
      header = true;
    }
    this['final'] = false;
    this.htools = new haxe.zip.HuffTools();
    this.huffman = this.buildFixedHuffman();
    this.huffdist = null;
    this.len = 0;
    this.dist = 0;
    this.state = header
      ? haxe.zip._InflateImpl.State.Head
      : haxe.zip._InflateImpl.State.Block;
    this.input = i;
    this.bits = 0;
    this.nbits = 0;
    this.needed = 0;
    this.output = null;
    this.outpos = 0;
    this.lengths = [];
    var _g = 0;
    while (_g < 19) {
      var i1 = _g++;
      this.lengths.push(-1);
    }
    this.window = new haxe.zip._InflateImpl.Window(crc);
  };
  haxe.zip.InflateImpl.__name__ = ['haxe', 'zip', 'InflateImpl'];
  haxe.zip.InflateImpl.prototype = {
    buildFixedHuffman: function() {
      if (haxe.zip.InflateImpl.FIXED_HUFFMAN != null) {
        return haxe.zip.InflateImpl.FIXED_HUFFMAN;
      }
      var a = [];
      var _g = 0;
      while (_g < 288) {
        var n = _g++;
        a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
      }
      haxe.zip.InflateImpl.FIXED_HUFFMAN = this.htools.make(a, 0, 288, 10);
      return haxe.zip.InflateImpl.FIXED_HUFFMAN;
    },
    readBytes: function(b, pos, len) {
      this.needed = len;
      this.outpos = pos;
      this.output = b;
      if (len > 0) {
        while (this.inflateLoop()) {}
      }
      return len - this.needed;
    },
    getBits: function(n) {
      while (this.nbits < n) {
        this.bits |= this.input.readByte() << this.nbits;
        this.nbits += 8;
      }
      var b = this.bits & ((1 << n) - 1);
      this.nbits -= n;
      this.bits >>= n;
      return b;
    },
    getBit: function() {
      if (this.nbits == 0) {
        this.nbits = 8;
        this.bits = this.input.readByte();
      }
      var b = (this.bits & 1) == 1;
      this.nbits--;
      this.bits >>= 1;
      return b;
    },
    getRevBits: function(n) {
      if (n == 0) {
        return 0;
      } else if (this.getBit()) {
        return (1 << (n - 1)) | this.getRevBits(n - 1);
      } else {
        return this.getRevBits(n - 1);
      }
    },
    resetBits: function() {
      this.bits = 0;
      this.nbits = 0;
    },
    addBytes: function(b, p, len) {
      this.window.addBytes(b, p, len);
      this.output.blit(this.outpos, b, p, len);
      this.needed -= len;
      this.outpos += len;
    },
    addByte: function(b) {
      this.window.addByte(b);
      this.output.b[this.outpos] = b & 255;
      this.needed--;
      this.outpos++;
    },
    addDistOne: function(n) {
      var c = this.window.getLastChar();
      var _g1 = 0;
      var _g = n;
      while (_g1 < _g) {
        var i = _g1++;
        this.addByte(c);
      }
    },
    addDist: function(d, len) {
      this.addBytes(this.window.buffer, this.window.pos - d, len);
    },
    applyHuffman: function(h) {
      switch (h[1]) {
        case 0:
          var n = h[2];
          return n;
        case 1:
          var b = h[3];
          var a = h[2];
          return this.applyHuffman(this.getBit() ? b : a);
        case 2:
          var tbl = h[3];
          var n1 = h[2];
          return this.applyHuffman(tbl[this.getBits(n1)]);
      }
    },
    inflateLengths: function(a, max) {
      var i = 0;
      var prev = 0;
      while (i < max) {
        var n = this.applyHuffman(this.huffman);
        switch (n) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
            prev = n;
            a[i] = n;
            ++i;
            break;
          case 16:
            var end = i + 3 + this.getBits(2);
            if (end > max) {
              throw new js._Boot.HaxeError('Invalid data');
            }
            while (i < end) {
              a[i] = prev;
              ++i;
            }
            break;
          case 17:
            i += 3 + this.getBits(3);
            if (i > max) {
              throw new js._Boot.HaxeError('Invalid data');
            }
            break;
          case 18:
            i += 11 + this.getBits(7);
            if (i > max) {
              throw new js._Boot.HaxeError('Invalid data');
            }
            break;
          default:
            throw new js._Boot.HaxeError('Invalid data');
        }
      }
    },
    inflateLoop: function() {
      var _g = this.state;
      switch (_g[1]) {
        case 0:
          var cmf = this.input.readByte();
          var cm = cmf & 15;
          var cinfo = cmf >> 4;
          if (cm != 8) {
            throw new js._Boot.HaxeError('Invalid data');
          }
          var flg = this.input.readByte();
          var fdict = (flg & 32) != 0;
          if (((cmf << 8) + flg) % 31 != 0) {
            throw new js._Boot.HaxeError('Invalid data');
          }
          if (fdict) {
            throw new js._Boot.HaxeError('Unsupported dictionary');
          }
          this.state = haxe.zip._InflateImpl.State.Block;
          return true;
        case 1:
          this['final'] = this.getBit();
          var _g1 = this.getBits(2);
          switch (_g1) {
            case 0:
              this.len = this.input.readUInt16();
              var nlen = this.input.readUInt16();
              if (nlen != 65535 - this.len) {
                throw new js._Boot.HaxeError('Invalid data');
              }
              this.state = haxe.zip._InflateImpl.State.Flat;
              var r = this.inflateLoop();
              this.resetBits();
              return r;
            case 1:
              this.huffman = this.buildFixedHuffman();
              this.huffdist = null;
              this.state = haxe.zip._InflateImpl.State.CData;
              return true;
            case 2:
              var hlit = this.getBits(5) + 257;
              var hdist = this.getBits(5) + 1;
              var hclen = this.getBits(4) + 4;
              var _g11 = 0;
              var _g2 = hclen;
              while (_g11 < _g2) {
                var i = _g11++;
                this.lengths[
                  haxe.zip.InflateImpl.CODE_LENGTHS_POS[i]
                ] = this.getBits(3);
              }
              var _g3 = hclen;
              while (_g3 < 19) {
                var i1 = _g3++;
                this.lengths[haxe.zip.InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
              }
              this.huffman = this.htools.make(this.lengths, 0, 19, 8);
              var lengths = [];
              var _g12 = 0;
              var _g4 = hlit + hdist;
              while (_g12 < _g4) {
                var i2 = _g12++;
                lengths.push(0);
              }
              this.inflateLengths(lengths, hlit + hdist);
              this.huffdist = this.htools.make(lengths, hlit, hdist, 16);
              this.huffman = this.htools.make(lengths, 0, hlit, 16);
              this.state = haxe.zip._InflateImpl.State.CData;
              return true;
            default:
              throw new js._Boot.HaxeError('Invalid data');
          }
          break;
        case 2:
          var n = this.applyHuffman(this.huffman);
          if (n < 256) {
            this.addByte(n);
            return this.needed > 0;
          } else if (n == 256) {
            this.state = this['final']
              ? haxe.zip._InflateImpl.State.Crc
              : haxe.zip._InflateImpl.State.Block;
            return true;
          } else {
            n -= 257;
            var extra_bits = haxe.zip.InflateImpl.LEN_EXTRA_BITS_TBL[n];
            if (extra_bits == -1) {
              throw new js._Boot.HaxeError('Invalid data');
            }
            this.len =
              haxe.zip.InflateImpl.LEN_BASE_VAL_TBL[n] +
              this.getBits(extra_bits);
            var dist_code =
              this.huffdist == null
                ? this.getRevBits(5)
                : this.applyHuffman(this.huffdist);
            extra_bits = haxe.zip.InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
            if (extra_bits == -1) {
              throw new js._Boot.HaxeError('Invalid data');
            }
            this.dist =
              haxe.zip.InflateImpl.DIST_BASE_VAL_TBL[dist_code] +
              this.getBits(extra_bits);
            if (this.dist > this.window.available()) {
              throw new js._Boot.HaxeError('Invalid data');
            }
            this.state =
              this.dist == 1
                ? haxe.zip._InflateImpl.State.DistOne
                : haxe.zip._InflateImpl.State.Dist;
            return true;
          }
          break;
        case 3:
          var rlen = this.len < this.needed ? this.len : this.needed;
          var bytes = this.input.read(rlen);
          this.len -= rlen;
          this.addBytes(bytes, 0, rlen);
          if (this.len == 0) {
            this.state = this['final']
              ? haxe.zip._InflateImpl.State.Crc
              : haxe.zip._InflateImpl.State.Block;
          }
          return this.needed > 0;
        case 4:
          var calc = this.window.checksum();
          if (calc == null) {
            this.state = haxe.zip._InflateImpl.State.Done;
            return true;
          }
          var crc = haxe.crypto.Adler32.read(this.input);
          if (!calc.equals(crc)) {
            throw new js._Boot.HaxeError('Invalid CRC');
          }
          this.state = haxe.zip._InflateImpl.State.Done;
          return true;
        case 5:
          while (this.len > 0 && this.needed > 0) {
            var rdist = this.len < this.dist ? this.len : this.dist;
            var rlen1 = this.needed < rdist ? this.needed : rdist;
            this.addDist(this.dist, rlen1);
            this.len -= rlen1;
          }
          if (this.len == 0) {
            this.state = haxe.zip._InflateImpl.State.CData;
          }
          return this.needed > 0;
        case 6:
          var rlen2 = this.len < this.needed ? this.len : this.needed;
          this.addDistOne(rlen2);
          this.len -= rlen2;
          if (this.len == 0) {
            this.state = haxe.zip._InflateImpl.State.CData;
          }
          return this.needed > 0;
        case 7:
          return false;
      }
    },
    __class__: haxe.zip.InflateImpl
  };
  haxe.zip.Reader = function(i) {
    this.i = i;
  };
  haxe.zip.Reader.__name__ = ['haxe', 'zip', 'Reader'];
  haxe.zip.Reader.prototype = {
    readZipDate: function() {
      var t = this.i.readUInt16();
      var hour = (t >> 11) & 31;
      var min = (t >> 5) & 63;
      var sec = t & 31;
      var d = this.i.readUInt16();
      var year = d >> 9;
      var month = (d >> 5) & 15;
      var day = d & 31;
      return new Date(year + 1980, month - 1, day, hour, min, sec << 1);
    },
    readExtraFields: function(length) {
      var fields = new List();
      while (length > 0) {
        if (length < 4) {
          throw new js._Boot.HaxeError('Invalid extra fields data');
        }
        var tag = this.i.readUInt16();
        var len = this.i.readUInt16();
        if (length < len) {
          throw new js._Boot.HaxeError('Invalid extra fields data');
        }
        if (tag == 28789) {
          var version = this.i.readByte();
          if (version != 1) {
            var data = new haxe.io.BytesBuffer();
            data.b.push(version);
            var src = this.i.read(len - 1);
            var b1 = data.b;
            var b2 = src.b;
            var _g1 = 0;
            var _g = src.length;
            while (_g1 < _g) {
              var i = _g1++;
              data.b.push(b2[i]);
            }
            fields.add(haxe.zip.ExtraField.FUnknown(tag, data.getBytes()));
          } else {
            var crc = this.i.readInt32();
            var name = this.i.read(len - 5).toString();
            fields.add(haxe.zip.ExtraField.FInfoZipUnicodePath(name, crc));
          }
        } else {
          fields.add(haxe.zip.ExtraField.FUnknown(tag, this.i.read(len)));
        }
        length -= 4 + len;
      }
      return fields;
    },
    readEntryHeader: function() {
      var i = this.i;
      var h = i.readInt32();
      if (h == 33639248 || h == 101010256) {
        return null;
      }
      if (h != 67324752) {
        throw new js._Boot.HaxeError('Invalid Zip Data');
      }
      var version = i.readUInt16();
      var flags = i.readUInt16();
      var utf8 = (flags & 2048) != 0;
      if ((flags & 63473) != 0) {
        throw new js._Boot.HaxeError('Unsupported flags ' + flags);
      }
      var compression = i.readUInt16();
      var compressed = compression != 0;
      if (compressed && compression != 8) {
        throw new js._Boot.HaxeError('Unsupported compression ' + compression);
      }
      var mtime = this.readZipDate();
      var crc32 = i.readInt32();
      var csize = i.readInt32();
      var usize = i.readInt32();
      var fnamelen = i.readInt16();
      var elen = i.readInt16();
      var fname = i.readString(fnamelen);
      var fields = this.readExtraFields(elen);
      if (utf8) {
        fields.push(haxe.zip.ExtraField.FUtf8);
      }
      var data = null;
      if ((flags & 8) != 0) {
        crc32 = null;
      }
      return {
        fileName: fname,
        fileSize: usize,
        fileTime: mtime,
        compressed: compressed,
        dataSize: csize,
        data: data,
        crc32: crc32,
        extraFields: fields
      };
    },
    read: function() {
      var l = new List();
      var buf = null;
      var tmp = null;
      while (true) {
        var e = this.readEntryHeader();
        if (e == null) {
          break;
        }
        if (e.crc32 == null) {
          if (e.compressed) {
            var bufSize = 65536;
            if (tmp == null) {
              tmp = new haxe.io.Bytes(new ArrayBuffer(bufSize));
            }
            var out = new haxe.io.BytesBuffer();
            var z = new haxe.zip.InflateImpl(this.i, false, false);
            while (true) {
              var n = z.readBytes(tmp, 0, bufSize);
              if (n < 0 || n > tmp.length) {
                throw new js._Boot.HaxeError(haxe.io.Error.OutsideBounds);
              }
              var b1 = out.b;
              var b2 = tmp.b;
              var _g1 = 0;
              var _g = n;
              while (_g1 < _g) {
                var i = _g1++;
                out.b.push(b2[i]);
              }
              if (n < bufSize) {
                break;
              }
            }
            e.data = out.getBytes();
          } else {
            e.data = this.i.read(e.dataSize);
          }
          e.crc32 = this.i.readInt32();
          if (e.crc32 == 134695760) {
            e.crc32 = this.i.readInt32();
          }
          e.dataSize = this.i.readInt32();
          e.fileSize = this.i.readInt32();
          e.dataSize = e.fileSize;
          e.compressed = false;
        } else {
          e.data = this.i.read(e.dataSize);
        }
        l.add(e);
      }
      return l;
    },
    __class__: haxe.zip.Reader
  };
  js._Boot = {};
  js._Boot.HaxeError = function(val) {
    Error.call(this);
    this.val = val;
    this.message = String(val);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, js._Boot.HaxeError);
    }
  };
  js._Boot.HaxeError.__name__ = ['js', '_Boot', 'HaxeError'];
  js._Boot.HaxeError.wrap = function(val) {
    if (val instanceof Error) {
      return val;
    } else {
      return new js._Boot.HaxeError(val);
    }
  };
  js._Boot.HaxeError.__super__ = Error;
  js._Boot.HaxeError.prototype = $extend(Error.prototype, {
    __class__: js._Boot.HaxeError
  });
  js.html = {};
  js.html.compat = {};
  js.html.compat.ArrayBuffer = function(a) {
    if (a instanceof Array && a.__enum__ == null) {
      this.a = a;
      this.byteLength = a.length;
    } else {
      var len = a;
      this.a = [];
      var _g1 = 0;
      var _g = len;
      while (_g1 < _g) {
        var i = _g1++;
        this.a[i] = 0;
      }
      this.byteLength = len;
    }
  };
  js.html.compat.ArrayBuffer.__name__ = ['js', 'html', 'compat', 'ArrayBuffer'];
  js.html.compat.ArrayBuffer.sliceImpl = function(begin, end) {
    var u = new Uint8Array(this, begin, end == null ? null : end - begin);
    var result = new ArrayBuffer(u.byteLength);
    var resultArray = new Uint8Array(result);
    resultArray.set(u);
    return result;
  };
  js.html.compat.ArrayBuffer.prototype = {
    slice: function(begin, end) {
      return new js.html.compat.ArrayBuffer(this.a.slice(begin, end));
    },
    __class__: js.html.compat.ArrayBuffer
  };
  js.html.compat.DataView = function(buffer, byteOffset, byteLength) {
    this.buf = buffer;
    this.offset = byteOffset == null ? 0 : byteOffset;
    this.length =
      byteLength == null ? buffer.byteLength - this.offset : byteLength;
    if (
      this.offset < 0 ||
      this.length < 0 ||
      this.offset + this.length > buffer.byteLength
    ) {
      throw new js._Boot.HaxeError(haxe.io.Error.OutsideBounds);
    }
    this.byteLength = this.length;
    this.byteOffset = this.offset;
    this.buffer = this.buf;
  };
  js.html.compat.DataView.__name__ = ['js', 'html', 'compat', 'DataView'];
  js.html.compat.DataView.prototype = {
    getInt8: function(byteOffset) {
      var v = this.buf.a[this.offset + byteOffset];
      if (v >= 128) {
        return v - 256;
      } else {
        return v;
      }
    },
    getUint8: function(byteOffset) {
      return this.buf.a[this.offset + byteOffset];
    },
    getInt16: function(byteOffset, littleEndian) {
      var v = this.getUint16(byteOffset, littleEndian);
      if (v >= 32768) {
        return v - 65536;
      } else {
        return v;
      }
    },
    getUint16: function(byteOffset, littleEndian) {
      if (littleEndian) {
        return (
          this.buf.a[this.offset + byteOffset] |
          (this.buf.a[this.offset + byteOffset + 1] << 8)
        );
      } else {
        return (
          (this.buf.a[this.offset + byteOffset] << 8) |
          this.buf.a[this.offset + byteOffset + 1]
        );
      }
    },
    getInt32: function(byteOffset, littleEndian) {
      var p = this.offset + byteOffset;
      var a = this.buf.a[p++];
      var b = this.buf.a[p++];
      var c = this.buf.a[p++];
      var d = this.buf.a[p++];
      if (littleEndian) {
        return a | (b << 8) | (c << 16) | (d << 24);
      } else {
        return d | (c << 8) | (b << 16) | (a << 24);
      }
    },
    getUint32: function(byteOffset, littleEndian) {
      var v = this.getInt32(byteOffset, littleEndian);
      if (v < 0) {
        return v + 4294967296;
      } else {
        return v;
      }
    },
    getFloat32: function(byteOffset, littleEndian) {
      return haxe.io.FPHelper.i32ToFloat(
        this.getInt32(byteOffset, littleEndian)
      );
    },
    getFloat64: function(byteOffset, littleEndian) {
      var a = this.getInt32(byteOffset, littleEndian);
      var b = this.getInt32(byteOffset + 4, littleEndian);
      return haxe.io.FPHelper.i64ToDouble(
        littleEndian ? a : b,
        littleEndian ? b : a
      );
    },
    setInt8: function(byteOffset, value) {
      this.buf.a[byteOffset + this.offset] =
        value < 0 ? (value + 128) & 255 : value & 255;
    },
    setUint8: function(byteOffset, value) {
      this.buf.a[byteOffset + this.offset] = value & 255;
    },
    setInt16: function(byteOffset, value, littleEndian) {
      this.setUint16(
        byteOffset,
        value < 0 ? value + 65536 : value,
        littleEndian
      );
    },
    setUint16: function(byteOffset, value, littleEndian) {
      var p = byteOffset + this.offset;
      if (littleEndian) {
        this.buf.a[p] = value & 255;
        this.buf.a[p++] = (value >> 8) & 255;
      } else {
        this.buf.a[p++] = (value >> 8) & 255;
        this.buf.a[p] = value & 255;
      }
    },
    setInt32: function(byteOffset, value, littleEndian) {
      this.setUint32(byteOffset, value, littleEndian);
    },
    setUint32: function(byteOffset, value, littleEndian) {
      var p = byteOffset + this.offset;
      if (littleEndian) {
        this.buf.a[p++] = value & 255;
        this.buf.a[p++] = (value >> 8) & 255;
        this.buf.a[p++] = (value >> 16) & 255;
        this.buf.a[p++] = value >>> 24;
      } else {
        this.buf.a[p++] = value >>> 24;
        this.buf.a[p++] = (value >> 16) & 255;
        this.buf.a[p++] = (value >> 8) & 255;
        this.buf.a[p++] = value & 255;
      }
    },
    setFloat32: function(byteOffset, value, littleEndian) {
      this.setUint32(
        byteOffset,
        haxe.io.FPHelper.floatToI32(value),
        littleEndian
      );
    },
    setFloat64: function(byteOffset, value, littleEndian) {
      var i64 = haxe.io.FPHelper.doubleToI64(value);
      if (littleEndian) {
        this.setUint32(byteOffset, i64.low);
        this.setUint32(byteOffset, i64.high);
      } else {
        this.setUint32(byteOffset, i64.high);
        this.setUint32(byteOffset, i64.low);
      }
    },
    __class__: js.html.compat.DataView
  };
  js.html.compat.Float32Array = function() {};
  js.html.compat.Float32Array.__name__ = [
    'js',
    'html',
    'compat',
    'Float32Array'
  ];
  js.html.compat.Float32Array._new = function(arg1, offset, length) {
    var arr;
    if (typeof arg1 == 'number') {
      arr = [];
      var _g1 = 0;
      var _g = arg1;
      while (_g1 < _g) {
        var i = _g1++;
        arr[i] = 0;
      }
      arr.byteLength = arr.length << 2;
      arr.byteOffset = 0;
      var _g2 = [];
      var _g21 = 0;
      var _g11 = arr.length << 2;
      while (_g21 < _g11) {
        var i1 = _g21++;
        _g2.push(0);
      }
      arr.buffer = new js.html.compat.ArrayBuffer(_g2);
    } else if (js.Boot.__instanceof(arg1, js.html.compat.ArrayBuffer)) {
      var buffer = arg1;
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = (buffer.byteLength - offset) >> 2;
      }
      arr = [];
      var _g12 = 0;
      var _g3 = length;
      while (_g12 < _g3) {
        var i2 = _g12++;
        var val =
          buffer.a[offset++] |
          (buffer.a[offset++] << 8) |
          (buffer.a[offset++] << 16) |
          (buffer.a[offset++] << 24);
        arr.push(haxe.io.FPHelper.i32ToFloat(val));
      }
      arr.byteLength = arr.length << 2;
      arr.byteOffset = offset;
      arr.buffer = buffer;
    } else if (arg1 instanceof Array && arg1.__enum__ == null) {
      arr = arg1.slice();
      var buffer1 = [];
      var _g4 = 0;
      while (_g4 < arr.length) {
        var f = arr[_g4];
        ++_g4;
        var i3 = haxe.io.FPHelper.floatToI32(f);
        buffer1.push(i3 & 255);
        buffer1.push((i3 >> 8) & 255);
        buffer1.push((i3 >> 16) & 255);
        buffer1.push(i3 >>> 24);
      }
      arr.byteLength = arr.length << 2;
      arr.byteOffset = 0;
      arr.buffer = new js.html.compat.ArrayBuffer(buffer1);
    } else {
      throw new js._Boot.HaxeError('TODO ' + Std.string(arg1));
    }
    arr.subarray = js.html.compat.Float32Array._subarray;
    arr.set = js.html.compat.Float32Array._set;
    return arr;
  };
  js.html.compat.Float32Array._set = function(arg, offset) {
    if (js.Boot.__instanceof(arg.buffer, js.html.compat.ArrayBuffer)) {
      var a = arg;
      if (arg.byteLength + offset > this.byteLength) {
        throw new js._Boot.HaxeError('set() outside of range');
      }
      var _g1 = 0;
      var _g = arg.byteLength;
      while (_g1 < _g) {
        var i = _g1++;
        this[i + offset] = a[i];
      }
    } else if (arg instanceof Array && arg.__enum__ == null) {
      var a1 = arg;
      if (a1.length + offset > this.byteLength) {
        throw new js._Boot.HaxeError('set() outside of range');
      }
      var _g11 = 0;
      var _g2 = a1.length;
      while (_g11 < _g2) {
        var i1 = _g11++;
        this[i1 + offset] = a1[i1];
      }
    } else {
      throw new js._Boot.HaxeError('TODO');
    }
  };
  js.html.compat.Float32Array._subarray = function(start, end) {
    var a = js.html.compat.Float32Array._new(this.slice(start, end));
    a.byteOffset = start * 4;
    return a;
  };
  js.html.compat.Float64Array = function() {};
  js.html.compat.Float64Array.__name__ = [
    'js',
    'html',
    'compat',
    'Float64Array'
  ];
  js.html.compat.Float64Array._new = function(arg1, offset, length) {
    var arr;
    if (typeof arg1 == 'number') {
      arr = [];
      var _g1 = 0;
      var _g = arg1;
      while (_g1 < _g) {
        var i = _g1++;
        arr[i] = 0;
      }
      arr.byteLength = arr.length << 3;
      arr.byteOffset = 0;
      var _g2 = [];
      var _g21 = 0;
      var _g11 = arr.length << 3;
      while (_g21 < _g11) {
        var i1 = _g21++;
        _g2.push(0);
      }
      arr.buffer = new js.html.compat.ArrayBuffer(_g2);
    } else if (js.Boot.__instanceof(arg1, js.html.compat.ArrayBuffer)) {
      var buffer = arg1;
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = (buffer.byteLength - offset) >> 3;
      }
      arr = [];
      var _g12 = 0;
      var _g3 = length;
      while (_g12 < _g3) {
        var i2 = _g12++;
        var val1 =
          buffer.a[offset++] |
          (buffer.a[offset++] << 8) |
          (buffer.a[offset++] << 16) |
          (buffer.a[offset++] << 24);
        var val2 =
          buffer.a[offset++] |
          (buffer.a[offset++] << 8) |
          (buffer.a[offset++] << 16) |
          (buffer.a[offset++] << 24);
        arr.push(haxe.io.FPHelper.i64ToDouble(val1, val2));
      }
      arr.byteLength = arr.length << 3;
      arr.byteOffset = offset;
      arr.buffer = buffer;
    } else if (arg1 instanceof Array && arg1.__enum__ == null) {
      arr = arg1.slice();
      var buffer1 = [];
      var _g4 = 0;
      while (_g4 < arr.length) {
        var f = arr[_g4];
        ++_g4;
        var v = haxe.io.FPHelper.doubleToI64(f);
        var i3 = v.low;
        buffer1.push(i3 & 255);
        buffer1.push((i3 >> 8) & 255);
        buffer1.push((i3 >> 16) & 255);
        buffer1.push(i3 >>> 24);
        var i4 = v.high;
        buffer1.push(i4 & 255);
        buffer1.push((i4 >> 8) & 255);
        buffer1.push((i4 >> 16) & 255);
        buffer1.push(i4 >>> 24);
      }
      arr.byteLength = arr.length << 3;
      arr.byteOffset = 0;
      arr.buffer = new js.html.compat.ArrayBuffer(buffer1);
    } else {
      throw new js._Boot.HaxeError('TODO ' + Std.string(arg1));
    }
    arr.subarray = js.html.compat.Float64Array._subarray;
    arr.set = js.html.compat.Float64Array._set;
    return arr;
  };
  js.html.compat.Float64Array._set = function(arg, offset) {
    if (js.Boot.__instanceof(arg.buffer, js.html.compat.ArrayBuffer)) {
      var a = arg;
      if (arg.byteLength + offset > this.byteLength) {
        throw new js._Boot.HaxeError('set() outside of range');
      }
      var _g1 = 0;
      var _g = arg.byteLength;
      while (_g1 < _g) {
        var i = _g1++;
        this[i + offset] = a[i];
      }
    } else if (arg instanceof Array && arg.__enum__ == null) {
      var a1 = arg;
      if (a1.length + offset > this.byteLength) {
        throw new js._Boot.HaxeError('set() outside of range');
      }
      var _g11 = 0;
      var _g2 = a1.length;
      while (_g11 < _g2) {
        var i1 = _g11++;
        this[i1 + offset] = a1[i1];
      }
    } else {
      throw new js._Boot.HaxeError('TODO');
    }
  };
  js.html.compat.Float64Array._subarray = function(start, end) {
    var a = js.html.compat.Float64Array._new(this.slice(start, end));
    a.byteOffset = start * 8;
    return a;
  };
  js.html.compat.Uint8Array = function() {};
  js.html.compat.Uint8Array.__name__ = ['js', 'html', 'compat', 'Uint8Array'];
  js.html.compat.Uint8Array._new = function(arg1, offset, length) {
    var arr;
    if (typeof arg1 == 'number') {
      arr = [];
      var _g1 = 0;
      var _g = arg1;
      while (_g1 < _g) {
        var i = _g1++;
        arr[i] = 0;
      }
      arr.byteLength = arr.length;
      arr.byteOffset = 0;
      arr.buffer = new js.html.compat.ArrayBuffer(arr);
    } else if (js.Boot.__instanceof(arg1, js.html.compat.ArrayBuffer)) {
      var buffer = arg1;
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = buffer.byteLength - offset;
      }
      if (offset == 0) {
        arr = buffer.a;
      } else {
        arr = buffer.a.slice(offset, offset + length);
      }
      arr.byteLength = arr.length;
      arr.byteOffset = offset;
      arr.buffer = buffer;
    } else if (arg1 instanceof Array && arg1.__enum__ == null) {
      arr = arg1.slice();
      arr.byteLength = arr.length;
      arr.byteOffset = 0;
      arr.buffer = new js.html.compat.ArrayBuffer(arr);
    } else {
      throw new js._Boot.HaxeError('TODO ' + Std.string(arg1));
    }
    arr.subarray = js.html.compat.Uint8Array._subarray;
    arr.set = js.html.compat.Uint8Array._set;
    return arr;
  };
  js.html.compat.Uint8Array._set = function(arg, offset) {
    if (js.Boot.__instanceof(arg.buffer, js.html.compat.ArrayBuffer)) {
      var a = arg;
      if (arg.byteLength + offset > this.byteLength) {
        throw new js._Boot.HaxeError('set() outside of range');
      }
      var _g1 = 0;
      var _g = arg.byteLength;
      while (_g1 < _g) {
        var i = _g1++;
        this[i + offset] = a[i];
      }
    } else if (arg instanceof Array && arg.__enum__ == null) {
      var a1 = arg;
      if (a1.length + offset > this.byteLength) {
        throw new js._Boot.HaxeError('set() outside of range');
      }
      var _g11 = 0;
      var _g2 = a1.length;
      while (_g11 < _g2) {
        var i1 = _g11++;
        this[i1 + offset] = a1[i1];
      }
    } else {
      throw new js._Boot.HaxeError('TODO');
    }
  };
  js.html.compat.Uint8Array._subarray = function(start, end) {
    var a = js.html.compat.Uint8Array._new(this.slice(start, end));
    a.byteOffset = start;
    return a;
  };
  system.collections = {};
  system.collections.generic = {};
  system.collections.generic.IEnumerable = function() {};
  system.collections.generic.IEnumerable.__name__ = [
    'system',
    'collections',
    'generic',
    'IEnumerable'
  ];
  system._CsString = {};
  system._CsString.CsString_Impl_ = {};
  system._CsString.CsString_Impl_.__name__ = [
    'system',
    '_CsString',
    'CsString_Impl_'
  ];
  system._CsString.CsString_Impl_.Split_CharArray = function(this1, chars) {
    var strings = [];
    var startPos = 0;
    var _g1 = 0;
    var _g = this1.length;
    while (_g1 < _g) {
      var i = _g1++;
      var cc = HxOverrides.cca(this1, i);
      if (chars.indexOf(cc) >= 0) {
        var endPos = i;
        if (endPos < startPos) {
          strings.push('');
        } else {
          strings.push(this1.substring(startPos, endPos));
        }
        startPos = i + 1;
      }
    }
    if (startPos < this1.length) {
      strings.push(this1.substring(startPos, this1.length));
    }
    return strings;
  };
  system._EventAction1 = {};
  system._EventAction1.EventAction1_Impl_ = {};
  system._EventAction1.EventAction1_Impl_.__name__ = [
    'system',
    '_EventAction1',
    'EventAction1_Impl_'
  ];
  system._EventAction1.EventAction1_Impl_.add = function(lhs, rhs) {
    if (lhs == null) {
      var this1 = rhs == null ? null : [rhs];
      lhs = this1;
    } else {
      lhs.push(rhs);
    }
    return lhs;
  };
  system._EventAction1.EventAction1_Impl_.sub = function(lhs, rhs) {
    var raw = lhs;
    var index = raw.indexOf(rhs);
    if (index != -1) {
      raw.splice(index, 1);
      if (raw.length == 0) {
        return null;
      }
    }
    return lhs;
  };
  system._EventAction1.EventAction1_Impl_.Invoke = function(this1, p) {
    if (this1 == null) {
      return;
    }
    var _g = 0;
    while (_g < this1.length) {
      var x = this1[_g];
      ++_g;
      x(p);
    }
  };
  system._EventAction2 = {};
  system._EventAction2.EventAction2_Impl_ = {};
  system._EventAction2.EventAction2_Impl_.__name__ = [
    'system',
    '_EventAction2',
    'EventAction2_Impl_'
  ];
  system._EventAction2.EventAction2_Impl_.add = function(lhs, rhs) {
    if (lhs == null) {
      var this1 = rhs == null ? null : [rhs];
      lhs = this1;
    } else {
      lhs.push(rhs);
    }
    return lhs;
  };
  system._EventAction2.EventAction2_Impl_.sub = function(lhs, rhs) {
    var raw = lhs;
    var index = raw.indexOf(rhs);
    if (index != -1) {
      raw.splice(index, 1);
      if (raw.length == 0) {
        return null;
      }
    }
    return lhs;
  };
  system._EventAction2.EventAction2_Impl_.Invoke = function(this1, p1, p2) {
    if (this1 == null) {
      return;
    }
    var _g = 0;
    while (_g < this1.length) {
      var x = this1[_g];
      ++_g;
      x(p1, p2);
    }
  };
  system.IFormatProvider = function() {};
  system.IFormatProvider.__name__ = ['system', 'IFormatProvider'];
  system._Int32 = {};
  system._Int32.Int32_Impl_ = {};
  system._Int32.Int32_Impl_.__name__ = ['system', '_Int32', 'Int32_Impl_'];
  system._Int32.Int32_Impl_.CompareTo_Int32 = function(this1, other) {
    if (this1 < other) {
      return -1;
    }
    if (this1 > other) {
      return 1;
    }
    return 0;
  };
  system.Int32ArrayIterator = function(array) {
    this._array = array;
    this._i = 0;
  };
  system.Int32ArrayIterator.__name__ = ['system', 'Int32ArrayIterator'];
  system.Int32ArrayIterator.prototype = {
    hasNext: function() {
      return this._i < this._array.length;
    },
    next: function() {
      return this._array[this._i++];
    },
    __class__: system.Int32ArrayIterator
  };
  system.collections.generic.IterableEnumerable = function(i) {
    this._iterable = i;
  };
  system.collections.generic.IterableEnumerable.__name__ = [
    'system',
    'collections',
    'generic',
    'IterableEnumerable'
  ];
  system.collections.generic.IterableEnumerable.__interfaces__ = [
    system.collections.generic.IEnumerable
  ];
  system.collections.generic.IterableEnumerable.prototype = {
    __class__: system.collections.generic.IterableEnumerable
  };
  function $iterator(o) {
    if (o instanceof Array)
      return function() {
        return HxOverrides.iter(o);
      };
    return typeof o.iterator == 'function' ? $bind(o, o.iterator) : o.iterator;
  }
  var $_,
    $fid = 0;
  function $bind(o, m) {
    if (m == null) return null;
    if (m.__id__ == null) m.__id__ = $fid++;
    var f;
    if (o.hx__closures__ == null) o.hx__closures__ = {};
    else f = o.hx__closures__[m.__id__];
    if (f == null) {
      f = function() {
        return f.method.apply(f.scope, arguments);
      };
      f.scope = o;
      f.method = m;
      o.hx__closures__[m.__id__] = f;
    }
    return f;
  }
  String.prototype.__class__ = String;
  String.__name__ = ['String'];
  Array.__name__ = ['Array'];
  Date.prototype.__class__ = Date;
  Date.__name__ = ['Date'];
  var Int = { __name__: ['Int'] };
  var Dynamic = { __name__: ['Dynamic'] };
  var Float = Number;
  Float.__name__ = ['Float'];
  var Bool = Boolean;
  Bool.__ename__ = ['Bool'];
  var Class = { __name__: ['Class'] };
  var Enum = {};
  alphaTab.util.Logger.LogLevel = 0;
  alphaTab.util.Logger.LogLevel = 2;
  alphaTab.Environment.ScriptFile = null;
  alphaTab.Environment.IsFontLoaded = false;
  alphaTab.Environment.RenderEngines = null;
  alphaTab.Environment.LayoutEngines = null;
  alphaTab.Environment.StaveProfiles = null;
  alphaTab.Environment.Init();
  alphaTab.model.Tuning._sevenStrings = null;
  alphaTab.model.Tuning._sixStrings = null;
  alphaTab.model.Tuning._fiveStrings = null;
  alphaTab.model.Tuning._fourStrings = null;
  alphaTab.model.Tuning._defaultTunings = null;
  alphaTab.model.Tuning.Initialize();
  alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup = null;
  alphaTab.platform.javaScript.AlphaSynthFlashOutput.NextId = 0;
  var this1 = {};
  alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup = this1;
  alphaTab.rendering.glyphs.ScoreBeatGlyph.NormalKeys = null;
  alphaTab.rendering.glyphs.ScoreBeatGlyph.XKeys = null;
  var this1 = {};
  alphaTab.rendering.glyphs.ScoreBeatGlyph.NormalKeys = this1;
  var normalKeyNotes = new Int32Array([
    32,
    34,
    35,
    36,
    38,
    39,
    40,
    41,
    43,
    45,
    47,
    48,
    50,
    55,
    56,
    58,
    60,
    61
  ]);
  var i = 0;
  while (i < normalKeyNotes.length) {
    alphaTab.rendering.glyphs.ScoreBeatGlyph.NormalKeys[
      normalKeyNotes[i]
    ] = true;
    ++i;
  }
  var this2 = {};
  alphaTab.rendering.glyphs.ScoreBeatGlyph.XKeys = this2;
  var xKeyNotes = new Int32Array([31, 33, 37, 42, 44, 54, 62, 63, 64, 65, 66]);
  var i1 = 0;
  while (i1 < xKeyNotes.length) {
    alphaTab.rendering.glyphs.ScoreBeatGlyph.XKeys[xKeyNotes[i1]] = true;
    ++i1;
  }
  alphaTab.xml.XmlParser.Escapes = null;
  var this1 = {};
  alphaTab.xml.XmlParser.Escapes = this1;
  alphaTab.xml.XmlParser.Escapes['lt'] = '<';
  alphaTab.xml.XmlParser.Escapes['gt'] = '>';
  alphaTab.xml.XmlParser.Escapes['amp'] = '&';
  alphaTab.xml.XmlParser.Escapes['quot'] = '"';
  alphaTab.xml.XmlParser.Escapes['apos'] = "'";
  var ArrayBuffer = $global.ArrayBuffer || js.html.compat.ArrayBuffer;
  if (ArrayBuffer.prototype.slice == null) {
    ArrayBuffer.prototype.slice = js.html.compat.ArrayBuffer.sliceImpl;
  }
  var DataView = $global.DataView || js.html.compat.DataView;
  var Float32Array = $global.Float32Array || js.html.compat.Float32Array._new;
  var Float64Array =
    $global.Float64Array ||
    ($global.Float32Array ? 'notsupported' : null) ||
    js.html.compat.Float64Array._new;
  var Uint8Array = $global.Uint8Array || js.html.compat.Uint8Array._new;
  alphaTab._DisplayMode.DisplayMode_Impl_.GuitarPro = 0;
  alphaTab._DisplayMode.DisplayMode_Impl_.SongBook = 1;
  alphaTab.platform.svg.SvgCanvas.BlurCorrection = 0;
  alphaTab.platform.model.Color.BlackRgb = '#000000';
  alphaTab.platform.javaScript.Html5Canvas.BlurCorrection = 0;
  js.Boot.__toStr = {}.toString;
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdPrefix = 'alphaSynth.';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdInitialize =
    'alphaSynth.' + 'initialize';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetLogLevel =
    'alphaSynth.' + 'setLogLevel';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetMasterVolume =
    'alphaSynth.' + 'setMasterVolume';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetMetronomeVolume =
    'alphaSynth.' + 'setMetronomeVolume';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetPlaybackSpeed =
    'alphaSynth.' + 'setPlaybackSpeed';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetTickPosition =
    'alphaSynth.' + 'setTickPosition';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetTimePosition =
    'alphaSynth.' + 'setTimePosition';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetPlaybackRange =
    'alphaSynth.' + 'setPlaybackRange';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetIsLooping =
    'alphaSynth.' + 'setIsLooping';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdPlay =
    'alphaSynth.' + 'play';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdPause =
    'alphaSynth.' + 'pause';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdPlayPause =
    'alphaSynth.' + 'playPause';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdStop =
    'alphaSynth.' + 'stop';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdLoadSoundFontBytes =
    'alphaSynth.' + 'loadSoundFontBytes';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdLoadMidi =
    'alphaSynth.' + 'loadMidi';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetChannelMute =
    'alphaSynth.' + 'setChannelMute';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetChannelSolo =
    'alphaSynth.' + 'setChannelSolo';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetChannelVolume =
    'alphaSynth.' + 'setChannelVolume';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetChannelProgram =
    'alphaSynth.' + 'setChannelProgram';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdResetChannelStates =
    'alphaSynth.' + 'resetChannelStates';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdReady =
    'alphaSynth.' + 'ready';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdReadyForPlayback =
    'alphaSynth.' + 'readyForPlayback';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdPositionChanged =
    'alphaSynth.' + 'positionChanged';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdPlayerStateChanged =
    'alphaSynth.' + 'playerStateChanged';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdFinished =
    'alphaSynth.' + 'finished';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSoundFontLoaded =
    'alphaSynth.' + 'soundFontLoaded';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSoundFontLoadFailed =
    'alphaSynth.' + 'soundFontLoadFailed';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdMidiLoaded =
    'alphaSynth.' + 'midiLoaded';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdMidiLoadFailed =
    'alphaSynth.' + 'midiLoadFailed';
  alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdLog =
    'alphaSynth.' + 'log';
  alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputPrefix =
    'alphaSynth.' + 'output.';
  alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputSequencerFinished =
    'alphaSynth.' + 'output.' + 'sequencerFinished';
  alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputAddSamples =
    'alphaSynth.' + 'output.' + 'addSamples';
  alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputPlay =
    'alphaSynth.' + 'output.' + 'play';
  alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputPause =
    'alphaSynth.' + 'output.' + 'pause';
  alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputResetSamples =
    'alphaSynth.' + 'output.' + 'resetSamples';
  alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputSampleRequest =
    'alphaSynth.' + 'output.' + 'sampleRequest';
  alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputFinished =
    'alphaSynth.' + 'output.' + 'finished';
  alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputSamplesPlayed =
    'alphaSynth.' + 'output.' + 'samplesPlayed';
  system.Convert._conversionBuffer = new ArrayBuffer(8);
  system.Convert._int8Buffer = new Int8Array(system.Convert._conversionBuffer);
  system.Convert._uint8Buffer = new Uint8Array(
    system.Convert._conversionBuffer
  );
  system.Convert._int16Buffer = new Int16Array(
    system.Convert._conversionBuffer
  );
  system.Convert._uint16Buffer = new Uint16Array(
    system.Convert._conversionBuffer
  );
  system.Convert._int32Buffer = new Int32Array(
    system.Convert._conversionBuffer
  );
  system.Convert._uint32Buffer = new Uint32Array(
    system.Convert._conversionBuffer
  );
  alphaTab.audio.synth.bank.components.generators.DefaultGenerators.DefaultSine = new alphaTab.audio.synth.bank.components.generators.SineGenerator(
    new alphaTab.audio.synth.bank.descriptors.GeneratorDescriptor()
  );
  alphaTab.audio.synth.bank.components.generators.DefaultGenerators.DefaultSaw = new alphaTab.audio.synth.bank.components.generators.SawGenerator(
    new alphaTab.audio.synth.bank.descriptors.GeneratorDescriptor()
  );
  alphaTab.audio.synth.bank.components.generators.DefaultGenerators.DefaultSquare = new alphaTab.audio.synth.bank.components.generators.SquareGenerator(
    new alphaTab.audio.synth.bank.descriptors.GeneratorDescriptor()
  );
  alphaTab.audio.synth.bank.components.generators.DefaultGenerators.DefaultTriangle = new alphaTab.audio.synth.bank.components.generators.TriangleGenerator(
    new alphaTab.audio.synth.bank.descriptors.GeneratorDescriptor()
  );
  alphaTab.rendering.layout.PageViewLayout.PagePadding = new Float32Array([
    40,
    40,
    40,
    40
  ]);
  alphaTab.rendering.layout.PageViewLayout.GroupSpacing = 20;
  alphaTab.rendering.layout.HorizontalScreenLayout.PagePadding = new Float32Array(
    [20, 20, 20, 20]
  );
  alphaTab.rendering.layout.HorizontalScreenLayout.GroupSpacing = 20;
  alphaTab.Environment.StaveProfileScoreTab = 'score-tab';
  alphaTab.Environment.StaveProfileTab = 'tab';
  alphaTab.Environment.StaveProfileTabMixed = 'tab-mixed';
  alphaTab.Environment.StaveProfileScore = 'score';
  alphaTab._FingeringMode.FingeringMode_Impl_.Score = 0;
  alphaTab._FingeringMode.FingeringMode_Impl_.SingleNoteEffectBand = 1;
  alphaTab._ScrollMode.ScrollMode_Impl_.Off = 0;
  alphaTab._ScrollMode.ScrollMode_Impl_.Continuous = 1;
  alphaTab._ScrollMode.ScrollMode_Impl_.OffScreen = 2;
  alphaTab.audio.MidiUtils.QuarterTime = 960;
  alphaTab.audio.MidiUtils.MinVelocity = 15;
  alphaTab.audio.MidiUtils.VelocityIncrement = 16;
  alphaTab.audio.generator.MidiFileGenerator.DefaultDurationDead = 30;
  alphaTab.audio.generator.MidiFileGenerator.DefaultDurationPalmMute = 80;
  alphaTab.audio.generator.MidiFileGenerator.DefaultBend = 64;
  alphaTab.audio.generator.MidiFileGenerator.DefaultBendSemitone = 2.75;
  alphaTab.audio.synth._PlayerState.PlayerState_Impl_.Paused = 0;
  alphaTab.audio.synth._PlayerState.PlayerState_Impl_.Playing = 1;
  alphaTab.audio.synth.bank.PatchBank.DrumBank = 128;
  alphaTab.audio.synth.bank.PatchBank.BankSize = 128;
  alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.Delay = 0;
  alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.Attack = 1;
  alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.Hold = 2;
  alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.Decay = 3;
  alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.Sustain = 4;
  alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.Release = 5;
  alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.None = 6;
  alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.None = 0;
  alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.BiquadLowpass = 1;
  alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.BiquadHighpass = 2;
  alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.OnePoleLowpass = 3;
  alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.Delay = 0;
  alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.Sustain = 1;
  alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.Neg3dBCenter = 0;
  alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.Neg6dBCenter = 1;
  alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ZeroCenter = 2;
  alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.PreLoop = 0;
  alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.Loop = 1;
  alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.PostLoop = 2;
  alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.Finished = 3;
  alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.NoLoop = 0;
  alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.OneShot = 1;
  alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.Continuous = 2;
  alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.LoopUntilNoteOff = 3;
  alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.Sine = 0;
  alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.Square = 1;
  alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.Saw = 2;
  alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.Triangle = 3;
  alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.SampleData = 4;
  alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.WhiteNoise = 5;
  alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ChannelKeyVelocity = 0;
  alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ChannelKey = 1;
  alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.KeyVelocity = 2;
  alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.Key = 3;
  alphaTab.audio.synth.midi.MidiHelper.MicroSecondsPerMinute = 60000000;
  alphaTab.audio.synth.midi.MidiHelper.MinChannel = 0;
  alphaTab.audio.synth.midi.MidiHelper.MaxChannel = 15;
  alphaTab.audio.synth.midi.MidiHelper.DrumChannel = 9;
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.BankSelectCoarse = 0;
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.ModulationCoarse = 1;
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.DataEntryCoarse = 6;
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.VolumeCoarse = 7;
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.PanCoarse = 10;
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.ExpressionControllerCoarse = 11;
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.ModulationFine = 33;
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.DataEntryFine = 38;
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.VolumeFine = 39;
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.PanFine = 42;
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.ExpressionControllerFine = 43;
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.HoldPedal = 64;
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.LegatoPedal = 68;
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.NonRegisteredParameterFine = 98;
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.NonRegisteredParameterCourse = 99;
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.RegisteredParameterFine = 100;
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.RegisteredParameterCourse = 101;
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.ResetControllers = 121;
  alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.AllNotesOff = 123;
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.SequenceNumber = 0;
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.TextEvent = 1;
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.CopyrightNotice = 2;
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.SequenceOrTrackName = 3;
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.InstrumentName = 4;
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.LyricText = 5;
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.MarkerText = 6;
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.CuePoint = 7;
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.PatchName = 8;
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.PortName = 9;
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.MidiChannel = 32;
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.MidiPort = 33;
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.EndOfTrack = 47;
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.Tempo = 81;
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.SmpteOffset = 84;
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.TimeSignature = 88;
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.KeySignature = 89;
  alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.SequencerSpecific = 127;
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.NoteOff = 128;
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.NoteOn = 144;
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.NoteAftertouch = 160;
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.Controller = 176;
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.ProgramChange = 192;
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.ChannelAftertouch = 208;
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.PitchBend = 224;
  alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.Meta = 255;
  alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.SystemExclusive = 240;
  alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.MtcQuarterFrame = 241;
  alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.SongPosition = 242;
  alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.SongSelect = 243;
  alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.TuneRequest = 246;
  alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.SystemExclusive2 = 247;
  alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.MinToMax = 0;
  alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.MaxToMin = 1;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.StartAddressOffset = 0;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.EndAddressOffset = 1;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.StartLoopAddressOffset = 2;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.EndLoopAddressOffset = 3;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.StartAddressCoarseOffset = 4;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ModulationLFOToPitch = 5;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.VibratoLFOToPitch = 6;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ModulationEnvelopeToPitch = 7;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.InitialFilterCutoffFrequency = 8;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.InitialFilterQ = 9;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ModulationLFOToFilterCutoffFrequency = 10;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ModulationEnvelopeToFilterCutoffFrequency = 11;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.EndAddressCoarseOffset = 12;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ModulationLFOToVolume = 13;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.Unused1 = 14;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ChorusEffectsSend = 15;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ReverbEffectsSend = 16;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.Pan = 17;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.Unused2 = 18;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.Unused3 = 19;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.Unused4 = 20;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.DelayModulationLFO = 21;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.FrequencyModulationLFO = 22;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.DelayVibratoLFO = 23;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.FrequencyVibratoLFO = 24;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.DelayModulationEnvelope = 25;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.AttackModulationEnvelope = 26;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.HoldModulationEnvelope = 27;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.DecayModulationEnvelope = 28;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.SustainModulationEnvelope = 29;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ReleaseModulationEnvelope = 30;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.KeyNumberToModulationEnvelopeHold = 31;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.KeyNumberToModulationEnvelopeDecay = 32;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.DelayVolumeEnvelope = 33;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.AttackVolumeEnvelope = 34;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.HoldVolumeEnvelope = 35;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.DecayVolumeEnvelope = 36;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.SustainVolumeEnvelope = 37;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ReleaseVolumeEnvelope = 38;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.KeyNumberToVolumeEnvelopeHold = 39;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.KeyNumberToVolumeEnvelopeDecay = 40;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.Instrument = 41;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.Reserved1 = 42;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.KeyRange = 43;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.VelocityRange = 44;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.StartLoopAddressCoarseOffset = 45;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.KeyNumber = 46;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.Velocity = 47;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.InitialAttenuation = 48;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.Reserved2 = 49;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.EndLoopAddressCoarseOffset = 50;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.CoarseTune = 51;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.FineTune = 52;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.SampleID = 53;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.SampleModes = 54;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.Reserved3 = 55;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ScaleTuning = 56;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ExclusiveClass = 57;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.OverridingRootKey = 58;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.Unused5 = 59;
  alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.UnusedEnd = 60;
  alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.Unipolar = 0;
  alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.Bipolar = 1;
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.MonoSample = 1;
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.RightSample = 2;
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.LeftSample = 4;
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.LinkedSample = 8;
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.OggVobis = 16;
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.RomMonoSample = 32769;
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.RomRightSample = 32770;
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.RomLeftSample = 32772;
  alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.RomLinkedSample = 32776;
  alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.Linear = 0;
  alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.Concave = 1;
  alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.Convex = 2;
  alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.Switch = 3;
  alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.Linear = 0;
  alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.AbsoluteValue = 2;
  alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.Stopped = 0;
  alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.Stopping = 1;
  alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.Playing = 2;
  alphaTab.audio.synth.util.SynthConstants.AudioChannels = 2;
  alphaTab.audio.synth.util.SynthConstants.Pi = 3.14159265358979;
  alphaTab.audio.synth.util.SynthConstants.TwoPi = 2.0 * 3.14159265358979;
  alphaTab.audio.synth.util.SynthConstants.HalfPi = 3.14159265358979 / 2.0;
  alphaTab.audio.synth.util.SynthConstants.InverseSqrtOfTwo = 0.707106781186;
  alphaTab.audio.synth.util.SynthConstants.DefaultLfoFrequency = 8.0;
  alphaTab.audio.synth.util.SynthConstants.DefaultModDepth = 100;
  alphaTab.audio.synth.util.SynthConstants.DefaultPolyphony = 40;
  alphaTab.audio.synth.util.SynthConstants.MinPolyphony = 5;
  alphaTab.audio.synth.util.SynthConstants.MaxPolyphony = 250;
  alphaTab.audio.synth.util.SynthConstants.DefaultBlockSize = 64;
  alphaTab.audio.synth.util.SynthConstants.MaxBufferSize = 0.05;
  alphaTab.audio.synth.util.SynthConstants.MinBufferSize = 0.001;
  alphaTab.audio.synth.util.SynthConstants.DenormLimit = 1e-38;
  alphaTab.audio.synth.util.SynthConstants.NonAudible = 1e-5;
  alphaTab.audio.synth.util.SynthConstants.SincWidth = 16;
  alphaTab.audio.synth.util.SynthConstants.SincResolution = 64;
  alphaTab.audio.synth.util.SynthConstants.MaxVoiceComponents = 4;
  alphaTab.audio.synth.util.SynthConstants.DefaultChannelCount = 17;
  alphaTab.audio.synth.util.SynthConstants.DefaultKeyCount = 128;
  alphaTab.audio.synth.util.SynthConstants.DefaultMixGain = 0.35;
  alphaTab.audio.synth.util.SynthConstants.MinVolume = 0;
  alphaTab.audio.synth.util.SynthConstants.MaxVolume = 10;
  alphaTab.audio.synth.util.SynthConstants.MinProgram = 0;
  alphaTab.audio.synth.util.SynthConstants.MaxProgram = 127;
  alphaTab.audio.synth.util.SynthConstants.MinPlaybackSpeed = 0.125;
  alphaTab.audio.synth.util.SynthConstants.MaxPlaybackSpeed = 8;
  alphaTab.importer.AlphaTexImporter.Eof = 0;
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.No = 0;
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.Eof = 1;
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.Number = 2;
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.DoubleDot = 3;
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.Dot = 4;
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.String = 5;
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.Tuning = 6;
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.LParensis = 7;
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.RParensis = 8;
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.LBrace = 9;
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.RBrace = 10;
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.Pipe = 11;
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.MetaCommand = 12;
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.Multiply = 13;
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.LowerThan = 14;
  alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.Property = 15;
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.Boolean = 0;
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.Integer = 1;
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.Float = 2;
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.String = 3;
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.Point = 4;
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.Size = 5;
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.Rectangle = 6;
  alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.Color = 7;
  alphaTab.importer.Gp3To5Importer.VersionString = 'FICHIER GUITAR PRO ';
  alphaTab.importer.Gp3To5Importer.BendStep = 25;
  alphaTab.importer.GpifParser.InvalidId = '-1';
  alphaTab.importer.GpifParser.BendPointPositionFactor = 0.6;
  alphaTab.importer.GpifParser.BendPointValueFactor = 0.04;
  alphaTab.importer.GpxFileSystem.HeaderBcFs = 'BCFS';
  alphaTab.importer.GpxFileSystem.HeaderBcFz = 'BCFZ';
  alphaTab.importer.GpxFileSystem.ScoreGpif = 'score.gpif';
  alphaTab.importer.GpxFileSystem.BinaryStylesheet = 'BinaryStylesheet';
  alphaTab.importer.GpxFileSystem.PartConfiguration = 'PartConfiguration';
  alphaTab.importer.MusicXmlImporter.MergePartGroupsSetting =
    'musicXMLMergePartGroups';
  alphaTab.io.BitReader.ByteSize = 8;
  alphaTab.model._AccentuationType.AccentuationType_Impl_.None = 0;
  alphaTab.model._AccentuationType.AccentuationType_Impl_.Normal = 1;
  alphaTab.model._AccentuationType.AccentuationType_Impl_.Heavy = 2;
  alphaTab.model._AccidentalType.AccidentalType_Impl_.None = 0;
  alphaTab.model._AccidentalType.AccidentalType_Impl_.Natural = 1;
  alphaTab.model._AccidentalType.AccidentalType_Impl_.Sharp = 2;
  alphaTab.model._AccidentalType.AccidentalType_Impl_.Flat = 3;
  alphaTab.model._AccidentalType.AccidentalType_Impl_.NaturalQuarterNoteUp = 4;
  alphaTab.model._AccidentalType.AccidentalType_Impl_.SharpQuarterNoteUp = 5;
  alphaTab.model._AccidentalType.AccidentalType_Impl_.FlatQuarterNoteUp = 6;
  alphaTab.model._AutomationType.AutomationType_Impl_.Tempo = 0;
  alphaTab.model._AutomationType.AutomationType_Impl_.Volume = 1;
  alphaTab.model._AutomationType.AutomationType_Impl_.Instrument = 2;
  alphaTab.model._AutomationType.AutomationType_Impl_.Balance = 3;
  alphaTab.model.Bar.GlobalBarId = 0;
  alphaTab.model.Beat.GlobalBeatId = 0;
  alphaTab.model.BendPoint.MaxPosition = 60;
  alphaTab.model.BendPoint.MaxValue = 12;
  alphaTab.model._BendStyle.BendStyle_Impl_.Default = 0;
  alphaTab.model._BendStyle.BendStyle_Impl_.Gradual = 1;
  alphaTab.model._BendStyle.BendStyle_Impl_.Fast = 2;
  alphaTab.model._BendType.BendType_Impl_.None = 0;
  alphaTab.model._BendType.BendType_Impl_.Custom = 1;
  alphaTab.model._BendType.BendType_Impl_.Bend = 2;
  alphaTab.model._BendType.BendType_Impl_.Release = 3;
  alphaTab.model._BendType.BendType_Impl_.BendRelease = 4;
  alphaTab.model._BendType.BendType_Impl_.Hold = 5;
  alphaTab.model._BendType.BendType_Impl_.Prebend = 6;
  alphaTab.model._BendType.BendType_Impl_.PrebendBend = 7;
  alphaTab.model._BendType.BendType_Impl_.PrebendRelease = 8;
  alphaTab.model._BrushType.BrushType_Impl_.None = 0;
  alphaTab.model._BrushType.BrushType_Impl_.BrushUp = 1;
  alphaTab.model._BrushType.BrushType_Impl_.BrushDown = 2;
  alphaTab.model._BrushType.BrushType_Impl_.ArpeggioUp = 3;
  alphaTab.model._BrushType.BrushType_Impl_.ArpeggioDown = 4;
  alphaTab.model._Clef.Clef_Impl_.Neutral = 0;
  alphaTab.model._Clef.Clef_Impl_.C3 = 1;
  alphaTab.model._Clef.Clef_Impl_.C4 = 2;
  alphaTab.model._Clef.Clef_Impl_.F4 = 3;
  alphaTab.model._Clef.Clef_Impl_.G2 = 4;
  alphaTab.model._CrescendoType.CrescendoType_Impl_.None = 0;
  alphaTab.model._CrescendoType.CrescendoType_Impl_.Crescendo = 1;
  alphaTab.model._CrescendoType.CrescendoType_Impl_.Decrescendo = 2;
  alphaTab.model._Duration.Duration_Impl_.QuadrupleWhole = -4;
  alphaTab.model._Duration.Duration_Impl_.DoubleWhole = -2;
  alphaTab.model._Duration.Duration_Impl_.Whole = 1;
  alphaTab.model._Duration.Duration_Impl_.Half = 2;
  alphaTab.model._Duration.Duration_Impl_.Quarter = 4;
  alphaTab.model._Duration.Duration_Impl_.Eighth = 8;
  alphaTab.model._Duration.Duration_Impl_.Sixteenth = 16;
  alphaTab.model._Duration.Duration_Impl_.ThirtySecond = 32;
  alphaTab.model._Duration.Duration_Impl_.SixtyFourth = 64;
  alphaTab.model._Duration.Duration_Impl_.OneHundredTwentyEighth = 128;
  alphaTab.model._Duration.Duration_Impl_.TwoHundredFiftySixth = 256;
  alphaTab.model._DynamicValue.DynamicValue_Impl_.PPP = 0;
  alphaTab.model._DynamicValue.DynamicValue_Impl_.PP = 1;
  alphaTab.model._DynamicValue.DynamicValue_Impl_.P = 2;
  alphaTab.model._DynamicValue.DynamicValue_Impl_.MP = 3;
  alphaTab.model._DynamicValue.DynamicValue_Impl_.MF = 4;
  alphaTab.model._DynamicValue.DynamicValue_Impl_.F = 5;
  alphaTab.model._DynamicValue.DynamicValue_Impl_.FF = 6;
  alphaTab.model._DynamicValue.DynamicValue_Impl_.FFF = 7;
  alphaTab.model._FermataType.FermataType_Impl_.Short = 0;
  alphaTab.model._FermataType.FermataType_Impl_.Medium = 1;
  alphaTab.model._FermataType.FermataType_Impl_.Long = 2;
  alphaTab.model._Fingers.Fingers_Impl_.Unknown = -2;
  alphaTab.model._Fingers.Fingers_Impl_.NoOrDead = -1;
  alphaTab.model._Fingers.Fingers_Impl_.Thumb = 0;
  alphaTab.model._Fingers.Fingers_Impl_.IndexFinger = 1;
  alphaTab.model._Fingers.Fingers_Impl_.MiddleFinger = 2;
  alphaTab.model._Fingers.Fingers_Impl_.AnnularFinger = 3;
  alphaTab.model._Fingers.Fingers_Impl_.LittleFinger = 4;
  alphaTab.model._GraceType.GraceType_Impl_.None = 0;
  alphaTab.model._GraceType.GraceType_Impl_.OnBeat = 1;
  alphaTab.model._GraceType.GraceType_Impl_.BeforeBeat = 2;
  alphaTab.model._GraceType.GraceType_Impl_.BendGrace = 3;
  alphaTab.model._HarmonicType.HarmonicType_Impl_.None = 0;
  alphaTab.model._HarmonicType.HarmonicType_Impl_.Natural = 1;
  alphaTab.model._HarmonicType.HarmonicType_Impl_.Artificial = 2;
  alphaTab.model._HarmonicType.HarmonicType_Impl_.Pinch = 3;
  alphaTab.model._HarmonicType.HarmonicType_Impl_.Tap = 4;
  alphaTab.model._HarmonicType.HarmonicType_Impl_.Semi = 5;
  alphaTab.model._HarmonicType.HarmonicType_Impl_.Feedback = 6;
  alphaTab.model._KeySignature.KeySignature_Impl_.Cb = -7;
  alphaTab.model._KeySignature.KeySignature_Impl_.Gb = -6;
  alphaTab.model._KeySignature.KeySignature_Impl_.Db = -5;
  alphaTab.model._KeySignature.KeySignature_Impl_.Ab = -4;
  alphaTab.model._KeySignature.KeySignature_Impl_.Eb = -3;
  alphaTab.model._KeySignature.KeySignature_Impl_.Bb = -2;
  alphaTab.model._KeySignature.KeySignature_Impl_.F = -1;
  alphaTab.model._KeySignature.KeySignature_Impl_.C = 0;
  alphaTab.model._KeySignature.KeySignature_Impl_.G = 1;
  alphaTab.model._KeySignature.KeySignature_Impl_.D = 2;
  alphaTab.model._KeySignature.KeySignature_Impl_.A = 3;
  alphaTab.model._KeySignature.KeySignature_Impl_.E = 4;
  alphaTab.model._KeySignature.KeySignature_Impl_.B = 5;
  alphaTab.model._KeySignature.KeySignature_Impl_.FSharp = 6;
  alphaTab.model._KeySignature.KeySignature_Impl_.CSharp = 7;
  alphaTab.model._KeySignatureType.KeySignatureType_Impl_.Major = 0;
  alphaTab.model._KeySignatureType.KeySignatureType_Impl_.Minor = 1;
  alphaTab.model.Lyrics.CharCodeLF = 10;
  alphaTab.model.Lyrics.CharCodeTab = 9;
  alphaTab.model.Lyrics.CharCodeCR = 13;
  alphaTab.model.Lyrics.CharCodeSpace = 32;
  alphaTab.model.Lyrics.CharCodeBrackedClose = 93;
  alphaTab.model.Lyrics.CharCodeBrackedOpen = 91;
  alphaTab.model.Lyrics.CharCodeDash = 45;
  alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.IgnoreSpaces = 0;
  alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.Begin = 1;
  alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.Text = 2;
  alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.Comment = 3;
  alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.Dash = 4;
  alphaTab.model.MasterBar.MaxAlternateEndings = 8;
  alphaTab.model.Note.GlobalNoteId = 0;
  alphaTab.model.Note.MaxOffsetForSameLineSearch = 3;
  alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.Default = 0;
  alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.SwapAccidentals = 1;
  alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ForceNatural = 2;
  alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ForceSharp = 3;
  alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ForceFlat = 4;
  alphaTab.model._Ottavia.Ottavia_Impl_._15ma = 0;
  alphaTab.model._Ottavia.Ottavia_Impl_._8va = 1;
  alphaTab.model._Ottavia.Ottavia_Impl_.Regular = 2;
  alphaTab.model._Ottavia.Ottavia_Impl_._8vb = 3;
  alphaTab.model._Ottavia.Ottavia_Impl_._15mb = 4;
  alphaTab.model._PickStroke.PickStroke_Impl_.None = 0;
  alphaTab.model._PickStroke.PickStroke_Impl_.Up = 1;
  alphaTab.model._PickStroke.PickStroke_Impl_.Down = 2;
  alphaTab.model._SimileMark.SimileMark_Impl_.None = 0;
  alphaTab.model._SimileMark.SimileMark_Impl_.Simple = 1;
  alphaTab.model._SimileMark.SimileMark_Impl_.FirstOfDouble = 2;
  alphaTab.model._SimileMark.SimileMark_Impl_.SecondOfDouble = 3;
  alphaTab.model._SlideType.SlideType_Impl_.None = 0;
  alphaTab.model._SlideType.SlideType_Impl_.Shift = 1;
  alphaTab.model._SlideType.SlideType_Impl_.Legato = 2;
  alphaTab.model._SlideType.SlideType_Impl_.IntoFromBelow = 3;
  alphaTab.model._SlideType.SlideType_Impl_.IntoFromAbove = 4;
  alphaTab.model._SlideType.SlideType_Impl_.OutUp = 5;
  alphaTab.model._SlideType.SlideType_Impl_.OutDown = 6;
  alphaTab.model._SlideType.SlideType_Impl_.PickSlideDown = 7;
  alphaTab.model._SlideType.SlideType_Impl_.PickSlideUp = 8;
  alphaTab.model.Track.ShortNameMaxLength = 10;
  alphaTab.model._TripletFeel.TripletFeel_Impl_.NoTripletFeel = 0;
  alphaTab.model._TripletFeel.TripletFeel_Impl_.Triplet16th = 1;
  alphaTab.model._TripletFeel.TripletFeel_Impl_.Triplet8th = 2;
  alphaTab.model._TripletFeel.TripletFeel_Impl_.Dotted16th = 3;
  alphaTab.model._TripletFeel.TripletFeel_Impl_.Dotted8th = 4;
  alphaTab.model._TripletFeel.TripletFeel_Impl_.Scottish16th = 5;
  alphaTab.model._TripletFeel.TripletFeel_Impl_.Scottish8th = 6;
  alphaTab.model.TupletGroup.FullThreshold = alphaTab.audio.MidiUtils.ToTicks(
    128
  );
  alphaTab.model._VibratoType.VibratoType_Impl_.None = 0;
  alphaTab.model._VibratoType.VibratoType_Impl_.Slight = 1;
  alphaTab.model._VibratoType.VibratoType_Impl_.Wide = 2;
  alphaTab.model._WhammyType.WhammyType_Impl_.None = 0;
  alphaTab.model._WhammyType.WhammyType_Impl_.Custom = 1;
  alphaTab.model._WhammyType.WhammyType_Impl_.Dive = 2;
  alphaTab.model._WhammyType.WhammyType_Impl_.Dip = 3;
  alphaTab.model._WhammyType.WhammyType_Impl_.Hold = 4;
  alphaTab.model._WhammyType.WhammyType_Impl_.Predive = 5;
  alphaTab.model._WhammyType.WhammyType_Impl_.PrediveDive = 6;
  alphaTab.platform.javaScript.AlphaSynthFlashOutput.PreferredSampleRate = 44100;
  alphaTab.platform.javaScript.AlphaSynthFlashOutput.Id =
    'alphaSynthFlashPlayer';
  alphaTab.platform.javaScript.AlphaSynthWebAudioOutput.BufferSize = 4096;
  alphaTab.platform.javaScript.AlphaSynthWebAudioOutput.BufferCount = 10;
  alphaTab.platform.javaScript.AlphaSynthWebAudioOutput.PreferredSampleRate = 44100;
  alphaTab.platform.model._FontStyle.FontStyle_Impl_.Plain = 0;
  alphaTab.platform.model._FontStyle.FontStyle_Impl_.Bold = 1;
  alphaTab.platform.model._FontStyle.FontStyle_Impl_.Italic = 2;
  alphaTab.platform.model._TextAlign.TextAlign_Impl_.Left = 0;
  alphaTab.platform.model._TextAlign.TextAlign_Impl_.Center = 1;
  alphaTab.platform.model._TextAlign.TextAlign_Impl_.Right = 2;
  alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.Top = 0;
  alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.Middle = 1;
  alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.Bottom = 2;
  alphaTab.platform.svg.FontSizes.ControlChars = 32;
  alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.PreNotes = 0;
  alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.OnNotes = 1;
  alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.MiddleNotes = 2;
  alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.PostNotes = 3;
  alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.EndBeat = 4;
  alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.SinglePreBeat = 0;
  alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.SingleOnBeat = 1;
  alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.SingleOnBeatToEnd = 2;
  alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.GroupedBeforeBeat = 3;
  alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.GroupedOnBeat = 4;
  alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.GroupedOnBeatToEnd = 5;
  alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.FullBar = 6;
  alphaTab.rendering.ScoreBarRenderer.StaffId = 'score';
  alphaTab.rendering.ScoreBarRenderer.SharpKsSteps = new Int32Array([
    1,
    4,
    0,
    3,
    6,
    2,
    5
  ]);
  alphaTab.rendering.ScoreBarRenderer.FlatKsSteps = new Int32Array([
    5,
    2,
    6,
    3,
    7,
    4,
    8
  ]);
  alphaTab.rendering.ScoreBarRenderer.LineSpacing = 8;
  alphaTab.rendering.ScoreBarRenderer.StemWidth = 1.3;
  alphaTab.rendering.TabBarRenderer.StaffId = 'tab';
  alphaTab.rendering.TabBarRenderer.LineSpacing = 10;
  alphaTab.rendering.glyphs.AccidentalGroupGlyph.NonReserved = -3000;
  alphaTab.rendering.glyphs.AlternateEndingsGlyph.Padding = 3;
  alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph.ElementPadding = 2;
  alphaTab.rendering.glyphs.ChordDiagramContainerGlyph.Padding = 3;
  alphaTab.rendering.glyphs.ChordDiagramGlyph.Padding = 5;
  alphaTab.rendering.glyphs.ChordDiagramGlyph.Frets = 5;
  alphaTab.rendering.glyphs.ChordDiagramGlyph.CircleRadius = 2.5;
  alphaTab.rendering.glyphs.ChordDiagramGlyph.StringSpacing = 10;
  alphaTab.rendering.glyphs.ChordDiagramGlyph.FretSpacing = 12;
  alphaTab.rendering.glyphs.CrescendoGlyph.Padding = (8 / 2) | 0;
  alphaTab.rendering.glyphs.GhostParenthesisGlyph.Size = 6;
  alphaTab.rendering.glyphs.LineRangedGlyph.LineSpacing = 3;
  alphaTab.rendering.glyphs.LineRangedGlyph.LineTopPadding = 4;
  alphaTab.rendering.glyphs.LineRangedGlyph.LineTopOffset = 5;
  alphaTab.rendering.glyphs.LineRangedGlyph.LineSize = 8;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.None = -1;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ClefG = 57424;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ClefC = 57436;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ClefF = 57442;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ClefNeutral = 57449;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ClefTab = 57453;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ClefTabSmall = 57454;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestQuadrupleWhole = 58593;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestDoubleWhole = 58594;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestWhole = 58595;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestHalf = 58596;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestQuarter = 58597;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestEighth = 58598;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestSixteenth = 58599;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestThirtySecond = 58600;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestSixtyFourth = 58601;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestOneHundredTwentyEighth = 58602;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestTwoHundredFiftySixth = 58603;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Trill = 58726;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num0 = 57472;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num1 = 57473;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num2 = 57474;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num3 = 57475;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num4 = 57476;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num5 = 57477;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num6 = 57478;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num7 = 57479;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num8 = 57480;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num9 = 57481;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.TimeSignatureCommon = 57482;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.TimeSignatureCutCommon = 57483;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteQuadrupleWhole = 57505;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteDoubleWhole = 57504;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteWhole = 57506;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteHalf = 57507;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteQuarter = 57508;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteDead = 57514;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteHarmonic = 57564;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteHarmonicWhole = 57566;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteHiHat = 57523;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteSideStick = 57513;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteHiHatHalf = 57591;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteChineseCymbal = 57593;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterUpEighth = 57920;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterDownEighth = 57921;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterUpSixteenth = 57922;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterDownSixteenth = 57923;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterUpThirtySecond = 57924;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterDownThirtySecond = 57925;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterUpSixtyFourth = 57926;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterDownSixtyFourth = 57927;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterUpOneHundredTwentyEighth = 57928;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterDownOneHundredTwentyEighth = 57929;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterUpTwoHundredFiftySixth = 57930;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterDownTwoHundredFiftySixth = 57931;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicPPP = 58666;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicPP = 58667;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicP = 58656;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicMP = 58668;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicMF = 58669;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicF = 58658;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicFF = 58671;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicFFF = 58672;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Accentuation = 58528;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.HeavyAccentuation = 58540;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.WaveHorizontalSlight = 60068;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.WaveHorizontalWide = 60126;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.PickStrokeDown = 58896;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.PickStrokeUp = 58898;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.TremoloPickingThirtySecond = 57890;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.TremoloPickingSixteenth = 57889;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.TremoloPickingEighth = 57888;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Tempo = 57813;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteEighth = 57815;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.AccidentalFlat = 57952;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.AccidentalNatural = 57953;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.AccidentalSharp = 57954;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.AccidentalQuarterToneFlatArrowUp = 57968;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.AccidentalQuarterToneSharpArrowUp = 57972;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.AccidentalQuarterToneNaturalArrowUp = 57970;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Ottava8 = 58640;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Ottava8va = 58641;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Ottava8vb = 58652;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Ottava15 = 58644;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Ottava15ma = 58645;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.OttavaMBaseline = 60565;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.OttavaBBaseline = 60563;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.SimileMarkSimple = 58624;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.SimileMarkDouble = 58625;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FermataMedium = 58560;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FermataShort = 58564;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FermataLong = 58566;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FretboardX = 59481;
  alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FretboardO = 59482;
  alphaTab.rendering.glyphs.NoteHeadGlyph.GraceScale = 0.75;
  alphaTab.rendering.glyphs.NoteHeadGlyph.NoteHeadHeight = 9;
  alphaTab.rendering.glyphs.NoteHeadGlyph.QuarterNoteHeadWidth = 8;
  alphaTab.rendering.glyphs.NoteVibratoGlyph.SlightWaveOffset = 10;
  alphaTab.rendering.glyphs.NoteVibratoGlyph.SlightWaveSize = 8.5;
  alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph.SlurHeight = 11;
  alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph.EndPadding =
    ((8 / 2) | 0) + 3;
  alphaTab.rendering.glyphs.ScoreWhammyBarGlyph.SimpleDipHeight = 6 * 2;
  alphaTab.rendering.glyphs.ScoreWhammyBarGlyph.SimpleDipPadding = 2;
  alphaTab.rendering.glyphs.TabBendGlyph.ArrowSize = 6;
  alphaTab.rendering.glyphs.TabBendGlyph.DashSize = 3;
  alphaTab.rendering.glyphs.TabBendGlyph.BendValueHeight = 6;
  alphaTab.rendering.glyphs.TabWhammyBarGlyph.TopOffsetSharedDataKey =
    'tab.whammy.topoffset';
  alphaTab.rendering.glyphs.TabWhammyBarGlyph.PerHalfSize = 6;
  alphaTab.rendering.glyphs.TabWhammyBarGlyph.DashSize = 3;
  alphaTab.rendering.glyphs.TripletFeelGlyph.NoteScale = 0.4;
  alphaTab.rendering.glyphs.TripletFeelGlyph.NoteHeight = 12;
  alphaTab.rendering.glyphs.TripletFeelGlyph.NoteSeparation = 12;
  alphaTab.rendering.glyphs.TripletFeelGlyph.BarHeight = 2;
  alphaTab.rendering.glyphs.TripletFeelGlyph.BarSeparation = 3;
  alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.Full = 0;
  alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.PartialLeft = 1;
  alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.PartialRight = 2;
  alphaTab.rendering.glyphs.VoiceContainerGlyph.KeySizeBeat = 'Beat';
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.None = 0;
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.Title = 1;
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.SubTitle = 2;
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.Artist = 4;
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.Album = 8;
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.Words = 16;
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.Music = 32;
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.WordsAndMusic = 64;
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.Copyright = 128;
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.PageNumber = 256;
  alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.All = 511;
  alphaTab.rendering.staves.BarLayoutingInfo.MinDuration = 30;
  alphaTab.rendering.staves.BarLayoutingInfo.MinDurationWidth = 10;
  alphaTab.rendering.staves.StaveGroup.AccoladeLabelSpacing = 10;
  alphaTab.rendering.utils.AccidentalHelper.KeySignatureLookup = [
    [true, true, true, true, true, true, true, true, true, true, true, true],
    [true, true, true, true, true, false, true, true, true, true, true, true],
    [false, true, true, true, true, false, true, true, true, true, true, true],
    [
      false,
      true,
      true,
      true,
      true,
      false,
      false,
      false,
      true,
      true,
      true,
      true
    ],
    [
      false,
      false,
      false,
      true,
      true,
      false,
      false,
      false,
      true,
      true,
      true,
      true
    ],
    [
      false,
      false,
      false,
      true,
      true,
      false,
      false,
      false,
      false,
      false,
      true,
      true
    ],
    [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      true,
      true
    ],
    [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    [
      false,
      false,
      false,
      false,
      false,
      true,
      true,
      false,
      false,
      false,
      false,
      false
    ],
    [
      true,
      true,
      false,
      false,
      false,
      true,
      true,
      false,
      false,
      false,
      false,
      false
    ],
    [
      true,
      true,
      false,
      false,
      false,
      true,
      true,
      true,
      true,
      false,
      false,
      false
    ],
    [
      true,
      true,
      true,
      true,
      false,
      true,
      true,
      true,
      true,
      false,
      false,
      false
    ],
    [true, true, true, true, false, true, true, true, true, true, true, false],
    [true, true, true, true, true, true, true, true, true, true, true, false],
    [true, true, true, true, true, true, true, true, true, true, true, true]
  ];
  alphaTab.rendering.utils.AccidentalHelper.AccidentalNotes = [
    false,
    true,
    false,
    true,
    false,
    false,
    true,
    false,
    true,
    false,
    true,
    false
  ];
  alphaTab.rendering.utils.AccidentalHelper.StepsPerOctave = 7;
  alphaTab.rendering.utils.AccidentalHelper.OctaveSteps = new Int32Array([
    40,
    34,
    32,
    28,
    40
  ]);
  alphaTab.rendering.utils.AccidentalHelper.SharpNoteSteps = new Int32Array([
    0,
    0,
    1,
    1,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6
  ]);
  alphaTab.rendering.utils.AccidentalHelper.FlatNoteSteps = new Int32Array([
    0,
    1,
    1,
    2,
    2,
    3,
    4,
    4,
    5,
    5,
    6,
    6
  ]);
  alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.Up = 0;
  alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.Down = 1;
  alphaTab.rendering.utils.BeamingHelper.ScoreMiddleKeys = new Int32Array([
    71,
    60,
    57,
    50,
    71
  ]);
  alphaTab.rendering.utils.PercussionMapper.ElementVariationToMidi = [
    new Int32Array([35, 35, 35]),
    new Int32Array([38, 38, 37]),
    new Int32Array([56, 56, 56]),
    new Int32Array([56, 56, 56]),
    new Int32Array([56, 56, 56]),
    new Int32Array([41, 41, 41]),
    new Int32Array([43, 43, 43]),
    new Int32Array([45, 45, 45]),
    new Int32Array([47, 47, 47]),
    new Int32Array([48, 48, 48]),
    new Int32Array([42, 46, 46]),
    new Int32Array([44, 44, 44]),
    new Int32Array([49, 49, 49]),
    new Int32Array([57, 57, 57]),
    new Int32Array([55, 55, 55]),
    new Int32Array([51, 59, 53]),
    new Int32Array([52, 52, 52])
  ];
  alphaTab.util._LogLevel.LogLevel_Impl_.None = 0;
  alphaTab.util._LogLevel.LogLevel_Impl_.Debug = 1;
  alphaTab.util._LogLevel.LogLevel_Impl_.Info = 2;
  alphaTab.util._LogLevel.LogLevel_Impl_.Warning = 3;
  alphaTab.util._LogLevel.LogLevel_Impl_.Error = 4;
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.None = 0;
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Element = 1;
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Attribute = 2;
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Text = 3;
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.CDATA = 4;
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.EntityReference = 5;
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Entity = 6;
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ProcessingInstruction = 7;
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Comment = 8;
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Document = 9;
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.DocumentType = 10;
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.DocumentFragment = 11;
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Notation = 12;
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Whitespace = 13;
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.SignificantWhitespace = 14;
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.EndElement = 15;
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.EndEntity = 16;
  alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.XmlDeclaration = 17;
  alphaTab.xml.XmlParser.CharCodeLF = 10;
  alphaTab.xml.XmlParser.CharCodeTab = 9;
  alphaTab.xml.XmlParser.CharCodeCR = 13;
  alphaTab.xml.XmlParser.CharCodeSpace = 32;
  alphaTab.xml.XmlParser.CharCodeLowerThan = 60;
  alphaTab.xml.XmlParser.CharCodeAmp = 38;
  alphaTab.xml.XmlParser.CharCodeBrackedClose = 93;
  alphaTab.xml.XmlParser.CharCodeBrackedOpen = 91;
  alphaTab.xml.XmlParser.CharCodeGreaterThan = 62;
  alphaTab.xml.XmlParser.CharCodeExclamation = 33;
  alphaTab.xml.XmlParser.CharCodeUpperD = 68;
  alphaTab.xml.XmlParser.CharCodeLowerD = 100;
  alphaTab.xml.XmlParser.CharCodeMinus = 45;
  alphaTab.xml.XmlParser.CharCodeQuestion = 63;
  alphaTab.xml.XmlParser.CharCodeSlash = 47;
  alphaTab.xml.XmlParser.CharCodeEquals = 61;
  alphaTab.xml.XmlParser.CharCodeDoubleQuote = 34;
  alphaTab.xml.XmlParser.CharCodeSingleQuote = 39;
  alphaTab.xml.XmlParser.CharCodeSharp = 35;
  alphaTab.xml.XmlParser.CharCodeLowerX = 120;
  alphaTab.xml.XmlParser.CharCodeLowerA = 97;
  alphaTab.xml.XmlParser.CharCodeLowerZ = 122;
  alphaTab.xml.XmlParser.CharCodeUpperA = 65;
  alphaTab.xml.XmlParser.CharCodeUpperZ = 90;
  alphaTab.xml.XmlParser.CharCode0 = 48;
  alphaTab.xml.XmlParser.CharCode9 = 57;
  alphaTab.xml.XmlParser.CharCodeColon = 58;
  alphaTab.xml.XmlParser.CharCodeDot = 46;
  alphaTab.xml.XmlParser.CharCodeUnderscore = 95;
  alphaTab.xml.XmlParser_XmlState.IGNORE_SPACES = 0;
  alphaTab.xml.XmlParser_XmlState.BEGIN = 1;
  alphaTab.xml.XmlParser_XmlState.BEGIN_NODE = 2;
  alphaTab.xml.XmlParser_XmlState.TAG_NAME = 3;
  alphaTab.xml.XmlParser_XmlState.BODY = 4;
  alphaTab.xml.XmlParser_XmlState.ATTRIB_NAME = 5;
  alphaTab.xml.XmlParser_XmlState.EQUALS = 6;
  alphaTab.xml.XmlParser_XmlState.ATTVAL_BEGIN = 7;
  alphaTab.xml.XmlParser_XmlState.ATTRIB_VAL = 8;
  alphaTab.xml.XmlParser_XmlState.CHILDS = 9;
  alphaTab.xml.XmlParser_XmlState.CLOSE = 10;
  alphaTab.xml.XmlParser_XmlState.WAIT_END = 11;
  alphaTab.xml.XmlParser_XmlState.WAIT_END_RET = 12;
  alphaTab.xml.XmlParser_XmlState.PCDATA = 13;
  alphaTab.xml.XmlParser_XmlState.HEADER = 14;
  alphaTab.xml.XmlParser_XmlState.COMMENT = 15;
  alphaTab.xml.XmlParser_XmlState.DOCTYPE = 16;
  alphaTab.xml.XmlParser_XmlState.CDATA = 17;
  alphaTab.xml.XmlParser_XmlState.ESCAPE = 18;
  haxe.io.FPHelper.i64tmp = (function($this) {
    var $r;
    var this1 = new haxe._Int64.___Int64(0, 0);
    $r = this1;
    return $r;
  })(this);
  haxe.zip.InflateImpl.LEN_EXTRA_BITS_TBL = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    0,
    -1,
    -1
  ];
  haxe.zip.InflateImpl.LEN_BASE_VAL_TBL = [
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    13,
    15,
    17,
    19,
    23,
    27,
    31,
    35,
    43,
    51,
    59,
    67,
    83,
    99,
    115,
    131,
    163,
    195,
    227,
    258
  ];
  haxe.zip.InflateImpl.DIST_EXTRA_BITS_TBL = [
    0,
    0,
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    12,
    12,
    13,
    13,
    -1,
    -1
  ];
  haxe.zip.InflateImpl.DIST_BASE_VAL_TBL = [
    1,
    2,
    3,
    4,
    5,
    7,
    9,
    13,
    17,
    25,
    33,
    49,
    65,
    97,
    129,
    193,
    257,
    385,
    513,
    769,
    1025,
    1537,
    2049,
    3073,
    4097,
    6145,
    8193,
    12289,
    16385,
    24577
  ];
  haxe.zip.InflateImpl.CODE_LENGTHS_POS = [
    16,
    17,
    18,
    0,
    8,
    7,
    9,
    6,
    10,
    5,
    11,
    4,
    12,
    3,
    13,
    2,
    14,
    1,
    15
  ];
  js.html.compat.Float32Array.BYTES_PER_ELEMENT = 4;
  js.html.compat.Float64Array.BYTES_PER_ELEMENT = 8;
  js.html.compat.Uint8Array.BYTES_PER_ELEMENT = 1;
  alphaTab.Main.main();
})(
  typeof exports != 'undefined'
    ? exports
    : typeof window != 'undefined'
    ? window
    : typeof self != 'undefined'
    ? self
    : this,
  typeof window != 'undefined'
    ? window
    : typeof global != 'undefined'
    ? global
    : typeof self != 'undefined'
    ? self
    : this
);
